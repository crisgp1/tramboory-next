=== ./inventario/components/InventoryLoader.jsx ===
import React from 'react';
import { FiPackage } from 'react-icons/fi';

/**
 * Componente de carga para el mÃ³dulo de inventario
 * Muestra una animaciÃ³n mientras se cargan datos
 */
const InventoryLoader = () => {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-indigo-50 to-purple-50">
      <div className="text-center">
        <div className="relative mb-4">
          <FiPackage className="text-indigo-500 w-16 h-16 mb-2 mx-auto" />
          <div className="absolute top-0 left-0 w-full h-full flex items-center justify-center">
            <div className="w-20 h-20 border-t-4 border-b-4 border-indigo-500 rounded-full animate-spin"></div>
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-700 mb-2">Cargando Sistema de Inventario</h2>
        <p className="text-gray-500">Por favor espere mientras preparamos todo...</p>
      </div>
    </div>
  );
};

export default InventoryLoader;\n\n

=== ./inventario/components/InventoryMenu.jsx ===
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  FiPackage, 
  FiHome, 
  FiArchive, 
  FiTruck, 
  FiBox, 
  FiRepeat, 
  FiSettings, 
  FiAlertTriangle,
  FiRefreshCw,
  FiMenu,
  FiX,
  FiChevronRight
} from 'react-icons/fi';

const InventoryMenu = ({ activeSection, setActiveSection }) => {
  // Inicialmente cerrado en mÃ³vil, abierto en desktop
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  
  // Detectar si estamos en desktop o mÃ³vil para configuraciÃ³n inicial
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 1024) { // lg breakpoint
        setIsMenuOpen(true);
      } else {
        setIsMenuOpen(false);
      }
    };
    
    // ConfiguraciÃ³n inicial
    handleResize();
    
    // Listener para cambios de tamaÃ±o
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const menuItems = [
    { id: 'dashboard', icon: FiHome, label: 'Dashboard' },
    { id: 'materias-primas', icon: FiPackage, label: 'Materias Primas' },
    { id: 'unidades-medida', icon: FiRepeat, label: 'Unidades de Medida' },
    { id: 'proveedores', icon: FiTruck, label: 'Proveedores' },
    { id: 'lotes', icon: FiBox, label: 'Lotes' },
    { id: 'movimientos', icon: FiRefreshCw, label: 'Movimientos' },
    { id: 'tipos-ajuste', icon: FiSettings, label: 'Tipos de Ajuste' },
    { id: 'conversiones', icon: FiRepeat, label: 'Conversiones' },
    { id: 'alertas', icon: FiAlertTriangle, label: 'Alertas' },
  ];

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  // Mini barra lateral para dispositivos mÃ³viles cuando el menÃº estÃ¡ cerrado
  const MiniNavbar = () => (
    <div className="fixed bottom-0 left-0 right-0 lg:hidden bg-indigo-700 text-white flex justify-around items-center py-2 px-1 z-10 shadow-lg">
      {menuItems.slice(0, 5).map((item) => (
        <button
          key={item.id}
          onClick={() => {
            setActiveSection(item.id);
          }}
          className={`flex flex-col items-center justify-center p-2 rounded-lg transition-colors duration-200 ${
            activeSection === item.id
              ? 'bg-indigo-600 text-white'
              : 'text-indigo-100'
          }`}
          aria-label={item.label}
        >
          <item.icon className="text-lg" />
          <span className="text-xs mt-1 hidden sm:block">{item.label.substring(0, 5)}</span>
        </button>
      ))}
      <button
        onClick={toggleMenu}
        className="flex flex-col items-center justify-center p-2 rounded-lg text-indigo-100"
        aria-label="MÃ¡s opciones"
      >
        <FiChevronRight className="text-lg" />
        <span className="text-xs mt-1 hidden sm:block">MÃ¡s</span>
      </button>
    </div>
  );

  return (
    <>
      {/* BotÃ³n de menÃº mÃ³vil */}
      <button
        className="lg:hidden fixed top-3 left-3 z-30 p-2 bg-indigo-600 text-white rounded-full shadow-lg flex items-center justify-center w-10 h-10"
        onClick={toggleMenu}
        aria-label={isMenuOpen ? "Cerrar menÃº" : "Abrir menÃº"}
      >
        {isMenuOpen ? <FiX size={20} /> : <FiMenu size={20} />}
      </button>

      {/* MenÃº lateral principal */}
      <AnimatePresence>
        {isMenuOpen && (
          <>
            <motion.aside
              initial={{ x: -280 }}
              animate={{ x: 0 }}
              exit={{ x: -280 }}
              transition={{ type: "spring", bounce: 0.1, duration: 0.4 }}
              className={`fixed lg:static z-20 h-[calc(100%-4rem)] lg:h-full bg-indigo-700 text-white w-[260px] lg:w-64 p-4 pt-16 lg:pt-6 shadow-lg overflow-y-auto flex flex-col`}
            >
              <div className="flex items-center mb-6 px-2">
                <FiArchive className="text-white mr-3 text-xl" />
                <h1 className="text-xl font-bold">Inventario</h1>
              </div>

              <nav className="flex-1">
                <ul className="space-y-1">
                  {menuItems.map((item) => (
                    <li key={item.id}>
                      <button
                        onClick={() => {
                          setActiveSection(item.id);
                          if (window.innerWidth < 1024) {
                            setIsMenuOpen(false);
                          }
                        }}
                        className={`w-full flex items-center p-3 rounded-lg transition-all duration-200 ${
                          activeSection === item.id
                            ? 'bg-indigo-500 text-white font-medium shadow-sm'
                            : 'text-indigo-100 hover:bg-indigo-600'
                        }`}
                      >
                        <item.icon className="mr-3 text-lg" />
                        <span>{item.label}</span>
                      </button>
                    </li>
                  ))}
                </ul>
              </nav>

              <div className="pt-4 mt-auto border-t border-indigo-600 hidden lg:block">
                <p className="px-3 text-xs text-indigo-300">Sistema de Inventario v1.0</p>
              </div>
            </motion.aside>

            {/* Overlay para cerrar el menÃº en mÃ³vil */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="lg:hidden fixed inset-0 bg-black bg-opacity-50 z-10"
              onClick={() => setIsMenuOpen(false)}
            />
          </>
        )}
      </AnimatePresence>

      {/* Barra inferior de navegaciÃ³n rÃ¡pida en mÃ³vil */}
      {!isMenuOpen && <MiniNavbar />}
    </>
  );
};

export default InventoryMenu;\n\n

=== ./inventario/components/InventorySidebar.jsx ===
import { useState, useEffect, useRef } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { toast } from 'react-toastify';
import {
  FiHome,
  FiBox,
  FiTruck,
  FiActivity,
  FiAlertTriangle,
  FiSettings,
  FiLogOut,
  FiChevronLeft,
  FiDatabase,
  FiPackage,
  FiRepeat,
  FiMenu,
  FiUser,
  FiSearch,
  FiBell,
  FiHelpCircle,
  FiSun,
  FiMoon
} from 'react-icons/fi';
import { useTheme } from '@shared/context/ThemeContext';
import ThemeToggle from '@shared/components/ThemeToggle';
import Logo from '@shared/src/img/logo.webp';
import DatabaseConnectionStatus from '@shared/components/DatabaseConnectionStatus';

// Componente para cada item de navegaciÃ³n
const NavItem = ({ icon: Icon, label, path, active, isCollapsed, hasBadge }) => {
  return (
    <Link
      to={path}
      className="relative group flex items-center p-3 my-1 rounded-lg transition-all duration-300"
      style={active 
        ? { background: 'var(--accent-color)', color: '#ffffff', boxShadow: '0 4px 6px -1px var(--shadow-color)' } 
        : { 
            color: 'var(--text-secondary)',
            ':hover': {
              backgroundColor: 'var(--component-hover)',
              color: 'var(--accent-color)'
            } 
          }
      }
    >
      {/* Indicador lateral para item activo */}
      {active && (
        <motion.div 
          className="absolute -left-1 top-1/2 -translate-y-1/2 w-1 h-10 rounded-full"
          style={{ backgroundColor: 'var(--accent-color)' }}
          layoutId="activeIndicator"
          transition={{ type: 'spring', stiffness: 300, damping: 30 }}
        />
      )}
      
      <div className="relative flex items-center">
        <Icon size={20} className={active ? 'drop-shadow-md' : ''} />
        
        {/* Efecto de ping para alertas */}
        {hasBadge && (
          <span className="absolute -top-1 -right-1 flex h-2 w-2">
            <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
            <span className="relative inline-flex rounded-full h-2 w-2 bg-red-500"></span>
          </span>
        )}
      </div>
      
      <AnimatePresence>
        {!isCollapsed && (
          <motion.span 
            initial={{ opacity: 0, x: -10 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -10 }}
            transition={{ duration: 0.2 }}
            className="ml-3 font-medium"
          >
            {label}
          </motion.span>
        )}
      </AnimatePresence>
    </Link>
  );
};

const InventorySidebar = ({ isCollapsed, setIsCollapsed }) => {
  const location = useLocation();
  const navigate = useNavigate();
  const sidebarRef = useRef(null);
  const timeoutRef = useRef(null);
  // const { user, logout } = useAuth(); // Uncomment when using real auth
  const { theme, toggleTheme } = useTheme(); // Hook para acceder al tema
  const isDark = theme === 'dark';
  
  // Estado para la animaciÃ³n inicial
  const [hasAnimated, setHasAnimated] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);
  
  // Efecto para la animaciÃ³n inicial
  useEffect(() => {
    if (!hasAnimated) {
      setTimeout(() => setHasAnimated(true), 300);
    }
  }, [hasAnimated]);
  
  // FunciÃ³n de logout temporal para pruebas
  const logout = () => {
    // Uncomment for real logout functionality
    // try {
    //   await logoutUser();
    //   navigate('/signin');
    //   toast.success('SesiÃ³n cerrada exitosamente');
    // } catch (error) {
    //   toast.error('Error al cerrar sesiÃ³n');
    // }
    console.log('Logout clicked');
    toast.success('SesiÃ³n cerrada exitosamente');
    navigate('/signin');
  };

  // FunciÃ³n para manejar el mouseEnter
  const handleMouseEnter = () => {
    if (isCollapsed) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = setTimeout(() => {
        setIsCollapsed(false);
      }, 300); // PequeÃ±o delay para evitar expansiones accidentales
    }
  };

  // FunciÃ³n para manejar el mouseLeave
  const handleMouseLeave = () => {
    clearTimeout(timeoutRef.current);
    timeoutRef.current = setTimeout(() => {
      setIsCollapsed(true);
    }, 500); // Delay para dar tiempo al usuario si quiere volver
  };
  
  // Definir los elementos de navegaciÃ³n
  const mainNavItems = [
    { 
      icon: FiHome, 
      label: 'Dashboard', 
      path: '/inventory',
      active: location.pathname === '/inventory'
    },
    { 
      icon: FiBox, 
      label: 'Materias Primas', 
      path: '/inventory/materias-primas',
      active: location.pathname.includes('/materias-primas')
    },
    { 
      icon: FiPackage, 
      label: 'Lotes', 
      path: '/inventory/lotes',
      active: location.pathname.includes('/lotes')
    },
    { 
      icon: FiActivity, 
      label: 'Movimientos', 
      path: '/inventory/movimientos',
      active: location.pathname.includes('/movimientos')
    },
    { 
      icon: FiAlertTriangle, 
      label: 'Alertas', 
      path: '/inventory/alertas',
      active: location.pathname.includes('/alertas'),
      hasBadge: true
    }
  ];

  const secondaryNavItems = [
    { 
      icon: FiTruck, 
      label: 'Proveedores', 
      path: '/inventory/proveedores',
      active: location.pathname.includes('/proveedores')
    },
    { 
      icon: FiRepeat, 
      label: 'Unidades', 
      path: '/inventory/unidades-medida',
      active: location.pathname.includes('/unidades-medida')
    },
    { 
      icon: FiRepeat, 
      label: 'Conversiones', 
      path: '/inventory/conversiones',
      active: location.pathname.includes('/conversiones')
    },
    { 
      icon: FiSettings, 
      label: 'Tipos de Ajuste', 
      path: '/inventory/tipos-ajuste',
      active: location.pathname.includes('/tipos-ajuste')
    }
  ];

  // Animaciones para la barra lateral
  const sidebarVariants = {
    expanded: { width: '240px' },
    collapsed: { width: '72px' }
  };

  return (
    <motion.div 
      ref={sidebarRef}
      className="h-screen flex flex-col shadow-lg z-30 fixed left-0 top-0 overflow-hidden"
      style={{ 
        backgroundColor: 'var(--sidebar-bg)',
        color: 'var(--sidebar-text)',
        borderRight: '1px solid var(--sidebar-border)'
      }}
      initial={isCollapsed ? "collapsed" : "expanded"}
      animate={isCollapsed ? "collapsed" : "expanded"}
      variants={sidebarVariants}
      transition={{ duration: 0.3, ease: [0.4, 0, 0.2, 1] }}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      {/* Cabecera de la barra lateral */}
      <div className="sticky top-0 z-10" style={{ backgroundColor: 'var(--sidebar-bg)' }}>
        <div className={`px-4 py-3 flex ${isCollapsed ? 'justify-center' : 'justify-between'}`}
          style={{ 
            borderBottom: '1px solid var(--sidebar-border)',
            backgroundColor: 'var(--sidebar-bg)'
          }}>
          <Link to="/inventory" className="flex items-center">
            <img src={Logo} alt="Logo" className="h-10 w-auto" />
            
            <AnimatePresence>
              {!isCollapsed && (
                <motion.span 
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: -10 }}
                  transition={{ duration: 0.3 }}
                  className="ml-2 font-bold text-lg"
                  style={{ color: 'var(--text-primary)' }}
                >
                  Inventario
                </motion.span>
              )}
            </AnimatePresence>
          </Link>
          
          {!isCollapsed && (
            <button 
              onClick={() => setIsCollapsed(true)}
              className="p-1.5 rounded-full"
              style={{ 
                color: 'var(--text-secondary)',
                ':hover': { backgroundColor: 'var(--component-hover)' } 
              }}
            >
              <FiChevronLeft size={18} />
            </button>
          )}
        </div>

        {/* Barra de bÃºsqueda */}
        <div className={`px-3 py-2 ${isCollapsed ? 'hidden' : 'block'}`} 
          style={{ borderBottom: '1px solid var(--sidebar-border)' }}
        >
          <div className="relative">
            <input
              type="text"
              placeholder="Buscar..."
              className="w-full pl-8 pr-3 py-1.5 text-sm rounded-lg focus:outline-none focus:ring-1"
              style={{ 
                backgroundColor: 'var(--input-bg)', 
                color: 'var(--input-text)', 
                borderColor: 'var(--input-border)',
                ":focus": { 
                  borderColor: 'var(--color-accent-primary)',
                  ringColor: 'var(--color-accent-primary)' 
                }
              }}
            />
            <FiSearch className="absolute left-2.5 top-2.5" style={{ color: 'var(--icon-color)' }} size={16} />
          </div>
        </div>

        {/* User profile section (Movido desde TopBar) */}
        <div className={`px-3 py-2 ${isCollapsed ? 'justify-center' : 'flex items-center'}`}
          style={{ borderBottom: '1px solid var(--sidebar-border)' }}
        >
          {isCollapsed ? (
            <div className="flex justify-center py-2">
              <div className="w-8 h-8 rounded-full flex items-center justify-center" 
                style={{ 
                  backgroundColor: 'var(--color-accent-secondary)', 
                  color: 'var(--accent-text)' 
                }}>
                <FiUser size={16} />
              </div>
            </div>
          ) : (
            <div className="flex items-center justify-between w-full">
              <div className="flex items-center">
                <div className="w-8 h-8 rounded-full flex items-center justify-center" 
                  style={{ 
                    backgroundColor: 'var(--color-accent-secondary)', 
                    color: 'var(--accent-text)' 
                  }}>
                  <FiUser size={16} />
                </div>
                <div className="ml-2">
                  <p className="text-sm font-medium" style={{ color: 'var(--text-primary)' }}>Admin User</p>
                  <p className="text-xs" style={{ color: 'var(--text-secondary)' }}>admin@example.com</p>
                </div>
              </div>
              <div className="relative">
                <button 
                  className="p-1.5 rounded-full relative"
                  style={{ 
                    color: 'var(--icon-color)',
                    ':hover': { backgroundColor: 'var(--component-hover)' } 
                  }}
                  onClick={() => setShowNotifications(!showNotifications)}
                >
                  <FiBell size={18} />
                  <span className="absolute top-0 right-0 h-2 w-2 bg-red-500 rounded-full"></span>
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Elementos de navegaciÃ³n principal */}
      <div className="flex-1 overflow-y-auto py-3 px-2">
        <div className="mb-6">
          {!isCollapsed && (
            <h3 className="px-3 my-2 text-xs font-semibold uppercase" style={{ color: 'var(--text-secondary)' }}>Principal</h3>
          )}
          
          {mainNavItems.map((item, index) => (
            <NavItem 
              key={item.path}
              icon={item.icon} 
              label={item.label} 
              path={item.path} 
              active={item.active}
              isCollapsed={isCollapsed}
              hasBadge={item.hasBadge}
            />
          ))}
        </div>
        
        {/* NavegaciÃ³n secundaria */}
        <div className="mb-6">
          {!isCollapsed && (
            <h3 className="px-3 my-2 text-xs font-semibold uppercase" style={{ color: 'var(--text-secondary)' }}>ConfiguraciÃ³n</h3>
          )}
          
          {secondaryNavItems.map((item, index) => (
            <NavItem 
              key={item.path}
              icon={item.icon} 
              label={item.label} 
              path={item.path} 
              active={item.active}
              isCollapsed={isCollapsed}
            />
          ))}
        </div>
      </div>
      
      {/* Pie de la barra lateral */}
      <div className="mt-auto pt-2 pb-4 px-2" style={{ 
        borderTop: '1px solid var(--sidebar-border)',
        backgroundColor: 'var(--sidebar-footer-bg)'
      }}>
        {/* Estado de conexiÃ³n a la base de datos */}
        <div className="mb-2 px-1">
          {isCollapsed ? (
            <div className="flex justify-center">
              <FiDatabase size={18} style={{ color: 'var(--alert-success-text)' }} title="ConexiÃ³n a base de datos: Activa" />
            </div>
          ) : (
            <DatabaseConnectionStatus />
          )}
        </div>
        
        <div className="flex flex-col gap-1">
          {/* BotÃ³n de alternancia de tema */}
          {!isCollapsed ? (
            <ThemeToggle className="flex items-center p-2 rounded-lg" style={{ 
              color: 'var(--text-secondary)',
              ':hover': { 
                backgroundColor: 'var(--component-hover)', 
                color: 'var(--accent-color)' 
              }
            }} />
          ) : (
            <div className="flex justify-center">
              <button
                onClick={toggleTheme}
                className="p-2 rounded-lg"
                style={{ color: isDark ? 'var(--theme-toggle-light)' : 'var(--theme-toggle-dark)' }}
              >
                {isDark ? <FiSun size={20} /> : <FiMoon size={20} />}
              </button>
            </div>
          )}
          
          {!isCollapsed && (
            <Link to="/help" className="flex items-center p-2 rounded-lg" style={{ 
              color: 'var(--text-secondary)',
              ':hover': { 
                backgroundColor: 'var(--component-hover)', 
                color: 'var(--accent-color)' 
              }
            }}>
              <FiHelpCircle size={20} />
              <span className="ml-3">Ayuda</span>
            </Link>
          )}
          
          <button
            onClick={logout}
            className="flex items-center p-2 rounded-lg"
            style={{ 
              color: 'var(--text-secondary)',
              ':hover': { 
                backgroundColor: 'var(--component-hover)', 
                color: 'var(--accent-color)' 
              }
            }}
          >
            <FiLogOut size={20} />
            {!isCollapsed && <span className="ml-3">Cerrar SesiÃ³n</span>}
          </button>
        </div>
      </div>
      
      {/* Panel de notificaciones (expandible) */}
      <AnimatePresence>
        {showNotifications && !isCollapsed && (
          <motion.div 
            className="absolute top-20 right-3 rounded-lg shadow-lg border w-72 z-50"
            style={{ 
              backgroundColor: 'var(--card-bg)', 
              borderColor: 'var(--card-border)' 
            }}
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
          >
            <div className="p-3" style={{ 
              borderBottom: '1px solid var(--card-border)' 
            }}>
              <h3 className="font-medium" style={{ color: 'var(--text-primary)' }}>Notificaciones</h3>
            </div>
            <div className="max-h-80 overflow-y-auto p-2">
              <div className="flex items-start p-2 rounded-lg cursor-pointer transition-colors duration-200"
                style={{ 
                  ':hover': { backgroundColor: 'var(--component-hover)' } 
                }}>
                <div className="p-1.5 bg-amber-100 text-amber-600 rounded-full">
                  <FiAlertTriangle size={16} />
                </div>
                <div className="ml-2">
                  <p className="text-sm font-medium" style={{ color: 'var(--text-primary)' }}>Stock bajo</p>
                  <p className="text-xs" style={{ color: 'var(--text-secondary)' }}>AzÃºcar: por debajo del mÃ­nimo</p>
                  <p className="text-xs mt-1" style={{ color: 'var(--text-tertiary)' }}>Hace 10 minutos</p>
                </div>
              </div>
              <div className="flex items-start p-2 rounded-lg cursor-pointer transition-colors duration-200"
                style={{ 
                  ':hover': { backgroundColor: 'var(--component-hover)' } 
                }}>
                <div className="p-1.5 bg-red-100 text-red-600 rounded-full">
                  <FiAlertTriangle size={16} />
                </div>
                <div className="ml-2">
                  <p className="text-sm font-medium" style={{ color: 'var(--text-primary)' }}>Alerta de caducidad</p>
                  <p className="text-xs" style={{ color: 'var(--text-secondary)' }}>Lote L0023 caducarÃ¡ en 3 dÃ­as</p>
                  <p className="text-xs mt-1" style={{ color: 'var(--text-tertiary)' }}>Hace 35 minutos</p>
                </div>
              </div>
            </div>
            <div className="p-2" style={{ borderTop: '1px solid var(--card-border)' }}>
              <button 
                className="w-full text-center text-xs font-medium p-1 rounded transition-colors duration-200"
                style={{ 
                  color: 'var(--accent-color)',
                  ':hover': { 
                    backgroundColor: 'var(--component-hover)' 
                  }
                }}
              >
                Ver todas las notificaciones
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
      
      {/* Mobile menu button */}
      {isCollapsed && (
        <button
          className="lg:hidden fixed bottom-4 right-4 z-30 p-3 rounded-full shadow-lg"
          style={{ 
            backgroundColor: 'var(--accent-color)', 
            color: 'var(--accent-text)' 
          }}
          onClick={() => setIsCollapsed(false)}
        >
          <FiMenu size={20} />
        </button>
      )}
    </motion.div>
  );
};

export default InventorySidebar;\n\n

=== ./inventario/components/InventorySidebarLayout.jsx ===
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useTheme } from '@shared/context/ThemeContext';
import InventorySidebar from './InventorySidebar';
import { Breadcrumb } from '../ui'; // Import from ui components
const InventorySidebarLayout = ({ children }) => {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [breadcrumbItems, setBreadcrumbItems] = useState([]);
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  // Detectar si es un dispositivo mÃ³vil
  useEffect(() => {
    const checkIfMobile = () => {
      const mobile = window.innerWidth < 1024;
      setIsMobile(mobile);
      setIsCollapsed(mobile);
    };

    checkIfMobile();
    window.addEventListener('resize', checkIfMobile);
    
    return () => {
      window.removeEventListener('resize', checkIfMobile);
    };
  }, []);

  // Variantes para la animaciÃ³n del contenido principal
  const mainContentVariants = {
    expanded: { marginLeft: '240px' },
    collapsed: { marginLeft: '72px' },
    mobile: { marginLeft: '0px' }
  };

  // Handle navigation for breadcrumbs
  const handleNavigate = (path) => {
    console.log('Navigate to:', path);
    // Implementation of navigation logic
  };

  return (
    <div className="flex h-screen" style={{ backgroundColor: 'var(--crm-bg)' }}>
      {/* Barra lateral */}
      <InventorySidebar 
        isCollapsed={isCollapsed} 
        setIsCollapsed={setIsCollapsed} 
      />
      
      {/* Contenido principal */}
      <motion.main 
        className="flex-1 overflow-auto"
        style={{ 
          backgroundColor: 'var(--crm-bg)',
          color: 'var(--crm-text)'
        }}
        initial={isMobile ? "mobile" : (isCollapsed ? "collapsed" : "expanded")}
        animate={isMobile ? "mobile" : (isCollapsed ? "collapsed" : "expanded")}
        variants={mainContentVariants}
        transition={{ duration: 0.3, ease: "easeInOut" }}
      >
        {/* Contenedor centrado para el contenido */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 md:px-8 py-6">
          {/* Breadcrumb */}
          <Breadcrumb 
            items={breadcrumbItems} 
            onNavigate={handleNavigate} 
          />
          
          {/* Page Content */}
          {children}
        </div>
      </motion.main>
    </div>
  );
};

export default InventorySidebarLayout;\n\n

=== ./inventario/components/dashboard/AlertList.jsx ===
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { FiChevronRight, FiClock } from 'react-icons/fi';
import FadeInUp from './FadeInUp';
import { BG_COLORS, TEXT_COLORS } from './dashboardConstants';

/**
 * Componente para mostrar listas de alertas o notificaciones con diseÃ±o moderno
 * 
 * @param {Object} props
 * @param {string} props.title - TÃ­tulo de la lista de alertas
 * @param {Array} props.items - Array de elementos a mostrar
 * @param {string} props.emptyMessage - Mensaje a mostrar cuando no hay elementos
 * @param {Function} props.icon - Componente de icono a mostrar
 * @param {string} props.color - Color de las alertas (primary, success, warning, danger, purple, pink)
 * @param {string} props.viewAllLink - Enlace para ver todos los elementos
 * @param {number} props.delay - Retraso de la animaciÃ³n
 * @param {Function} props.onItemClick - FunciÃ³n a ejecutar al hacer clic en un elemento
 */
const AlertList = ({ 
  title, 
  items = [], 
  emptyMessage, 
  icon: Icon, 
  color = 'danger', 
  viewAllLink, 
  delay = 0,
  onItemClick
}) => {
  // Mapear el nombre del color a las clases correspondientes
  const bgColor = BG_COLORS[color] || BG_COLORS.danger;
  const textColor = TEXT_COLORS[color] || TEXT_COLORS.danger;

  return (
    <FadeInUp delay={delay} className="h-full">
      <div className="bg-white dark:bg-[#1e293b] rounded-xl shadow-sm p-5 h-full border border-gray-100 dark:border-[#334155]">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
            <div className={`p-1.5 rounded-lg ${bgColor}`}>
              <Icon size={16} className={textColor} />
            </div>
            <h3 className="text-base font-semibold ml-2 dark:text-white">{title}</h3>
          </div>
          
          {items.length > 0 && viewAllLink && (
            <Link 
              to={viewAllLink} 
              className="text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300 text-xs font-medium flex items-center px-2 py-1 rounded-full hover:bg-indigo-50 dark:hover:bg-indigo-900/40 transition-colors"
            >
              Ver todos
              <FiChevronRight size={14} className="ml-1" />
            </Link>
          )}
        </div>
        
        {items.length === 0 ? (
          <div className="flex flex-col items-center justify-center py-8 text-gray-400 dark:text-gray-500">
            <div className="p-4 rounded-full bg-gray-50 dark:bg-gray-800 mb-3">
              <Icon size={24} className="opacity-50" />
            </div>
            <p className="text-sm">{emptyMessage}</p>
          </div>
        ) : (
          <div className="space-y-3">
            {items.slice(0, 4).map((item, index) => (
              <motion.div 
                key={item.id || index} 
                className={`border border-gray-100 dark:border-[#334155] rounded-lg p-3 hover:bg-gray-50 dark:hover:bg-[#263449] transition-colors ${onItemClick ? 'cursor-pointer' : ''}`}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: delay + index * 0.1 }}
                onClick={() => onItemClick && onItemClick(item)}
                whileHover={{ scale: 1.01 }}
                whileTap={{ scale: 0.99 }}
              >
                <div className="flex items-start justify-between">
                  <div className="flex items-start">
                    <div className={`p-1.5 rounded-lg ${bgColor} flex-shrink-0 mt-0.5 mr-2`}>
                      <Icon size={14} className={textColor} />
                    </div>
                    <div>
                      <h4 className="font-medium text-sm dark:text-white">{item.nombre || item.mensaje}</h4>
                      {item.materiaPrima && (
                        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">{item.materiaPrima.nombre}</p>
                      )}
                      {item.descripcion && (
                        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">{item.descripcion}</p>
                      )}
                      {item.fecha_creacion && (
                        <p className="text-xs text-gray-400 dark:text-gray-500 mt-1 flex items-center">
                          <FiClock size={12} className="mr-1" />
                          {new Date(item.fecha_creacion).toLocaleDateString()}
                        </p>
                      )}
                    </div>
                  </div>
                  <div>
                    {item.stock_actual !== undefined && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-rose-50 text-rose-700 dark:bg-rose-900/40 dark:text-rose-300 border border-rose-100 dark:border-rose-900">
                        {item.stock_actual} / {item.stock_minimo}
                      </span>
                    )}
                    {item.fecha_caducidad && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-amber-50 text-amber-700 dark:bg-amber-900/40 dark:text-amber-300 border border-amber-100 dark:border-amber-900">
                        <FiClock size={12} className="mr-1" />
                        {new Date(item.fecha_caducidad).toLocaleDateString()}
                      </span>
                    )}
                    {item.nivel && (
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        item.nivel === 'crÃ­tico' ? 'bg-rose-50 text-rose-700 dark:bg-rose-900/40 dark:text-rose-300 border border-rose-100 dark:border-rose-900' :
                        item.nivel === 'advertencia' ? 'bg-amber-50 text-amber-700 dark:bg-amber-900/40 dark:text-amber-300 border border-amber-100 dark:border-amber-900' :
                        'bg-blue-50 text-blue-700 dark:bg-blue-900/40 dark:text-blue-300 border border-blue-100 dark:border-blue-900'
                      }`}>
                        {item.nivel}
                      </span>
                    )}
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        )}
      </div>
    </FadeInUp>
  );
};

export default AlertList;\n\n

=== ./inventario/components/dashboard/ChartCard.jsx ===
import { useState } from 'react';
import { motion } from 'framer-motion';
import { FiMaximize2, FiEye, FiDownload, FiMoreVertical } from 'react-icons/fi';
import FadeInUp from './FadeInUp';
import { BG_COLORS, TEXT_COLORS } from './dashboardConstants';

/**
 * Componente contenedor para grÃ¡ficos con diseÃ±o moderno
 * 
 * @param {Object} props
 * @param {string} props.title - TÃ­tulo del grÃ¡fico
 * @param {Function} props.icon - Componente de icono a mostrar
 * @param {string} props.color - Color del grÃ¡fico (primary, success, warning, danger, purple, pink)
 * @param {React.ReactNode} props.children - Contenido del grÃ¡fico (generalmente un componente de recharts)
 * @param {number} props.delay - Retraso de la animaciÃ³n
 * @param {React.ReactNode} props.actionButtons - Botones de acciÃ³n personalizados
 * @param {string} props.className - Clases CSS adicionales
 */
const ChartCard = ({ 
  title, 
  icon: Icon, 
  color = 'primary', 
  children, 
  delay = 0, 
  actionButtons,
  className = ""
}) => {
  const [showActions, setShowActions] = useState(false);
  
  // Mapear el nombre del color a las clases correspondientes
  const bgColor = BG_COLORS[color] || BG_COLORS.primary;
  const textColor = TEXT_COLORS[color] || TEXT_COLORS.primary;

  return (
    <FadeInUp delay={delay} className={`h-full ${className}`}>
      <div className="bg-white dark:bg-[#1e293b] p-5 rounded-xl shadow-sm h-full border border-gray-100 dark:border-[#334155] relative overflow-hidden">
        {/* Elemento decorativo */}
        <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-bl from-gray-50 dark:from-gray-800 to-transparent rounded-bl-full opacity-80"></div>
        
        <div className="flex items-center justify-between mb-4 relative z-10">
          <div className="flex items-center">
            <div className={`p-1.5 rounded-lg ${bgColor} mr-2`}>
              <Icon className={textColor} size={18} />
            </div>
            <h3 className="text-lg font-semibold dark:text-white">{title}</h3>
          </div>
          
          <div className="flex space-x-1">
            {actionButtons}
            
            <div className="relative">
              <button
                className="text-gray-400 hover:text-gray-600 dark:text-gray-400 dark:hover:text-gray-300 p-1.5 rounded-full hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                onClick={() => setShowActions(!showActions)}
              >
                <FiMoreVertical size={16} />
              </button>
              
              {/* MenÃº de acciones */}
              {showActions && (
                <motion.div
                  className="absolute right-0 mt-1 bg-white dark:bg-[#263449] shadow-lg rounded-lg py-1 z-20 min-w-[120px] border border-gray-100 dark:border-[#334155]"
                  initial={{ opacity: 0, y: -5 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -5 }}
                >
                  <button className="w-full text-left px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-[#334155] flex items-center">
                    <FiMaximize2 className="mr-2" size={14} />
                    Ampliar
                  </button>
                  <button className="w-full text-left px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-[#334155] flex items-center">
                    <FiDownload className="mr-2" size={14} />
                    Exportar
                  </button>
                  <button className="w-full text-left px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-[#334155] flex items-center">
                    <FiEye className="mr-2" size={14} />
                    Ver detalles
                  </button>
                </motion.div>
              )}
            </div>
          </div>
        </div>
        
        <div className="h-[220px] sm:h-[250px] md:h-[280px] relative z-10">
          {children}
        </div>
        
        {/* Borde inferior decorativo */}
        <div className={`absolute bottom-0 left-0 right-0 h-1 ${bgColor} opacity-30`}></div>
      </div>
    </FadeInUp>
  );
};

export default ChartCard;\n\n

=== ./inventario/components/dashboard/DashboardLoader.jsx ===
import { motion } from 'framer-motion';

// Mapa de colores hexadecimales para reemplazar las clases de Tailwind
const COLOR_MAP = {
  indigo: {
    300: '#a5b4fc',
    500: '#6366f1',
    600: '#4f46e5'
  },
  purple: {
    300: '#d8b4fe',
    500: '#a855f7',
    600: '#9333ea',
    800: '#6b21a8'
  },
  blue: {
    300: '#93c5fd',
    500: '#3b82f6',
    600: '#2563eb'
  },
  green: {
    300: '#86efac',
    500: '#22c55e',
    600: '#16a34a'
  },
  red: {
    300: '#fca5a5',
    500: '#ef4444',
    600: '#dc2626'
  }
};

/**
 * Componente de carga animado para el dashboard
 * 
 * @param {Object} props
 * @param {string} props.text - Texto a mostrar (por defecto: "Cargando dashboard...")
 * @param {string} props.className - Clases CSS adicionales
 * @param {string} props.primaryColor - Color primario de la animaciÃ³n (por defecto: "indigo")
 * @param {string} props.secondaryColor - Color secundario de la animaciÃ³n (por defecto: "indigo")
 */
const DashboardLoader = ({ 
  text = "Cargando dashboard...", 
  className = "",
  primaryColor = "indigo",
  secondaryColor = "indigo"
}) => {
  // Obtener el color del texto de manera segura
  const textColor = COLOR_MAP[primaryColor]?.[600] || COLOR_MAP.indigo[600];
  
  return (
    <div className={`flex flex-col justify-center items-center h-[70vh] ${className}`}>
      <LoaderAnimation 
        primaryColor={primaryColor} 
        secondaryColor={secondaryColor} 
      />
      <p className="font-medium text-sm animate-pulse mt-4" style={{ color: textColor }}>
        {text}
      </p>
    </div>
  );
};

/**
 * AnimaciÃ³n circular personalizada
 */
const LoaderAnimation = ({ primaryColor = "indigo", secondaryColor = "indigo" }) => {
  // Obtener colores seguros, con fallback a indigo si no existen
  const primaryDark = COLOR_MAP[primaryColor]?.[600] || COLOR_MAP.indigo[600];
  const primaryMid = COLOR_MAP[primaryColor]?.[500] || COLOR_MAP.indigo[500];
  const secondaryLight = COLOR_MAP[secondaryColor]?.[300] || COLOR_MAP.indigo[300];
  
  const circleVariants = {
    initial: { opacity: 0, scale: 0 },
    animate: { opacity: 1, scale: 1, transition: { duration: 0.5 } }
  };

  const spinTransition = {
    duration: 1.5,
    ease: "easeInOut",
    repeat: Infinity
  };

  return (
    <div className="relative">
      <motion.div
        initial="initial"
        animate="animate"
        variants={circleVariants}
        className="relative"
      >
        {/* CÃ­rculo exterior (girando en sentido horario) */}
        <motion.div 
          className="h-16 w-16 rounded-full"
          style={{
            borderTopWidth: '4px',
            borderBottomWidth: '4px',
            borderTopColor: primaryDark,
            borderBottomColor: primaryDark,
            borderTopStyle: 'solid',
            borderBottomStyle: 'solid'
          }}
          animate={{ rotate: 360 }}
          transition={spinTransition}
        />
        
        {/* CÃ­rculo interior (girando en sentido antihorario) */}
        <motion.div 
          className="absolute top-0 left-0 h-16 w-16 rounded-full"
          style={{
            borderRightWidth: '4px',
            borderLeftWidth: '4px',
            borderRightColor: secondaryLight,
            borderLeftColor: secondaryLight,
            borderRightStyle: 'solid',
            borderLeftStyle: 'solid'
          }}
          animate={{ rotate: -360 }}
          transition={{ ...spinTransition, duration: 2 }}
        />
        
        {/* Punto central pulsante */}
        <motion.div 
          className="absolute top-1/2 left-1/2 w-4 h-4 -ml-2 -mt-2 rounded-full"
          style={{
            backgroundColor: primaryMid
          }}
          animate={{ 
            scale: [1, 1.3, 1],
            opacity: [0.7, 1, 0.7]
          }}
          transition={{
            duration: 1.5,
            ease: "easeInOut",
            repeat: Infinity
          }}
        />
      </motion.div>
      
      {/* Sombra pulsante */}
      <motion.div 
        className="absolute top-full left-1/2 w-10 h-1 -ml-5 mt-3 bg-gray-200 rounded-full"
        animate={{ 
          opacity: [0.3, 0.5, 0.3],
          scale: [0.8, 1, 0.8]
        }}
        transition={{
          duration: 1.5,
          ease: "easeInOut",
          repeat: Infinity
        }}
      />
    </div>
  );
};

export default DashboardLoader;\n\n

=== ./inventario/components/dashboard/FadeInUp.jsx ===
import { motion } from 'framer-motion';

/**
 * Componente de animaciÃ³n que hace aparecer elementos con un efecto de subida
 * 
 * @param {Object} props
 * @param {React.ReactNode} props.children - Elementos a animar
 * @param {number} props.delay - Retraso de la animaciÃ³n en segundos
 * @param {string} props.className - Clases CSS adicionales
 * @param {number} props.duration - DuraciÃ³n de la animaciÃ³n en segundos
 */
const FadeInUp = ({ children, delay = 0, className = "", duration = 0.4 }) => (
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration, delay, ease: "easeOut" }}
    className={className}
  >
    {children}
  </motion.div>
);

export default FadeInUp;\n\n

=== ./inventario/components/dashboard/QuickAccess.jsx ===
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import FadeInUp from './FadeInUp';
import { BORDER_COLORS, BG_COLORS, TEXT_COLORS } from './dashboardConstants';

/**
 * Componente para accesos rÃ¡pidos a las principales acciones del sistema
 * 
 * @param {Object} props
 * @param {Function} props.icon - Componente de icono a mostrar
 * @param {string} props.title - TÃ­tulo del acceso rÃ¡pido
 * @param {string} props.path - Ruta de navegaciÃ³n
 * @param {string} props.color - Color del acceso rÃ¡pido (primary, success, warning, danger, purple, pink) 
 * @param {number} props.delay - Retraso de la animaciÃ³n
 * @param {string} props.description - DescripciÃ³n opcional (solo se muestra en pantallas mayores)
 */
const QuickAccess = ({ 
  icon: Icon, 
  title, 
  path, 
  color = 'primary', 
  delay = 0,
  description
}) => {
  // Mapear el nombre del color a las clases correspondientes
  const borderColor = BORDER_COLORS[color] || BORDER_COLORS.primary;
  const bgColor = BG_COLORS[color] || BG_COLORS.primary;
  const textColor = TEXT_COLORS[color] || TEXT_COLORS.primary;

  return (
    <FadeInUp delay={delay} className="h-full">
      <Link 
        to={path} 
        className={`flex flex-col items-center p-4 bg-white rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 h-full group relative overflow-hidden`}
      >
        {/* Borde superior decorativo */}
        <div className={`absolute top-0 left-0 right-0 h-1 ${borderColor.replace('border-', 'bg-')}`}></div>
        
        <div className={`p-3 rounded-full ${bgColor} mb-2 group-hover:scale-110 transition-transform duration-300`}>
          <Icon className={textColor} size={20} />
        </div>
        
        <span className="font-medium text-sm text-center">{title}</span>
        
        {description && (
          <p className="text-xs text-gray-500 mt-1 text-center hidden sm:block">{description}</p>
        )}
        
        {/* Efecto de hover */}
        <motion.div 
          className={`absolute bottom-0 left-0 right-0 h-0.5 ${borderColor.replace('border-', 'bg-')}`}
          initial={{ scaleX: 0 }}
          whileHover={{ scaleX: 1 }}
          transition={{ duration: 0.3 }}
        />
        
        {/* Fondo decorativo en hover */}
        <div className={`absolute inset-0 ${bgColor} opacity-0 group-hover:opacity-5 transition-opacity duration-300`}></div>
      </Link>
    </FadeInUp>
  );
};

export default QuickAccess;\n\n

=== ./inventario/components/dashboard/RefreshButton.jsx ===
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FiRefreshCw } from 'react-icons/fi';

/**
 * BotÃ³n flotante para refrescar los datos del dashboard
 * 
 * @param {Object} props
 * @param {Function} props.onRefresh - FunciÃ³n a ejecutar al hacer clic
 * @param {boolean} props.isRefreshing - Estado de carga durante el refresco
 * @param {boolean} props.disabled - Deshabilitar el botÃ³n
 * @param {string} props.className - Clases CSS adicionales
 * @param {string} props.tooltipText - Texto del tooltip (por defecto: "Actualizar datos")
 * @param {string} props.position - PosiciÃ³n del botÃ³n (por defecto: "bottom-right")
 */
const RefreshButton = ({ 
  onRefresh, 
  isRefreshing = false, 
  disabled = false, 
  className = "",
  tooltipText = "Actualizar datos",
  position = "bottom-right"
}) => {
  const [showTooltip, setShowTooltip] = useState(false);

  // Determinar clases de posiciÃ³n
  const positionClasses = {
    "bottom-right": "right-4 bottom-20 lg:bottom-4",
    "bottom-left": "left-4 bottom-20 lg:bottom-4",
    "top-right": "right-4 top-20 lg:top-4",
    "top-left": "left-4 top-20 lg:top-4"
  };

  const positionClass = positionClasses[position] || positionClasses["bottom-right"];

  return (
    <motion.button 
      onClick={onRefresh}
      disabled={isRefreshing || disabled}
      className={`fixed ${positionClass} z-10 w-12 h-12 bg-white shadow-lg rounded-full 
        flex items-center justify-center text-indigo-600 hover:bg-indigo-50 
        transition-colors border border-indigo-100 ${className}
        ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}
      whileTap={{ scale: 0.9 }}
      whileHover={{ 
        scale: 1.1, 
        boxShadow: "0 10px 25px -5px rgba(99, 102, 241, 0.3), 0 10px 10px -5px rgba(99, 102, 241, 0.2)"
      }}
      onHoverStart={() => setShowTooltip(true)}
      onHoverEnd={() => setShowTooltip(false)}
      aria-label={tooltipText}
    >
      <FiRefreshCw 
        className={isRefreshing ? 'animate-spin' : ''} 
        size={20} 
      />
      
      {/* Tooltip animado */}
      <AnimatePresence>
        {showTooltip && !disabled && (
          <motion.span 
            className={`absolute ${
              position.includes('left') ? 'left-full ml-2' : 'right-full mr-2'
            } px-2 py-1 bg-gray-800 text-white text-xs rounded 
            pointer-events-none whitespace-nowrap`}
            initial={{ opacity: 0, x: position.includes('left') ? -10 : 10 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: position.includes('left') ? -10 : 10 }}
            transition={{ duration: 0.2 }}
          >
            {tooltipText}
          </motion.span>
        )}
      </AnimatePresence>

      {/* Indicador de refresco animado */}
      {isRefreshing && (
        <motion.div 
          className="absolute inset-0 rounded-full border-2 border-indigo-300"
          animate={{ 
            scale: [1, 1.1, 1],
            opacity: [1, 0.7, 1]
          }}
          transition={{ 
            duration: 1.5, 
            repeat: Infinity,
            ease: "easeInOut" 
          }}
        />
      )}
    </motion.button>
  );
};

export default RefreshButton;\n\n

=== ./inventario/components/dashboard/StatCard.jsx ===
import { motion } from 'framer-motion';
import { FiArrowUp, FiArrowDown } from 'react-icons/fi';
import FadeInUp from './FadeInUp';
import { BORDER_COLORS, BG_COLORS, TEXT_COLORS } from './dashboardConstants';

/**
 * Componente de tarjeta de estadÃ­sticas con diseÃ±o moderno y animaciones
 * 
 * @param {Object} props
 * @param {Function} props.icon - Componente de icono a mostrar
 * @param {string} props.title - TÃ­tulo de la estadÃ­stica
 * @param {string|number} props.value - Valor de la estadÃ­stica
 * @param {string} props.color - Color de la tarjeta (primary, success, warning, danger, purple, pink)
 * @param {string} props.trend - Tendencia (up o down)
 * @param {number} props.percent - Porcentaje de la tendencia
 * @param {number} props.delay - Retraso de la animaciÃ³n
 */
const StatCard = ({ 
  icon: Icon, 
  title, 
  value, 
  color = 'primary',
  trend, 
  percent, 
  delay = 0 
}) => {
  // Mapear el nombre del color a las clases correspondientes
  const borderColor = BORDER_COLORS[color] || BORDER_COLORS.primary;
  const bgColor = BG_COLORS[color] || BG_COLORS.primary;
  const textColor = TEXT_COLORS[color] || TEXT_COLORS.primary;

  // Clases para la tendencia
  const trendColor = trend === 'up'
    ? 'text-emerald-500 bg-emerald-50 dark:text-emerald-300 dark:bg-emerald-900/40'
    : 'text-rose-500 bg-rose-50 dark:text-rose-300 dark:bg-rose-900/40';
  
  return (
    <FadeInUp delay={delay} className="h-full">
      <motion.div
        className={`bg-white dark:bg-[#1e293b] rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 p-4 h-full border-l-4 ${borderColor} overflow-hidden relative group`}
        whileHover={{ scale: 1.02, transition: { duration: 0.2 } }}
      >
        {/* Elemento decorativo de fondo */}
        <div className={`absolute -right-6 -top-6 w-20 h-20 rounded-full ${bgColor} opacity-30 group-hover:opacity-70 transition-opacity`}></div>
        
        <div className="flex items-center justify-between z-10 relative">
          <div className="flex items-center">
            <div className={`p-2.5 mr-3 rounded-lg ${bgColor} group-hover:shadow-sm transition-all`}>
              <Icon className={textColor} size={18} />
            </div>
            <div>
              <h3 className="text-gray-500 dark:text-gray-400 text-xs font-medium">{title}</h3>
              <p className="text-xl font-bold mt-0.5 dark:text-white">{value}</p>
            </div>
          </div>
          
          {trend && (
            <motion.div 
              className={`flex items-center ${trendColor} px-2 py-1 rounded-full`}
              whileTap={{ scale: 0.95 }}
            >
              {trend === 'up' ? <FiArrowUp size={14} /> : <FiArrowDown size={14} />}
              <span className="text-xs font-medium ml-1">{percent}%</span>
            </motion.div>
          )}
        </div>
        
        {/* Indicador de tendencia en la parte inferior */}
        {trend && (
          <div className="w-full h-1 mt-3 bg-gray-100 dark:bg-gray-700 rounded-full overflow-hidden">
            <motion.div 
              className={trend === 'up' ? 'bg-emerald-500' : 'bg-rose-500'} 
              initial={{ width: 0 }}
              animate={{ width: `${Math.min(percent * 2, 100)}%` }}
              transition={{ duration: 1, delay: delay + 0.3 }}
            />
          </div>
        )}
      </motion.div>
    </FadeInUp>
  );
};

export default StatCard;\n\n

=== ./inventario/components/dashboard/TabNav.jsx ===
import { motion } from 'framer-motion';
import { 
  FiBarChart2, 
  FiPlus, 
  FiPieChart, 
  FiAlertTriangle,
  FiSettings,
  FiSliders,
  FiTrendingUp
} from 'react-icons/fi';

/**
 * Componente de navegaciÃ³n por pestaÃ±as para el dashboard con diseÃ±o centrado vertical
 * 
 * @param {Object} props
 * @param {string} props.activeTab - PestaÃ±a activa actualmente
 * @param {Function} props.setActiveTab - FunciÃ³n para cambiar de pestaÃ±a
 * @param {Array} props.customTabs - PestaÃ±as personalizadas (opcional)
 */
const TabNav = ({ activeTab, setActiveTab, customTabs }) => {
  // PestaÃ±as predeterminadas
  const defaultTabs = [
    { id: 'resumen', icon: FiBarChart2, label: 'Resumen' },
    { id: 'acciones', icon: FiPlus, label: 'Acciones RÃ¡pidas' },
    { id: 'graficos', icon: FiPieChart, label: 'GrÃ¡ficos' },
    { id: 'proyecciones', icon: FiTrendingUp, label: 'Proyecciones' },
    { id: 'alertas', icon: FiAlertTriangle, label: 'Alertas' }
  ];

  // Usar pestaÃ±as personalizadas o las predeterminadas
  const tabs = customTabs || defaultTabs;

  // Variantes para animaciÃ³n de contenedor
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.1
      }
    }
  };

  // Variantes para animaciÃ³n de elemento
  const itemVariants = {
    hidden: { opacity: 0, y: 10 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <motion.div 
      initial="hidden"
      animate="visible"
      variants={containerVariants}
      className="mb-6 mt-2"
    >
      <div className="flex justify-center items-center flex-wrap gap-4">
        {tabs.map((tab) => (
          <TabButton
            key={tab.id}
            isActive={activeTab === tab.id}
            onClick={() => setActiveTab(tab.id)}
            icon={tab.icon}
            label={tab.label}
            variants={itemVariants}
          />
        ))}
      </div>
    </motion.div>
  );
};

/**
 * BotÃ³n de pestaÃ±a individual con animaciones y diseÃ±o vertical centrado
 */
const TabButton = ({ isActive, onClick, icon: Icon, label, variants }) => {
  // Gradientes para el botÃ³n activo
  const activeGradient = "bg-gradient-to-br from-indigo-500 to-blue-600 dark:from-indigo-600 dark:to-indigo-800";
  const hoverGradient = "bg-gradient-to-br from-gray-100 to-gray-200 hover:from-gray-200 hover:to-gray-300 dark:from-[#1e293b] dark:to-[#263449] dark:hover:from-[#263449] dark:hover:to-[#334155]";
  
  return (
    <motion.div
      variants={variants}
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      className="relative"
    >
      <motion.button
        onClick={onClick}
        className={`relative flex flex-col items-center justify-center w-20 h-20 rounded-xl ${
          isActive
            ? `${activeGradient} text-white shadow-lg`
            : `${hoverGradient} text-gray-700 dark:text-gray-200 shadow-sm`
        } transition-all duration-300 overflow-hidden group`}
      >
        {/* Efecto de brillo para hover */}
        <div className={`absolute inset-0 w-full h-full bg-white opacity-0 group-hover:opacity-10 transition-opacity duration-300 ${isActive ? 'hidden' : ''}`}></div>
        
        {/* Efecto de borde brillante para botÃ³n activo */}
        {isActive && (
          <div className="absolute inset-0 bg-gradient-to-br from-indigo-300 to-blue-300 opacity-20 animate-pulse"></div>
        )}

        {/* Contenido del botÃ³n */}
        <div className="flex flex-col items-center justify-center p-2 relative z-10">
          <motion.div 
            animate={isActive ? { scale: [1, 1.2, 1] } : {}}
            transition={{ duration: 0.5 }}
            className="flex items-center justify-center mb-2"
          >
            <Icon className={`${isActive ? 'text-white' : 'text-gray-700 dark:text-gray-200'}`} size={24} />
          </motion.div>
          <p className={`text-xs font-medium text-center leading-tight ${isActive ? 'text-white' : 'text-gray-700 dark:text-gray-200'}`}>
            {label}
          </p>
        </div>
      </motion.button>
      
      {/* Indicador de posiciÃ³n activa */}
      {isActive && (
        <motion.div
          layoutId="activeTabIndicator"
          className="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-10 h-1 bg-white rounded-full shadow-lg"
          initial={false}
          transition={{
            type: "spring",
            stiffness: 500,
            damping: 30
          }}
        />
      )}
    </motion.div>
  );
};

export default TabNav;\n\n

=== ./inventario/components/dashboard/dashboardConstants.js ===
/**
 * Archivo de constantes para el dashboard de inventario
 * Centraliza colores, gradientes y otros valores compartidos
 */

// Paleta de colores para grÃ¡ficos y elementos visuales
export const COLORS = {
  primary: '#6366F1', // Indigo
  success: '#10B981', // Emerald
  warning: '#F59E0B', // Amber
  danger: '#EF4444',  // Red
  info: '#3B82F6',    // Blue
  purple: '#8B5CF6',  // Violet
  pink: '#EC4899',    // Pink
};

// Array de colores para grÃ¡ficos
export const CHART_COLORS = [
  COLORS.primary,
  COLORS.success, 
  COLORS.warning,
  COLORS.pink,
  COLORS.purple
];

// Gradientes para grÃ¡ficos
export const CHART_GRADIENTS = {
  entrada: ['rgba(99, 102, 241, 0.8)', 'rgba(99, 102, 241, 0.1)'],
  salida: ['rgba(16, 185, 129, 0.8)', 'rgba(16, 185, 129, 0.1)'],
  warning: ['rgba(245, 158, 11, 0.8)', 'rgba(245, 158, 11, 0.1)'],
  danger: ['rgba(239, 68, 68, 0.8)', 'rgba(239, 68, 68, 0.1)'],
};

// Colores de borde para tarjetas
export const BORDER_COLORS = {
  primary: 'border-indigo-500',
  success: 'border-emerald-500',
  warning: 'border-amber-500',
  danger: 'border-rose-500',
  purple: 'border-violet-500',
  pink: 'border-pink-500',
};

// Mapeo de colores para fondos
export const BG_COLORS = {
  primary: 'bg-indigo-50 dark:bg-indigo-900/40',
  success: 'bg-emerald-50 dark:bg-emerald-900/40',
  warning: 'bg-amber-50 dark:bg-amber-900/40',
  danger: 'bg-rose-50 dark:bg-rose-900/40',
  purple: 'bg-violet-50 dark:bg-violet-900/40',
  pink: 'bg-pink-50 dark:bg-pink-900/40',
};

// Mapeo de colores para texto
export const TEXT_COLORS = {
  primary: 'text-indigo-500 dark:text-indigo-300',
  success: 'text-emerald-500 dark:text-emerald-300',
  warning: 'text-amber-500 dark:text-amber-300',
  danger: 'text-rose-500 dark:text-rose-300',
  purple: 'text-violet-500 dark:text-violet-300',
  pink: 'text-pink-500 dark:text-pink-300',
};\n\n

=== ./inventario/components/dashboard/index.js ===
// Archivo Ã­ndice para exportar todos los componentes del dashboard
export { default as StatCard } from './StatCard';
export { default as QuickAccess } from './QuickAccess';
export { default as ChartCard } from './ChartCard';
export { default as AlertList } from './AlertList';
export { default as TabNav } from './TabNav';
export { default as RefreshButton } from './RefreshButton';
export { default as DashboardLoader } from './DashboardLoader';
export { default as FadeInUp } from './FadeInUp';

// Tabs
export { default as ResumenTab } from './tabs/ResumenTab';
export { default as AccionesTab } from './tabs/AccionesTab';
export { default as GraficosTab } from './tabs/GraficosTab';
export { default as AlertasTab } from './tabs/AlertasTab';

// Constants & Utils
export { COLORS, CHART_GRADIENTS } from './dashboardConstants';\n\n

=== ./inventario/components/dashboard/tabs/AccionesTab.jsx ===
import { useState } from 'react';
import { QuickAccess, FadeInUp } from '../';
import { 
  FiShoppingBag, 
  FiBox, 
  FiTrendingUp, 
  FiTruck, 
  FiDollarSign, 
  FiPieChart,
  FiPackage,
  FiTool,
  FiActivity,
  FiClipboard,
  FiFileText,
  FiGrid,
  FiHelpCircle,
  FiSettings
} from 'react-icons/fi';

/**
 * Componente para la pestaÃ±a de Acciones RÃ¡pidas
 * 
 * @param {Object} props
 * @param {string} props.className - Clases CSS adicionales
 */
const AccionesTab = ({ className = "" }) => {
  const [activeGuideTab, setActiveGuideTab] = useState('productos');

  // Acciones principales
  const quickAccesses = [
    {
      icon: FiShoppingBag,
      title: "Nueva Materia Prima",
      path: "/inventory/materias-primas/new",
      color: "primary",
      description: "Registra un nuevo insumo o material"
    },
    {
      icon: FiBox,
      title: "Nuevo Lote",
      path: "/inventory/lotes/new",
      color: "success", 
      description: "Registra un nuevo lote de productos"
    },
    {
      icon: FiTrendingUp,
      title: "Registrar Movimiento",
      path: "/inventory/movimientos/new",
      color: "purple", 
      description: "Entrada o salida de inventario"
    },
    {
      icon: FiTruck,
      title: "Nuevo Proveedor",
      path: "/inventory/proveedores/new",
      color: "warning",
      description: "Agrega un proveedor al sistema"
    },
    {
      icon: FiDollarSign,
      title: "Ajustar Precios",
      path: "/inventory/precios",
      color: "pink",
      description: "Actualiza precios de materiales"
    },
    {
      icon: FiPieChart,
      title: "Ver Reportes",
      path: "/inventory/reports",
      color: "danger",
      description: "Consulta reportes y estadÃ­sticas"
    }
  ];

  // GuÃ­as y recursos
  const guides = {
    productos: [
      {
        icon: FiPackage,
        title: "GuÃ­a de Registro de Productos",
        description: "Aprende a registrar nuevos productos y categorÃ­as en el sistema de inventario."
      },
      {
        icon: FiClipboard,
        title: "GestiÃ³n de Lotes",
        description: "Conoce cÃ³mo administrar lotes y fechas de caducidad de forma eficiente."
      }
    ],
    movimientos: [
      {
        icon: FiActivity,
        title: "Registro de Movimientos",
        description: "GuÃ­a para el registro correcto de entradas, salidas y ajustes de inventario."
      },
      {
        icon: FiTool,
        title: "Conversiones de Unidades",
        description: "Aprende a configurar y utilizar las conversiones entre unidades de medida."
      }
    ],
    reportes: [
      {
        icon: FiGrid,
        title: "Reportes Personalizados",
        description: "Crea y personaliza reportes segÃºn tus necesidades especÃ­ficas."
      },
      {
        icon: FiFileText,
        title: "ExportaciÃ³n de Datos",
        description: "Exporta tus datos a diferentes formatos para su anÃ¡lisis externo."
      }
    ]
  };

  return (
    <div className={`space-y-5 ${className}`}>
      {/* TÃ­tulo y opciones de configuraciÃ³n */}
      <div className="flex items-center justify-between mb-3">
        <h2 className="text-lg font-semibold text-gray-800 flex items-center">
          <FiGrid className="mr-2 text-indigo-500" size={20} />
          Acciones RÃ¡pidas
        </h2>
        <button className="text-xs bg-gray-50 text-gray-600 hover:bg-gray-100 py-1.5 px-3 rounded-lg flex items-center font-medium transition-colors">
          <FiSettings className="mr-1.5" size={14} />
          Personalizar
        </button>
      </div>
      
      {/* Accesos rÃ¡pidos principales */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
        {quickAccesses.map((access, index) => (
          <QuickAccess 
            key={access.path}
            icon={access.icon} 
            title={access.title} 
            path={access.path} 
            color={access.color} 
            delay={0.1 * index}
            description={access.description}
          />
        ))}
      </div>
      
      {/* SecciÃ³n de guÃ­as y recursos */}
      <FadeInUp delay={0.4}>
        <div className="mt-6 bg-gradient-to-br from-indigo-50 to-blue-50 rounded-xl p-5 border border-indigo-100">
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-semibold text-indigo-800 flex items-center">
              <FiHelpCircle className="mr-2" size={18} />
              GuÃ­as y Recursos
            </h3>
            <div className="text-xs bg-white text-gray-600 rounded-lg border border-indigo-100 overflow-hidden flex">
              <button 
                onClick={() => setActiveGuideTab('productos')}
                className={`px-3 py-1.5 font-medium ${
                  activeGuideTab === 'productos' 
                    ? 'bg-indigo-600 text-white' 
                    : 'hover:bg-indigo-50'
                }`}
              >
                Productos
              </button>
              <button 
                onClick={() => setActiveGuideTab('movimientos')}
                className={`px-3 py-1.5 font-medium ${
                  activeGuideTab === 'movimientos' 
                    ? 'bg-indigo-600 text-white' 
                    : 'hover:bg-indigo-50'
                }`}
              >
                Movimientos
              </button>
              <button 
                onClick={() => setActiveGuideTab('reportes')}
                className={`px-3 py-1.5 font-medium ${
                  activeGuideTab === 'reportes' 
                    ? 'bg-indigo-600 text-white' 
                    : 'hover:bg-indigo-50'
                }`}
              >
                Reportes
              </button>
            </div>
          </div>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 mt-3">
            {guides[activeGuideTab].map((guide, index) => (
              <GuideCard
                key={index}
                icon={guide.icon}
                title={guide.title}
                description={guide.description}
              />
            ))}
          </div>
        </div>
      </FadeInUp>
    </div>
  );
};

// Componente para tarjetas de guÃ­a
const GuideCard = ({ icon: Icon, title, description }) => (
  <div className="bg-white rounded-lg p-4 border border-indigo-100 hover:shadow-md transition-all duration-300 group">
    <div className="flex items-center mb-2">
      <div className="p-2 rounded-lg bg-indigo-50 text-indigo-600 mr-3 group-hover:bg-indigo-600 group-hover:text-white transition-colors">
        <Icon size={16} />
      </div>
      <h4 className="font-semibold text-sm">{title}</h4>
    </div>
    <p className="text-xs text-gray-600">{description}</p>
    <div className="mt-3 flex justify-end">
      <button className="text-xs text-indigo-600 hover:underline font-medium flex items-center">
        Ver guÃ­a
        <svg className="w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </div>
);

export default AccionesTab;\n\n

=== ./inventario/components/dashboard/tabs/AlertasTab.jsx ===
import { useState } from 'react';
import { AlertList, FadeInUp } from '../';
import { 
  FiAlertTriangle, 
  FiBarChart2, 
  FiCalendar,
  FiFilter,
  FiCheckCircle,
  FiBell,
  FiClock,
  FiSettings
} from 'react-icons/fi';

/**
 * Componente para la pestaÃ±a de Alertas del Dashboard
 * 
 * @param {Object} props
 * @param {Array} props.lowStockItems - Elementos con bajo stock
 * @param {Array} props.expiringItems - Elementos prÃ³ximos a caducar
 * @param {Array} props.alerts - Alertas del sistema
 */
const AlertasTab = ({
  lowStockItems = [],
  expiringItems = [],
  alerts = []
}) => {
  const [activeFilter, setActiveFilter] = useState('all');
  const [alertStatus, setAlertStatus] = useState('active');
  
  // Filtrar alertas por tipo y estado
  const filteredLowStock = lowStockItems.filter(item => {
    if (activeFilter !== 'all' && activeFilter !== 'lowstock') return false;
    return true;
  });

  const filteredExpiring = expiringItems.filter(item => {
    if (activeFilter !== 'all' && activeFilter !== 'expiring') return false;
    return true;
  });

  const filteredAlerts = alerts.filter(alert => {
    if (activeFilter !== 'all' && activeFilter !== 'system') return false;
    if (alertStatus === 'active' && alert.estado === 'resuelta') return false;
    return true;
  });

  return (
    <div className="space-y-5">
      {/* Banner informativo */}
      <FadeInUp>
        <div className="bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-xl p-4 mb-5">
          <div className="flex items-start sm:items-center flex-col sm:flex-row gap-3 sm:gap-4">
            <div className="p-3 rounded-full bg-amber-100 text-amber-600 flex-shrink-0">
              <FiAlertTriangle size={22} />
            </div>
            <div className="flex-1">
              <h3 className="text-base font-semibold text-amber-800">Centro de Alertas</h3>
              <p className="text-sm text-amber-700 mt-1">
                AquÃ­ puedes ver y gestionar todas las alertas del sistema de inventario.
                MantÃ©n bajo control tu inventario atendiendo las alertas prioritarias.
              </p>
            </div>
            <button className="bg-white text-amber-600 hover:bg-amber-50 transition-colors border border-amber-200 rounded-lg px-3 py-1.5 text-sm font-medium flex items-center shadow-sm whitespace-nowrap">
              <FiSettings size={14} className="mr-1.5" />
              Configurar
            </button>
          </div>
        </div>
      </FadeInUp>
      
      {/* Filtros */}
      <FadeInUp delay={0.1}>
        <div className="flex flex-wrap gap-2 mb-4">
          <div className="bg-white rounded-lg shadow-sm p-1 flex">
            <button
              onClick={() => setActiveFilter('all')}
              className={`text-xs px-3 py-1.5 rounded-lg font-medium transition-colors
                ${activeFilter === 'all' 
                  ? 'bg-indigo-600 text-white' 
                  : 'text-gray-600 hover:bg-indigo-50'}`}
            >
              <FiBell className="mr-1.5 inline-block" size={12} />
              Todas
            </button>
            <button
              onClick={() => setActiveFilter('lowstock')}
              className={`text-xs px-3 py-1.5 rounded-lg font-medium transition-colors
                ${activeFilter === 'lowstock' 
                  ? 'bg-rose-600 text-white' 
                  : 'text-gray-600 hover:bg-rose-50'}`}
            >
              <FiBarChart2 className="mr-1.5 inline-block" size={12} />
              Bajo Stock
            </button>
            <button
              onClick={() => setActiveFilter('expiring')}
              className={`text-xs px-3 py-1.5 rounded-lg font-medium transition-colors
                ${activeFilter === 'expiring' 
                  ? 'bg-amber-500 text-white' 
                  : 'text-gray-600 hover:bg-amber-50'}`}
            >
              <FiCalendar className="mr-1.5 inline-block" size={12} />
              Por Caducar
            </button>
            <button
              onClick={() => setActiveFilter('system')}
              className={`text-xs px-3 py-1.5 rounded-lg font-medium transition-colors
                ${activeFilter === 'system' 
                  ? 'bg-violet-600 text-white' 
                  : 'text-gray-600 hover:bg-violet-50'}`}
            >
              <FiAlertTriangle className="mr-1.5 inline-block" size={12} />
              Sistema
            </button>
          </div>
          
          <div className="bg-white rounded-lg shadow-sm p-1 flex ml-auto">
            <button
              onClick={() => setAlertStatus('active')}
              className={`text-xs px-3 py-1.5 rounded-lg font-medium transition-colors
                ${alertStatus === 'active' 
                  ? 'bg-indigo-600 text-white' 
                  : 'text-gray-600 hover:bg-gray-50'}`}
            >
              Activas
            </button>
            <button
              onClick={() => setAlertStatus('all')}
              className={`text-xs px-3 py-1.5 rounded-lg font-medium transition-colors
                ${alertStatus === 'all' 
                  ? 'bg-indigo-600 text-white' 
                  : 'text-gray-600 hover:bg-gray-50'}`}
            >
              Todas
            </button>
          </div>
        </div>
      </FadeInUp>
      
      {/* Alertas de bajo stock */}
      {(activeFilter === 'all' || activeFilter === 'lowstock') && (
        <AlertList
          title="Productos con Bajo Stock"
          items={filteredLowStock}
          emptyMessage="No hay elementos con bajo stock"
          icon={FiBarChart2}
          color="danger"
          viewAllLink="/inventory/bajostock"
          delay={0.2}
          onItemClick={(item) => console.log('Ver detalles:', item)}
        />
      )}
      
      {/* Elementos por caducar */}
      {(activeFilter === 'all' || activeFilter === 'expiring') && (
        <AlertList
          title="Productos PrÃ³ximos a Caducar"
          items={filteredExpiring}
          emptyMessage="No hay elementos prÃ³ximos a caducar"
          icon={FiCalendar}
          color="warning"
          viewAllLink="/inventory/caducidad"
          delay={0.3}
          onItemClick={(item) => console.log('Ver detalles:', item)}
        />
      )}
      
      {/* Alertas del sistema */}
      {(activeFilter === 'all' || activeFilter === 'system') && (
        <AlertList
          title="Alertas del Sistema"
          items={filteredAlerts}
          emptyMessage="No hay alertas activas en el sistema"
          icon={FiAlertTriangle}
          color="purple"
          viewAllLink="/inventory/alertas"
          delay={0.4}
          onItemClick={(item) => console.log('Ver detalles:', item)}
        />
      )}
      
      {/* Panel de informaciÃ³n con mÃ©tricas */}
      <FadeInUp delay={0.5}>
        <div className="bg-white rounded-lg shadow-sm p-5 mt-6">
          <h3 className="text-base font-semibold mb-4 text-gray-700 flex items-center">
            <FiCheckCircle className="mr-2 text-indigo-500" />
            Resumen de Estado
          </h3>
          
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <div className="bg-indigo-50 rounded-lg p-4 border border-indigo-100">
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-xs text-indigo-600 font-medium">Total Alertas</p>
                  <h4 className="text-2xl font-bold text-indigo-700 mt-1">
                    {lowStockItems.length + expiringItems.length + alerts.length}
                  </h4>
                </div>
                <div className="p-2 bg-indigo-100 text-indigo-600 rounded-lg">
                  <FiBell size={18} />
                </div>
              </div>
              <div className="flex items-center mt-4">
                <div className="h-1.5 flex-1 bg-indigo-200 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-indigo-600 rounded-full" 
                    style={{ 
                      width: `${(lowStockItems.length/(lowStockItems.length + expiringItems.length + alerts.length)*100) || 0}%` 
                    }}
                  />
                </div>
                <span className="text-xs font-medium text-indigo-600 ml-2">
                  {lowStockItems.length}
                </span>
              </div>
            </div>
            
            <div className="bg-rose-50 rounded-lg p-4 border border-rose-100">
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-xs text-rose-600 font-medium">Bajo Stock</p>
                  <h4 className="text-2xl font-bold text-rose-700 mt-1">
                    {lowStockItems.length}
                  </h4>
                </div>
                <div className="p-2 bg-rose-100 text-rose-600 rounded-lg">
                  <FiBarChart2 size={18} />
                </div>
              </div>
              <p className="text-xs text-rose-600 mt-3 flex items-center">
                <FiClock className="mr-1" size={12} />
                Ãšltima alerta: {lowStockItems.length > 0 ? 'Hace 2 horas' : 'N/A'}
              </p>
            </div>
            
            <div className="bg-amber-50 rounded-lg p-4 border border-amber-100">
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-xs text-amber-600 font-medium">Por Caducar</p>
                  <h4 className="text-2xl font-bold text-amber-700 mt-1">
                    {expiringItems.length}
                  </h4>
                </div>
                <div className="p-2 bg-amber-100 text-amber-600 rounded-lg">
                  <FiCalendar size={18} />
                </div>
              </div>
              <p className="text-xs text-amber-600 mt-3 flex items-center">
                <FiClock className="mr-1" size={12} />
                PrÃ³xima caducidad: {expiringItems.length > 0 ? '2 dÃ­as' : 'N/A'}
              </p>
            </div>
          </div>
        </div>
      </FadeInUp>
    </div>
  );
};

export default AlertasTab;\n\n

=== ./inventario/components/dashboard/tabs/GraficosTab.jsx ===
import { useState } from 'react';
import { ChartCard, FadeInUp } from '../';
import { 
  FiBarChart2, 
  FiPieChart, 
  FiFilter, 
  FiRefreshCw,
  FiTrendingUp,
  FiCalendar,
  FiPackage,
  FiDownload,
  FiArrowUp,
  FiArrowDown
} from 'react-icons/fi';
import {
  AreaChart,
  Area,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend
} from 'recharts';
import { CHART_COLORS, CHART_GRADIENTS } from '../dashboardConstants';

/**
 * Componente para la pestaÃ±a de GrÃ¡ficos
 * 
 * @param {Object} props
 * @param {Array} props.stockMovementData - Datos para el grÃ¡fico de movimientos
 * @param {Array} props.categoryDistribution - Datos para el grÃ¡fico de categorÃ­as
 * @param {string} props.timeRange - Rango de tiempo seleccionado
 * @param {Function} props.setTimeRange - FunciÃ³n para cambiar el rango de tiempo
 */
const GraficosTab = ({
  stockMovementData = [],
  categoryDistribution = [],
  timeRange = '7d',
  setTimeRange
}) => {
  const [activeFilters, setActiveFilters] = useState({
    category: 'all',
    view: 'monthly',
    chartType: 'area'
  });

  // FunciÃ³n para actualizar filtros
  const updateFilter = (key, value) => {
    setActiveFilters(prev => ({ ...prev, [key]: value }));
  };

  // Selector de rango de tiempo
  const TimeRangeSelector = ({ className = "" }) => (
    <div className={`flex bg-gray-50 rounded-lg p-1 ${className}`}>
      {[
        { id: '7d', label: '7 dÃ­as' },
        { id: '30d', label: '30 dÃ­as' },
        { id: 'mes', label: 'Este mes' },
        { id: 'aÃ±o', label: 'Este aÃ±o' }
      ].map(option => (
        <button
          key={option.id}
          onClick={() => setTimeRange && setTimeRange(option.id)}
          className={`text-xs py-1.5 px-2.5 rounded-md transition-colors flex-1 font-medium
            ${timeRange === option.id 
              ? 'bg-white shadow-sm text-indigo-600' 
              : 'text-gray-600 hover:bg-gray-100'}`}
        >
          {option.label}
        </button>
      ))}
    </div>
  );

  // Botones de tipo de grÃ¡fico
  const ChartTypeSelector = ({ className = "" }) => (
    <div className={`flex bg-gray-50 rounded-lg p-1 ${className}`}>
      {[
        { id: 'area', label: 'Ãrea', icon: FiTrendingUp },
        { id: 'bar', label: 'Barras', icon: FiBarChart2 }
      ].map(option => {
        const Icon = option.icon;
        return (
          <button
            key={option.id}
            onClick={() => updateFilter('chartType', option.id)}
            className={`text-xs py-1.5 px-2.5 rounded-md transition-colors flex-1 font-medium flex items-center justify-center
              ${activeFilters.chartType === option.id 
                ? 'bg-white shadow-sm text-indigo-600' 
                : 'text-gray-600 hover:bg-gray-100'}`}
          >
            <Icon size={12} className="mr-1" />
            {option.label}
          </button>
        );
      })}
    </div>
  );

  return (
    <div className="space-y-5">
      {/* Panel de filtros */}
      <FadeInUp>
        <div className="bg-white p-4 rounded-xl shadow-sm mb-5">
          <h3 className="text-base font-semibold mb-3 flex items-center">
            <FiFilter className="mr-2 text-indigo-500" size={16} />
            Filtros para GrÃ¡ficos
          </h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-3">
            <select 
              className="text-sm border border-gray-200 rounded-lg p-2 bg-gray-50"
              value={activeFilters.category}
              onChange={e => updateFilter('category', e.target.value)}
            >
              <option value="all">Todas las categorÃ­as</option>
              <option value="lacteos">LÃ¡cteos</option>
              <option value="frescos">Frescos</option>
              <option value="secos">Secos</option>
              <option value="bebidas">Bebidas</option>
            </select>
            
            <TimeRangeSelector />
            
            <ChartTypeSelector />
            
            <div className="flex space-x-2">
              <button className="text-sm bg-indigo-600 text-white py-2 px-3 rounded-lg flex items-center justify-center flex-1 hover:bg-indigo-700 transition-colors">
                <FiFilter className="mr-1.5" size={14} />
                Aplicar
              </button>
              <button className="text-sm bg-white text-gray-700 border border-gray-200 py-2 px-3 rounded-lg flex items-center justify-center hover:bg-gray-50 transition-colors">
                <FiRefreshCw className="mr-1.5" size={14} />
                Reset
              </button>
            </div>
          </div>
        </div>
      </FadeInUp>

      {/* GrÃ¡ficos */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-5">
        {/* GrÃ¡fico de Movimientos */}
        <ChartCard 
          title="Movimiento de Inventario" 
          icon={FiBarChart2} 
          color="primary"
          delay={0.1}
          actionButtons={
            <button className="text-gray-400 hover:text-gray-600 p-1.5 rounded-full hover:bg-gray-50 transition-colors">
              <FiDownload size={16} />
            </button>
          }
        >
          <ResponsiveContainer width="100%" height="100%">
            {activeFilters.chartType === 'area' ? (
              <AreaChart
                data={stockMovementData}
                margin={{ top: 10, right: 10, left: 0, bottom: 10 }}
              >
                <defs>
                  <linearGradient id="colorEntradas" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor={CHART_GRADIENTS.entrada[0]} />
                    <stop offset="95%" stopColor={CHART_GRADIENTS.entrada[1]} />
                  </linearGradient>
                  <linearGradient id="colorSalidas" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor={CHART_GRADIENTS.salida[0]} />
                    <stop offset="95%" stopColor={CHART_GRADIENTS.salida[1]} />
                  </linearGradient>
                </defs>
                <CartesianGrid strokeDasharray="3 3" vertical={false} opacity={0.2} />
                <XAxis 
                  dataKey="name" 
                  axisLine={false} 
                  tickLine={false} 
                  tick={{ fontSize: 12, fill: '#64748b' }}
                />
                <YAxis 
                  axisLine={false} 
                  tickLine={false} 
                  tick={{ fontSize: 12, fill: '#64748b' }}
                  width={35}
                />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: 'white', 
                    borderRadius: '8px', 
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)', 
                    border: '1px solid #e2e8f0',
                    fontSize: '12px',
                    padding: '8px 12px'
                  }} 
                />
                <Legend 
                  iconSize={10} 
                  wrapperStyle={{ fontSize: '12px', paddingTop: '15px' }}
                  formatter={(value) => <span style={{ color: '#64748b' }}>{value}</span>}
                />
                <Area 
                  type="monotone" 
                  dataKey="entradas" 
                  stroke="#6366F1" 
                  fillOpacity={1} 
                  fill="url(#colorEntradas)" 
                  activeDot={{ r: 6, strokeWidth: 1, stroke: '#fff' }}
                  strokeWidth={2} 
                />
                <Area 
                  type="monotone" 
                  dataKey="salidas" 
                  stroke="#10B981" 
                  fillOpacity={1} 
                  fill="url(#colorSalidas)"
                  activeDot={{ r: 6, strokeWidth: 1, stroke: '#fff' }}
                  strokeWidth={2}
                />
              </AreaChart>
            ) : (
              <BarChart
                data={stockMovementData}
                margin={{ top: 10, right: 10, left: 0, bottom: 10 }}
              >
                <CartesianGrid strokeDasharray="3 3" vertical={false} opacity={0.2} />
                <XAxis 
                  dataKey="name" 
                  axisLine={false} 
                  tickLine={false} 
                  tick={{ fontSize: 12, fill: '#64748b' }}
                />
                <YAxis 
                  axisLine={false} 
                  tickLine={false} 
                  tick={{ fontSize: 12, fill: '#64748b' }}
                  width={35}
                />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: 'white', 
                    borderRadius: '8px', 
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)', 
                    border: '1px solid #e2e8f0',
                    fontSize: '12px',
                    padding: '8px 12px'
                  }}
                />
                <Legend 
                  iconSize={10} 
                  wrapperStyle={{ fontSize: '12px', paddingTop: '15px' }}
                  formatter={(value) => <span style={{ color: '#64748b' }}>{value}</span>}
                />
                <Bar 
                  dataKey="entradas" 
                  fill="#6366F1" 
                  radius={[4, 4, 0, 0]}
                  barSize={16}
                  name="Entradas"
                />
                <Bar 
                  dataKey="salidas" 
                  fill="#10B981" 
                  radius={[4, 4, 0, 0]}
                  barSize={16}
                  name="Salidas"
                />
              </BarChart>
            )}
          </ResponsiveContainer>
        </ChartCard>

        {/* GrÃ¡fico de DistribuciÃ³n */}
        <ChartCard 
          title="DistribuciÃ³n por CategorÃ­a" 
          icon={FiPieChart} 
          color="purple"
          delay={0.2}
          actionButtons={
            <button className="text-gray-400 hover:text-gray-600 p-1.5 rounded-full hover:bg-gray-50 transition-colors">
              <FiDownload size={16} />
            </button>
          }
        >
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={categoryDistribution}
                cx="50%"
                cy="50%"
                labelLine={false}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
              >
                {categoryDistribution.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />
                ))}
              </Pie>
              <Tooltip 
                formatter={(value) => [`${value} unidades`, 'Cantidad']}
                contentStyle={{ 
                  backgroundColor: 'white', 
                  borderRadius: '8px', 
                  boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)', 
                  border: '1px solid #e2e8f0',
                  fontSize: '12px',
                  padding: '8px 12px'
                }} 
              />
              <Legend 
                layout="horizontal" 
                verticalAlign="bottom" 
                align="center" 
                iconSize={8}
                wrapperStyle={{ fontSize: '12px', paddingTop: '10px' }}
              />
            </PieChart>
          </ResponsiveContainer>
        </ChartCard>
      </div>

      {/* SecciÃ³n de mÃ©tricas adicionales */}
      <FadeInUp delay={0.3}>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mt-3">
          <MetricCard 
            title="RotaciÃ³n de Inventario" 
            value="3.2x" 
            trend="up" 
            description="Trimestre actual"
            icon={FiRefreshCw}
            color="primary"
          />
          <MetricCard 
            title="DÃ­as de Inventario" 
            value="24.5" 
            trend="down" 
            description="Promedio mensual"
            icon={FiCalendar}
            color="success"
          />
          <MetricCard 
            title="UtilizaciÃ³n" 
            value="86%" 
            trend="up" 
            description="Capacidad actual"
            icon={FiPackage}
            color="warning"
          />
        </div>
      </FadeInUp>
    </div>
  );
};

// Componente para mÃ©tricas con tendencia
const MetricCard = ({ title, value, trend, description, icon: Icon, color = "primary" }) => {
  const colorClasses = {
    primary: "border-indigo-500 bg-indigo-50 text-indigo-500",
    success: "border-emerald-500 bg-emerald-50 text-emerald-500",
    warning: "border-amber-500 bg-amber-50 text-amber-500",
    danger: "border-rose-500 bg-rose-50 text-rose-500",
    purple: "border-violet-500 bg-violet-50 text-violet-500"
  };

  const borderColor = colorClasses[color]?.split(' ')[0] || colorClasses.primary.split(' ')[0];
  const bgColor = colorClasses[color]?.split(' ')[1] || colorClasses.primary.split(' ')[1];
  const textColor = colorClasses[color]?.split(' ')[2] || colorClasses.primary.split(' ')[2];

  return (
    <div className={`bg-white rounded-lg p-4 shadow-sm border-l-4 ${borderColor} hover:shadow-md transition-all duration-300 relative overflow-hidden`}>
      <div className="flex justify-between items-start">
        <div>
          <p className="text-gray-500 text-xs font-medium">{title}</p>
          <h3 className="text-2xl font-bold mt-1">{value}</h3>
          <p className="text-gray-400 text-xs mt-1">{description}</p>
        </div>
        <div className={`p-2.5 rounded-lg ${bgColor}`}>
          <Icon className={textColor} size={20} />
        </div>
      </div>

      {trend && (
        <div className={`absolute bottom-3 right-3 flex items-center ${
          trend === 'up' ? 'text-emerald-500' : 'text-rose-500'
        }`}>
          {trend === 'up' ? (
            <FiArrowUp size={12} className="mr-1" />
          ) : (
            <FiArrowDown size={12} className="mr-1" />
          )}
          <span className="text-xs font-medium">
            {trend === 'up' ? '+' : '-'}7.2%
          </span>
        </div>
      )}
    </div>
  );
};

export default GraficosTab;\n\n

=== ./inventario/components/dashboard/tabs/ProyeccionesTab.jsx ===
import React, { useState, useEffect } from 'react';
import axios from '@shared/utils/axiosConfig';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { format, addDays } from 'date-fns';
import { es } from 'date-fns/locale';

// Componentes compartidos
import StatCard from '../StatCard';
import ChartCard from '../ChartCard';
import RefreshButton from '../RefreshButton';
import FadeInUp from '../FadeInUp';

// Constantes y utilidades
const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658'];

const ProyeccionesTab = () => {
  // Estados
  const [proyecciones, setProyecciones] = useState([]);
  const [alertasCaducidad, setAlertasCaducidad] = useState([]);
  const [reabastecimiento, setReabastecimiento] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [detalleMateriaPrima, setDetalleMateriaPrima] = useState(null);
  const [showDetalleModal, setShowDetalleModal] = useState(false);
  
  // Estado para filtros
  const [filtro, setFiltro] = useState({
    fechaInicio: format(new Date(), 'yyyy-MM-dd'),
    fechaFin: format(addDays(new Date(), 30), 'yyyy-MM-dd'), // 30 dÃ­as por defecto
    materiaPrimaId: ''
  });
  
  // Efecto para cargar datos al montar o cambiar filtros
  useEffect(() => {
    cargarProyecciones();
  }, [filtro]);
  
  // FunciÃ³n para cargar proyecciones
  const cargarProyecciones = async () => {
    setLoading(true);
    try {
      // Obtener proyecciones generales
      const responseProyecciones = await axios.get('/api/inventory/proyecciones', {
        params: {
          fecha_inicio: filtro.fechaInicio,
          fecha_fin: filtro.fechaFin,
          id_materia_prima: filtro.materiaPrimaId || undefined
        }
      });
      
      // Obtener alertas de caducidad
      const responseAlertas = await axios.get('/api/inventory/proyecciones/caducidad', {
        params: {
          dias_alerta: 30
        }
      });
      
      // Obtener informe de reabastecimiento
      const responseReabastecimiento = await axios.get('/api/inventory/proyecciones/reabastecimiento', {
        params: {
          dias_proyeccion: 30,
          umbral_dias: 7
        }
      });
      
      setProyecciones(responseProyecciones.data.proyecciones || []);
      setAlertasCaducidad(responseAlertas.data.alertas_caducidad || []);
      setReabastecimiento(responseReabastecimiento.data.necesidades_reabastecimiento || []);
      setLoading(false);
    } catch (error) {
      console.error('Error al cargar proyecciones:', error);
      setError('Error al cargar las proyecciones de inventario');
      setLoading(false);
    }
  };
  
  // FunciÃ³n para cargar detalle de una materia prima especÃ­fica
  const cargarDetalleMateriaPrima = async (id) => {
    try {
      setLoading(true);
      const response = await axios.get(`/api/inventory/proyecciones/materia-prima/${id}`, {
        params: {
          dias: 30
        }
      });
      
      setDetalleMateriaPrima(response.data.proyeccion);
      setShowDetalleModal(true);
      setLoading(false);
    } catch (error) {
      console.error('Error al cargar detalle de materia prima:', error);
      setError('Error al cargar el detalle de la materia prima');
      setLoading(false);
    }
  };
  
  // FunciÃ³n para manejar cambios en filtros
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFiltro(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // FunciÃ³n para formatear fecha
  const formatDate = (dateString) => {
    try {
      return format(new Date(dateString), 'dd/MM/yyyy', { locale: es });
    } catch (e) {
      return 'Fecha invÃ¡lida';
    }
  };
  
  // Preparar datos para grÃ¡ficos
  const materialesEnRiesgo = proyecciones.filter(p => p.alerta_stock || p.cantidad_por_caducar > 0);
  const datosCaducidad = alertasCaducidad.slice(0, 5).map(a => ({
    name: a.nombre,
    value: a.lotes.reduce((total, lote) => total + lote.cantidad, 0)
  }));
  
  // Preparar datos para grÃ¡fico de proyecciÃ³n
  const datosProyeccion = proyecciones.map(p => ({
    name: p.nombre.length > 15 ? p.nombre.substring(0, 15) + '...' : p.nombre,
    stockActual: p.stock_actual,
    proyeccion: p.proyeccion_stock,
    stockMinimo: p.stock_minimo
  }));
  
  // Modal para detalle de materia prima
  const DetalleModal = () => (
    <div className={`fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 ${showDetalleModal ? 'block' : 'hidden'}`}>
      <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl p-6 max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-xl font-bold text-gray-800">
            Detalle de proyecciÃ³n: {detalleMateriaPrima?.nombre}
          </h3>
          <button onClick={() => setShowDetalleModal(false)} className="text-gray-500 hover:text-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        {detalleMateriaPrima && (
          <div className="space-y-6">
            {/* InformaciÃ³n general */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-blue-50 rounded-lg p-4">
                <p className="text-sm text-blue-500">Stock Actual</p>
                <p className="text-xl font-bold">
                  {detalleMateriaPrima.stock_actual} {detalleMateriaPrima.abreviacion_um}
                </p>
              </div>
              <div className="bg-amber-50 rounded-lg p-4">
                <p className="text-sm text-amber-500">Consumo Diario</p>
                <p className="text-xl font-bold">
                  {detalleMateriaPrima.consumo_promedio_diario.toFixed(2)} {detalleMateriaPrima.abreviacion_um}
                </p>
              </div>
              <div className={`${detalleMateriaPrima.dias_hasta_nivel_critico <= 7 ? 'bg-red-50' : 'bg-green-50'} rounded-lg p-4`}>
                <p className={`text-sm ${detalleMateriaPrima.dias_hasta_nivel_critico <= 7 ? 'text-red-500' : 'text-green-500'}`}>
                  DÃ­as hasta nivel crÃ­tico
                </p>
                <p className="text-xl font-bold">
                  {detalleMateriaPrima.dias_hasta_nivel_critico === null 
                    ? 'N/A' 
                    : detalleMateriaPrima.dias_hasta_nivel_critico}
                </p>
              </div>
            </div>
            
            {/* GrÃ¡fico de proyecciÃ³n diaria */}
            <div className="bg-white rounded-lg shadow p-4">
              <h4 className="text-lg font-medium mb-4">ProyecciÃ³n de Stock (30 dÃ­as)</h4>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={detalleMateriaPrima.proyeccion_diaria}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis 
                    dataKey="fecha" 
                    tickFormatter={(value) => {
                      const date = new Date(value);
                      return format(date, 'dd/MM');
                    }}
                    interval={5}
                  />
                  <YAxis />
                  <Tooltip 
                    formatter={(value) => [`${value} ${detalleMateriaPrima.abreviacion_um}`, '']}
                    labelFormatter={(value) => `Fecha: ${formatDate(value)}`}
                  />
                  <Legend />
                  <Line 
                    type="monotone" 
                    dataKey="stock_proyectado" 
                    name="Stock Proyectado" 
                    stroke="#2563eb" 
                    strokeWidth={2}
                    dot={{ r: 1 }}
                    activeDot={{ r: 5 }}
                  />
                  <Line 
                    type="monotone" 
                    dataKey="caducidad" 
                    name="Caducidad" 
                    stroke="#ef4444" 
                    strokeWidth={1}
                    strokeDasharray="5 5"
                  />
                  {/* LÃ­nea horizontal para stock mÃ­nimo */}
                  <Line 
                    type="monotone" 
                    dataKey={() => detalleMateriaPrima.stock_minimo} 
                    name="Stock MÃ­nimo" 
                    stroke="#f59e0b" 
                    strokeWidth={2}
                    strokeDasharray="3 3"
                    dot={false}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
            
            {/* Tabla de lotes */}
            {detalleMateriaPrima.lotes && detalleMateriaPrima.lotes.length > 0 && (
              <div className="bg-white rounded-lg shadow overflow-hidden">
                <h4 className="text-lg font-medium p-4 bg-gray-50 border-b">Lotes Disponibles</h4>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">CÃ³digo</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cantidad</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Caducidad</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">DÃ­as Restantes</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {detalleMateriaPrima.lotes.map((lote) => (
                        <tr key={lote.id}>
                          <td className="px-6 py-4 whitespace-nowrap">{lote.codigo}</td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            {lote.cantidad} {detalleMateriaPrima.abreviacion_um}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            {formatDate(lote.fecha_caducidad)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span 
                              className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                lote.dias_para_caducidad <= 7 
                                  ? 'bg-red-100 text-red-800' 
                                  : lote.dias_para_caducidad <= 30 
                                  ? 'bg-yellow-100 text-yellow-800' 
                                  : 'bg-green-100 text-green-800'
                              }`}
                            >
                              {lote.dias_para_caducidad}
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
  
  // Renderizado condicional para carga y error
  if (loading && proyecciones.length === 0) {
    return (
      <div className="flex justify-center items-center min-h-96">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }
  
  if (error && proyecciones.length === 0) {
    return (
      <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded shadow text-red-700">
        <p className="font-bold">Error</p>
        <p>{error}</p>
        <button 
          onClick={cargarProyecciones}
          className="mt-2 px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600"
        >
          Reintentar
        </button>
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">Proyecciones de Inventario</h2>
        <RefreshButton onClick={cargarProyecciones} loading={loading} />
      </div>
      
      {/* Filtros */}
      <div className="bg-white rounded-lg shadow p-4 flex flex-wrap gap-4 items-end">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Fecha Inicio</label>
          <input
            type="date"
            name="fechaInicio"
            value={filtro.fechaInicio}
            onChange={handleFilterChange}
            className="border rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Fecha Fin</label>
          <input
            type="date"
            name="fechaFin"
            value={filtro.fechaFin}
            onChange={handleFilterChange}
            className="border rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500"
          />
        </div>
        <button
          onClick={cargarProyecciones}
          className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700"
          disabled={loading}
        >
          {loading ? 'Cargando...' : 'Aplicar Filtros'}
        </button>
      </div>
      
      {/* Tarjetas de resumen */}
      <FadeInUp delay={0.1}>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <StatCard
            title="Materiales en Riesgo"
            value={materialesEnRiesgo.length}
            icon="warning"
            color="amber"
          />
          <StatCard
            title="PrÃ³ximos a Caducar"
            value={alertasCaducidad.reduce((total, mp) => 
              total + mp.lotes.filter(l => l.dias_restantes <= 30).length, 0)}
            icon="calendar"
            color="red"
          />
          <StatCard
            title="Necesitan Reabastecimiento"
            value={reabastecimiento.length}
            icon="shopping-cart"
            color="blue"
          />
        </div>
      </FadeInUp>
      
      {/* SecciÃ³n de grÃ¡ficos */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        {/* GrÃ¡fico de proyecciÃ³n de stock */}
        <FadeInUp delay={0.2}>
          <ChartCard title="ProyecciÃ³n de Stock">
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={datosProyeccion.slice(0, 10)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="stockActual" name="Stock Actual" fill="#8884d8" />
                <Bar dataKey="proyeccion" name="ProyecciÃ³n" fill="#82ca9d" />
                <Bar dataKey="stockMinimo" name="Stock MÃ­nimo" fill="#ffc658" />
              </BarChart>
            </ResponsiveContainer>
          </ChartCard>
        </FadeInUp>
        
        {/* GrÃ¡fico de caducidad */}
        <FadeInUp delay={0.3}>
          <ChartCard title="Materiales por Caducar">
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={datosCaducidad}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  nameKey="name"
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                >
                  {datosCaducidad.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip formatter={(value) => [`${value} unidades`, 'Cantidad']} />
              </PieChart>
            </ResponsiveContainer>
          </ChartCard>
        </FadeInUp>
      </div>
      
      {/* Lista de materiales */}
      <FadeInUp delay={0.4}>
        <div className="bg-white rounded-lg shadow overflow-hidden">
          <h3 className="p-4 bg-gray-50 border-b text-lg font-medium">Materiales con ProyecciÃ³n</h3>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Material</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock Actual</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ProyecciÃ³n</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Caducidad</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {proyecciones.map((item) => (
                  <tr key={item.id}>
                    <td className="px-6 py-4 whitespace-nowrap">{item.nombre}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {item.stock_actual} {item.abreviacion_um}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {item.proyeccion_stock} {item.abreviacion_um}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {item.cantidad_por_caducar > 0 ? (
                        <span className="text-red-600 font-medium">
                          {item.cantidad_por_caducar} {item.abreviacion_um}
                        </span>
                      ) : (
                        <span className="text-green-600">Sin caducidad prÃ³xima</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {item.alerta_stock ? (
                        <span className="px-2 py-1 text-xs rounded-full bg-red-100 text-red-800">
                          Alerta Stock
                        </span>
                      ) : (
                        <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                          Normal
                        </span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <button
                        onClick={() => cargarDetalleMateriaPrima(item.id)}
                        className="text-indigo-600 hover:text-indigo-900 px-2 py-1 text-sm"
                      >
                        Ver Detalle
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </FadeInUp>
      
      {/* Modal para detalle */}
      {showDetalleModal && detalleMateriaPrima && <DetalleModal />}
    </div>
  );
};

export default ProyeccionesTab;\n\n

=== ./inventario/components/dashboard/tabs/ResumenTab.jsx ===
import { StatCard, AlertList, ChartCard } from '../';
import {
  FiBox,
  FiTruck,
  FiActivity,
  FiAlertTriangle,
  FiBarChart2,
  FiCalendar
} from 'react-icons/fi';
import {
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend
} from 'recharts';
import { CHART_GRADIENTS } from '../dashboardConstants';

/**
 * Componente para la pestaÃ±a de Resumen del Dashboard
 * 
 * @param {Object} props
 * @param {Object} props.stats - EstadÃ­sticas a mostrar
 * @param {Array} props.lowStockItems - Elementos con bajo stock
 * @param {Array} props.expiringItems - Elementos prÃ³ximos a caducar
 * @param {string} props.timeRange - Rango de tiempo seleccionado
 * @param {Function} props.setTimeRange - FunciÃ³n para cambiar el rango de tiempo
 * @param {Array} props.stockMovementData - Datos para el grÃ¡fico de movimientos
 */
const ResumenTab = ({
  stats = {
    totalItems: 0,
    totalProviders: 0,
    movementsToday: 0,
    activeAlerts: 0
  },
  lowStockItems = [],
  expiringItems = [],
  timeRange = '7d',
  setTimeRange,
  stockMovementData = []
}) => {
  // Selector de rango de tiempo para el grÃ¡fico
  const TimeRangeSelector = ({ className = "" }) => (
    <div className={`flex bg-gray-50 rounded-lg p-1 ${className}`}>
      {[
        { id: '7d', label: '7 dÃ­as' },
        { id: '30d', label: '30 dÃ­as' },
        { id: 'mes', label: 'Este mes' },
        { id: 'aÃ±o', label: 'Este aÃ±o' }
      ].map(option => (
        <button
          key={option.id}
          onClick={() => setTimeRange && setTimeRange(option.id)}
          className={`text-xs py-1.5 px-2.5 rounded-md transition-colors flex-1 font-medium
            ${timeRange === option.id 
              ? 'bg-white shadow-sm text-indigo-600' 
              : 'text-gray-600 hover:bg-gray-100'}`}
        >
          {option.label}
        </button>
      ))}
    </div>
  );

  return (
    <div className="space-y-5">
      {/* Tarjetas de estadÃ­sticas */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-5">
        <StatCard 
          icon={FiBox} 
          title="Materias Primas" 
          value={stats.totalItems} 
          color="primary"
          trend="up"
          percent="5.2"
          delay={0.1}
        />
        <StatCard 
          icon={FiTruck} 
          title="Proveedores" 
          value={stats.totalProviders} 
          color="success"
          delay={0.2}
        />
        <StatCard 
          icon={FiActivity} 
          title="Movimientos Hoy" 
          value={stats.movementsToday} 
          color="purple"
          trend="up"
          percent="12.3"
          delay={0.3}
        />
        <StatCard 
          icon={FiAlertTriangle} 
          title="Alertas Activas" 
          value={stats.activeAlerts} 
          color="warning"
          trend="down"
          percent="3.1"
          delay={0.4}
        />
      </div>

      {/* GrÃ¡fico resumen de movimientos */}
      <ChartCard 
        title="Movimiento de Inventario" 
        icon={FiBarChart2} 
        color="primary"
        delay={0.5}
        actionButtons={
          <TimeRangeSelector className="mr-2" />
        }
      >
        <ResponsiveContainer width="100%" height="100%">
          <AreaChart
            data={stockMovementData}
            margin={{ top: 10, right: 10, left: 0, bottom: 10 }}
          >
            <defs>
              <linearGradient id="colorEntradas" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor={CHART_GRADIENTS.entrada[0]} />
                <stop offset="95%" stopColor={CHART_GRADIENTS.entrada[1]} />
              </linearGradient>
              <linearGradient id="colorSalidas" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor={CHART_GRADIENTS.salida[0]} />
                <stop offset="95%" stopColor={CHART_GRADIENTS.salida[1]} />
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="3 3" vertical={false} opacity={0.2} />
            <XAxis 
              dataKey="name" 
              axisLine={false} 
              tickLine={false} 
              tick={{ fontSize: 12, fill: '#64748b' }}
            />
            <YAxis 
              axisLine={false} 
              tickLine={false} 
              tick={{ fontSize: 12, fill: '#64748b' }}
              width={35}
            />
            <Tooltip 
              contentStyle={{ 
                backgroundColor: 'white', 
                borderRadius: '8px', 
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)', 
                border: '1px solid #e2e8f0',
                fontSize: '12px',
                padding: '8px 12px'
              }} 
            />
            <Legend 
              iconSize={10} 
              wrapperStyle={{ fontSize: '12px', paddingTop: '15px' }}
              formatter={(value) => <span style={{ color: '#64748b' }}>{value}</span>}
            />
            <Area 
              type="monotone" 
              dataKey="entradas" 
              stroke="#6366F1" 
              fillOpacity={1} 
              fill="url(#colorEntradas)" 
              activeDot={{ r: 6, strokeWidth: 1, stroke: '#fff' }}
              strokeWidth={2} 
            />
            <Area 
              type="monotone" 
              dataKey="salidas" 
              stroke="#10B981" 
              fillOpacity={1} 
              fill="url(#colorSalidas)"
              activeDot={{ r: 6, strokeWidth: 1, stroke: '#fff' }}
              strokeWidth={2}
            />
          </AreaChart>
        </ResponsiveContainer>
      </ChartCard>

      {/* Listas de alertas y problemas */}
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-5">
        <AlertList
          title="Bajo Stock"
          items={lowStockItems}
          emptyMessage="No hay elementos con bajo stock"
          icon={FiBarChart2}
          color="danger"
          viewAllLink="/inventory/bajostock"
          delay={0.6}
        />
        
        <AlertList
          title="PrÃ³ximos a Caducar"
          items={expiringItems}
          emptyMessage="No hay elementos prÃ³ximos a caducar"
          icon={FiCalendar}
          color="warning"
          viewAllLink="/inventory/caducidad"
          delay={0.7}
        />
      </div>
    </div>
  );
};

export default ResumenTab;\n\n

=== ./inventario/components/index.js ===
// Exportar todos los componentes de inventario/components
\n\n

=== ./inventario/hooks/index.js ===
// Exportar todos los componentes de inventario/hooks
\n\n

=== ./inventario/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n

=== ./inventario/pages/Alertas.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiAlertTriangle, 
  FiEye, 
  FiEyeOff, 
  FiFilter, 
  FiX, 
  FiCheck, 
  FiCheckSquare, 
  FiInfo 
} from 'react-icons/fi';
import {
  getAllAlertas,
  getAlertaById,
  getAlertasPendientes,
  marcarComoLeida,
  marcarTodasComoLeidas,
  getAlertasPorTipo,
  getResumenAlertas
} from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const tipoBadgeColors = {
  'stock_bajo': 'red',
  'caducidad': 'amber',
  'vencimiento_proveedor': 'purple',
  'ajuste_requerido': 'blue'
};

const tiposAlerta = [
  { id: 'stock_bajo', label: 'Bajo Stock', icon: FiAlertTriangle },
  { id: 'caducidad', label: 'Caducidad', icon: FiAlertTriangle },
  { id: 'vencimiento_proveedor', label: 'Vencimiento', icon: FiAlertTriangle },
  { id: 'ajuste_requerido', label: 'Ajuste', icon: FiAlertTriangle }
];

const Alertas = () => {
  const [alertas, setAlertas] = useState([]);
  const [resumen, setResumen] = useState({});
  const [selectedAlerta, setSelectedAlerta] = useState(null);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [activeFilter, setActiveFilter] = useState('');
  const [showLeidas, setShowLeidas] = useState(false);
  const [refreshTrigger, setRefreshTrigger] = useState(0);

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      // Determinar quÃ© endpoint usar segÃºn filtros
      let alertasData;
      if (activeFilter) {
        alertasData = await getAlertasPorTipo(activeFilter);
      } else if (!showLeidas) {
        alertasData = await getAlertasPendientes();
      } else {
        alertasData = await getAllAlertas({ leida: showLeidas ? undefined : 'false' });
      }
      
      // Obtener resumen para mostrar contadores
      const resumenData = await getResumenAlertas();
      
      setAlertas(alertasData);
      setResumen(resumenData);
    } catch (error) {
      console.error('Error al cargar alertas:', error);
      toast.error('Error al cargar las alertas');
    } finally {
      setLoading(false);
    }
  }, [activeFilter, showLeidas, refreshTrigger]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Obtener detalles de una alerta
  const handleViewDetails = async (alerta) => {
    try {
      setLoading(true);
      // Si la alerta no tiene todos los datos necesarios, obtenerlos
      if (!alerta.materiaPrima || !alerta.usuarioDestinatario) {
        const alertaDetalle = await getAlertaById(alerta.id);
        setSelectedAlerta(alertaDetalle);
      } else {
        setSelectedAlerta(alerta);
      }
      setIsDetailModalOpen(true);
    } catch (error) {
      console.error('Error al obtener detalles de la alerta:', error);
      toast.error('Error al obtener detalles de la alerta');
    } finally {
      setLoading(false);
    }
  };

  // Marcar alerta como leÃ­da
  const handleMarkAsRead = async (alerta, event) => {
    event.stopPropagation(); // Evitar que se abra el modal de detalles
    try {
      await marcarComoLeida(alerta.id);
      toast.success('Alerta marcada como leÃ­da');
      // Refrescar datos
      setRefreshTrigger(prev => prev + 1);
    } catch (error) {
      console.error('Error al marcar alerta como leÃ­da:', error);
      toast.error('Error al marcar la alerta como leÃ­da');
    }
  };

  // Marcar todas las alertas como leÃ­das
  const handleMarkAllAsRead = async () => {
    try {
      await marcarTodasComoLeidas(activeFilter || undefined);
      toast.success('Todas las alertas han sido marcadas como leÃ­das');
      // Refrescar datos
      setRefreshTrigger(prev => prev + 1);
    } catch (error) {
      console.error('Error al marcar todas las alertas como leÃ­das:', error);
      toast.error('Error al marcar todas las alertas como leÃ­das');
    }
  };

  // Formatear fecha
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('es-ES', { 
      day: '2-digit', 
      month: '2-digit', 
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Calcular tiempo transcurrido
  const getTimeAgo = (dateString) => {
    const now = new Date();
    const date = new Date(dateString);
    const diffMs = now - date;
    
    // Convertir a diferentes unidades de tiempo
    const diffSecs = Math.floor(diffMs / 1000);
    const diffMins = Math.floor(diffSecs / 60);
    const diffHours = Math.floor(diffMins / 60);
    const diffDays = Math.floor(diffHours / 24);
    
    if (diffDays > 0) {
      return `hace ${diffDays} dÃ­a${diffDays !== 1 ? 's' : ''}`;
    } else if (diffHours > 0) {
      return `hace ${diffHours} hora${diffHours !== 1 ? 's' : ''}`;
    } else if (diffMins > 0) {
      return `hace ${diffMins} minuto${diffMins !== 1 ? 's' : ''}`;
    } else {
      return 'ahora mismo';
    }
  };

  if (loading && !alertas.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Alertas del Sistema</h1>
        <Button
          className="flex items-center gap-2"
          onClick={handleMarkAllAsRead}
          disabled={alertas.filter(a => !a.leida).length === 0}
        >
          <FiCheckSquare size={18} /> Marcar Todas como LeÃ­das
        </Button>
      </div>

      {/* Resumen y filtros */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <div className="mb-4">
          <h2 className="text-lg font-medium text-gray-700 mb-2">Resumen de Alertas</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {tiposAlerta.map(tipo => {
              const tipoStats = resumen[tipo.id] || { total: 0, leidas: 0, no_leidas: 0 };
              return (
                <div 
                  key={tipo.id} 
                  className={`p-4 rounded-lg border ${
                    activeFilter === tipo.id 
                      ? `border-${tipoBadgeColors[tipo.id]}-500 bg-${tipoBadgeColors[tipo.id]}-50` 
                      : 'border-gray-200'
                  }`}
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <p className="text-sm text-gray-500">{tipo.label}</p>
                      <p className="text-xl font-semibold">{tipoStats.total || 0}</p>
                    </div>
                    <tipo.icon size={20} className={`text-${tipoBadgeColors[tipo.id]}-500`} />
                  </div>
                  <div className="flex justify-between mt-2 text-sm">
                    <span className="text-gray-500">No leÃ­das: {tipoStats.no_leidas || 0}</span>
                    <span className="text-gray-500">LeÃ­das: {tipoStats.leidas || 0}</span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
        
        <div className="flex flex-wrap gap-3">
          {/* Filtros por tipo */}
          {tiposAlerta.map(tipo => (
            <button
              key={tipo.id}
              className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
                activeFilter === tipo.id 
                  ? `bg-${tipoBadgeColors[tipo.id]}-100 text-${tipoBadgeColors[tipo.id]}-800 border border-${tipoBadgeColors[tipo.id]}-200` 
                  : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
              }`}
              onClick={() => setActiveFilter(activeFilter === tipo.id ? '' : tipo.id)}
            >
              <FiFilter size={16} />
              {tipo.label}
              {activeFilter === tipo.id && <FiX size={16} />}
            </button>
          ))}
          
          {/* Toggle para mostrar leÃ­das/no leÃ­das */}
          <button
            className={`flex items-center gap-1 px-3 py-2 rounded-lg ml-auto ${
              showLeidas 
                ? 'bg-green-100 text-green-800 border border-green-200' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setShowLeidas(!showLeidas)}
          >
            {showLeidas ? <FiEye size={16} /> : <FiEyeOff size={16} />}
            {showLeidas ? 'Mostrar Todas' : 'Solo No LeÃ­das'}
          </button>
        </div>
      </div>

      {/* Lista de alertas */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Tipo</TableHead>
              <TableHead>Mensaje</TableHead>
              <TableHead>Fecha</TableHead>
              <TableHead>Estado</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {alertas.length === 0 ? (
              <TableRow>
                <TableCell colSpan={5} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiInfo size={40} className="mb-2 text-gray-300" />
                    <p>No hay alertas {!showLeidas ? "sin leer" : ""} {activeFilter ? `de tipo ${activeFilter}` : ""}</p>
                    {(activeFilter || !showLeidas) && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={() => {
                          setActiveFilter('');
                          setShowLeidas(true);
                        }}
                      >
                        Ver todas las alertas
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              alertas.map(alerta => (
                <TableRow 
                  key={alerta.id}
                  className={`cursor-pointer ${!alerta.leida ? 'bg-blue-50' : ''} hover:bg-gray-50`}
                  onClick={() => handleViewDetails(alerta)}
                >
                  <TableCell>
                    <Badge color={tipoBadgeColors[alerta.tipo_alerta] || 'gray'}>
                      {tiposAlerta.find(t => t.id === alerta.tipo_alerta)?.label || alerta.tipo_alerta}
                    </Badge>
                  </TableCell>
                  <TableCell className="max-w-xs truncate">
                    {alerta.mensaje}
                  </TableCell>
                  <TableCell>
                    <div className="flex flex-col">
                      <span>{formatDate(alerta.fecha_alerta)}</span>
                      <span className="text-xs text-gray-500">{getTimeAgo(alerta.fecha_alerta)}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    {alerta.leida ? (
                      <Badge color="green">LeÃ­da</Badge>
                    ) : (
                      <Badge color="blue">Sin leer</Badge>
                    )}
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <button
                        onClick={(e) => handleViewDetails(alerta)}
                        className="p-1 text-blue-600 hover:text-blue-800"
                        title="Ver detalles"
                      >
                        <FiInfo size={18} />
                      </button>
                      {!alerta.leida && (
                        <button
                          onClick={(e) => handleMarkAsRead(alerta, e)}
                          className="p-1 text-green-600 hover:text-green-800"
                          title="Marcar como leÃ­da"
                        >
                          <FiCheck size={18} />
                        </button>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de detalles */}
      {selectedAlerta && (
        <Modal
          isOpen={isDetailModalOpen}
          onClose={() => setIsDetailModalOpen(false)}
          title="Detalles de la Alerta"
          maxWidth="md"
        >
          <div className="space-y-4 py-2">
            <div className="flex justify-between items-start">
              <Badge 
                color={tipoBadgeColors[selectedAlerta.tipo_alerta] || 'gray'}
                className="text-sm px-3 py-1"
              >
                {tiposAlerta.find(t => t.id === selectedAlerta.tipo_alerta)?.label || selectedAlerta.tipo_alerta}
              </Badge>
              
              <div>
                {selectedAlerta.leida ? (
                  <span className="flex items-center text-sm text-green-600">
                    <FiCheck size={16} className="mr-1" /> 
                    LeÃ­da {selectedAlerta.fecha_lectura ? `el ${formatDate(selectedAlerta.fecha_lectura)}` : ''}
                  </span>
                ) : (
                  <span className="flex items-center text-sm text-blue-600">
                    <FiEye size={16} className="mr-1" /> Sin leer
                  </span>
                )}
              </div>
            </div>
            
            <div className="p-4 bg-gray-50 rounded-lg">
              <h3 className="font-medium text-gray-800 mb-1">Mensaje</h3>
              <p className="text-gray-700">{selectedAlerta.mensaje}</p>
            </div>
            
            {selectedAlerta.materiaPrima && (
              <div className="p-4 bg-gray-50 rounded-lg">
                <h3 className="font-medium text-gray-800 mb-1">Materia Prima Relacionada</h3>
                <p className="text-gray-700">{selectedAlerta.materiaPrima.nombre}</p>
              </div>
            )}
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h3 className="font-medium text-gray-800 mb-1">Fecha de Alerta</h3>
                <p className="text-gray-700">{formatDate(selectedAlerta.fecha_alerta)}</p>
                <p className="text-sm text-gray-500">{getTimeAgo(selectedAlerta.fecha_alerta)}</p>
              </div>
              
              {selectedAlerta.usuarioDestinatario && (
                <div>
                  <h3 className="font-medium text-gray-800 mb-1">Destinatario</h3>
                  <p className="text-gray-700">{selectedAlerta.usuarioDestinatario.nombre}</p>
                </div>
              )}
            </div>
            
            <div className="flex justify-end gap-3 pt-2 mt-4">
              {!selectedAlerta.leida && (
                <Button
                  onClick={async () => {
                    await handleMarkAsRead(selectedAlerta, { stopPropagation: () => {} });
                    setIsDetailModalOpen(false);
                  }}
                >
                  Marcar como LeÃ­da
                </Button>
              )}
              <Button
                variant="outline"
                onClick={() => setIsDetailModalOpen(false)}
              >
                Cerrar
              </Button>
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
};

export default Alertas;\n\n

=== ./inventario/pages/Conversiones.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiEdit2, 
  FiTrash2, 
  FiPlus, 
  FiArrowRight, 
  FiFilter, 
  FiX, 
  FiRefreshCw,
  FiAlertTriangle
} from 'react-icons/fi';
import { MdCalculate } from 'react-icons/md';
import {
  getAllConversiones,
  getConversionById,
  createConversion,
  updateConversion,
  deleteConversion,
  getAllUnits,
  getConversionesDisponibles,
  convertirCantidad
} from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const tipoBadgeColors = {
  masa: 'blue',
  volumen: 'green',
  unidad: 'purple',
  longitud: 'amber',
  area: 'indigo'
};

const Conversiones = () => {
  const [conversiones, setConversiones] = useState([]);
  const [unidadesMedida, setUnidadesMedida] = useState([]);
  const [unidadesFiltradas, setUnidadesFiltradas] = useState([]);
  const [selectedConversion, setSelectedConversion] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isCalculatorModalOpen, setIsCalculatorModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filtroTipo, setFiltroTipo] = useState('');
  const [formData, setFormData] = useState({
    id_unidad_origen: '',
    id_unidad_destino: '',
    factor_conversion: ''
  });
  const [calculatorData, setCalculatorData] = useState({
    cantidad: 1,
    id_unidad_origen: '',
    id_unidad_destino: '',
    resultado: null
  });

  const tiposUnidad = [
    { id: 'masa', label: 'Masa' },
    { id: 'volumen', label: 'Volumen' },
    { id: 'unidad', label: 'Unidad' },
    { id: 'longitud', label: 'Longitud' },
    { id: 'area', label: 'Ãrea' }
  ];

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    setError(null);
    
    try {
      const promises = [getAllConversiones(), getAllUnits()];
      const results = await Promise.allSettled(promises);
      
      // Revisar resultado de conversiones
      if (results[0].status === 'fulfilled') {
        setConversiones(results[0].value);
      } else {
        console.error('Error al cargar conversiones:', results[0].reason);
        toast.error('Error al cargar las conversiones');
        setConversiones([]);
      }
      
      // Revisar resultado de unidades
      if (results[1].status === 'fulfilled') {
        const unitsData = results[1].value;
        setUnidadesMedida(unitsData);
        
        // Si hay un filtro activo, aplicarlo a las unidades
        if (filtroTipo) {
          setUnidadesFiltradas(unitsData.filter(unidad => unidad.tipo === filtroTipo));
        } else {
          setUnidadesFiltradas(unitsData);
        }
      } else {
        console.error('Error al cargar unidades de medida:', results[1].reason);
        toast.error('Error al cargar las unidades de medida');
        setUnidadesMedida([]);
        setUnidadesFiltradas([]);
      }
      
      // Si ambos fallan, mostrar error general
      if (results[0].status === 'rejected' && results[1].status === 'rejected') {
        setError('Error de conexiÃ³n al servidor. Por favor, intente nuevamente mÃ¡s tarde.');
      }
    } catch (error) {
      console.error('Error general al cargar datos:', error);
      toast.error('Error de conexiÃ³n con el servidor');
      setError('Error de conexiÃ³n al servidor. Por favor, intente nuevamente mÃ¡s tarde.');
    } finally {
      setLoading(false);
    }
  }, [filtroTipo]);

  // FunciÃ³n para reintentar la carga de datos
  const handleRetry = () => {
    fetchData();
  };

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Filtrar conversiones
  const filteredConversiones = conversiones
    .filter(conversion => {
      // Filtro por tipo
      if (filtroTipo) {
        return (
          conversion.unidadOrigen?.tipo === filtroTipo && 
          conversion.unidadDestino?.tipo === filtroTipo
        );
      }
      return true;
    })
    .sort((a, b) => {
      // Ordenar por tipo y luego por nombres
      if (a.unidadOrigen?.tipo !== b.unidadOrigen?.tipo) {
        return a.unidadOrigen?.tipo.localeCompare(b.unidadOrigen?.tipo);
      }
      return a.unidadOrigen?.nombre.localeCompare(b.unidadOrigen?.nombre);
    });

  // Manejadores de eventos para el formulario
  const handleOpenModal = (conversion = null) => {
    if (conversion) {
      setSelectedConversion(conversion);
      setFormData({
        id_unidad_origen: conversion.id_unidad_origen,
        id_unidad_destino: conversion.id_unidad_destino,
        factor_conversion: conversion.factor_conversion
      });
    } else {
      setSelectedConversion(null);
      setFormData({
        id_unidad_origen: unidadesFiltradas.length > 0 ? unidadesFiltradas[0].id : '',
        id_unidad_destino: unidadesFiltradas.length > 1 ? unidadesFiltradas[1].id : '',
        factor_conversion: ''
      });
    }
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCalculatorChange = (e) => {
    const { name, value } = e.target;
    setCalculatorData(prev => ({
      ...prev,
      [name]: value,
      resultado: null // Resetear resultado al cambiar algÃºn valor
    }));
  };

  const handleConvert = async () => {
    try {
      if (!calculatorData.cantidad || !calculatorData.id_unidad_origen || !calculatorData.id_unidad_destino) {
        toast.error('Todos los campos son requeridos para realizar la conversiÃ³n');
        return;
      }

      const data = {
        cantidad: Number(calculatorData.cantidad),
        id_unidad_origen: Number(calculatorData.id_unidad_origen),
        id_unidad_destino: Number(calculatorData.id_unidad_destino)
      };

      const response = await convertirCantidad(data);
      setCalculatorData(prev => ({
        ...prev,
        resultado: response.cantidad_convertida
      }));

    } catch (error) {
      console.error('Error al convertir cantidad:', error);
      toast.error(error.response?.data?.error || 'Error al realizar la conversiÃ³n');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Validar que no sean la misma unidad
      if (formData.id_unidad_origen === formData.id_unidad_destino) {
        toast.error('La unidad de origen y destino no pueden ser iguales');
        return;
      }

      // Validar tipo de unidades iguales
      const unidadOrigen = unidadesMedida.find(u => u.id === Number(formData.id_unidad_origen));
      const unidadDestino = unidadesMedida.find(u => u.id === Number(formData.id_unidad_destino));

      if (unidadOrigen.tipo !== unidadDestino.tipo) {
        toast.error('Las unidades deben ser del mismo tipo para poder convertir entre ellas');
        return;
      }

      // Convertir valores a nÃºmeros
      const conversionData = {
        id_unidad_origen: Number(formData.id_unidad_origen),
        id_unidad_destino: Number(formData.id_unidad_destino),
        factor_conversion: Number(formData.factor_conversion)
      };

      if (selectedConversion) {
        await updateConversion(
          selectedConversion.id_unidad_origen, 
          selectedConversion.id_unidad_destino, 
          conversionData
        );
        toast.success('ConversiÃ³n actualizada correctamente');
      } else {
        await createConversion(conversionData);
        toast.success('ConversiÃ³n creada correctamente');
      }
      
      setIsModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al guardar conversiÃ³n:', error);
      
      if (error.response?.data?.error) {
        toast.error(error.response.data.error);
      } else {
        toast.error('Error al guardar la conversiÃ³n');
      }
    }
  };

  const handleOpenDeleteModal = (conversion) => {
    setSelectedConversion(conversion);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    try {
      await deleteConversion(
        selectedConversion.id_unidad_origen, 
        selectedConversion.id_unidad_destino
      );
      toast.success('ConversiÃ³n eliminada correctamente');
      setIsDeleteModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al eliminar conversiÃ³n:', error);
      toast.error(error.response?.data?.error || 'Error al eliminar la conversiÃ³n');
    }
  };

  const handleFilterByTipo = (tipo) => {
    if (filtroTipo === tipo) {
      setFiltroTipo('');
      setUnidadesFiltradas(unidadesMedida);
    } else {
      setFiltroTipo(tipo);
      setUnidadesFiltradas(unidadesMedida.filter(unidad => unidad.tipo === tipo));
    }
  };

  const handleOpenCalculator = () => {
    setCalculatorData({
      cantidad: 1,
      id_unidad_origen: unidadesMedida.length > 0 ? unidadesMedida[0].id : '',
      id_unidad_destino: unidadesMedida.length > 1 ? unidadesMedida[1].id : '',
      resultado: null
    });
    setIsCalculatorModalOpen(true);
  };

  if (loading && !conversiones.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">
          Conversiones entre Unidades
        </h1>
        <div className="flex gap-2">
          <Button
            variant="outline"
            className="flex items-center gap-2"
            onClick={handleOpenCalculator}
          >
            <MdCalculate size={18} /> Calculadora
          </Button>
          <Button
            className="flex items-center gap-2"
            onClick={() => handleOpenModal()}
          >
            <FiPlus size={18} /> Agregar ConversiÃ³n
          </Button>
        </div>
      </div>

      {/* Filtros */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <h2 className="text-sm font-medium text-gray-700 mb-3">Filtrar por tipo de unidad:</h2>
        <div className="flex flex-wrap gap-2">
          {tiposUnidad.map(tipo => (
            <button
              key={tipo.id}
              className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
                filtroTipo === tipo.id 
                  ? `bg-${tipoBadgeColors[tipo.id]}-100 text-${tipoBadgeColors[tipo.id]}-800 border border-${tipoBadgeColors[tipo.id]}-200` 
                  : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
              }`}
              onClick={() => handleFilterByTipo(tipo.id)}
            >
              <FiFilter size={16} />
              {tipo.label}
              {filtroTipo === tipo.id && <FiX size={16} />}
            </button>
          ))}
        </div>
      </div>

      {/* Tabla de conversiones */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Tipo</TableHead>
              <TableHead>Unidad Origen</TableHead>
              <TableHead></TableHead>
              <TableHead>Unidad Destino</TableHead>
              <TableHead>Factor de ConversiÃ³n</TableHead>
              <TableHead>Equivalencia</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredConversiones.length === 0 ? (
              <TableRow>
                <TableCell colSpan={7} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiRefreshCw size={40} className="mb-2 text-gray-300" />
                    <p>No se encontraron conversiones</p>
                    {filtroTipo && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={() => setFiltroTipo('')}
                      >
                        Ver todas las conversiones
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredConversiones.map(conversion => (
                <TableRow key={`${conversion.id_unidad_origen}-${conversion.id_unidad_destino}`}>
                  <TableCell>
                    <Badge color={tipoBadgeColors[conversion.unidadOrigen?.tipo || 'gray']}>
                      {conversion.unidadOrigen?.tipo?.charAt(0).toUpperCase() + conversion.unidadOrigen?.tipo?.slice(1) || 'N/A'}
                    </Badge>
                  </TableCell>
                  <TableCell className="font-medium">
                    {conversion.unidadOrigen?.nombre || 'N/A'} 
                    <span className="text-gray-500 ml-1">({conversion.unidadOrigen?.abreviatura || 'N/A'})</span>
                  </TableCell>
                  <TableCell className="text-center">
                    <FiArrowRight className="inline-block text-gray-400" />
                  </TableCell>
                  <TableCell className="font-medium">
                    {conversion.unidadDestino?.nombre || 'N/A'} 
                    <span className="text-gray-500 ml-1">({conversion.unidadDestino?.abreviatura || 'N/A'})</span>
                  </TableCell>
                  <TableCell className="font-mono">
                    {parseFloat(conversion.factor_conversion).toFixed(6)}
                  </TableCell>
                  <TableCell>
                    <span className="text-gray-600">
                      1 {conversion.unidadOrigen?.abreviatura} = {parseFloat(conversion.factor_conversion).toFixed(3)} {conversion.unidadDestino?.abreviatura}
                    </span>
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleOpenModal(conversion)}
                        className="p-1 text-blue-600 hover:text-blue-800"
                        title="Editar"
                      >
                        <FiEdit2 size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenDeleteModal(conversion)}
                        className="p-1 text-red-600 hover:text-red-800"
                        title="Eliminar"
                      >
                        <FiTrash2 size={18} />
                      </button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creaciÃ³n/ediciÃ³n */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={selectedConversion ? 'Editar ConversiÃ³n' : 'Nueva ConversiÃ³n'}
        maxWidth="md"
      >
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Unidad de Origen <span className="text-red-500">*</span>
                </label>
                <select
                  name="id_unidad_origen"
                  required
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.id_unidad_origen}
                  onChange={handleChange}
                  disabled={selectedConversion !== null}
                >
                  <option value="">Seleccionar unidad origen</option>
                  {unidadesFiltradas.map(unidad => (
                    <option key={unidad.id} value={unidad.id}>
                      {unidad.nombre} ({unidad.abreviatura}) - {unidad.tipo}
                    </option>
                  ))}
                </select>
                {selectedConversion && (
                  <p className="mt-1 text-xs text-amber-500">
                    <FiRefreshCw className="inline mr-1" />
                    Las unidades no se pueden cambiar, solo el factor de conversiÃ³n
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Unidad de Destino <span className="text-red-500">*</span>
                </label>
                <select
                  name="id_unidad_destino"
                  required
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.id_unidad_destino}
                  onChange={handleChange}
                  disabled={selectedConversion !== null}
                >
                  <option value="">Seleccionar unidad destino</option>
                  {unidadesFiltradas
                    .filter(unidad => unidad.id !== Number(formData.id_unidad_origen))
                    .map(unidad => (
                      <option key={unidad.id} value={unidad.id}>
                        {unidad.nombre} ({unidad.abreviatura}) - {unidad.tipo}
                      </option>
                    ))
                  }
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Factor de ConversiÃ³n <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                name="factor_conversion"
                min="0.000001"
                step="any"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.factor_conversion}
                onChange={handleChange}
                placeholder="Ej: 1000 para convertir de kg a g"
              />
              {formData.id_unidad_origen && formData.id_unidad_destino && (
                <p className="mt-2 text-sm text-gray-600">
                  Esto significa que 1 {unidadesMedida.find(u => u.id === Number(formData.id_unidad_origen))?.abreviatura || 'unidad'} 
                  {' = '} 
                  {formData.factor_conversion || 'X'} {unidadesMedida.find(u => u.id === Number(formData.id_unidad_destino))?.abreviatura || 'unidades'}
                </p>
              )}
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
            >
              Cancelar
            </Button>
            <Button type="submit">
              {selectedConversion ? 'Actualizar' : 'Crear'}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de calculadora */}
      <Modal
        isOpen={isCalculatorModalOpen}
        onClose={() => setIsCalculatorModalOpen(false)}
        title="Calculadora de Conversiones"
        maxWidth="md"
      >
        <div className="space-y-6 py-2">
          <p className="text-gray-600">
            Utilice esta herramienta para convertir cantidades entre diferentes unidades de medida.
          </p>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Cantidad
              </label>
              <input
                type="number"
                name="cantidad"
                min="0.000001"
                step="any"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={calculatorData.cantidad}
                onChange={handleCalculatorChange}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                De
              </label>
              <select
                name="id_unidad_origen"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={calculatorData.id_unidad_origen}
                onChange={handleCalculatorChange}
              >
                <option value="">Seleccionar unidad</option>
                {unidadesMedida.map(unidad => (
                  <option key={unidad.id} value={unidad.id}>
                    {unidad.nombre} ({unidad.abreviatura}) - {unidad.tipo}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                A
              </label>
              <select
                name="id_unidad_destino"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={calculatorData.id_unidad_destino}
                onChange={handleCalculatorChange}
              >
                <option value="">Seleccionar unidad</option>
                {unidadesMedida.map(unidad => (
                  <option key={unidad.id} value={unidad.id}>
                    {unidad.nombre} ({unidad.abreviatura}) - {unidad.tipo}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div className="flex justify-center mt-4">
            <Button
              onClick={handleConvert}
              className="px-6"
            >
              <MdCalculate className="mr-2" /> Convertir
            </Button>
          </div>

          {calculatorData.resultado !== null && (
            <div className="mt-6 p-4 bg-gray-50 rounded-lg text-center">
              <p className="text-gray-600 mb-2">Resultado:</p>
              <div className="flex items-center justify-center space-x-4">
                <div className="text-gray-800 font-medium">
                  {calculatorData.cantidad} {unidadesMedida.find(u => u.id === Number(calculatorData.id_unidad_origen))?.abreviatura}
                </div>
                <FiArrowRight className="text-gray-400" />
                <div className="text-xl font-bold text-indigo-600">
                  {calculatorData.resultado} {unidadesMedida.find(u => u.id === Number(calculatorData.id_unidad_destino))?.abreviatura}
                </div>
              </div>
            </div>
          )}

          <div className="flex justify-end gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setIsCalculatorModalOpen(false)}
            >
              Cerrar
            </Button>
          </div>
        </div>
      </Modal>

      {/* Modal de confirmaciÃ³n de eliminaciÃ³n */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="Confirmar EliminaciÃ³n"
        maxWidth="sm"
      >
        <div className="py-4">
          <p className="text-gray-600">
            Â¿EstÃ¡s seguro de que deseas eliminar la conversiÃ³n entre <span className="font-semibold">{selectedConversion?.unidadOrigen?.nombre}</span> y <span className="font-semibold">{selectedConversion?.unidadDestino?.nombre}</span>?
          </p>
          <p className="text-gray-500 text-sm mt-2">
            TambiÃ©n se eliminarÃ¡ la conversiÃ³n inversa automÃ¡ticamente.
          </p>
        </div>
        
        <div className="flex justify-end gap-3 pt-2">
          <Button
            variant="outline"
            onClick={() => setIsDeleteModalOpen(false)}
          >
            Cancelar
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
          >
            Eliminar
          </Button>
        </div>
      </Modal>
    </div>
  );
};

export default Conversiones;\n\n

=== ./inventario/pages/InventoryDashboard.jsx ===
import { useState, useEffect, useRef, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiClock
} from 'react-icons/fi';
// Asegurando que todas las importaciones usen el alias @ para resolver correctamente en Docker
import { getInventoryStats, getLowStockItems, getActiveAlerts, getProximosACaducar, getMovementStats } from '@domains/inventario/services/inventoryService';

// Importar componentes modulares del dashboard
import {
  TabNav,
  RefreshButton,
  DashboardLoader,
  FadeInUp,
  ResumenTab,
  AccionesTab,
  GraficosTab,
  AlertasTab
} from '@domains/inventario/components/dashboard';

// Importar tab de proyecciones
import ProyeccionesTab from '@domains/inventario/components/dashboard/tabs/ProyeccionesTab';

/**
 * Dashboard principal de inventario con enfoque mobile-first y diseÃ±o modular
 */
const InventoryDashboard = () => {
  // Estados para datos del dashboard
  const [stats, setStats] = useState({
    totalItems: 0,
    totalProviders: 0,
    movementsToday: 0,
    activeAlerts: 0
  });
  const [lowStockItems, setLowStockItems] = useState([]);
  const [expiringItems, setExpiringItems] = useState([]);
  const [alerts, setAlerts] = useState([]);
  const [movementStats, setMovementStats] = useState([]);
  const [error, setError] = useState(null);
  
  // Estados de UI
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('resumen');
  const [refreshing, setRefreshing] = useState(false);
  const [timeRange, setTimeRange] = useState('7d');
  
  // Referencia para el contenedor principal para scroll al tope al cambiar de tab
  const mainContentRef = useRef(null);

  // Efecto para actualizar los datos al cargar el componente
  useEffect(() => {
    fetchDashboardData();
  }, []);

  // Efecto para hacer scroll al tope cuando se cambia de tab
  useEffect(() => {
    if (mainContentRef.current) {
      mainContentRef.current.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    }
  }, [activeTab]);

  // FunciÃ³n para obtener datos del dashboard
  const fetchDashboardData = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const promises = [
        getInventoryStats(),
        getLowStockItems(),
        getProximosACaducar(7),
        getActiveAlerts(),
        getMovementStats()
      ];
      const results = await Promise.allSettled(promises);
      // stats
      if (results[0].status === 'fulfilled') setStats(results[0].value);
      else {
        console.error('Error stats:', results[0].reason);
        toast.error('Error al obtener estadÃ­sticas');
        setStats({ totalItems: 0, totalProviders: 0, movementsToday: 0, activeAlerts: 0 });
      }
      // low stock
      if (results[1].status === 'fulfilled') setLowStockItems(results[1].value);
      else {
        console.error('Error bajo stock:', results[1].reason);
        toast.error('Error al obtener stock bajo');
        setLowStockItems([]);
      }
      // expiring
      if (results[2].status === 'fulfilled') setExpiringItems(results[2].value);
      else {
        console.error('Error proximos caducar:', results[2].reason);
        toast.error('Error al obtener caducidad');
        setExpiringItems([]);
      }
      // alerts
      if (results[3].status === 'fulfilled') setAlerts(results[3].value);
      else {
        console.error('Error alertas:', results[3].reason);
        toast.error('Error al obtener alertas');
        setAlerts([]);
      }
      // movement stats
      if (results[4].status === 'fulfilled') setMovementStats(results[4].value);
      else {
        console.error('Error stats movimientos:', results[4].reason);
        toast.error('Error al obtener estadÃ­sticas de movimiento');
        setMovementStats([]);
      }
      // if all failed
      if (results.every(r => r.status === 'rejected')) {
        setError('No se pudo cargar datos del servidor.');
      }
    } catch (err) {
      console.error('Error general dashboard:', err);
      toast.error('Error de conexiÃ³n con el servidor');
      setError('Error de conexiÃ³n con el servidor. Intente nuevamente.');
    } finally {
      setLoading(false);
    }
  }, []);

  // FunciÃ³n para refrescar datos
  const handleRefresh = async () => {
    setRefreshing(true);
    await fetchDashboardData();
    setTimeout(() => setRefreshing(false), 800); // Dar tiempo para la animaciÃ³n
  };

  const handleRetry = () => fetchDashboardData();

  // Mostrar loader durante la carga inicial
  if (loading) {
    return <DashboardLoader />;
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center h-full p-6">
        <p className="text-red-600 dark:text-red-400 mb-4">{error}</p>
        <button
          onClick={handleRetry}
          className="px-4 py-2 bg-indigo-600 dark:bg-indigo-500 text-white rounded hover:bg-indigo-700 dark:hover:bg-indigo-600"
        >Reintentar</button>
      </div>
    );
  }

  return (
    <div
      ref={mainContentRef}
      className="pb-20 lg:pb-6 overflow-auto h-full"
    >
      {/* Cabecera con tÃ­tulo y fecha de actualizaciÃ³n */}
      <FadeInUp>
        <div className="bg-white dark:bg-[#1e293b] rounded-xl shadow-sm p-5 mb-5 border border-gray-100 dark:border-[#334155] text-center">
          <div className="flex flex-col items-center gap-4 mb-5">
            <div>
              <h1 className="text-xl sm:text-2xl font-bold text-gray-800 dark:text-white flex items-center justify-center">
                Dashboard de Inventario
                <span className="ml-2 px-2 py-0.5 bg-indigo-50 dark:bg-indigo-900/70 text-indigo-600 dark:text-indigo-300 text-xs rounded-md font-normal">v1.0</span>
              </h1>
              <p className="text-gray-500 dark:text-gray-400 text-sm mt-1 flex items-center justify-center">
                <FiClock className="mr-1.5" size={14} />
                Ãšltima actualizaciÃ³n: {new Date().toLocaleTimeString()}
              </p>
            </div>
          </div>
          
          {/* NavegaciÃ³n por pestaÃ±as centrada */}
          <div className="flex justify-center">
            <TabNav
              activeTab={activeTab}
              setActiveTab={setActiveTab}
            />
          </div>
        </div>
      </FadeInUp>

      {/* Contenido segÃºn la pestaÃ±a activa */}
      {activeTab === 'resumen' && (
        <ResumenTab 
          stats={stats}
          lowStockItems={lowStockItems}
          expiringItems={expiringItems}
          timeRange={timeRange}
          setTimeRange={setTimeRange}
          // movement stats para grÃ¡ficas en lugar de mock
          stockMovementData={movementStats}
        />
      )}

      {activeTab === 'acciones' && (
        <AccionesTab />
      )}

      {activeTab === 'graficos' && (
        <GraficosTab 
          stockMovementData={movementStats}
          timeRange={timeRange}
          setTimeRange={setTimeRange}
        />
      )}

      {activeTab === 'proyecciones' && (
        <ProyeccionesTab />
      )}

      {activeTab === 'alertas' && (
        <AlertasTab 
          lowStockItems={lowStockItems}
          expiringItems={expiringItems}
          alerts={alerts}
        />
      )}

      {/* BotÃ³n de refresco flotante */}
      <div className="fixed bottom-6 right-6 z-10">
        <RefreshButton
          onRefresh={handleRefresh}
          isRefreshing={refreshing}
          disabled={loading}
        />
      </div>
    </div>
  );
};

export default InventoryDashboard;\n\n

=== ./inventario/pages/Lotes.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiEdit2, 
  FiTrash2, 
  FiPlus, 
  FiSearch, 
  FiBox, 
  FiFilter, 
  FiX, 
  FiInfo,
  FiCalendar,
  FiPackage,
  FiAlertCircle,
  FiDollarSign
} from 'react-icons/fi';
import {
  getAllLots,
  getLotById,
  createLot,
  updateLot,
  deleteLot,
  getLotsByMateriaPrima,
  getAllItems
} from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const Lotes = () => {
  const [lotes, setLotes] = useState([]);
  const [materiasPrimas, setMateriasPrimas] = useState([]);
  const [selectedLote, setSelectedLote] = useState(null);
  const [selectedMateriaPrima, setSelectedMateriaPrima] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    porCaducar: false,
    sinExistencias: false
  });
  const [formData, setFormData] = useState({
    id_materia_prima: '',
    codigo_lote: '',
    fecha_produccion: '',
    fecha_caducidad: '',
    cantidad_inicial: '',
    costo_unitario: ''
  });

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      const [lotesData, itemsData] = await Promise.all([
        getAllLots(),
        getAllItems()
      ]);
      
      setLotes(lotesData);
      setMateriasPrimas(itemsData);
    } catch (error) {
      console.error('Error al cargar lotes:', error);
      toast.error('Error al cargar los lotes');
    } finally {
      setLoading(false);
    }
  }, []);

  // Cargar lotes de una materia prima especÃ­fica
  const fetchLotesByMateriaPrima = useCallback(async (idMateriaPrima, incluirSinStock = false) => {
    setLoading(true);
    try {
      const lotesData = await getLotsByMateriaPrima(idMateriaPrima, { incluir_sin_stock: incluirSinStock });
      setLotes(lotesData);
      
      // Establecer la materia prima seleccionada
      const materiaPrima = materiasPrimas.find(mp => mp.id === idMateriaPrima);
      setSelectedMateriaPrima(materiaPrima);
    } catch (error) {
      console.error('Error al cargar lotes por materia prima:', error);
      toast.error('Error al cargar los lotes por materia prima');
    } finally {
      setLoading(false);
    }
  }, [materiasPrimas]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Filtrar lotes
  const filteredLotes = lotes
    .filter(lote => {
      // Filtro de bÃºsqueda
      if (searchTerm && 
          !lote.codigo_lote.toLowerCase().includes(searchTerm.toLowerCase()) &&
          !lote.materiaPrima?.nombre.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      // Filtro por caducidad prÃ³xima
      if (filters.porCaducar && lote.fecha_caducidad) {
        const fechaCaducidad = new Date(lote.fecha_caducidad);
        const hoy = new Date();
        const diasRestantes = Math.ceil((fechaCaducidad - hoy) / (1000 * 60 * 60 * 24));
        
        if (diasRestantes > 7) {
          return false;
        }
      }
      
      // Filtro por sin existencias
      if (filters.sinExistencias && parseFloat(lote.cantidad_actual) > 0) {
        return false;
      }
      
      return true;
    })
    .sort((a, b) => {
      // Ordenar por fecha de caducidad ascendente (primero los que caducan antes)
      if (a.fecha_caducidad && b.fecha_caducidad) {
        return new Date(a.fecha_caducidad) - new Date(b.fecha_caducidad);
      }
      
      // Si alguno no tiene fecha de caducidad, ordenar por cÃ³digo de lote
      return a.codigo_lote.localeCompare(b.codigo_lote);
    });

  // Manejadores de eventos para el formulario
  const handleOpenModal = (lote = null) => {
    if (lote) {
      setSelectedLote(lote);
      setFormData({
        id_materia_prima: lote.id_materia_prima,
        codigo_lote: lote.codigo_lote,
        fecha_produccion: lote.fecha_produccion ? new Date(lote.fecha_produccion).toISOString().split('T')[0] : '',
        fecha_caducidad: lote.fecha_caducidad ? new Date(lote.fecha_caducidad).toISOString().split('T')[0] : '',
        cantidad_inicial: lote.cantidad_inicial,
        costo_unitario: lote.costo_unitario
      });
    } else {
      setSelectedLote(null);
      setFormData({
        id_materia_prima: selectedMateriaPrima?.id || '',
        codigo_lote: '',
        fecha_produccion: '',
        fecha_caducidad: '',
        cantidad_inicial: '',
        costo_unitario: ''
      });
    }
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Convertir valores a nÃºmeros donde sea necesario
      const loteData = {
        ...formData,
        id_materia_prima: Number(formData.id_materia_prima),
        cantidad_inicial: Number(formData.cantidad_inicial),
        costo_unitario: Number(formData.costo_unitario),
      };

      if (selectedLote) {
        await updateLot(selectedLote.id, loteData);
        toast.success('Lote actualizado correctamente');
      } else {
        await createLot(loteData);
        toast.success('Lote creado correctamente');
      }
      
      setIsModalOpen(false);
      // Si hay una materia prima seleccionada, recargar solo sus lotes
      if (selectedMateriaPrima) {
        fetchLotesByMateriaPrima(selectedMateriaPrima.id, true);
      } else {
        fetchData();
      }
    } catch (error) {
      console.error('Error al guardar lote:', error);
      toast.error(error.response?.data?.error || 'Error al guardar el lote');
    }
  };

  const handleViewDetails = async (lote) => {
    try {
      setLoading(true);
      const loteDetalle = await getLotById(lote.id);
      setSelectedLote(loteDetalle);
      setIsDetailModalOpen(true);
    } catch (error) {
      console.error('Error al obtener detalles del lote:', error);
      toast.error('Error al obtener detalles del lote');
    } finally {
      setLoading(false);
    }
  };

  const handleOpenDeleteModal = (lote) => {
    setSelectedLote(lote);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    try {
      await deleteLot(selectedLote.id);
      toast.success('Lote eliminado correctamente');
      setIsDeleteModalOpen(false);
      
      if (selectedMateriaPrima) {
        fetchLotesByMateriaPrima(selectedMateriaPrima.id, true);
      } else {
        fetchData();
      }
    } catch (error) {
      console.error('Error al eliminar lote:', error);
      
      // Manejar error cuando el lote tiene existencias
      if (error.response?.status === 409) {
        toast.error('No se puede eliminar un lote que aÃºn tiene existencias');
      } else {
        toast.error(error.response?.data?.error || 'Error al eliminar el lote');
      }
    }
  };

  // Formatear fecha
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString('es-ES');
  };

  // Calcular estado de caducidad
  const getCaducidadStatus = (fechaCaducidad) => {
    if (!fechaCaducidad) return { status: 'notSet', label: 'No establecida', color: 'gray' };
    
    const hoy = new Date();
    const fecha = new Date(fechaCaducidad);
    const diasRestantes = Math.ceil((fecha - hoy) / (1000 * 60 * 60 * 24));
    
    if (diasRestantes < 0) {
      return { status: 'expired', label: 'Caducado', color: 'red' };
    } else if (diasRestantes <= 7) {
      return { status: 'warning', label: `${diasRestantes} dÃ­as`, color: 'amber' };
    } else if (diasRestantes <= 30) {
      return { status: 'soon', label: `${diasRestantes} dÃ­as`, color: 'yellow' };
    } else {
      return { status: 'ok', label: formatDate(fechaCaducidad), color: 'green' };
    }
  };

  // Limpiar filtro de materia prima
  const clearMateriaFilter = () => {
    setSelectedMateriaPrima(null);
    fetchData();
  };

  if (loading && !lotes.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-800">
            {selectedMateriaPrima 
              ? `Lotes de ${selectedMateriaPrima.nombre}`
              : 'Lotes'
            }
          </h1>
          {selectedMateriaPrima && (
            <button 
              className="text-indigo-600 hover:text-indigo-800 text-sm flex items-center mt-1"
              onClick={clearMateriaFilter}
            >
              <FiX className="mr-1" /> Quitar filtro
            </button>
          )}
        </div>
        <Button
          className="flex items-center gap-2"
          onClick={() => handleOpenModal()}
        >
          <FiPlus size={18} /> Agregar Lote
        </Button>
      </div>

      {/* Filtros y bÃºsqueda */}
      <div className="bg-white p-4 rounded-lg shadow-sm flex flex-col sm:flex-row gap-4 justify-between">
        <div className="relative flex-1">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="text-gray-400" />
          </div>
          <input
            type="text"
            className="pl-10 pr-4 py-2 w-full border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Buscar por cÃ³digo o materia prima..."
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="flex flex-wrap gap-2">
          <button
            className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
              filters.porCaducar 
                ? 'bg-amber-100 text-amber-800 border border-amber-200' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setFilters(prev => ({ ...prev, porCaducar: !prev.porCaducar }))}
          >
            <FiFilter size={16} />
            Por Caducar (7 dÃ­as)
            {filters.porCaducar && <FiX size={16} className="ml-1" />}
          </button>
          
          <button
            className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
              filters.sinExistencias 
                ? 'bg-red-100 text-red-800 border border-red-200' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setFilters(prev => ({ ...prev, sinExistencias: !prev.sinExistencias }))}
          >
            <FiFilter size={16} />
            Sin Existencias
            {filters.sinExistencias && <FiX size={16} className="ml-1" />}
          </button>
        </div>
      </div>

      {/* Tabla de lotes */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>CÃ³digo</TableHead>
              <TableHead>Materia Prima</TableHead>
              <TableHead>Fecha ProducciÃ³n</TableHead>
              <TableHead>Fecha Caducidad</TableHead>
              <TableHead>Cantidad Inicial</TableHead>
              <TableHead>Existencias</TableHead>
              <TableHead>Costo Unitario</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredLotes.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiBox size={40} className="mb-2 text-gray-300" />
                    <p>
                      {selectedMateriaPrima
                        ? `No se encontraron lotes para ${selectedMateriaPrima.nombre}`
                        : 'No se encontraron lotes'
                      }
                    </p>
                    {(searchTerm || filters.porCaducar || filters.sinExistencias) && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={() => {
                          setSearchTerm('');
                          setFilters({ porCaducar: false, sinExistencias: false });
                        }}
                      >
                        Limpiar filtros
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredLotes.map(lote => {
                const caducidadStatus = getCaducidadStatus(lote.fecha_caducidad);
                return (
                  <TableRow key={lote.id}>
                    <TableCell className="font-medium">{lote.codigo_lote}</TableCell>
                    <TableCell>
                      <button 
                        className="text-indigo-600 hover:underline"
                        onClick={() => fetchLotesByMateriaPrima(lote.id_materia_prima, true)}
                      >
                        {lote.materiaPrima?.nombre || 'N/A'}
                      </button>
                    </TableCell>
                    <TableCell>{formatDate(lote.fecha_produccion)}</TableCell>
                    <TableCell>
                      <Badge color={caducidadStatus.color}>
                        {caducidadStatus.label}
                      </Badge>
                    </TableCell>
                    <TableCell>{lote.cantidad_inicial}</TableCell>
                    <TableCell>
                      <span className={parseFloat(lote.cantidad_actual) === 0 ? 'text-red-500 font-medium' : ''}>
                        {lote.cantidad_actual}
                        {parseFloat(lote.cantidad_actual) === 0 && ' (Agotado)'}
                      </span>
                    </TableCell>
                    <TableCell>${parseFloat(lote.costo_unitario).toFixed(2)}</TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <button
                          onClick={() => handleViewDetails(lote)}
                          className="p-1 text-indigo-600 hover:text-indigo-800"
                          title="Ver detalles"
                        >
                          <FiInfo size={18} />
                        </button>
                        <button
                          onClick={() => handleOpenModal(lote)}
                          className="p-1 text-blue-600 hover:text-blue-800"
                          title="Editar"
                        >
                          <FiEdit2 size={18} />
                        </button>
                        <button
                          onClick={() => handleOpenDeleteModal(lote)}
                          className="p-1 text-red-600 hover:text-red-800"
                          title="Eliminar"
                          disabled={parseFloat(lote.cantidad_actual) > 0}
                        >
                          <FiTrash2 size={18} className={parseFloat(lote.cantidad_actual) > 0 ? 'opacity-40 cursor-not-allowed' : ''} />
                        </button>
                      </div>
                    </TableCell>
                  </TableRow>
                );
              })
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creaciÃ³n/ediciÃ³n */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={selectedLote ? `Editar Lote: ${selectedLote.codigo_lote}` : 'Nuevo Lote'}
      >
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Materia Prima <span className="text-red-500">*</span>
              </label>
              <select
                name="id_materia_prima"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.id_materia_prima}
                onChange={handleChange}
                disabled={selectedLote !== null}
              >
                <option value="">Seleccionar materia prima</option>
                {materiasPrimas.map(mp => (
                  <option key={mp.id} value={mp.id}>
                    {mp.nombre}
                  </option>
                ))}
              </select>
              {selectedLote && (
                <p className="mt-1 text-xs text-amber-500">
                  <FiAlertCircle className="inline mr-1" />
                  La materia prima no se puede cambiar una vez creado el lote
                </p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                CÃ³digo de Lote <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                name="codigo_lote"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.codigo_lote}
                onChange={handleChange}
                placeholder="Ej: L20250326-001"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Fecha de ProducciÃ³n
                </label>
                <input
                  type="date"
                  name="fecha_produccion"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.fecha_produccion}
                  onChange={handleChange}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Fecha de Caducidad
                </label>
                <input
                  type="date"
                  name="fecha_caducidad"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.fecha_caducidad}
                  onChange={handleChange}
                  min={formData.fecha_produccion || undefined}
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Cantidad Inicial <span className="text-red-500">*</span>
                </label>
                <input
                  type="number"
                  name="cantidad_inicial"
                  min="0"
                  step="0.01"
                  required
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.cantidad_inicial}
                  onChange={handleChange}
                  disabled={selectedLote !== null}
                />
                {selectedLote && (
                  <p className="mt-1 text-xs text-amber-500">
                    <FiAlertCircle className="inline mr-1" />
                    La cantidad inicial no se puede modificar una vez creado el lote
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Costo Unitario <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-gray-500">$</span>
                  </div>
                  <input
                    type="number"
                    name="costo_unitario"
                    min="0"
                    step="0.01"
                    required
                    className="pl-7 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                    value={formData.costo_unitario}
                    onChange={handleChange}
                  />
                </div>
              </div>
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
            >
              Cancelar
            </Button>
            <Button type="submit">
              {selectedLote ? 'Actualizar' : 'Crear'}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de detalles */}
      <Modal
        isOpen={isDetailModalOpen}
        onClose={() => setIsDetailModalOpen(false)}
        title={`Lote: ${selectedLote?.codigo_lote}`}
        maxWidth="md"
      >
        {selectedLote && (
          <div className="space-y-6 py-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* InformaciÃ³n del lote */}
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiBox className="mr-2" /> InformaciÃ³n del Lote
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                    <div>
                      <p className="text-sm text-gray-500">CÃ³digo</p>
                      <p className="font-medium">{selectedLote.codigo_lote}</p>
                    </div>
                    
                    <div>
                      <p className="text-sm text-gray-500">Materia Prima</p>
                      <p className="font-medium">{selectedLote.materiaPrima?.nombre}</p>
                    </div>
                    
                    <div className="flex justify-between">
                      <div>
                        <p className="text-sm text-gray-500">Cantidad Inicial</p>
                        <p>{selectedLote.cantidad_inicial}</p>
                      </div>
                      
                      <div>
                        <p className="text-sm text-gray-500">Cantidad Actual</p>
                        <p className={parseFloat(selectedLote.cantidad_actual) === 0 ? 'text-red-500 font-medium' : ''}>
                          {selectedLote.cantidad_actual}
                          {parseFloat(selectedLote.cantidad_actual) === 0 && ' (Agotado)'}
                        </p>
                      </div>
                    </div>
                    
                    <div>
                      <p className="text-sm text-gray-500">Costo Unitario</p>
                      <p>${parseFloat(selectedLote.costo_unitario).toFixed(2)}</p>
                    </div>
                  </div>
                </div>
                
                {/* Fechas */}
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiCalendar className="mr-2" /> Fechas
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                    {selectedLote.fecha_produccion && (
                      <div>
                        <p className="text-sm text-gray-500">Fecha de ProducciÃ³n</p>
                        <p>{formatDate(selectedLote.fecha_produccion)}</p>
                      </div>
                    )}
                    
                    {selectedLote.fecha_caducidad && (
                      <div>
                        <p className="text-sm text-gray-500">Fecha de Caducidad</p>
                        <div className="flex items-center">
                          <Badge color={getCaducidadStatus(selectedLote.fecha_caducidad).color} className="mr-2">
                            {getCaducidadStatus(selectedLote.fecha_caducidad).label}
                          </Badge>
                          <span>{formatDate(selectedLote.fecha_caducidad)}</span>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              {/* Movimientos recientes */}
              <div>
                <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                  <FiPackage className="mr-2" /> Movimientos Recientes
                </h3>
                
                {selectedLote.movimientos && selectedLote.movimientos.length > 0 ? (
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <ul className="divide-y divide-gray-200">
                      {selectedLote.movimientos.map(movimiento => (
                        <li key={movimiento.id} className="py-3">
                          <div className="flex justify-between">
                            <div>
                              <Badge 
                                color={movimiento.tipo_movimiento === 'entrada' ? 'green' : 'red'}
                                className="mb-1"
                              >
                                {movimiento.tipo_movimiento === 'entrada' ? 'Entrada' : 'Salida'}
                              </Badge>
                              <p className="text-sm">{movimiento.descripcion}</p>
                            </div>
                            <div className="text-right">
                              <p className="font-medium">{movimiento.cantidad} {selectedLote.materiaPrima?.unidadMedida?.abreviatura}</p>
                              <p className="text-xs text-gray-500">{new Date(movimiento.fecha).toLocaleString()}</p>
                            </div>
                          </div>
                        </li>
                      ))}
                    </ul>
                  </div>
                ) : (
                  <div className="bg-gray-50 p-4 rounded-lg text-center text-gray-500">
                    No hay movimientos recientes para este lote
                  </div>
                )}
              </div>
            </div>
            
            <div className="flex justify-end gap-3 pt-4">
              {parseFloat(selectedLote.cantidad_actual) === 0 && (
                <Button
                  variant="danger"
                  onClick={() => {
                    setIsDetailModalOpen(false);
                    handleOpenDeleteModal(selectedLote);
                  }}
                >
                  Eliminar
                </Button>
              )}
              <Button
                variant="outline"
                onClick={() => {
                  setIsDetailModalOpen(false);
                  handleOpenModal(selectedLote);
                }}
              >
                Editar
              </Button>
              <Button
                variant="outline"
                onClick={() => setIsDetailModalOpen(false)}
              >
                Cerrar
              </Button>
            </div>
          </div>
        )}
      </Modal>

      {/* Modal de confirmaciÃ³n de eliminaciÃ³n */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="Confirmar EliminaciÃ³n"
        maxWidth="sm"
      >
        <div className="py-4">
          <p className="text-gray-600">
            Â¿EstÃ¡s seguro de que deseas eliminar el lote <span className="font-semibold">{selectedLote?.codigo_lote}</span>?
          </p>
          {parseFloat(selectedLote?.cantidad_actual) > 0 && (
            <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-md text-red-700">
              <p className="flex items-center font-medium">
                <FiAlertCircle className="mr-2" /> Este lote no puede ser eliminado
              </p>
              <p className="text-sm mt-1">
                El lote aÃºn tiene {selectedLote?.cantidad_actual} unidades en existencia.
                Debe consumir todo el stock antes de poder eliminarlo.
              </p>
            </div>
          )}
        </div>
        
        <div className="flex justify-end gap-3 pt-2">
          <Button
            variant="outline"
            onClick={() => setIsDeleteModalOpen(false)}
          >
            Cancelar
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
            disabled={parseFloat(selectedLote?.cantidad_actual) > 0}
          >
            Eliminar
          </Button>
        </div>
      </Modal>
    </div>
  );
};

export default Lotes;\n\n

=== ./inventario/pages/MateriasPrimas.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiEdit2, 
  FiTrash2, 
  FiPlus, 
  FiSearch, 
  FiPackage, 
  FiFilter, 
  FiX, 
  FiBox, 
  FiAlertTriangle, 
  FiChevronDown, 
  FiDollarSign,
  FiInfo,
  FiCalendar,
  FiShield
} from 'react-icons/fi';
import {
  getAllItems,
  getItemById,
  createItem,
  updateItem,
  deleteItem,
  getAllUnits
} from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const MateriasPrimas = () => {
  const [items, setItems] = useState([]);
  const [unidadesMedida, setUnidadesMedida] = useState([]);
  const [selectedItem, setSelectedItem] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    bajoStock: false,
    sinStock: false
  });
  const [formData, setFormData] = useState({
    nombre: '',
    descripcion: '',
    stock_actual: 0,
    stock_minimo: 0,
    id_unidad_medida: '',
    costo_unitario: 0
  });

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      const [itemsData, unitsData] = await Promise.all([
        getAllItems(),
        getAllUnits()
      ]);
      setItems(itemsData);
      setUnidadesMedida(unitsData);
    } catch (error) {
      console.error('Error al cargar datos:', error);
      toast.error('Error al cargar los datos de materias primas');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Filtrar items
  const filteredItems = items
    .filter(item => {
      // Filtro de bÃºsqueda
      if (searchTerm && !item.nombre.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      // Filtro de bajo stock
      if (filters.bajoStock && item.stock_actual > item.stock_minimo) {
        return false;
      }
      
      // Filtro de sin stock
      if (filters.sinStock && item.stock_actual > 0) {
        return false;
      }
      
      return true;
    })
    .sort((a, b) => a.nombre.localeCompare(b.nombre));

  // Manejadores de eventos para el formulario
  const handleOpenModal = (item = null) => {
    if (item) {
      setSelectedItem(item);
      setFormData({
        nombre: item.nombre,
        descripcion: item.descripcion || '',
        stock_actual: item.stock_actual,
        stock_minimo: item.stock_minimo,
        id_unidad_medida: item.id_unidad_medida,
        costo_unitario: item.costo_unitario
      });
    } else {
      setSelectedItem(null);
      setFormData({
        nombre: '',
        descripcion: '',
        stock_actual: 0,
        stock_minimo: 0,
        id_unidad_medida: unidadesMedida.length > 0 ? unidadesMedida[0].id : '',
        costo_unitario: 0
      });
    }
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Convertir valores numÃ©ricos
      const itemData = {
        ...formData,
        stock_actual: Number(formData.stock_actual),
        stock_minimo: Number(formData.stock_minimo),
        costo_unitario: Number(formData.costo_unitario),
        id_unidad_medida: Number(formData.id_unidad_medida)
      };

      if (selectedItem) {
        await updateItem(selectedItem.id, itemData);
        toast.success('Materia prima actualizada correctamente');
      } else {
        await createItem(itemData);
        toast.success('Materia prima creada correctamente');
      }
      
      setIsModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al guardar materia prima:', error);
      toast.error(error.response?.data?.error || 'Error al guardar la materia prima');
    }
  };

  const handleOpenDeleteModal = (item) => {
    setSelectedItem(item);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    try {
      await deleteItem(selectedItem.id);
      toast.success('Materia prima eliminada correctamente');
      setIsDeleteModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al eliminar materia prima:', error);
      toast.error(error.response?.data?.error || 'Error al eliminar la materia prima');
    }
  };

  // Renderizar el estado del stock
  const renderStockStatus = (item) => {
    if (item.stock_actual <= 0) {
      return <Badge color="red">Sin Stock</Badge>;
    } else if (item.stock_actual <= item.stock_minimo) {
      return <Badge color="amber">Bajo Stock</Badge>;
    } else {
      return <Badge color="green">Stock Ã“ptimo</Badge>;
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Materias Primas</h1>
        <Button
          className="flex items-center gap-2"
          onClick={() => handleOpenModal()}
        >
          <FiPlus size={18} /> Agregar Materia Prima
        </Button>
      </div>

      {/* Filtros y bÃºsqueda */}
      <div className="bg-white p-4 rounded-lg shadow-sm flex flex-col sm:flex-row gap-4 justify-between">
        <div className="relative flex-1">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="text-gray-400" />
          </div>
          <input
            type="text"
            className="pl-10 pr-4 py-2 w-full border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Buscar por nombre..."
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="flex flex-wrap gap-2">
          <button
            className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
              filters.bajoStock 
                ? 'bg-amber-100 text-amber-800 border border-amber-200' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setFilters(prev => ({ ...prev, bajoStock: !prev.bajoStock }))}
          >
            <FiFilter size={16} />
            Bajo Stock
            {filters.bajoStock && <FiX size={16} />}
          </button>
          
          <button
            className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
              filters.sinStock 
                ? 'bg-red-100 text-red-800 border border-red-200' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setFilters(prev => ({ ...prev, sinStock: !prev.sinStock }))}
          >
            <FiFilter size={16} />
            Sin Stock
            {filters.sinStock && <FiX size={16} />}
          </button>
        </div>
      </div>

      {/* Tabla de materias primas */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Nombre</TableHead>
              <TableHead>DescripciÃ³n</TableHead>
              <TableHead>Stock Actual</TableHead>
              <TableHead>Stock MÃ­nimo</TableHead>
              <TableHead>Unidad de Medida</TableHead>
              <TableHead>Costo Unitario</TableHead>
              <TableHead>Estado</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredItems.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiPackage size={40} className="mb-2 text-gray-300" />
                    <p>No se encontraron materias primas</p>
                    {(searchTerm || filters.bajoStock || filters.sinStock) && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={() => {
                          setSearchTerm('');
                          setFilters({ bajoStock: false, sinStock: false });
                        }}
                      >
                        Limpiar filtros
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredItems.map(item => (
                <TableRow key={item.id}>
                  <TableCell className="font-medium">{item.nombre}</TableCell>
                  <TableCell className="max-w-xs truncate">
                    {item.descripcion || <span className="text-gray-400 italic">Sin descripciÃ³n</span>}
                  </TableCell>
                  <TableCell>
                    {item.stock_actual} {item.unidadMedida?.abreviatura}
                  </TableCell>
                  <TableCell>
                    {item.stock_minimo} {item.unidadMedida?.abreviatura}
                  </TableCell>
                  <TableCell>
                    {item.unidadMedida?.nombre || "N/A"}
                  </TableCell>
                  <TableCell>
                    ${parseFloat(item.costo_unitario).toFixed(2)}
                  </TableCell>
                  <TableCell>
                    {renderStockStatus(item)}
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleOpenModal(item)}
                        className="p-1 text-blue-600 hover:text-blue-800"
                        title="Editar"
                      >
                        <FiEdit2 size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenDeleteModal(item)}
                        className="p-1 text-red-600 hover:text-red-800"
                        title="Eliminar"
                      >
                        <FiTrash2 size={18} />
                      </button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creaciÃ³n/ediciÃ³n */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={selectedItem ? `Editar: ${selectedItem.nombre}` : 'Nueva Materia Prima'}
      >
        <form onSubmit={handleSubmit} className="grid grid-cols-1 gap-6">
          {/* SecciÃ³n de informaciÃ³n general */}
          <div className="grid grid-cols-1 gap-5">
            {/* Nombre */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Nombre
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiPackage className="text-gray-400" size={16} />
                </div>
                <input
                  type="text"
                  name="nombre"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.nombre}
                  onChange={handleChange}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                  placeholder="Nombre de la materia prima"
                />
              </div>
            </div>

            {/* DescripciÃ³n */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                DescripciÃ³n
              </label>
              <div className="relative">
                <div className="absolute top-3 left-3 flex items-start pointer-events-none">
                  <FiEdit2 className="text-gray-400" size={16} />
                </div>
                <textarea
                  name="descripcion"
                  rows="3"
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.descripcion}
                  onChange={handleChange}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                  placeholder="DescripciÃ³n detallada del producto"
                />
              </div>
            </div>
          </div>

          {/* SecciÃ³n de inventario - Grid responsive */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
            {/* Stock Actual */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Stock Actual
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiBox className="text-gray-400" size={16} />
                </div>
                <input
                  type="number"
                  name="stock_actual"
                  min="0"
                  step="0.01"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.stock_actual}
                  onChange={handleChange}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                  placeholder="0.00"
                />
              </div>
            </div>

            {/* Stock MÃ­nimo */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Stock MÃ­nimo
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiAlertTriangle className="text-gray-400" size={16} />
                </div>
                <input
                  type="number"
                  name="stock_minimo"
                  min="0"
                  step="0.01"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.stock_minimo}
                  onChange={handleChange}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                  placeholder="0.00"
                />
              </div>
            </div>

            {/* Unidad de Medida */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Unidad de Medida
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiFilter className="text-gray-400" size={16} />
                </div>
                <select
                  name="id_unidad_medida"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500 appearance-none"
                  value={formData.id_unidad_medida}
                  onChange={handleChange}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                >
                  <option value="">Seleccionar unidad</option>
                  {unidadesMedida.map(unidad => (
                    <option key={unidad.id} value={unidad.id}>
                      {unidad.nombre} ({unidad.abreviatura})
                    </option>
                  ))}
                </select>
                <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                  <FiChevronDown className="text-gray-400" size={16} />
                </div>
              </div>
            </div>

            {/* Costo Unitario */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Costo Unitario
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiDollarSign className="text-gray-400" size={16} />
                </div>
                <input
                  type="number"
                  name="costo_unitario"
                  min="0"
                  step="0.01"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.costo_unitario}
                  onChange={handleChange}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                  placeholder="0.00"
                />
              </div>
            </div>
          </div>

          {/* Botones de acciÃ³n */}
          <div className="flex justify-end gap-3 pt-4 mt-2">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
              className="flex items-center gap-2"
            >
              <FiX size={16} /> Cancelar
            </Button>
            <Button type="submit" className="flex items-center gap-2">
              {selectedItem ? <FiEdit2 size={16} /> : <FiPlus size={16} />}
              {selectedItem ? 'Actualizar' : 'Crear'}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de confirmaciÃ³n de eliminaciÃ³n */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="Confirmar EliminaciÃ³n"
        maxWidth="sm"
      >
        <div className="py-4">
          <p className="text-gray-600">
            Â¿EstÃ¡s seguro de que deseas eliminar la materia prima <span className="font-semibold">{selectedItem?.nombre}</span>?
          </p>
          <p className="text-gray-500 text-sm mt-2">
            Esta acciÃ³n no se puede deshacer y podrÃ­a afectar a registros relacionados.
          </p>
        </div>
        
        <div className="flex justify-end gap-3 pt-2">
          <Button
            variant="outline"
            onClick={() => setIsDeleteModalOpen(false)}
          >
            Cancelar
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
          >
            Eliminar
          </Button>
        </div>
      </Modal>
    </div>
  );
};

export default MateriasPrimas;\n\n

=== ./inventario/pages/Movimientos.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiPlus, 
  FiSearch, 
  FiFilter, 
  FiX, 
  FiInfo, 
  FiArrowUp, 
  FiArrowDown, 
  FiBox, 
  FiCalendar,
  FiPackage,
  FiTruck,
  FiSettings
} from 'react-icons/fi';
import {
  getAllMovements,
  getMovementById,
  createMovement,
  getAllItems,
  getAllLots,
  getAllProviders,
  getAllAdjustmentTypes,
  getMovimientosByMateriaPrima,
  getMovimientosByLote
}  from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const Movimientos = () => {
  const [movimientos, setMovimientos] = useState([]);
  const [materiasPrimas, setMateriasPrimas] = useState([]);
  const [lotes, setLotes] = useState([]);
  const [proveedores, setProveedores] = useState([]);
  const [tiposAjuste, setTiposAjuste] = useState([]);
  const [lotesFiltrados, setLotesFiltrados] = useState([]);
  const [selectedMovimiento, setSelectedMovimiento] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    tipoMovimiento: '',
    fechaInicio: '',
    fechaFin: ''
  });
  const [formData, setFormData] = useState({
    id_materia_prima: '',
    id_lote: '',
    id_proveedor: '',
    id_tipo_ajuste: '',
    tipo_movimiento: 'entrada',
    cantidad: '',
    descripcion: ''
  });
  const [filtroActivo, setFiltroActivo] = useState({
    tipo: '', // 'materiaPrima' o 'lote'
    id: null
  });

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      // Determinar quÃ© endpoint usar segÃºn filtros activos
      let movimientosData;
      
      if (filtroActivo.tipo === 'materiaPrima' && filtroActivo.id) {
        movimientosData = await getMovimientosByMateriaPrima(filtroActivo.id);
      } else if (filtroActivo.tipo === 'lote' && filtroActivo.id) {
        movimientosData = await getMovimientosByLote(filtroActivo.id);
      } else {
        // Construir parÃ¡metros de consulta para filtros
        const params = {};
        if (filters.tipoMovimiento) params.tipo = filters.tipoMovimiento;
        if (filters.fechaInicio) params.fechaInicio = filters.fechaInicio;
        if (filters.fechaFin) params.fechaFin = filters.fechaFin;
        
        movimientosData = await getAllMovements(params);
      }
      
      // Cargar datos auxiliares
      const [itemsData, lotesData, proveedoresData, tiposAjusteData] = await Promise.all([
        getAllItems(),
        getAllLots(),
        getAllProviders(),
        getAllAdjustmentTypes()
      ]);
      
      setMovimientos(movimientosData);
      setMateriasPrimas(itemsData);
      setLotes(lotesData);
      setProveedores(proveedoresData);
      setTiposAjuste(tiposAjusteData);
    } catch (error) {
      console.error('Error al cargar movimientos:', error);
      toast.error('Error al cargar los movimientos de inventario');
    } finally {
      setLoading(false);
    }
  }, [filtroActivo, filters]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Filtrar movimientos
  const filteredMovimientos = movimientos
    .filter(movimiento => {
      // Filtro de bÃºsqueda en descripciÃ³n o materia prima
      if (searchTerm && 
          !movimiento.descripcion?.toLowerCase().includes(searchTerm.toLowerCase()) &&
          !movimiento.materiaPrima?.nombre?.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      return true;
    })
    .sort((a, b) => new Date(b.fecha) - new Date(a.fecha)); // Ordenar por fecha descendente

  // Manejadores de eventos para el formulario
  const handleOpenModal = () => {
    setSelectedMovimiento(null);
    setFormData({
      id_materia_prima: '',
      id_lote: '',
      id_proveedor: '',
      id_tipo_ajuste: '',
      tipo_movimiento: 'entrada',
      cantidad: '',
      descripcion: ''
    });
    setLotesFiltrados([]);
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    // Si cambiÃ³ la materia prima, filtrar los lotes disponibles
    if (name === 'id_materia_prima' && value) {
      const lotesDeLaMateria = lotes.filter(
        lote => lote.id_materia_prima === Number(value)
      );
      setLotesFiltrados(lotesDeLaMateria);
      
      // Resetear el lote seleccionado
      setFormData(prev => ({
        ...prev,
        id_lote: ''
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Convertir valores a nÃºmeros donde sea necesario
      const movimientoData = {
        ...formData,
        id_materia_prima: Number(formData.id_materia_prima),
        id_lote: formData.id_lote ? Number(formData.id_lote) : null,
        id_proveedor: formData.id_proveedor ? Number(formData.id_proveedor) : null,
        id_tipo_ajuste: formData.id_tipo_ajuste ? Number(formData.id_tipo_ajuste) : null,
        cantidad: Number(formData.cantidad)
      };

      await createMovement(movimientoData);
      toast.success('Movimiento registrado correctamente');
      
      setIsModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al crear movimiento:', error);
      
      // Manejar errores especÃ­ficos
      if (error.response?.data?.error) {
        toast.error(error.response.data.error);
      } else if (error.response?.status === 400 && error.response?.data?.details) {
        toast.error(`Error: ${error.response.data.details}`);
      } else {
        toast.error('Error al registrar el movimiento');
      }
    }
  };

  const handleViewDetails = async (movimiento) => {
    try {
      setLoading(true);
      const movimientoDetalle = await getMovementById(movimiento.id);
      setSelectedMovimiento(movimientoDetalle);
      setIsDetailModalOpen(true);
    } catch (error) {
      console.error('Error al obtener detalles del movimiento:', error);
      toast.error('Error al obtener detalles del movimiento');
    } finally {
      setLoading(false);
    }
  };

  // Formatear fecha
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleString('es-ES');
  };

  // Aplicar filtros
  const handleApplyFilters = () => {
    fetchData();
  };

  // Resetear filtros
  const handleResetFilters = () => {
    setFilters({
      tipoMovimiento: '',
      fechaInicio: '',
      fechaFin: ''
    });
    setSearchTerm('');
    setFiltroActivo({
      tipo: '',
      id: null
    });
    fetchData();
  };

  // Filtrar por materia prima
  const handleFilterByMateriaPrima = (idMateriaPrima) => {
    setFiltroActivo({
      tipo: 'materiaPrima',
      id: idMateriaPrima
    });
  };

  // Filtrar por lote
  const handleFilterByLote = (idLote) => {
    setFiltroActivo({
      tipo: 'lote',
      id: idLote
    });
  };

  // Obtener nombre de la materia prima o lote activo
  const getFilterLabel = () => {
    if (filtroActivo.tipo === 'materiaPrima') {
      const materiaPrima = materiasPrimas.find(mp => mp.id === filtroActivo.id);
      return materiaPrima ? `Movimientos de ${materiaPrima.nombre}` : 'Movimientos';
    } else if (filtroActivo.tipo === 'lote') {
      const lote = lotes.find(l => l.id === filtroActivo.id);
      return lote ? `Movimientos del Lote ${lote.codigo_lote}` : 'Movimientos';
    }
    return 'Movimientos de Inventario';
  };

  if (loading && !movimientos.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-800">
            {getFilterLabel()}
          </h1>
          {filtroActivo.tipo && (
            <button 
              className="text-indigo-600 hover:text-indigo-800 text-sm flex items-center mt-1"
              onClick={handleResetFilters}
            >
              <FiX className="mr-1" /> Quitar filtro
            </button>
          )}
        </div>
        <Button
          className="flex items-center gap-2"
          onClick={handleOpenModal}
        >
          <FiPlus size={18} /> Registrar Movimiento
        </Button>
      </div>

      {/* Filtros y bÃºsqueda */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <div className="flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-4 mb-4">
          <div className="relative flex-1">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="text-gray-400" />
            </div>
            <input
              type="text"
              className="pl-10 pr-4 py-2 w-full border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Buscar en descripciÃ³n o materia prima..."
              value={searchTerm}
              onChange={e => setSearchTerm(e.target.value)}
            />
          </div>
          
          <select
            className="py-2 px-3 border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
            value={filters.tipoMovimiento}
            onChange={e => setFilters(prev => ({ ...prev, tipoMovimiento: e.target.value }))}
          >
            <option value="">Todos los tipos</option>
            <option value="entrada">Entradas</option>
            <option value="salida">Salidas</option>
          </select>
        </div>

        <div className="flex flex-col md:flex-row md:items-end space-y-4 md:space-y-0 md:space-x-4">
          <div>
            <label className="block text-sm text-gray-700 mb-1">Desde</label>
            <input
              type="date"
              className="py-2 px-3 border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
              value={filters.fechaInicio}
              onChange={e => setFilters(prev => ({ ...prev, fechaInicio: e.target.value }))}
            />
          </div>
          
          <div>
            <label className="block text-sm text-gray-700 mb-1">Hasta</label>
            <input
              type="date"
              className="py-2 px-3 border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
              value={filters.fechaFin}
              onChange={e => setFilters(prev => ({ ...prev, fechaFin: e.target.value }))}
            />
          </div>
          
          <div className="flex space-x-2">
            <Button 
              onClick={handleApplyFilters}
              className="flex items-center"
            >
              <FiFilter className="mr-1" size={16} /> Aplicar Filtros
            </Button>
            
            <Button 
              variant="outline"
              onClick={handleResetFilters}
              className="flex items-center"
            >
              <FiX className="mr-1" size={16} /> Resetear
            </Button>
          </div>
        </div>
      </div>

      {/* Tabla de movimientos */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Fecha</TableHead>
              <TableHead>Tipo</TableHead>
              <TableHead>Materia Prima</TableHead>
              <TableHead>Lote</TableHead>
              <TableHead>Cantidad</TableHead>
              <TableHead>DescripciÃ³n</TableHead>
              <TableHead>Ajuste/Proveedor</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredMovimientos.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiBox size={40} className="mb-2 text-gray-300" />
                    <p>No se encontraron movimientos</p>
                    {(searchTerm || filters.tipoMovimiento || filters.fechaInicio || filters.fechaFin) && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={handleResetFilters}
                      >
                        Limpiar filtros
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredMovimientos.map(movimiento => (
                <TableRow 
                  key={movimiento.id}
                  className="cursor-pointer hover:bg-gray-50"
                  onClick={() => handleViewDetails(movimiento)}
                >
                  <TableCell>
                    <div className="flex flex-col">
                      <span className="font-medium">{formatDate(movimiento.fecha).split(' ')[0]}</span>
                      <span className="text-xs text-gray-500">{formatDate(movimiento.fecha).split(' ')[1]}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge 
                      color={movimiento.tipo_movimiento === 'entrada' ? 'green' : 'red'}
                      className="flex items-center"
                    >
                      {movimiento.tipo_movimiento === 'entrada' ? (
                        <><FiArrowDown className="mr-1" size={14} /> Entrada</>
                      ) : (
                        <><FiArrowUp className="mr-1" size={14} /> Salida</>
                      )}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <button 
                      className="text-indigo-600 hover:underline"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleFilterByMateriaPrima(movimiento.id_materia_prima);
                      }}
                    >
                      {movimiento.materiaPrima?.nombre || 'N/A'}
                    </button>
                  </TableCell>
                  <TableCell>
                    {movimiento.lote ? (
                      <button 
                        className="text-indigo-600 hover:underline"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleFilterByLote(movimiento.id_lote);
                        }}
                      >
                        {movimiento.lote.codigo_lote}
                      </button>
                    ) : (
                      <span className="text-gray-400 italic">Sin lote</span>
                    )}
                  </TableCell>
                  <TableCell className="font-medium">
                    {movimiento.cantidad}
                  </TableCell>
                  <TableCell className="max-w-xs truncate">
                    {movimiento.descripcion || <span className="text-gray-400 italic">Sin descripciÃ³n</span>}
                  </TableCell>
                  <TableCell>
                    {movimiento.tipoAjuste ? (
                      <span className="text-purple-600">{movimiento.tipoAjuste.nombre}</span>
                    ) : movimiento.proveedor ? (
                      <span className="text-blue-600">{movimiento.proveedor.nombre}</span>
                    ) : (
                      <span className="text-gray-400 italic">-</span>
                    )}
                  </TableCell>
                  <TableCell>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleViewDetails(movimiento);
                      }}
                      className="p-1 text-indigo-600 hover:text-indigo-800"
                      title="Ver detalles"
                    >
                      <FiInfo size={18} />
                    </button>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creaciÃ³n de movimiento */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title="Registrar Movimiento de Inventario"
      >
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tipo de Movimiento <span className="text-red-500">*</span>
              </label>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="tipo_movimiento"
                    value="entrada"
                    checked={formData.tipo_movimiento === 'entrada'}
                    onChange={handleChange}
                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500"
                  />
                  <span className="ml-2 text-gray-700">Entrada</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="tipo_movimiento"
                    value="salida"
                    checked={formData.tipo_movimiento === 'salida'}
                    onChange={handleChange}
                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500"
                  />
                  <span className="ml-2 text-gray-700">Salida</span>
                </label>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Materia Prima <span className="text-red-500">*</span>
              </label>
              <select
                name="id_materia_prima"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.id_materia_prima}
                onChange={handleChange}
              >
                <option value="">Seleccionar materia prima</option>
                {materiasPrimas.map(mp => (
                  <option key={mp.id} value={mp.id}>
                    {mp.nombre} ({mp.unidadMedida?.abreviatura || 'N/A'})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Lote
              </label>
              <select
                name="id_lote"
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.id_lote}
                onChange={handleChange}
                disabled={!formData.id_materia_prima}
              >
                <option value="">Seleccionar lote</option>
                {lotesFiltrados.map(lote => (
                  <option key={lote.id} value={lote.id}>
                    {lote.codigo_lote} - Disponible: {lote.cantidad_actual}
                  </option>
                ))}
              </select>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Cantidad <span className="text-red-500">*</span>
                </label>
                <input
                  type="number"
                  name="cantidad"
                  min="0.01"
                  step="0.01"
                  required
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.cantidad}
                  onChange={handleChange}
                />
              </div>

              {formData.tipo_movimiento === 'entrada' ? (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Proveedor
                  </label>
                  <select
                    name="id_proveedor"
                    className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                    value={formData.id_proveedor}
                    onChange={handleChange}
                  >
                    <option value="">Seleccionar proveedor</option>
                    {proveedores.map(proveedor => (
                      <option key={proveedor.id} value={proveedor.id}>
                        {proveedor.nombre}
                      </option>
                    ))}
                  </select>
                </div>
              ) : (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Tipo de Ajuste
                  </label>
                  <select
                    name="id_tipo_ajuste"
                    className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                    value={formData.id_tipo_ajuste}
                    onChange={handleChange}
                  >
                    <option value="">Seleccionar tipo de ajuste</option>
                    {tiposAjuste.map(tipo => (
                      <option key={tipo.id} value={tipo.id}>
                        {tipo.nombre}
                      </option>
                    ))}
                  </select>
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                DescripciÃ³n <span className="text-red-500">*</span>
              </label>
              <textarea
                name="descripcion"
                rows="3"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.descripcion}
                onChange={handleChange}
                placeholder="Detalles del movimiento..."
              />
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
            >
              Cancelar
            </Button>
            <Button type="submit">
              Registrar Movimiento
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de detalles */}
      <Modal
        isOpen={isDetailModalOpen}
        onClose={() => setIsDetailModalOpen(false)}
        title="Detalles del Movimiento"
        maxWidth="md"
      >
        {selectedMovimiento && (
          <div className="space-y-6 py-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* InformaciÃ³n general */}
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiBox className="mr-2" /> InformaciÃ³n General
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                    <div className="flex justify-between">
                      <div>
                        <p className="text-sm text-gray-500">Tipo de Movimiento</p>
                        <Badge 
                          color={selectedMovimiento.tipo_movimiento === 'entrada' ? 'green' : 'red'}
                          className="mt-1"
                        >
                          {selectedMovimiento.tipo_movimiento === 'entrada' ? (
                            <span className="flex items-center"><FiArrowDown className="mr-1" /> Entrada</span>
                          ) : (
                            <span className="flex items-center"><FiArrowUp className="mr-1" /> Salida</span>
                          )}
                        </Badge>
                      </div>
                      
                      <div>
                        <p className="text-sm text-gray-500">Fecha y Hora</p>
                        <p className="font-medium">{formatDate(selectedMovimiento.fecha)}</p>
                      </div>
                    </div>
                    
                    <div>
                      <p className="text-sm text-gray-500">Materia Prima</p>
                      <p className="font-medium flex items-center">
                        <FiPackage className="mr-1 text-indigo-500" size={14} />
                        {selectedMovimiento.materiaPrima?.nombre || 'N/A'}
                      </p>
                    </div>
                    
                    {selectedMovimiento.lote && (
                      <div>
                        <p className="text-sm text-gray-500">Lote</p>
                        <p className="font-medium">{selectedMovimiento.lote.codigo_lote}</p>
                      </div>
                    )}
                    
                    <div>
                      <p className="text-sm text-gray-500">Cantidad</p>
                      <p className="font-medium">{selectedMovimiento.cantidad}</p>
                    </div>
                  </div>
                </div>
                
                {/* Detalles especÃ­ficos */}
                {selectedMovimiento.tipo_movimiento === 'entrada' && selectedMovimiento.proveedor && (
                  <div>
                    <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                      <FiTruck className="mr-2" /> Proveedor
                    </h3>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <p className="font-medium flex items-center">
                        {selectedMovimiento.proveedor.nombre}
                      </p>
                    </div>
                  </div>
                )}
                
                {selectedMovimiento.tipo_movimiento === 'salida' && selectedMovimiento.tipoAjuste && (
                  <div>
                    <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                      <FiSettings className="mr-2" /> Tipo de Ajuste
                    </h3>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <p className="font-medium">{selectedMovimiento.tipoAjuste.nombre}</p>
                      {selectedMovimiento.tipoAjuste.requiere_autorizacion && (
                        <Badge color="purple" className="mt-1">Requiere autorizaciÃ³n</Badge>
                      )}
                      {selectedMovimiento.tipoAjuste.afecta_costos && (
                        <Badge color="blue" className="mt-1 ml-2">Afecta costos</Badge>
                      )}
                    </div>
                  </div>
                )}
              </div>
              
              {/* DescripciÃ³n y usuario */}
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiInfo className="mr-2" /> DescripciÃ³n
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <p className="whitespace-pre-line">{selectedMovimiento.descripcion}</p>
                  </div>
                </div>
                
                {selectedMovimiento.usuario && (
                  <div>
                    <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                      <FiUser className="mr-2" /> Registrado por
                    </h3>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <p>{selectedMovimiento.usuario.nombre}</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            <div className="flex justify-end gap-3 pt-4">
              <Button
                variant="outline"
                onClick={() => setIsDetailModalOpen(false)}
              >
                Cerrar
              </Button>
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
};

const FiUser = ({ className, size }) => {
  return (
    <svg
      stroke="currentColor"
      fill="none"
      strokeWidth="2"
      viewBox="0 0 24 24"
      strokeLinecap="round"
      strokeLinejoin="round"
      height={size || "1em"}
      width={size || "1em"}
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
      <circle cx="12" cy="7" r="4"></circle>
    </svg>
  );
};

export default Movimientos;\n\n

=== ./inventario/pages/Proveedores.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiEdit2, 
  FiTrash2, 
  FiPlus, 
  FiSearch, 
  FiTruck, 
  FiInfo, 
  FiPhone, 
  FiMail, 
  FiUser,
  FiMapPin,
  FiClock,
  FiDollarSign
} from 'react-icons/fi';
import {
  getAllProviders,
  getProviderById,
  createProvider,
  updateProvider,
  deleteProvider,
  searchProviders
} from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';

const Proveedores = () => {
  const [providers, setProviders] = useState([]);
  const [selectedProvider, setSelectedProvider] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [formData, setFormData] = useState({
    nombre: '',
    razon_social: '',
    rfc: '',
    telefono: '',
    email: '',
    direccion: '',
    productos_servicios: '',
    condiciones_pago: '',
    tiempo_entrega_promedio: '',
    notas: ''
  });

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      let providersData;
      
      // Si hay tÃ©rmino de bÃºsqueda, usar la bÃºsqueda especÃ­fica
      if (searchTerm.trim()) {
        providersData = await searchProviders(searchTerm);
      } else {
        providersData = await getAllProviders();
      }
      
      setProviders(providersData);
    } catch (error) {
      console.error('Error al cargar proveedores:', error);
      toast.error('Error al cargar los proveedores');
    } finally {
      setLoading(false);
    }
  }, [searchTerm]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Manejadores de eventos para el formulario
  const handleOpenModal = (provider = null) => {
    if (provider) {
      setSelectedProvider(provider);
      setFormData({
        nombre: provider.nombre || '',
        razon_social: provider.razon_social || '',
        rfc: provider.rfc || '',
        telefono: provider.telefono || '',
        email: provider.email || '',
        direccion: provider.direccion || '',
        productos_servicios: provider.productos_servicios || '',
        condiciones_pago: provider.condiciones_pago || '',
        tiempo_entrega_promedio: provider.tiempo_entrega_promedio || '',
        notas: provider.notas || ''
      });
    } else {
      setSelectedProvider(null);
      setFormData({
        nombre: '',
        razon_social: '',
        rfc: '',
        telefono: '',
        email: '',
        direccion: '',
        productos_servicios: '',
        condiciones_pago: '',
        tiempo_entrega_promedio: '',
        notas: ''
      });
    }
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Convertir tiempo de entrega a nÃºmero si no estÃ¡ vacÃ­o
      const providerData = {
        ...formData,
        tiempo_entrega_promedio: formData.tiempo_entrega_promedio 
          ? Number(formData.tiempo_entrega_promedio) 
          : null
      };

      if (selectedProvider) {
        await updateProvider(selectedProvider.id, providerData);
        toast.success('Proveedor actualizado correctamente');
      } else {
        await createProvider(providerData);
        toast.success('Proveedor creado correctamente');
      }
      
      setIsModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al guardar proveedor:', error);
      
      // Manejar errores especÃ­ficos
      if (error.response?.data?.error) {
        toast.error(error.response.data.error);
      } else {
        toast.error('Error al guardar el proveedor');
      }
    }
  };

  const handleViewDetails = async (provider) => {
    try {
      setLoading(true);
      // Si el proveedor ya tiene todos los datos, usarlo directamente
      // sino, obtener detalles completos
      const fullProvider = await getProviderById(provider.id);
      setSelectedProvider(fullProvider);
      setIsDetailModalOpen(true);
    } catch (error) {
      console.error('Error al obtener detalles del proveedor:', error);
      toast.error('Error al obtener detalles del proveedor');
    } finally {
      setLoading(false);
    }
  };

  const handleOpenDeleteModal = (provider) => {
    setSelectedProvider(provider);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    try {
      await deleteProvider(selectedProvider.id);
      toast.success('Proveedor eliminado correctamente');
      setIsDeleteModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al eliminar proveedor:', error);
      
      // Manejar error especÃ­fico cuando hay Ã³rdenes activas
      if (error.response?.status === 409) {
        toast.error('No se puede eliminar el proveedor porque tiene Ã³rdenes de compra activas');
      } else {
        toast.error(error.response?.data?.error || 'Error al eliminar el proveedor');
      }
    }
  };

  // BÃºsqueda con retraso para evitar demasiadas peticiones
  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };

  if (loading && !providers.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Proveedores</h1>
        <Button
          className="flex items-center gap-2"
          onClick={() => handleOpenModal()}
        >
          <FiPlus size={18} /> Agregar Proveedor
        </Button>
      </div>

      {/* BÃºsqueda */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="text-gray-400" />
          </div>
          <input
            type="text"
            className="pl-10 pr-4 py-2 w-full border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Buscar por nombre, razÃ³n social o productos/servicios..."
            value={searchTerm}
            onChange={handleSearch}
          />
        </div>
      </div>

      {/* Tabla de proveedores */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Nombre</TableHead>
              <TableHead>RazÃ³n Social</TableHead>
              <TableHead>Contacto</TableHead>
              <TableHead>Productos/Servicios</TableHead>
              <TableHead>Tiempo de Entrega</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {providers.length === 0 ? (
              <TableRow>
                <TableCell colSpan={6} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiTruck size={40} className="mb-2 text-gray-300" />
                    <p>No se encontraron proveedores</p>
                    {searchTerm && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={() => setSearchTerm('')}
                      >
                        Limpiar bÃºsqueda
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              providers.map(provider => (
                <TableRow key={provider.id}>
                  <TableCell className="font-medium">{provider.nombre}</TableCell>
                  <TableCell>
                    {provider.razon_social || <span className="text-gray-400 italic">No especificada</span>}
                  </TableCell>
                  <TableCell>
                    <div className="flex flex-col space-y-1">
                      {provider.telefono && (
                        <div className="flex items-center text-sm">
                          <FiPhone className="mr-1 text-gray-500" size={14} />
                          <span>{provider.telefono}</span>
                        </div>
                      )}
                      {provider.email && (
                        <div className="flex items-center text-sm">
                          <FiMail className="mr-1 text-gray-500" size={14} />
                          <span>{provider.email}</span>
                        </div>
                      )}
                    </div>
                  </TableCell>
                  <TableCell className="max-w-xs truncate">
                    {provider.productos_servicios}
                  </TableCell>
                  <TableCell>
                    {provider.tiempo_entrega_promedio 
                      ? `${provider.tiempo_entrega_promedio} dÃ­as`
                      : <span className="text-gray-400 italic">No especificado</span>
                    }
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleViewDetails(provider)}
                        className="p-1 text-indigo-600 hover:text-indigo-800"
                        title="Ver detalles"
                      >
                        <FiInfo size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenModal(provider)}
                        className="p-1 text-blue-600 hover:text-blue-800"
                        title="Editar"
                      >
                        <FiEdit2 size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenDeleteModal(provider)}
                        className="p-1 text-red-600 hover:text-red-800"
                        title="Eliminar"
                      >
                        <FiTrash2 size={18} />
                      </button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creaciÃ³n/ediciÃ³n */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={selectedProvider ? `Editar: ${selectedProvider.nombre}` : 'Nuevo Proveedor'}
      >
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nombre <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="nombre"
                  required
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.nombre}
                  onChange={handleChange}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  RazÃ³n Social
                </label>
                <input
                  type="text"
                  name="razon_social"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.razon_social}
                  onChange={handleChange}
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  RFC
                </label>
                <input
                  type="text"
                  name="rfc"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.rfc}
                  onChange={handleChange}
                  placeholder="Ej: XAXX010101000"
                  maxLength={13}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  TelÃ©fono
                </label>
                <input
                  type="tel"
                  name="telefono"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.telefono}
                  onChange={handleChange}
                  placeholder="Ej: (123) 456-7890"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <input
                type="email"
                name="email"
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.email}
                onChange={handleChange}
                placeholder="correo@ejemplo.com"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                DirecciÃ³n
              </label>
              <textarea
                name="direccion"
                rows="2"
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.direccion}
                onChange={handleChange}
                placeholder="DirecciÃ³n completa"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Productos/Servicios <span className="text-red-500">*</span>
              </label>
              <textarea
                name="productos_servicios"
                rows="3"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.productos_servicios}
                onChange={handleChange}
                placeholder="DescripciÃ³n de productos o servicios que ofrece"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Condiciones de Pago
                </label>
                <textarea
                  name="condiciones_pago"
                  rows="2"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.condiciones_pago}
                  onChange={handleChange}
                  placeholder="Ej: 30 dÃ­as, prepago, etc."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Tiempo de Entrega Promedio (dÃ­as)
                </label>
                <input
                  type="number"
                  name="tiempo_entrega_promedio"
                  min="1"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.tiempo_entrega_promedio}
                  onChange={handleChange}
                  placeholder="Ej: 5"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Notas Adicionales
              </label>
              <textarea
                name="notas"
                rows="3"
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.notas}
                onChange={handleChange}
                placeholder="InformaciÃ³n adicional sobre el proveedor"
              />
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
            >
              Cancelar
            </Button>
            <Button type="submit">
              {selectedProvider ? 'Actualizar' : 'Crear'}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de detalles */}
      <Modal
        isOpen={isDetailModalOpen}
        onClose={() => setIsDetailModalOpen(false)}
        title={`Proveedor: ${selectedProvider?.nombre}`}
        maxWidth="lg"
      >
        {selectedProvider && (
          <div className="space-y-6 py-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* InformaciÃ³n general */}
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiUser className="mr-2" /> InformaciÃ³n General
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                    <div>
                      <p className="text-sm text-gray-500">Nombre</p>
                      <p className="font-medium">{selectedProvider.nombre}</p>
                    </div>
                    
                    {selectedProvider.razon_social && (
                      <div>
                        <p className="text-sm text-gray-500">RazÃ³n Social</p>
                        <p>{selectedProvider.razon_social}</p>
                      </div>
                    )}
                    
                    {selectedProvider.rfc && (
                      <div>
                        <p className="text-sm text-gray-500">RFC</p>
                        <p className="font-mono">{selectedProvider.rfc}</p>
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Contacto */}
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiPhone className="mr-2" /> Contacto
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                    {selectedProvider.telefono && (
                      <div>
                        <p className="text-sm text-gray-500">TelÃ©fono</p>
                        <p>{selectedProvider.telefono}</p>
                      </div>
                    )}
                    
                    {selectedProvider.email && (
                      <div>
                        <p className="text-sm text-gray-500">Email</p>
                        <p className="text-blue-600">{selectedProvider.email}</p>
                      </div>
                    )}
                    
                    {selectedProvider.direccion && (
                      <div>
                        <p className="text-sm text-gray-500">DirecciÃ³n</p>
                        <p>{selectedProvider.direccion}</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              {/* Productos y condiciones */}
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiTruck className="mr-2" /> Productos / Servicios
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <p className="whitespace-pre-line">{selectedProvider.productos_servicios}</p>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiClock className="mr-2" /> Condiciones
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                    {selectedProvider.tiempo_entrega_promedio && (
                      <div>
                        <p className="text-sm text-gray-500">Tiempo de entrega promedio</p>
                        <p>{selectedProvider.tiempo_entrega_promedio} dÃ­as</p>
                      </div>
                    )}
                    
                    {selectedProvider.condiciones_pago && (
                      <div>
                        <p className="text-sm text-gray-500">Condiciones de pago</p>
                        <p>{selectedProvider.condiciones_pago}</p>
                      </div>
                    )}
                  </div>
                </div>
                
                {selectedProvider.notas && (
                  <div>
                    <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                      <FiInfo className="mr-2" /> Notas Adicionales
                    </h3>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <p className="whitespace-pre-line">{selectedProvider.notas}</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            <div className="flex justify-end gap-3 pt-4">
              <Button
                variant="outline"
                onClick={() => handleOpenModal(selectedProvider)}
              >
                Editar
              </Button>
              <Button
                variant="outline"
                onClick={() => setIsDetailModalOpen(false)}
              >
                Cerrar
              </Button>
            </div>
          </div>
        )}
      </Modal>

      {/* Modal de confirmaciÃ³n de eliminaciÃ³n */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="Confirmar EliminaciÃ³n"
        maxWidth="sm"
      >
        <div className="py-4">
          <p className="text-gray-600">
            Â¿EstÃ¡s seguro de que deseas eliminar el proveedor <span className="font-semibold">{selectedProvider?.nombre}</span>?
          </p>
          <p className="text-gray-500 text-sm mt-2">
            No se podrÃ¡ eliminar si tiene Ã³rdenes de compra activas asociadas.
          </p>
        </div>
        
        <div className="flex justify-end gap-3 pt-2">
          <Button
            variant="outline"
            onClick={() => setIsDeleteModalOpen(false)}
          >
            Cancelar
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
          >
            Eliminar
          </Button>
        </div>
      </Modal>
    </div>
  );
};

export default Proveedores;\n\n

=== ./inventario/pages/TiposAjuste.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiEdit2, 
  FiTrash2, 
  FiPlus, 
  FiSearch, 
  FiSettings, 
  FiDollarSign, 
  FiShield, 
  FiInfo
} from 'react-icons/fi';
import {
  getAllAdjustmentTypes,
  createAdjustmentType,
  updateAdjustmentType,
  deleteAdjustmentType,
  getTiposAjusteAutorizacion,
  getTiposAjusteCostos
} from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const TiposAjuste = () => {
  const [tiposAjuste, setTiposAjuste] = useState([]);
  const [selectedTipo, setSelectedTipo] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filtros, setFiltros] = useState({
    requiereAutorizacion: false,
    afectaCostos: false
  });
  const [formData, setFormData] = useState({
    nombre: '',
    descripcion: '',
    afecta_costos: false,
    requiere_autorizacion: false
  });

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      let tiposData;
      
      // Aplicar filtros si es necesario
      if (filtros.requiereAutorizacion) {
        tiposData = await getTiposAjusteAutorizacion();
      } else if (filtros.afectaCostos) {
        tiposData = await getTiposAjusteCostos();
      } else {
        tiposData = await getAllAdjustmentTypes();
      }
      
      setTiposAjuste(tiposData);
    } catch (error) {
      console.error('Error al cargar tipos de ajuste:', error);
      toast.error('Error al cargar los tipos de ajuste');
    } finally {
      setLoading(false);
    }
  }, [filtros.requiereAutorizacion, filtros.afectaCostos]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Filtrar tipos
  const filteredTipos = tiposAjuste
    .filter(tipo => {
      // Filtro de bÃºsqueda
      if (searchTerm && 
          !tipo.nombre.toLowerCase().includes(searchTerm.toLowerCase()) &&
          !tipo.descripcion?.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      return true;
    })
    .sort((a, b) => a.nombre.localeCompare(b.nombre));

  // Manejadores de eventos para el formulario
  const handleOpenModal = (tipo = null) => {
    if (tipo) {
      setSelectedTipo(tipo);
      setFormData({
        nombre: tipo.nombre,
        descripcion: tipo.descripcion || '',
        afecta_costos: tipo.afecta_costos,
        requiere_autorizacion: tipo.requiere_autorizacion
      });
    } else {
      setSelectedTipo(null);
      setFormData({
        nombre: '',
        descripcion: '',
        afecta_costos: false,
        requiere_autorizacion: false
      });
    }
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (selectedTipo) {
        await updateAdjustmentType(selectedTipo.id, formData);
        toast.success('Tipo de ajuste actualizado correctamente');
      } else {
        await createAdjustmentType(formData);
        toast.success('Tipo de ajuste creado correctamente');
      }
      
      setIsModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al guardar tipo de ajuste:', error);
      
      if (error.response?.data?.error) {
        toast.error(error.response.data.error);
      } else {
        toast.error('Error al guardar el tipo de ajuste');
      }
    }
  };

  const handleViewDetails = (tipo) => {
    setSelectedTipo(tipo);
    setIsDetailModalOpen(true);
  };

  const handleOpenDeleteModal = (tipo) => {
    setSelectedTipo(tipo);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    try {
      await deleteAdjustmentType(selectedTipo.id);
      toast.success('Tipo de ajuste eliminado correctamente');
      setIsDeleteModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al eliminar tipo de ajuste:', error);
      
      if (error.response?.status === 409) {
        toast.error('No se puede eliminar el tipo de ajuste porque tiene movimientos asociados');
      } else {
        toast.error(error.response?.data?.error || 'Error al eliminar el tipo de ajuste');
      }
    }
  };

  // Filtrado
  const toggleFiltroAutorizacion = () => {
    setFiltros(prev => ({
      ...prev,
      requiereAutorizacion: !prev.requiereAutorizacion,
      afectaCostos: false // Desactivar el otro filtro
    }));
  };

  const toggleFiltroCostos = () => {
    setFiltros(prev => ({
      ...prev,
      afectaCostos: !prev.afectaCostos,
      requiereAutorizacion: false // Desactivar el otro filtro
    }));
  };

  const resetFiltros = () => {
    setFiltros({
      requiereAutorizacion: false,
      afectaCostos: false
    });
    setSearchTerm('');
  };

  if (loading && !tiposAjuste.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Tipos de Ajuste</h1>
        <Button
          className="flex items-center gap-2"
          onClick={() => handleOpenModal()}
        >
          <FiPlus size={18} /> Agregar Tipo
        </Button>
      </div>

      {/* Filtros y bÃºsqueda */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <div className="flex flex-col sm:flex-row gap-4 items-center mb-4">
          <div className="relative flex-1">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="text-gray-400" />
            </div>
            <input
              type="text"
              className="pl-10 pr-4 py-2 w-full border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Buscar por nombre o descripciÃ³n..."
              value={searchTerm}
              onChange={e => setSearchTerm(e.target.value)}
            />
          </div>
          
          <div className="flex flex-wrap gap-2">
            <button
              className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
                filtros.requiereAutorizacion 
                  ? 'bg-purple-100 text-purple-800 border border-purple-200' 
                  : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
              }`}
              onClick={toggleFiltroAutorizacion}
            >
              <FiShield size={16} />
              Requiere AutorizaciÃ³n
              {filtros.requiereAutorizacion && <FiX size={16} className="ml-1" />}
            </button>
            
            <button
              className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
                filtros.afectaCostos 
                  ? 'bg-blue-100 text-blue-800 border border-blue-200' 
                  : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
              }`}
              onClick={toggleFiltroCostos}
            >
              <FiDollarSign size={16} />
              Afecta Costos
              {filtros.afectaCostos && <FiX size={16} className="ml-1" />}
            </button>
            
            {(searchTerm || filtros.requiereAutorizacion || filtros.afectaCostos) && (
              <button
                className="flex items-center gap-1 px-3 py-2 rounded-lg bg-gray-100 hover:bg-gray-200 text-gray-700"
                onClick={resetFiltros}
              >
                <FiX size={16} />
                Limpiar Filtros
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Tabla de tipos de ajuste */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Nombre</TableHead>
              <TableHead>DescripciÃ³n</TableHead>
              <TableHead>Autorizaciones</TableHead>
              <TableHead>AfectaciÃ³n</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredTipos.length === 0 ? (
              <TableRow>
                <TableCell colSpan={5} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiSettings size={40} className="mb-2 text-gray-300" />
                    <p>No se encontraron tipos de ajuste</p>
                    {(searchTerm || filtros.requiereAutorizacion || filtros.afectaCostos) && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={resetFiltros}
                      >
                        Limpiar filtros
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredTipos.map(tipo => (
                <TableRow key={tipo.id}>
                  <TableCell className="font-medium">{tipo.nombre}</TableCell>
                  <TableCell className="max-w-xs truncate">
                    {tipo.descripcion || <span className="text-gray-400 italic">Sin descripciÃ³n</span>}
                  </TableCell>
                  <TableCell>
                    {tipo.requiere_autorizacion ? (
                      <Badge color="purple">Requiere autorizaciÃ³n</Badge>
                    ) : (
                      <span className="text-gray-500">No necesita</span>
                    )}
                  </TableCell>
                  <TableCell>
                    {tipo.afecta_costos ? (
                      <Badge color="blue">Afecta costos</Badge>
                    ) : (
                      <span className="text-gray-500">No afecta</span>
                    )}
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleViewDetails(tipo)}
                        className="p-1 text-indigo-600 hover:text-indigo-800"
                        title="Ver detalles"
                      >
                        <FiInfo size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenModal(tipo)}
                        className="p-1 text-blue-600 hover:text-blue-800"
                        title="Editar"
                      >
                        <FiEdit2 size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenDeleteModal(tipo)}
                        className="p-1 text-red-600 hover:text-red-800"
                        title="Eliminar"
                      >
                        <FiTrash2 size={18} />
                      </button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creaciÃ³n/ediciÃ³n */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={selectedTipo ? `Editar Tipo: ${selectedTipo.nombre}` : 'Nuevo Tipo de Ajuste'}
        maxWidth="md"
      >
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Nombre <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                name="nombre"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.nombre}
                onChange={handleChange}
                placeholder="Ej: Merma por caducidad"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                DescripciÃ³n
              </label>
              <textarea
                name="descripcion"
                rows="3"
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.descripcion}
                onChange={handleChange}
                placeholder="DescripciÃ³n detallada del tipo de ajuste..."
              />
            </div>

            <div className="space-y-2">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="afecta_costos"
                  name="afecta_costos"
                  checked={formData.afecta_costos}
                  onChange={handleChange}
                  className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                />
                <label htmlFor="afecta_costos" className="ml-2 block text-sm text-gray-700">
                  Afecta costos
                </label>
              </div>
              <p className="text-xs text-gray-500 ml-6">
                Si estÃ¡ activado, este tipo de ajuste modificarÃ¡ el costo promedio de los productos.
              </p>
            </div>

            <div className="space-y-2">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="requiere_autorizacion"
                  name="requiere_autorizacion"
                  checked={formData.requiere_autorizacion}
                  onChange={handleChange}
                  className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                />
                <label htmlFor="requiere_autorizacion" className="ml-2 block text-sm text-gray-700">
                  Requiere autorizaciÃ³n
                </label>
              </div>
              <p className="text-xs text-gray-500 ml-6">
                Si estÃ¡ activado, solo los administradores podrÃ¡n realizar ajustes de este tipo.
              </p>
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
            >
              Cancelar
            </Button>
            <Button type="submit">
              {selectedTipo ? 'Actualizar' : 'Crear'}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de detalles */}
      <Modal
        isOpen={isDetailModalOpen}
        onClose={() => setIsDetailModalOpen(false)}
        title={`Tipo de Ajuste: ${selectedTipo?.nombre}`}
        maxWidth="md"
      >
        {selectedTipo && (
          <div className="space-y-6 py-2">
            <div className="space-y-4">
              <div>
                <h3 className="text-lg font-medium text-gray-800 mb-2">InformaciÃ³n General</h3>
                <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                  <div>
                    <p className="text-sm text-gray-500">Nombre</p>
                    <p className="font-medium">{selectedTipo.nombre}</p>
                  </div>
                  
                  {selectedTipo.descripcion && (
                    <div>
                      <p className="text-sm text-gray-500">DescripciÃ³n</p>
                      <p className="whitespace-pre-line">{selectedTipo.descripcion}</p>
                    </div>
                  )}
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-medium text-gray-800 mb-2">ConfiguraciÃ³n</h3>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <FiDollarSign className={`mr-2 ${selectedTipo.afecta_costos ? 'text-blue-500' : 'text-gray-400'}`} />
                        <span>Afecta costos</span>
                      </div>
                      <div>
                        {selectedTipo.afecta_costos ? (
                          <Badge color="blue">Activado</Badge>
                        ) : (
                          <Badge color="gray">Desactivado</Badge>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <FiShield className={`mr-2 ${selectedTipo.requiere_autorizacion ? 'text-purple-500' : 'text-gray-400'}`} />
                        <span>Requiere autorizaciÃ³n</span>
                      </div>
                      <div>
                        {selectedTipo.requiere_autorizacion ? (
                          <Badge color="purple">Activado</Badge>
                        ) : (
                          <Badge color="gray">Desactivado</Badge>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex justify-end gap-3 pt-4">
              <Button
                variant="outline"
                onClick={() => handleOpenModal(selectedTipo)}
              >
                Editar
              </Button>
              <Button
                variant="outline"
                onClick={() => setIsDetailModalOpen(false)}
              >
                Cerrar
              </Button>
            </div>
          </div>
        )}
      </Modal>

      {/* Modal de confirmaciÃ³n de eliminaciÃ³n */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="Confirmar EliminaciÃ³n"
        maxWidth="sm"
      >
        <div className="py-4">
          <p className="text-gray-600">
            Â¿EstÃ¡s seguro de que deseas eliminar el tipo de ajuste <span className="font-semibold">{selectedTipo?.nombre}</span>?
          </p>
          <p className="text-gray-500 text-sm mt-2">
            No se podrÃ¡ eliminar si tiene movimientos asociados.
          </p>
        </div>
        
        <div className="flex justify-end gap-3 pt-2">
          <Button
            variant="outline"
            onClick={() => setIsDeleteModalOpen(false)}
          >
            Cancelar
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
          >
            Eliminar
          </Button>
        </div>
      </Modal>
    </div>
  );
};

// FiX component para mantener consistencia con los otros Ã­conos
const FiX = ({ size, className }) => {
  return (
    <svg
      stroke="currentColor"
      fill="none"
      strokeWidth="2"
      viewBox="0 0 24 24"
      strokeLinecap="round"
      strokeLinejoin="round"
      height={size || "1em"}
      width={size || "1em"}
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <line x1="18" y1="6" x2="6" y2="18"></line>
      <line x1="6" y1="6" x2="18" y2="18"></line>
    </svg>
  );
};

export default TiposAjuste;\n\n

=== ./inventario/pages/UnidadesMedida.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { FiEdit2, FiTrash2, FiPlus, FiSearch, FiFilter, FiX } from 'react-icons/fi';
import { getAllUnits, getUnitById, createUnit, updateUnit, deleteUnit } from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const tipoBadgeColors = {
  masa: 'blue',
  volumen: 'green',
  unidad: 'purple',
  longitud: 'amber',
  area: 'indigo'
};

const UnidadesMedida = () => {
  const [units, setUnits] = useState([]);
  const [selectedUnit, setSelectedUnit] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [activeFilter, setActiveFilter] = useState('');
  const [formData, setFormData] = useState({
    nombre: '',
    abreviatura: '',
    tipo: 'masa'
  });

  const tiposUnidad = [
    { id: 'masa', label: 'Masa' },
    { id: 'volumen', label: 'Volumen' },
    { id: 'unidad', label: 'Unidad' },
    { id: 'longitud', label: 'Longitud' },
    { id: 'area', label: 'Ãrea' }
  ];

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      const unitsData = await getAllUnits();
      setUnits(unitsData);
    } catch (error) {
      console.error('Error al cargar unidades de medida:', error);
      toast.error('Error al cargar las unidades de medida');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Filtrar unidades
  const filteredUnits = units
    .filter(unit => {
      // Filtro de bÃºsqueda
      if (searchTerm && !unit.nombre.toLowerCase().includes(searchTerm.toLowerCase()) && 
          !unit.abreviatura.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      // Filtro por tipo
      if (activeFilter && unit.tipo !== activeFilter) {
        return false;
      }
      
      return true;
    })
    .sort((a, b) => a.nombre.localeCompare(b.nombre));

  // Manejadores de eventos para el formulario
  const handleOpenModal = (unit = null) => {
    if (unit) {
      setSelectedUnit(unit);
      setFormData({
        nombre: unit.nombre,
        abreviatura: unit.abreviatura,
        tipo: unit.tipo
      });
    } else {
      setSelectedUnit(null);
      setFormData({
        nombre: '',
        abreviatura: '',
        tipo: 'masa'
      });
    }
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (selectedUnit) {
        await updateUnit(selectedUnit.id, formData);
        toast.success('Unidad de medida actualizada correctamente');
      } else {
        await createUnit(formData);
        toast.success('Unidad de medida creada correctamente');
      }
      
      setIsModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al guardar unidad de medida:', error);
      toast.error(error.response?.data?.error || 'Error al guardar la unidad de medida');
    }
  };

  const handleOpenDeleteModal = (unit) => {
    setSelectedUnit(unit);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    try {
      await deleteUnit(selectedUnit.id);
      toast.success('Unidad de medida eliminada correctamente');
      setIsDeleteModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al eliminar unidad de medida:', error);
      
      // Manejar el caso especÃ­fico de error cuando la unidad estÃ¡ en uso
      if (error.response?.data?.error?.includes('tiene conversiones asociadas') || 
          error.response?.status === 409) {
        toast.error('No se puede eliminar la unidad porque estÃ¡ siendo utilizada en conversiones o productos');
      } else {
        toast.error(error.response?.data?.error || 'Error al eliminar la unidad de medida');
      }
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Unidades de Medida</h1>
        <Button
          className="flex items-center gap-2"
          onClick={() => handleOpenModal()}
        >
          <FiPlus size={18} /> Agregar Unidad
        </Button>
      </div>

      {/* Filtros y bÃºsqueda */}
      <div className="bg-white p-4 rounded-lg shadow-sm flex flex-col sm:flex-row gap-4 justify-between">
        <div className="relative flex-1">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="text-gray-400" />
          </div>
          <input
            type="text"
            className="pl-10 pr-4 py-2 w-full border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Buscar por nombre o abreviatura..."
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="flex flex-wrap gap-2">
          {tiposUnidad.map(tipo => (
            <button
              key={tipo.id}
              className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
                activeFilter === tipo.id 
                  ? `bg-${tipoBadgeColors[tipo.id]}-100 text-${tipoBadgeColors[tipo.id]}-800 border border-${tipoBadgeColors[tipo.id]}-200` 
                  : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
              }`}
              onClick={() => setActiveFilter(activeFilter === tipo.id ? '' : tipo.id)}
            >
              <FiFilter size={16} />
              {tipo.label}
              {activeFilter === tipo.id && <FiX size={16} />}
            </button>
          ))}
        </div>
      </div>

      {/* Tabla de unidades de medida */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Nombre</TableHead>
              <TableHead>Abreviatura</TableHead>
              <TableHead>Tipo</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredUnits.length === 0 ? (
              <TableRow>
                <TableCell colSpan={4} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <div className="mb-2 text-gray-300 text-4xl">âš–ï¸</div>
                    <p>No se encontraron unidades de medida</p>
                    {(searchTerm || activeFilter) && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={() => {
                          setSearchTerm('');
                          setActiveFilter('');
                        }}
                      >
                        Limpiar filtros
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredUnits.map(unit => (
                <TableRow key={unit.id}>
                  <TableCell className="font-medium">{unit.nombre}</TableCell>
                  <TableCell className="font-mono">{unit.abreviatura}</TableCell>
                  <TableCell>
                    <Badge color={tipoBadgeColors[unit.tipo] || 'gray'}>
                      {unit.tipo.charAt(0).toUpperCase() + unit.tipo.slice(1)}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleOpenModal(unit)}
                        className="p-1 text-blue-600 hover:text-blue-800"
                        title="Editar"
                      >
                        <FiEdit2 size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenDeleteModal(unit)}
                        className="p-1 text-red-600 hover:text-red-800"
                        title="Eliminar"
                      >
                        <FiTrash2 size={18} />
                      </button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creaciÃ³n/ediciÃ³n */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={selectedUnit ? `Editar: ${selectedUnit.nombre}` : 'Nueva Unidad de Medida'}
        maxWidth="md"
      >
        <form onSubmit={handleSubmit} className="grid grid-cols-1 gap-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Nombre */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Nombre
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiEdit2 className="text-gray-400" size={16} />
                </div>
                <input
                  type="text"
                  name="nombre"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.nombre}
                  onChange={handleChange}
                  placeholder="Ej: Kilogramo"
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                />
              </div>
            </div>

            {/* Abreviatura */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Abreviatura
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <span className="text-gray-400 font-mono text-sm font-bold">Aa</span>
                </div>
                <input
                  type="text"
                  name="abreviatura"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.abreviatura}
                  onChange={handleChange}
                  placeholder="Ej: kg"
                  maxLength={10}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                />
              </div>
              <p className="mt-1 text-sm" style={{ color: 'var(--text-tertiary)' }}>
                MÃ¡ximo 10 caracteres. Se recomienda usar abreviaturas estÃ¡ndar.
              </p>
            </div>
          </div>

          {/* Tipo de Unidad - Ocupa una fila completa */}
          <div>
            <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
              Tipo de Unidad
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FiFilter className="text-gray-400" size={16} />
              </div>
              <select
                name="tipo"
                required
                className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500 appearance-none"
                value={formData.tipo}
                onChange={handleChange}
                style={{ 
                  backgroundColor: 'var(--input-bg)', 
                  color: 'var(--input-text)', 
                  borderColor: 'var(--input-border)'
                }}
              >
                {tiposUnidad.map(tipo => (
                  <option key={tipo.id} value={tipo.id}>
                    {tipo.label}
                  </option>
                ))}
              </select>
              <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <FiChevronDown className="text-gray-400" size={16} />
              </div>
            </div>
            <p className="mt-1 text-sm" style={{ color: 'var(--text-tertiary)' }}>
              Las conversiones solo pueden realizarse entre unidades del mismo tipo.
            </p>
          </div>

          {/* Botones de acciÃ³n */}
          <div className="flex justify-end gap-3 pt-4 mt-2">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
              className="flex items-center gap-2"
            >
              <FiX size={16} /> Cancelar
            </Button>
            <Button type="submit" className="flex items-center gap-2">
              {selectedUnit ? <FiEdit2 size={16} /> : <FiPlus size={16} />}
              {selectedUnit ? 'Actualizar' : 'Crear'}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de confirmaciÃ³n de eliminaciÃ³n */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="Confirmar EliminaciÃ³n"
        maxWidth="sm"
      >
        <div className="py-4">
          <p className="text-gray-600">
            Â¿EstÃ¡s seguro de que deseas eliminar la unidad de medida <span className="font-semibold">{selectedUnit?.nombre}</span>?
          </p>
          <p className="text-gray-500 text-sm mt-2">
            No se podrÃ¡ eliminar si estÃ¡ siendo utilizada en materias primas o conversiones.
          </p>
        </div>
        
        <div className="flex justify-end gap-3 pt-2">
          <Button
            variant="outline"
            onClick={() => setIsDeleteModalOpen(false)}
          >
            Cancelar
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
          >
            Eliminar
          </Button>
        </div>
      </Modal>
    </div>
  );
};

export default UnidadesMedida;\n\n

=== ./inventario/pages/index.js ===
// Exportar todos los componentes de inventario/pages
\n\n

=== ./inventario/pages/index.jsx ===
import { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { toast } from 'react-toastify';
import { useAuth } from '@domains/hooks/useAuth';
import InventorySidebarLayout from '@domains/inventario/components/InventorySidebarLayout';
import InventoryLoader from '@domains/inventario/components/InventoryLoader';
import InventoryDashboard from './InventoryDashboard';
import MateriasPrimas from './MateriasPrimas';
import UnidadesMedida from './UnidadesMedida';
import Proveedores from './Proveedores';
import Lotes from './Lotes';
import Movimientos from './Movimientos';
import TiposAjuste from './TiposAjuste';
import Conversiones from './Conversiones';
import Alertas from './Alertas';

const InventoryIndex = () => {
  const { user } = useAuth();
  const [activeSection, setActiveSection] = useState('dashboard');
  const [loading, setLoading] = useState(false); // Set to true for initial loading animation
  const navigate = useNavigate();
  const location = useLocation();
  
  // Sincronizar el estado activeSection con la ruta actual
  useEffect(() => {
    const path = location.pathname;
    if (path === '/inventory') {
      setActiveSection('dashboard');
    } else if (path.includes('materias-primas')) {
      setActiveSection('materias-primas');
    } else if (path.includes('unidades-medida')) {
      setActiveSection('unidades-medida');
    } else if (path.includes('proveedores')) {
      setActiveSection('proveedores');
    } else if (path.includes('lotes')) {
      setActiveSection('lotes');
    } else if (path.includes('movimientos')) {
      setActiveSection('movimientos');
    } else if (path.includes('tipos-ajuste')) {
      setActiveSection('tipos-ajuste');
    } else if (path.includes('conversiones')) {
      setActiveSection('conversiones');
    } else if (path.includes('alertas')) {
      setActiveSection('alertas');
    }
  }, [location.pathname]);
  
  // Mostrar mensaje de advertencia si el usuario no tiene permisos adecuados
  useEffect(() => {
    if (user && user.tipo_usuario !== 'admin' && user.tipo_usuario !== 'inventario') {
      toast.warning('Acceso limitado: No tienes todos los permisos para el sistema de inventario');
    }
  }, [user]);

  // Renderizar el contenido basado en la secciÃ³n activa
  const renderContent = () => {
    if (loading) {
      return <InventoryLoader />;
    }
    
    switch (activeSection) {
      case 'dashboard':
        return <InventoryDashboard />;
      case 'materias-primas':
        return <MateriasPrimas />;
      case 'unidades-medida':
        return <UnidadesMedida />;
      case 'proveedores':
        return <Proveedores />;
      case 'lotes':
        return <Lotes />;
      case 'movimientos':
        return <Movimientos />;
      case 'tipos-ajuste':
        return <TiposAjuste />;
      case 'conversiones':
        return <Conversiones />;
      case 'alertas':
        return <Alertas />;
      default:
        return <InventoryDashboard />;
    }
  };

  return (
    <InventorySidebarLayout>
      {renderContent()}
    </InventorySidebarLayout>
  );
};

export default InventoryIndex;\n\n

=== ./inventario/services/index.js ===
// Exportar todos los componentes de inventario/services
\n\n

=== ./inventario/services/inventoryService.js ===
import axios from 'axios';
import { toast } from 'react-toastify';
import { getAuthToken } from '@/utils/authUtils';

// ConfiguraciÃ³n base para axios
const apiClient = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:3001/api',
  headers: {
    'Content-Type': 'application/json',
  },
  // AÃ±adir timeout para evitar esperas infinitas
  timeout: 15000, // 15 segundos
});

// Interceptor para aÃ±adir el token de autenticaciÃ³n a todas las peticiones
apiClient.interceptors.request.use(
  (config) => {
    const token = getAuthToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// FunciÃ³n para determinar si un error es de conexiÃ³n
const isConnectionError = (error) => {
  return (
    error.code === 'ECONNABORTED' || // Timeout
    error.message.includes('Network Error') || // Error de red
    !error.response || // Sin respuesta
    error.response.status === 503 || // Servicio no disponible
    error.response.status === 504 // Gateway timeout
  );
};

// Interceptor para manejar errores generales
apiClient.interceptors.response.use(
  (response) => response,
  async (error) => {
    // Si el error es de autenticaciÃ³n (401), podrÃ­amos redirigir a login
    if (error.response && error.response.status === 401) {
      toast.error('SesiÃ³n expirada. Por favor, inicie sesiÃ³n de nuevo.');
      // window.location.href = '/login';
      return Promise.reject(error);
    }
    
    // Manejo especÃ­fico para errores de conexiÃ³n a la base de datos
    if (error.response && error.response.status === 503) {
      toast.error('Servicio de base de datos no disponible. Reintentando conexiÃ³n...', {
        autoClose: 5000, // Mostrar por mÃ¡s tiempo
        toastId: 'db-error', // Prevenir duplicados
      });
      
      // Esperar 2 segundos antes de reintentar
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Reintentar la solicitud
      return apiClient.request(error.config);
    }
    
    // Manejo de errores de conexiÃ³n
    if (isConnectionError(error) && error.config && !error.config.__isRetry) {
      // Marcar como reintento para evitar bucles infinitos
      error.config.__isRetry = true;
      
      // No mostrar toast para cada reintento para evitar saturar la interfaz
      console.log('Problema de conexiÃ³n detectado. Reintentando...');
      
      // Esperar 3 segundos antes de reintentar
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Reintentar la solicitud
      return apiClient.request(error.config);
    }
    
    // Control de toasts de error para reducir la cantidad mostrada
    // y usar toastId para prevenir duplicados
    const errorMessage =
      error.response?.data?.error ||
      error.response?.data?.message ||
      (isConnectionError(error) ? 'Error de conexiÃ³n con el servidor' : 'Error al comunicarse con el servidor');
    
    if (!error.config?.suppressErrorToast) {
      // Usando toastId basado en la URL y el tipo de error para evitar duplicados
      const toastId = `error-${error.config?.url?.split('/').pop() || 'general'}`;
      toast.error(errorMessage, {
        toastId,
        autoClose: 3000,
      });
    }
    
    return Promise.reject(error);
  }
);

// FunciÃ³n para reintentar una operaciÃ³n con un nÃºmero mÃ¡ximo de intentos y datos de fallback
const retryOperation = async (operation, maxRetries = 2, delay = 2000, fallbackData = null) => {
  let lastError;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      lastError = error;
      
      // Si no es un error de conexiÃ³n o es el Ãºltimo intento, no reintentar
      if (!isConnectionError(error) || attempt === maxRetries) {
        // Si es el Ãºltimo intento y tenemos datos de fallback, regresarlos
        if (attempt === maxRetries && fallbackData !== null) {
          console.warn('Usando datos de fallback para', operation.name || 'operaciÃ³n desconocida');
          return fallbackData;
        }
        throw error;
      }
      
      console.log(`Intento ${attempt} fallido, reintentando en ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      
      // Aumentar el delay para el prÃ³ximo intento (backoff exponencial)
      delay = Math.min(delay * 1.5, 10000); // MÃ¡ximo 10 segundos
    }
  }
  
  // Si tenemos datos de fallback y llegamos aquÃ­, usarlos
  if (fallbackData !== null) {
    console.warn('Usando datos de fallback despuÃ©s de agotar intentos');
    return fallbackData;
  }
  
  throw lastError;
};

// Funciones auxiliares para simplificar las llamadas API con reintentos
const get = (url, fallbackData = []) => 
  retryOperation(
    () => apiClient.get(url).then(response => response.data),
    2, // MÃ¡ximo 2 reintentos
    2000, // Delay inicial
    fallbackData // Datos de fallback
  );
const post = (url, data) => retryOperation(() => apiClient.post(url, data).then(response => response.data));
const put = (url, data) => retryOperation(() => apiClient.put(url, data).then(response => response.data));
const del = (url) => retryOperation(() => apiClient.delete(url).then(response => response.data));

// ==================== SERVICIOS PARA DASHBOARD ====================

/**
 * Obtiene estadÃ­sticas generales para el dashboard
 */
export const getInventoryStats = async () => {
  try {
    // Intentamos obtener datos reales, pero proporcionamos fallbacks para cada llamada
    let materiasPrimas = [];
    let proveedores = [];
    let movimientos = [];
    let alertas = [];
    
    try {
      materiasPrimas = await get('/inventory/materias-primas', []);
    } catch (error) {
      console.warn('Error al obtener materias primas, usando datos fallback:', error);
      materiasPrimas = [];
    }
    
    try {
      proveedores = await get('/inventory/proveedores', []);
    } catch (error) {
      console.warn('Error al obtener proveedores, usando datos fallback:', error);
      proveedores = [];
    }
    
    try {
      movimientos = await get('/inventory/movimientos', []);
    } catch (error) {
      console.warn('Error al obtener movimientos, usando datos fallback:', error);
      movimientos = [];
    }
    
    try {
      alertas = await get('/inventory/alertas?leida=false', []);
    } catch (error) {
      console.warn('Error al obtener alertas, usando datos fallback:', error);
      alertas = [];
    }
    
    // Filtramos movimientos de hoy
    const hoy = new Date().toISOString().split('T')[0];
    const movimientosHoy = movimientos.filter(m => 
      m?.fecha?.startsWith?.(hoy) || false
    ).length;
    
    return {
      totalItems: materiasPrimas.length,
      totalProviders: proveedores.length,
      movementsToday: movimientosHoy,
      activeAlerts: alertas.filter(a => !a?.leida || false).length
    };
  } catch (error) {
    console.error('Error al obtener estadÃ­sticas de inventario:', error);
    // Retornamos datos fallback bÃ¡sicos en caso de error
    return {
      totalItems: 0,
      totalProviders: 0,
      movementsToday: 0,
      activeAlerts: 0,
      isUsingFallbackData: true
    };
  }
};

/**
 * Obtiene elementos con stock bajo
 */
export const getLowStockItems = async () => {
  try {
    return await get('/inventory/materias-primas/bajo-stock', []);
  } catch (error) {
    console.error('Error al obtener elementos con bajo stock:', error);
    // Retornar arreglo vacÃ­o en lugar de lanzar excepciÃ³n
    return [];
  }
};

/**
 * Obtiene alertas activas del sistema
 */
export const getActiveAlerts = async () => {
  try {
    return await get('/inventory/alertas?leida=false', []);
  } catch (error) {
    console.error('Error al obtener alertas activas:', error);
    // Retornar arreglo vacÃ­o en lugar de lanzar excepciÃ³n
    return [];
  }
};

// ==================== MATERIAS PRIMAS ====================

/**
 * Obtiene todas las materias primas
 */
export const getAllItems = async () => {
  try {
    return await get('/inventory/materias-primas');
  } catch (error) {
    console.error('Error al obtener materias primas:', error);
    throw error;
  }
};

/**
 * Obtiene una materia prima por ID
 */
export const getItemById = async (id) => {
  try {
    return await get(`/inventory/materias-primas/${id}`);
  } catch (error) {
    console.error(`Error al obtener materia prima con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Crea una nueva materia prima
 */
export const createItem = async (itemData) => {
  try {
    return await post('/inventory/materias-primas', itemData);
  } catch (error) {
    console.error('Error al crear materia prima:', error);
    throw error;
  }
};

/**
 * Actualiza una materia prima existente
 */
export const updateItem = async (id, itemData) => {
  try {
    return await put(`/inventory/materias-primas/${id}`, itemData);
  } catch (error) {
    console.error(`Error al actualizar materia prima con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Elimina una materia prima
 */
export const deleteItem = async (id) => {
  try {
    return await del(`/inventory/materias-primas/${id}`);
  } catch (error) {
    console.error(`Error al eliminar materia prima con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene elementos prÃ³ximos a caducar
 * @param {number} dias - DÃ­as lÃ­mite para considerar prÃ³ximo a caducar
 */
export const getProximosACaducar = async (dias = 7) => {
  try {
    return await get(`/inventory/materias-primas/proximos-caducar?dias=${dias}`, []);
  } catch (error) {
    console.error('Error al obtener elementos prÃ³ximos a caducar:', error);
    // Retornar arreglo vacÃ­o en lugar de lanzar excepciÃ³n
    return [];
  }
};

/**
 * Obtiene los movimientos de una materia prima
 */
export const getMovimientosByItem = async (id, params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/materias-primas/${id}/movimientos${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error(`Error al obtener movimientos de materia prima ${id}:`, error);
    throw error;
  }
};

// ==================== UNIDADES DE MEDIDA ====================

/**
 * Obtiene todas las unidades de medida
 */
export const getAllUnits = async () => {
  try {
    return await get('/inventory/unidades-medida');
  } catch (error) {
    console.error('Error al obtener unidades de medida:', error);
    throw error;
  }
};

/**
 * Obtiene una unidad de medida por ID
 */
export const getUnitById = async (id) => {
  try {
    return await get(`/inventory/unidades-medida/${id}`);
  } catch (error) {
    console.error(`Error al obtener unidad de medida con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Crea una nueva unidad de medida
 */
export const createUnit = async (unitData) => {
  try {
    return await post('/inventory/unidades-medida', unitData);
  } catch (error) {
    console.error('Error al crear unidad de medida:', error);
    throw error;
  }
};

/**
 * Actualiza una unidad de medida existente
 */
export const updateUnit = async (id, unitData) => {
  try {
    return await put(`/inventory/unidades-medida/${id}`, unitData);
  } catch (error) {
    console.error(`Error al actualizar unidad de medida con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Elimina una unidad de medida
 */
export const deleteUnit = async (id) => {
  try {
    return await del(`/inventory/unidades-medida/${id}`);
  } catch (error) {
    console.error(`Error al eliminar unidad de medida con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene unidades de medida por tipo
 */
export const getUnitsByType = async (tipo) => {
  try {
    return await get(`/inventory/unidades-medida/tipo/${tipo}`);
  } catch (error) {
    console.error(`Error al obtener unidades de medida de tipo ${tipo}:`, error);
    throw error;
  }
};

// ==================== CONVERSIONES DE MEDIDA ====================

/**
 * Obtiene todas las conversiones de medida
 */
export const getAllConversiones = async () => {
  try {
    return await get('/inventory/conversiones');
  } catch (error) {
    console.error('Error al obtener conversiones:', error);
    throw error;
  }
};

/**
 * Obtiene una conversiÃ³n por ID de unidades
 */
export const getConversionById = async (idOrigen, idDestino) => {
  try {
    return await get(`/inventory/conversiones/${idOrigen}/${idDestino}`);
  } catch (error) {
    console.error(`Error al obtener conversiÃ³n entre unidades ${idOrigen} y ${idDestino}:`, error);
    throw error;
  }
};

/**
 * Crea una nueva conversiÃ³n
 */
export const createConversion = async (conversionData) => {
  try {
    return await post('/inventory/conversiones', conversionData);
  } catch (error) {
    console.error('Error al crear conversiÃ³n:', error);
    throw error;
  }
};

/**
 * Actualiza una conversiÃ³n existente
 */
export const updateConversion = async (idOrigen, idDestino, conversionData) => {
  try {
    return await put(`/inventory/conversiones/${idOrigen}/${idDestino}`, conversionData);
  } catch (error) {
    console.error(`Error al actualizar conversiÃ³n entre unidades ${idOrigen} y ${idDestino}:`, error);
    throw error;
  }
};

/**
 * Elimina una conversiÃ³n
 */
export const deleteConversion = async (idOrigen, idDestino) => {
  try {
    return await del(`/inventory/conversiones/${idOrigen}/${idDestino}`);
  } catch (error) {
    console.error(`Error al eliminar conversiÃ³n entre unidades ${idOrigen} y ${idDestino}:`, error);
    throw error;
  }
};

/**
 * Obtiene conversiones disponibles para una unidad
 */
export const getConversionesDisponibles = async (idUnidad) => {
  try {
    return await get(`/inventory/conversiones/unidad/${idUnidad}`);
  } catch (error) {
    console.error(`Error al obtener conversiones disponibles para unidad ${idUnidad}:`, error);
    throw error;
  }
};

/**
 * Convierte una cantidad entre unidades
 */
export const convertirCantidad = async (conversionData) => {
  try {
    return await post('/inventory/conversiones/convertir', conversionData);
  } catch (error) {
    console.error('Error al convertir cantidad:', error);
    throw error;
  }
};

// ==================== LOTES ====================

/**
 * Obtiene todos los lotes
 */
export const getAllLots = async () => {
  try {
    return await get('/inventory/lotes');
  } catch (error) {
    console.error('Error al obtener lotes:', error);
    throw error;
  }
};

/**
 * Obtiene un lote por ID
 */
export const getLotById = async (id) => {
  try {
    return await get(`/inventory/lotes/${id}`);
  } catch (error) {
    console.error(`Error al obtener lote con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Crea un nuevo lote
 */
export const createLot = async (lotData) => {
  try {
    return await post('/inventory/lotes', lotData);
  } catch (error) {
    console.error('Error al crear lote:', error);
    throw error;
  }
};

/**
 * Actualiza un lote existente
 */
export const updateLot = async (id, lotData) => {
  try {
    return await put(`/inventory/lotes/${id}`, lotData);
  } catch (error) {
    console.error(`Error al actualizar lote con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Elimina un lote
 */
export const deleteLot = async (id) => {
  try {
    return await del(`/inventory/lotes/${id}`);
  } catch (error) {
    console.error(`Error al eliminar lote con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene lotes por materia prima
 */
export const getLotsByMateriaPrima = async (idMateriaPrima, params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/lotes/materia-prima/${idMateriaPrima}${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error(`Error al obtener lotes de materia prima ${idMateriaPrima}:`, error);
    throw error;
  }
};

/**
 * Obtiene lotes prÃ³ximos a caducar
 */
export const getLotesProximosACaducar = async (dias = 7) => {
  try {
    return await get(`/inventory/lotes/proximos-caducar?dias=${dias}`, []);
  } catch (error) {
    console.error('Error al obtener lotes prÃ³ximos a caducar:', error);
    // Retornar arreglo vacÃ­o en lugar de lanzar excepciÃ³n
    return [];
  }
};

// ==================== MOVIMIENTOS DE INVENTARIO ====================

/**
 * Obtiene todos los movimientos
 */
export const getAllMovements = async (params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/movimientos${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error('Error al obtener movimientos:', error);
    throw error;
  }
};

/**
 * Obtiene un movimiento por ID
 */
export const getMovementById = async (id) => {
  try {
    return await get(`/inventory/movimientos/${id}`);
  } catch (error) {
    console.error(`Error al obtener movimiento con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Crea un nuevo movimiento
 */
export const createMovement = async (movementData) => {
  try {
    return await post('/inventory/movimientos', movementData);
  } catch (error) {
    console.error('Error al crear movimiento:', error);
    throw error;
  }
};

/**
 * Actualiza un movimiento existente (no suele ser comÃºn)
 */
export const updateMovement = async (id, movementData) => {
  try {
    return await put(`/inventory/movimientos/${id}`, movementData);
  } catch (error) {
    console.error(`Error al actualizar movimiento con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Elimina un movimiento (no suele ser comÃºn)
 */
export const deleteMovement = async (id) => {
  try {
    return await del(`/inventory/movimientos/${id}`);
  } catch (error) {
    console.error(`Error al eliminar movimiento con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene movimientos por materia prima
 */
export const getMovimientosByMateriaPrima = async (idMateriaPrima, params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/movimientos/materia-prima/${idMateriaPrima}${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error(`Error al obtener movimientos de materia prima ${idMateriaPrima}:`, error);
    throw error;
  }
};

/**
 * Obtiene movimientos por lote
 */
export const getMovimientosByLote = async (idLote, params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/movimientos/lote/${idLote}${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error(`Error al obtener movimientos de lote ${idLote}:`, error);
    throw error;
  }
};

/**
 * Obtiene estadÃ­sticas de movimientos de inventario (entradas y salidas) por periodo
 */
export const getMovementStats = async () => {
  try {
    return await get('/inventory/movimientos/estadisticas/consumo', {
      // Datos fallback para estadÃ­sticas de movimientos
      entradas: [],
      salidas: [],
      periodos: []
    });
  } catch (error) {
    console.error('Error al obtener estadÃ­sticas de movimiento:', error);
    // Retornar datos fallback para que la UI pueda mostrar algo
    return {
      entradas: [],
      salidas: [],
      periodos: [],
      isUsingFallbackData: true
    };
  }
};

// ==================== PROVEEDORES ====================

/**
 * Obtiene todos los proveedores
 */
export const getAllProviders = async () => {
  try {
    return await get('/inventory/proveedores');
  } catch (error) {
    console.error('Error al obtener proveedores:', error);
    throw error;
  }
};

/**
 * Obtiene un proveedor por ID
 */
export const getProviderById = async (id) => {
  try {
    return await get(`/inventory/proveedores/${id}`);
  } catch (error) {
    console.error(`Error al obtener proveedor con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Crea un nuevo proveedor
 */
export const createProvider = async (providerData) => {
  try {
    return await post('/inventory/proveedores', providerData);
  } catch (error) {
    console.error('Error al crear proveedor:', error);
    throw error;
  }
};

/**
 * Actualiza un proveedor existente
 */
export const updateProvider = async (id, providerData) => {
  try {
    return await put(`/inventory/proveedores/${id}`, providerData);
  } catch (error) {
    console.error(`Error al actualizar proveedor con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Elimina un proveedor
 */
export const deleteProvider = async (id) => {
  try {
    return await del(`/inventory/proveedores/${id}`);
  } catch (error) {
    console.error(`Error al eliminar proveedor con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Busca proveedores por tÃ©rmino
 */
export const searchProviders = async (termino) => {
  try {
    return await get(`/inventory/proveedores/buscar?termino=${termino}`);
  } catch (error) {
    console.error(`Error al buscar proveedores con tÃ©rmino "${termino}":`, error);
    throw error;
  }
};

/**
 * Obtiene Ã³rdenes de compra por proveedor
 */
export const getOrdenesCompraByProveedor = async (idProveedor, params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/proveedores/${idProveedor}/ordenes${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error(`Error al obtener Ã³rdenes de compra de proveedor ${idProveedor}:`, error);
    throw error;
  }
};

// ==================== TIPOS DE AJUSTE ====================

/**
 * Obtiene todos los tipos de ajuste
 */
export const getAllAdjustmentTypes = async () => {
  try {
    return await get('/inventory/tipos-ajuste');
  } catch (error) {
    console.error('Error al obtener tipos de ajuste:', error);
    throw error;
  }
};

/**
 * Obtiene un tipo de ajuste por ID
 */
export const getAdjustmentTypeById = async (id) => {
  try {
    return await get(`/inventory/tipos-ajuste/${id}`);
  } catch (error) {
    console.error(`Error al obtener tipo de ajuste con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Crea un nuevo tipo de ajuste
 */
export const createAdjustmentType = async (typeData) => {
  try {
    return await post('/inventory/tipos-ajuste', typeData);
  } catch (error) {
    console.error('Error al crear tipo de ajuste:', error);
    throw error;
  }
};

/**
 * Actualiza un tipo de ajuste existente
 */
export const updateAdjustmentType = async (id, typeData) => {
  try {
    return await put(`/inventory/tipos-ajuste/${id}`, typeData);
  } catch (error) {
    console.error(`Error al actualizar tipo de ajuste con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Elimina un tipo de ajuste
 */
export const deleteAdjustmentType = async (id) => {
  try {
    return await del(`/inventory/tipos-ajuste/${id}`);
  } catch (error) {
    console.error(`Error al eliminar tipo de ajuste con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene tipos de ajuste que requieren autorizaciÃ³n
 */
export const getTiposAjusteAutorizacion = async () => {
  try {
    return await get('/inventory/tipos-ajuste/autorizacion');
  } catch (error) {
    console.error('Error al obtener tipos de ajuste que requieren autorizaciÃ³n:', error);
    throw error;
  }
};

/**
 * Obtiene tipos de ajuste que afectan costos
 */
export const getTiposAjusteCostos = async () => {
  try {
    return await get('/inventory/tipos-ajuste/costos');
  } catch (error) {
    console.error('Error al obtener tipos de ajuste que afectan costos:', error);
    throw error;
  }
};

// ==================== ALERTAS DE INVENTARIO ====================

/**
 * Obtiene todas las alertas
 */
export const getAllAlertas = async (params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/alertas${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error('Error al obtener alertas:', error);
    throw error;
  }
};

/**
 * Obtiene una alerta por ID
 */
export const getAlertaById = async (id) => {
  try {
    return await get(`/inventory/alertas/${id}`);
  } catch (error) {
    console.error(`Error al obtener alerta con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene alertas pendientes
 */
export const getAlertasPendientes = async () => {
  try {
    return await get('/inventory/alertas/pendientes');
  } catch (error) {
    console.error('Error al obtener alertas pendientes:', error);
    throw error;
  }
};

/**
 * Marca una alerta como leÃ­da
 */
export const marcarComoLeida = async (id) => {
  try {
    return await put(`/inventory/alertas/${id}/leer`, {});
  } catch (error) {
    console.error(`Error al marcar alerta ${id} como leÃ­da:`, error);
    throw error;
  }
};

/**
 * Marca todas las alertas como leÃ­das
 */
export const marcarTodasComoLeidas = async (tipo = undefined) => {
  try {
    const url = tipo 
      ? `/inventory/alertas/leer-todas?tipo=${tipo}` 
      : '/inventory/alertas/leer-todas';
    return await put(url, {});
  } catch (error) {
    console.error('Error al marcar todas las alertas como leÃ­das:', error);
    throw error;
  }
};

/**
 * Obtiene alertas por tipo
 */
export const getAlertasPorTipo = async (tipo, params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/alertas/tipo/${tipo}${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error(`Error al obtener alertas de tipo ${tipo}:`, error);
    throw error;
  }
};

/**
 * Obtiene resumen de alertas
 */
export const getResumenAlertas = async () => {
  try {
    return await get('/inventory/alertas/resumen');
  } catch (error) {
    console.error('Error al obtener resumen de alertas:', error);
    throw error;
  }
};

export default {
  // Dashboard
  getInventoryStats,
  getLowStockItems,
  getActiveAlerts,
  
  // Materias Primas
  getAllItems,
  getItemById,
  createItem,
  updateItem,
  deleteItem,
  getProximosACaducar,
  getMovimientosByItem,
  
  // Unidades de Medida
  getAllUnits,
  getUnitById,
  createUnit,
  updateUnit,
  deleteUnit,
  getUnitsByType,
  
  // Conversiones
  getAllConversiones,
  getConversionById,
  createConversion,
  updateConversion,
  deleteConversion,
  getConversionesDisponibles,
  convertirCantidad,
  
  // Lotes
  getAllLots,
  getLotById,
  createLot,
  updateLot,
  deleteLot,
  getLotsByMateriaPrima,
  getLotesProximosACaducar,
  
  // Movimientos
  getAllMovements,
  getMovementById,
  createMovement,
  updateMovement,
  deleteMovement,
  getMovimientosByMateriaPrima,
  getMovimientosByLote,
  getMovementStats,
  
  // Proveedores
  getAllProviders,
  getProviderById,
  createProvider,
  updateProvider,
  deleteProvider,
  searchProviders,
  getOrdenesCompraByProveedor,
  
  // Tipos de Ajuste
  getAllAdjustmentTypes,
  getAdjustmentTypeById,
  createAdjustmentType,
  updateAdjustmentType,
  deleteAdjustmentType,
  getTiposAjusteAutorizacion,
  getTiposAjusteCostos,
  
  // Alertas
  getAllAlertas,
  getAlertaById,
  getAlertasPendientes,
  marcarComoLeida,
  marcarTodasComoLeidas,
  getAlertasPorTipo,
  getResumenAlertas,
  getMovementStats
};\n\n


