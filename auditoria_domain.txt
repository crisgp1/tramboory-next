=== ./auditoria/components/index.js ===
// Exportar todos los componentes de auditoria/components
\n\n

=== ./auditoria/hooks/index.js ===
// Exportar todos los componentes de auditoria/hooks
\n\n

=== ./auditoria/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n

=== ./auditoria/pages/ArchivedTable.jsx ===
import React, { useState, useCallback, useMemo } from 'react';
import { FiSearch, FiRefreshCw } from 'react-icons/fi';
// Usar el alias @ para garantizar resoluciÃ³n correcta en Docker
import { formatDate } from '@shared/utils/formatters';
import axiosInstance from '@shared/utils/axiosConfig';
import { toast } from 'react-toastify';

const ArchivedTable = ({
  items,
  itemSearch,
  setItemSearch,
  fetchData,
  selectedMonth,
  type
}) => {
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState({
    fecha_inicio: '',
    fecha_fin: '',
  });

  const handleReactivate = async (id) => {
    try {
      await axiosInstance.put(`/api/${type}/${id}/reactivate`);
      toast.success('Elemento reactivado con Ã©xito');
      fetchData();
    } catch (error) {
      console.error('Error al reactivar el elemento:', error);
      toast.error('Error al reactivar el elemento');
    }
  };

  const filteredItems = useMemo(() => {
    return items.filter(item => {
      const searchTerm = itemSearch.toLowerCase();
      const matchesSearch = 
        item.id.toString().includes(searchTerm) ||
        (item.nombre_festejado && item.nombre_festejado.toLowerCase().includes(searchTerm)) ||
        (item.usuario?.nombre && item.usuario.nombre.toLowerCase().includes(searchTerm));

      const itemDate = new Date(item.fecha_reserva || item.fecha || item.fecha_creacion);
      const matchesFechaInicio = !filters.fecha_inicio || 
        itemDate >= new Date(filters.fecha_inicio);
      const matchesFechaFin = !filters.fecha_fin || 
        itemDate <= new Date(filters.fecha_fin);

      const matchesMonth = itemDate.getMonth() === selectedMonth;

      return matchesSearch && matchesFechaInicio && matchesFechaFin && matchesMonth;
    });
  }, [items, itemSearch, filters, selectedMonth]);

  const renderStatus = (estado) => {
    const statusStyles = {
      confirmada: 'bg-green-100 text-green-800',
      cancelada: 'bg-red-100 text-red-800',
      pendiente: 'bg-yellow-100 text-yellow-800',
      fallido: 'bg-red-100 text-red-800',
      completado: 'bg-green-100 text-green-800'
    };

    // Handle undefined estado
    if (!estado) {
      return (
        <span className="px-2 py-1 rounded-full text-xs font-semibold bg-gray-100 text-gray-800">
          No definido
        </span>
      );
    }

    return (
      <span
        className={`px-2 py-1 rounded-full text-xs font-semibold ${
          statusStyles[estado] || 'bg-gray-100 text-gray-800'
        }`}
      >
        {estado.charAt(0).toUpperCase() + estado.slice(1)}
      </span>
    );
  };

  const renderWithFallback = (value, fallback = 'No especificado') => {
    return value || fallback;
  };

  const FilterPanel = () => (
    <div className="bg-white p-4 border-b border-gray-200">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha Inicio
          </label>
          <input
            type="date"
            value={filters.fecha_inicio}
            onChange={(e) => setFilters(prev => ({...prev, fecha_inicio: e.target.value}))}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha Fin
          </label>
          <input
            type="date"
            value={filters.fecha_fin}
            onChange={(e) => setFilters(prev => ({...prev, fecha_fin: e.target.value}))}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>
      </div>
    </div>
  );

  return (
    <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
      <div className="bg-white p-4 border-b border-gray-200">
        <div className="flex items-center justify-between flex-wrap gap-4">
          <div className="flex-1 min-w-0 relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              placeholder="Buscar elemento archivado..."
              value={itemSearch}
              onChange={(e) => setItemSearch(e.target.value)}
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
        </div>
      </div>

      {showFilters && <FilterPanel />}

      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-300">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                ID
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Tipo
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Fecha
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Detalles
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredItems.map((item) => (
              <tr key={`${type}-${item.id}`} className="hover:bg-gray-50">
                <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                  {item.id}
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                  {type.charAt(0).toUpperCase() + type.slice(1)}
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                  {formatDate(item.fecha_reserva || item.fecha || item.fecha_creacion)}
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm">
                  {renderStatus(item.estado)}
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                  {type === 'reservas' ? (
                    <>
                      <div>Cliente: {renderWithFallback(item.usuario?.nombre)}</div>
                      <div>Festejado: {renderWithFallback(item.nombre_festejado)}</div>
                    </>
                  ) : type === 'pagos' ? (
                    <>
                      <div>Monto: ${item.monto}</div>
                      <div>MÃ©todo: {renderWithFallback(item.metodo_pago)}</div>
                    </>
                  ) : (
                    <>
                      <div>Tipo: {renderWithFallback(item.tipo)}</div>
                      <div>Monto: ${item.monto}</div>
                    </>
                  )}
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                  <button
                    onClick={() => handleReactivate(item.id)}
                    className="text-indigo-600 hover:text-indigo-900 transition-colors duration-200 flex items-center"
                    title="Reactivar elemento"
                  >
                    <FiRefreshCw className="h-5 w-5 mr-1" />
                    Reactivar
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {filteredItems.length === 0 && (
        <div className="text-center py-8 bg-white">
          <p className="text-gray-500 text-sm">No se encontraron elementos archivados</p>
        </div>
      )}
    </div>
  );
};

export default ArchivedTable;\n\n

=== ./auditoria/pages/AuditHistory.jsx ===
ï»¿import { useState, useEffect } from 'react';
import axiosInstance from '@shared/utils/axiosConfig';
import { Card } from '@shared/components/Card';

const AuditHistory = () => {
  const [auditLogs, setAuditLogs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filtroFecha, setFiltroFecha] = useState('todos');

  useEffect(() => {
    const fetchAuditLogs = async () => {
      try {
        const response = await axiosInstance.get('/api/auditoria');
        setAuditLogs(response.data);
      } catch (error) {
        console.error('Error al cargar el historial de auditorÃƒÂ­a:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchAuditLogs();
  }, []);

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('es-ES', {
      dateStyle: 'medium',
      timeStyle: 'medium'
    }).format(date);
  };

  const getOperationType = (transaction) => {
    const lowerTransaction = transaction.toLowerCase();
    if (lowerTransaction.includes('crear') || lowerTransaction.includes('creÃƒÂ³')) return 'create';
    if (lowerTransaction.includes('actualizar') || lowerTransaction.includes('actualizÃƒÂ³')) return 'update';
    if (lowerTransaction.includes('eliminar') || lowerTransaction.includes('eliminÃƒÂ³')) return 'delete';
    return 'other';
  };

  const getOperationIcon = (type) => {
    switch (type) {
      case 'create':
        return 'Ã¢Å¾â€¢';
      case 'update':
        return 'Ã¢Å“ÂÃ¯Â¸Â';
      case 'delete':
        return 'Ã°Å¸â€”â€˜Ã¯Â¸Â';
      default:
        return 'Ã°Å¸â€œÂ';
    }
  };

  const getOperationColor = (type) => {
    switch (type) {
      case 'create':
        return 'bg-green-50 border-green-200';
      case 'update':
        return 'bg-blue-50 border-blue-200';
      case 'delete':
        return 'bg-red-50 border-red-200';
      default:
        return 'bg-gray-50 border-gray-200';
    }
  };

  const formatTransaction = (transaction) => {
    // Capitalizar primera letra
    let formattedTransaction = transaction.charAt(0).toUpperCase() + transaction.slice(1);
    
    // Agregar espacios despuÃƒÂ©s de puntos y comas si no los hay
    formattedTransaction = formattedTransaction.replace(/([.,])/g, '$1 ');
    
    // Eliminar espacios duplicados
    formattedTransaction = formattedTransaction.replace(/\s+/g, ' ');
    
    return formattedTransaction;
  };

  const filtrarPorFecha = (logs) => {
    if (filtroFecha === 'todos') return logs;
    
    const ahora = new Date();
    const limite = new Date();
    
    switch (filtroFecha) {
      case 'hoy':
        limite.setHours(0, 0, 0, 0);
        break;
      case 'semana':
        limite.setDate(limite.getDate() - 7);
        break;
      case 'mes':
        limite.setMonth(limite.getMonth() - 1);
        break;
      default:
        return logs;
    }
    
    return logs.filter(log => new Date(log.fecha_operacion) >= limite);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[200px]">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
      </div>
    );
  }

  const logsFiltrados = filtrarPorFecha(auditLogs);

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800">Historial de AuditorÃƒÂ­a</h2>
        <select
          className="px-4 py-2 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500"
          value={filtroFecha}
          onChange={(e) => setFiltroFecha(e.target.value)}
        >
          <option value="todos">Todos los registros</option>
          <option value="hoy">Hoy</option>
          <option value="semana">ÃƒÅ¡ltima semana</option>
          <option value="mes">ÃƒÅ¡ltimo mes</option>
        </select>
      </div>

      <div className="grid gap-4">
        {logsFiltrados.map((log) => {
          const operationType = getOperationType(log.transaccion);
          const operationColor = getOperationColor(operationType);
          
          return (
            <Card 
              key={log.id} 
              className={`p-4 hover:shadow-lg transition-shadow duration-200 border ${operationColor}`}
            >
              <div className="flex items-start space-x-4">
                <div className="text-2xl">
                  {getOperationIcon(operationType)}
                </div>
                <div className="flex-1">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm font-medium text-gray-500">
                        {formatDate(log.fecha_operacion)}
                      </span>
                      <span className="text-sm font-semibold text-indigo-600 bg-indigo-50 px-2 py-1 rounded-full">
                        {log.nombre_usuario}
                      </span>
                    </div>
                  </div>
                  <p className="text-gray-700 text-base">
                    {formatTransaction(log.transaccion)}
                  </p>
                </div>
              </div>
            </Card>
          );
        })}
      </div>
      {logsFiltrados.length === 0 && (
        <div className="text-center text-gray-500 py-8 bg-gray-50 rounded-lg">
          <p className="text-xl">No hay registros de auditorÃƒÂ­a disponibles</p>
          <p className="text-sm mt-2">Prueba ajustando los filtros de fecha</p>
        </div>
      )}
    </div>
  );
};

export default AuditHistory;
\n\n

=== ./auditoria/pages/index.js ===
// Exportar todos los componentes de auditoria/pages
\n\n

=== ./auditoria/services/index.js ===
// Exportar todos los componentes de auditoria/services
\n\n


