=== ./auditoria/components/index.js ===
// Exportar todos los componentes de auditoria/components
\n\n
=== ./auditoria/hooks/index.js ===
// Exportar todos los componentes de auditoria/hooks
\n\n
=== ./auditoria/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n
=== ./auditoria/pages/ArchivedTable.jsx ===
import React, { useState, useCallback, useMemo } from 'react';
import { FiSearch, FiRefreshCw } from 'react-icons/fi';
// Usar el alias @ para garantizar resolución correcta en Docker
import { formatDate } from '@shared/utils/formatters';
import axiosInstance from '@shared/utils/axiosConfig';
import { toast } from 'react-toastify';

const ArchivedTable = ({
  items,
  itemSearch,
  setItemSearch,
  fetchData,
  selectedMonth,
  type
}) => {
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState({
    fecha_inicio: '',
    fecha_fin: '',
  });

  const handleReactivate = async (id) => {
    try {
      await axiosInstance.put(`/api/${type}/${id}/reactivate`);
      toast.success('Elemento reactivado con éxito');
      fetchData();
    } catch (error) {
      console.error('Error al reactivar el elemento:', error);
      toast.error('Error al reactivar el elemento');
    }
  };

  const filteredItems = useMemo(() => {
    return items.filter(item => {
      const searchTerm = itemSearch.toLowerCase();
      const matchesSearch = 
        item.id.toString().includes(searchTerm) ||
        (item.nombre_festejado && item.nombre_festejado.toLowerCase().includes(searchTerm)) ||
        (item.usuario?.nombre && item.usuario.nombre.toLowerCase().includes(searchTerm));

      const itemDate = new Date(item.fecha_reserva || item.fecha || item.fecha_creacion);
      const matchesFechaInicio = !filters.fecha_inicio || 
        itemDate >= new Date(filters.fecha_inicio);
      const matchesFechaFin = !filters.fecha_fin || 
        itemDate <= new Date(filters.fecha_fin);

      const matchesMonth = itemDate.getMonth() === selectedMonth;

      return matchesSearch && matchesFechaInicio && matchesFechaFin && matchesMonth;
    });
  }, [items, itemSearch, filters, selectedMonth]);

  const renderStatus = (estado) => {
    const statusStyles = {
      confirmada: 'bg-green-100 text-green-800',
      cancelada: 'bg-red-100 text-red-800',
      pendiente: 'bg-yellow-100 text-yellow-800',
      fallido: 'bg-red-100 text-red-800',
      completado: 'bg-green-100 text-green-800'
    };

    // Handle undefined estado
    if (!estado) {
      return (
        <span className="px-2 py-1 rounded-full text-xs font-semibold bg-gray-100 text-gray-800">
          No definido
        </span>
      );
    }

    return (
      <span
        className={`px-2 py-1 rounded-full text-xs font-semibold ${
          statusStyles[estado] || 'bg-gray-100 text-gray-800'
        }`}
      >
        {estado.charAt(0).toUpperCase() + estado.slice(1)}
      </span>
    );
  };

  const renderWithFallback = (value, fallback = 'No especificado') => {
    return value || fallback;
  };

  const FilterPanel = () => (
    <div className="bg-white p-4 border-b border-gray-200">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha Inicio
          </label>
          <input
            type="date"
            value={filters.fecha_inicio}
            onChange={(e) => setFilters(prev => ({...prev, fecha_inicio: e.target.value}))}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha Fin
          </label>
          <input
            type="date"
            value={filters.fecha_fin}
            onChange={(e) => setFilters(prev => ({...prev, fecha_fin: e.target.value}))}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>
      </div>
    </div>
  );

  return (
    <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
      <div className="bg-white p-4 border-b border-gray-200">
        <div className="flex items-center justify-between flex-wrap gap-4">
          <div className="flex-1 min-w-0 relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              placeholder="Buscar elemento archivado..."
              value={itemSearch}
              onChange={(e) => setItemSearch(e.target.value)}
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
        </div>
      </div>

      {showFilters && <FilterPanel />}

      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-300">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                ID
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Tipo
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Fecha
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Detalles
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredItems.map((item) => (
              <tr key={`${type}-${item.id}`} className="hover:bg-gray-50">
                <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                  {item.id}
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                  {type.charAt(0).toUpperCase() + type.slice(1)}
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                  {formatDate(item.fecha_reserva || item.fecha || item.fecha_creacion)}
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm">
                  {renderStatus(item.estado)}
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                  {type === 'reservas' ? (
                    <>
                      <div>Cliente: {renderWithFallback(item.usuario?.nombre)}</div>
                      <div>Festejado: {renderWithFallback(item.nombre_festejado)}</div>
                    </>
                  ) : type === 'pagos' ? (
                    <>
                      <div>Monto: ${item.monto}</div>
                      <div>Método: {renderWithFallback(item.metodo_pago)}</div>
                    </>
                  ) : (
                    <>
                      <div>Tipo: {renderWithFallback(item.tipo)}</div>
                      <div>Monto: ${item.monto}</div>
                    </>
                  )}
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                  <button
                    onClick={() => handleReactivate(item.id)}
                    className="text-indigo-600 hover:text-indigo-900 transition-colors duration-200 flex items-center"
                    title="Reactivar elemento"
                  >
                    <FiRefreshCw className="h-5 w-5 mr-1" />
                    Reactivar
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {filteredItems.length === 0 && (
        <div className="text-center py-8 bg-white">
          <p className="text-gray-500 text-sm">No se encontraron elementos archivados</p>
        </div>
      )}
    </div>
  );
};

export default ArchivedTable;\n\n
=== ./auditoria/pages/AuditHistory.jsx ===
﻿import { useState, useEffect } from 'react';
import axiosInstance from '@shared/utils/axiosConfig';
import { Card } from '@shared/components/Card';

const AuditHistory = () => {
  const [auditLogs, setAuditLogs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filtroFecha, setFiltroFecha] = useState('todos');

  useEffect(() => {
    const fetchAuditLogs = async () => {
      try {
        const response = await axiosInstance.get('/api/auditoria');
        setAuditLogs(response.data);
      } catch (error) {
        console.error('Error al cargar el historial de auditorÃ­a:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchAuditLogs();
  }, []);

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('es-ES', {
      dateStyle: 'medium',
      timeStyle: 'medium'
    }).format(date);
  };

  const getOperationType = (transaction) => {
    const lowerTransaction = transaction.toLowerCase();
    if (lowerTransaction.includes('crear') || lowerTransaction.includes('creÃ³')) return 'create';
    if (lowerTransaction.includes('actualizar') || lowerTransaction.includes('actualizÃ³')) return 'update';
    if (lowerTransaction.includes('eliminar') || lowerTransaction.includes('eliminÃ³')) return 'delete';
    return 'other';
  };

  const getOperationIcon = (type) => {
    switch (type) {
      case 'create':
        return 'âž•';
      case 'update':
        return 'âœï¸';
      case 'delete':
        return 'ðŸ—‘ï¸';
      default:
        return 'ðŸ“';
    }
  };

  const getOperationColor = (type) => {
    switch (type) {
      case 'create':
        return 'bg-green-50 border-green-200';
      case 'update':
        return 'bg-blue-50 border-blue-200';
      case 'delete':
        return 'bg-red-50 border-red-200';
      default:
        return 'bg-gray-50 border-gray-200';
    }
  };

  const formatTransaction = (transaction) => {
    // Capitalizar primera letra
    let formattedTransaction = transaction.charAt(0).toUpperCase() + transaction.slice(1);
    
    // Agregar espacios despuÃ©s de puntos y comas si no los hay
    formattedTransaction = formattedTransaction.replace(/([.,])/g, '$1 ');
    
    // Eliminar espacios duplicados
    formattedTransaction = formattedTransaction.replace(/\s+/g, ' ');
    
    return formattedTransaction;
  };

  const filtrarPorFecha = (logs) => {
    if (filtroFecha === 'todos') return logs;
    
    const ahora = new Date();
    const limite = new Date();
    
    switch (filtroFecha) {
      case 'hoy':
        limite.setHours(0, 0, 0, 0);
        break;
      case 'semana':
        limite.setDate(limite.getDate() - 7);
        break;
      case 'mes':
        limite.setMonth(limite.getMonth() - 1);
        break;
      default:
        return logs;
    }
    
    return logs.filter(log => new Date(log.fecha_operacion) >= limite);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[200px]">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
      </div>
    );
  }

  const logsFiltrados = filtrarPorFecha(auditLogs);

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800">Historial de AuditorÃ­a</h2>
        <select
          className="px-4 py-2 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500"
          value={filtroFecha}
          onChange={(e) => setFiltroFecha(e.target.value)}
        >
          <option value="todos">Todos los registros</option>
          <option value="hoy">Hoy</option>
          <option value="semana">Ãšltima semana</option>
          <option value="mes">Ãšltimo mes</option>
        </select>
      </div>

      <div className="grid gap-4">
        {logsFiltrados.map((log) => {
          const operationType = getOperationType(log.transaccion);
          const operationColor = getOperationColor(operationType);
          
          return (
            <Card 
              key={log.id} 
              className={`p-4 hover:shadow-lg transition-shadow duration-200 border ${operationColor}`}
            >
              <div className="flex items-start space-x-4">
                <div className="text-2xl">
                  {getOperationIcon(operationType)}
                </div>
                <div className="flex-1">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm font-medium text-gray-500">
                        {formatDate(log.fecha_operacion)}
                      </span>
                      <span className="text-sm font-semibold text-indigo-600 bg-indigo-50 px-2 py-1 rounded-full">
                        {log.nombre_usuario}
                      </span>
                    </div>
                  </div>
                  <p className="text-gray-700 text-base">
                    {formatTransaction(log.transaccion)}
                  </p>
                </div>
              </div>
            </Card>
          );
        })}
      </div>
      {logsFiltrados.length === 0 && (
        <div className="text-center text-gray-500 py-8 bg-gray-50 rounded-lg">
          <p className="text-xl">No hay registros de auditorÃ­a disponibles</p>
          <p className="text-sm mt-2">Prueba ajustando los filtros de fecha</p>
        </div>
      )}
    </div>
  );
};

export default AuditHistory;
\n\n
=== ./auditoria/pages/index.js ===
// Exportar todos los componentes de auditoria/pages
\n\n
=== ./auditoria/services/index.js ===
// Exportar todos los componentes de auditoria/services
\n\n
=== ./auth/components/index.js ===
// Exportar todos los componentes de auth/components
\n\n
=== ./auth/hooks/index.js ===
// Exportar todos los componentes de auth/hooks
\n\n
=== ./auth/hooks/useAuth.js ===
s// src/hooks/useAuth.js

import { useState, useEffect } from 'react';
import Cookies from 'js-cookie';
import { jwtDecode } from "jwt-decode";

export const useAuth = () => {
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [user, setUser] = useState(null);

    useEffect(() => {
        const verifyToken = () => {
            const token = Cookies.get('token');
            if (token) {
                try {
                    const decoded = jwtDecode(token);
                    console.log("Decoded token:", decoded);  // Para depuración

                    // Verifica si el token ha expirado
                    if (decoded.exp && decoded.exp > Date.now() / 1000) {
                        setIsAuthenticated(true);
                        setUser(decoded);  // Guarda la información del usuario
                    } else {
                        console.log("Token expirado");
                        Cookies.remove('token');
                        setIsAuthenticated(false);
                        setUser(null);
                    }
                } catch (error) {
                    console.error('Error decoding token:', error);
                    Cookies.remove('token');
                    setIsAuthenticated(false);
                    setUser(null);
                }
            } else {
                setIsAuthenticated(false);
                setUser(null);
            }
            setIsLoading(false);
        };

        verifyToken();
    }, []);

    const login = (token) => {
        Cookies.set('token', token, { expires: 1 });  // Expira en 1 día
        setIsAuthenticated(true);
        setUser(jwtDecode(token));
    };

    const logout = () => {
        Cookies.remove('token');
        setIsAuthenticated(false);
        setUser(null);
    };

    return { isAuthenticated, isLoading, user, login, logout };
};\n\n
=== ./auth/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n
=== ./auth/pages/ForgotPassword.jsx ===
import { useState } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import { motion } from 'framer-motion';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { FiMail } from 'react-icons/fi';

const schema = yup.object().shape({
    email: yup.string().email('Email inválido').required('El email es requerido'),
});

export default function ForgotPassword() {
    const [loading, setLoading] = useState(false);

    const { register, handleSubmit, formState: { errors } } = useForm({
        resolver: yupResolver(schema)
    });

    const onSubmit = async (data) => {
        setLoading(true);
        try {
            await axios.post('/api/auth/forgot-password', data);
            toast.success('Se ha enviado un correo electrónico con las instrucciones para restablecer tu contraseña');
        } catch (error) {
            toast.error(error.response?.data?.message || "Hubo un problema al procesar tu solicitud. Intenta nuevamente más tarde.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="min-h-screen bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center p-4"
        >
            <ToastContainer position="top-right" autoClose={3000} hideProgressBar={false} newestOnTop closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover />
            <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">
                <h2 className="text-3xl font-bold mb-6 text-center text-indigo-700">¿Olvidaste tu contraseña?</h2>
                <p className="text-gray-600 mb-6">Ingresa tu dirección de correo electrónico y te enviaremos un enlace para restablecer tu contraseña.</p>
                <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                    <div>
                        <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">Correo Electrónico</label>
                        <div className="relative">
                            <FiMail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                            <input
                                {...register('email')}
                                type="email"
                                className="pl-10 w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                placeholder="tu@email.com"
                            />
                        </div>
                        {errors.email && <p className="mt-1 text-xs text-red-500">{errors.email.message}</p>}
                    </div>

                    <motion.button
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        type="submit"
                        className={`w-full bg-indigo-600 text-white p-3 rounded-md font-semibold hover:bg-indigo-700 transition duration-300 ${
                            loading ? 'opacity-50 cursor-not-allowed' : ''
                        }`}
                        disabled={loading}
                    >
                        {loading ? 'Enviando...' : 'Enviar enlace de restablecimiento'}
                    </motion.button>
                </form>
                <p className="mt-4 text-center text-sm text-gray-600">
                    ¿Recordaste tu contraseña?{' '}
                    <Link to="/signin" className="font-medium text-indigo-600 hover:text-indigo-500">
                        Inicia Sesión
                    </Link>
                </p>
            </div>
        </motion.div>
    );
}\n\n
=== ./auth/pages/SignIn.jsx ===
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { FiMail, FiLock, FiEye, FiEyeOff, FiUser } from 'react-icons/fi';
import axiosInstance from '@shared/utils/axiosConfig.js';
import { useAuth } from '@shared/context/authContext';

const schema = yup.object().shape({
  email: yup.string().email('Email inválido').required('El email es requerido'),
  password: yup.string().required('La contraseña es requerida'),
});

export default function SignIn() {
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);
  const navigate = useNavigate();
  const { login, user, userType } = useAuth();

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(schema),
  });

  const onSubmit = async (data) => {
    setLoading(true);
    try {
      // Usar directamente la función login del contexto
      await login(data.email, data.password);
      
      // Obtener el tipo de usuario desde el contexto o localStorage
      const currentUserType = userType || user?.tipo_usuario || localStorage.getItem('userType') || 'cliente';
      
      toast.success('Inicio de sesión exitoso');

      if (currentUserType === 'admin') {
        navigate('/admin/dashboard');
      } else {
        try {
          const reservationsResponse = await axiosInstance.get('/reservas');
          // Obtener el ID del usuario actual
          const currentUserId = user?.id;
          const userReservations = reservationsResponse.data.filter(
            (reserva) => reserva.id_usuario === currentUserId
          );
          
          if (userReservations.length > 0) {
            navigate(`/reservation-status/${userReservations[0].id}`);
          } else {
            navigate('/reservations');
          }
        } catch (error) {
          console.error('Error fetching reservations:', error);
          navigate('/reservations');
        }
      }
    } catch (error) {
      console.error('Error during login:', error);
      if (error.response) {
        if (error.response.status === 401 || error.response.status === 404) {
          toast.error('Usuario no existe o credenciales inválidas');
        } else if (error.response.status === 500) {
          toast.error('Error del servidor. Por favor, intenta de nuevo más tarde');
        } else {
          toast.error(error.response.data?.message || 'Error desconocido al intentar iniciar sesión');
        }
      } else if (error.request) {
        toast.error('No se recibió respuesta del servidor. Verifica tu conexión a internet.');
      } else {
        toast.error('Error al configurar la solicitud. Por favor, intenta de nuevo.');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-indigo-50 to-purple-50 flex flex-col items-center justify-center p-4 relative overflow-hidden">
      {/* Elementos decorativos - formas geométricas sutiles */}
      <div className="absolute top-0 right-0 w-64 h-64 bg-indigo-100 rounded-full -mr-32 -mt-32 opacity-70"></div>
      <div className="absolute bottom-0 left-0 w-80 h-80 bg-purple-100 rounded-full -ml-40 -mb-40 opacity-70"></div>
      <div className="absolute top-1/3 left-1/4 w-12 h-12 bg-indigo-200 rounded-full transform rotate-45 opacity-60"></div>
      <div className="absolute bottom-1/4 right-1/3 w-20 h-20 bg-purple-200 rounded-full transform rotate-12 opacity-60"></div>
      
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
      
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="relative z-10 w-full max-w-md"
      >
        <div className="bg-white rounded-3xl shadow-xl overflow-hidden">
          <div className="px-8 pt-8 pb-4">
            <div className="flex items-center justify-center mb-6">
              <div className="p-3 bg-indigo-100 rounded-2xl">
                <FiUser className="text-indigo-600 text-2xl" />
              </div>
            </div>
            <h1 className="text-3xl font-bold mb-2 text-center text-gray-800">
              Bienvenido de vuelta
            </h1>
            <p className="text-center text-gray-500 mb-8">Ingresa tus credenciales para continuar</p>
          </div>
          
          <div className="px-8 pb-8">
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
              <div className="space-y-2">
                <label htmlFor="email" className="text-sm font-medium text-gray-700 block">
                  Correo Electrónico
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <FiMail className="text-indigo-500" />
                  </div>
                  <input
                    {...register('email')}
                    type="email"
                    className="w-full pl-11 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
                    placeholder="tu@email.com"
                  />
                </div>
                {errors.email && (
                  <motion.p 
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    className="text-xs text-red-500 mt-1"
                  >
                    {errors.email.message}
                  </motion.p>
                )}
              </div>

              <div className="space-y-2">
                <label htmlFor="password" className="text-sm font-medium text-gray-700 block">
                  Contraseña
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <FiLock className="text-indigo-500" />
                  </div>
                  <input
                    {...register('password')}
                    type={showPassword ? 'text' : 'password'}
                    className="w-full pl-11 pr-11 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
                    placeholder="Tu contraseña"
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-indigo-500 transition-all duration-200"
                  >
                    {showPassword ? <FiEyeOff size={18} /> : <FiEye size={18} />}
                  </button>
                </div>
                {errors.password && (
                  <motion.p 
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    className="text-xs text-red-500 mt-1"
                  >
                    {errors.password.message}
                  </motion.p>
                )}
              </div>

              <div className="flex items-center justify-between mt-6">
                <div className="flex items-center">
                  <input
                    id="rememberMe"
                    type="checkbox"
                    checked={rememberMe}
                    onChange={(e) => setRememberMe(e.target.checked)}
                    className="w-4 h-4 text-indigo-500 border-gray-300 rounded focus:ring-indigo-400"
                  />
                  <label htmlFor="rememberMe" className="ml-2 text-sm text-gray-600">
                    Recordarme
                  </label>
                </div>
                <Link to="/forgot-password" className="text-sm font-medium text-indigo-600 hover:text-indigo-500 transition-all duration-200">
                  ¿Olvidaste tu contraseña?
                </Link>
              </div>

              <motion.button
                whileHover={{ scale: 1.01 }}
                whileTap={{ scale: 0.99 }}
                type="submit"
                className={`w-full py-3 mt-6 rounded-xl font-semibold text-white shadow-lg transition-all duration-300 ${
                  loading 
                    ? 'bg-indigo-400 cursor-not-allowed' 
                    : 'bg-indigo-600 hover:bg-indigo-700 shadow-indigo-200'
                }`}
                disabled={loading}
              >
                {loading ? (
                  <div className="flex items-center justify-center">
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Iniciando sesión...
                  </div>
                ) : 'Iniciar Sesión'}
              </motion.button>
            </form>
            
            <div className="mt-8 text-center">
              <p className="text-sm text-gray-600">
                ¿No tienes una cuenta?{' '}
                <Link to="/signup" className="font-medium text-indigo-600 hover:text-indigo-500 transition-all duration-200">
                  Regístrate aquí
                </Link>
              </p>
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  );
}\n\n
=== ./auth/pages/SignUp.jsx ===
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { motion } from 'framer-motion';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { FiEye, FiEyeOff, FiUser, FiMail, FiPhone, FiMapPin, FiLock } from 'react-icons/fi';

const schema = yup.object().shape({
  nombre: yup.string().required('El nombre es requerido'),
  email: yup.string().email('Email inválido').required('El email es requerido'),
  telefono: yup.string(),
  direccion: yup.string(),
  password: yup.string()
    .min(8, 'La contraseña debe tener al menos 8 caracteres')
    .matches(/[A-Z]/, 'Debe contener al menos una mayúscula')
    .matches(/[a-z]/, 'Debe contener al menos una minúscula')
    .matches(/[0-9]/, 'Debe contener al menos un número')
    .matches(/[!@#$%^&*]/, 'Debe contener al menos un caracter especial')
    .required('La contraseña es requerida'),
  confirmPassword: yup.string()
    .oneOf([yup.ref('password'), null], 'Las contraseñas deben coincidir')
    .required('Confirma tu contraseña'),
});

export default function Signup() {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const { register, handleSubmit, watch, formState: { errors } } = useForm({
    resolver: yupResolver(schema)
  });

  const password = watch('password', '');

  const onSubmit = async (data) => {
    setLoading(true);
    try {
      const response = await axios.post('/api/auth/signup', data);
      toast.success(response.data.message || "Tu cuenta ha sido creada con éxito");
      setTimeout(() => navigate('/signin'), 2000);
    } catch (error) {
      toast.error(error.response?.data?.message || "Hubo un problema al registrarte. Intenta nuevamente más tarde.");
    } finally {
      setLoading(false);
    }
  };

  const getPasswordStrength = () => {
    let strength = 0;
    if (password.length >= 8) strength++;
    if (/[A-Z]/.test(password)) strength++;
    if (/[a-z]/.test(password)) strength++;
    if (/[0-9]/.test(password)) strength++;
    if (/[!@#$%^&*]/.test(password)) strength++;
    return strength;
  };

  const strengthColors = ['bg-red-400', 'bg-orange-400', 'bg-yellow-400', 'bg-lime-400', 'bg-green-400'];

  const passwordCriteria = [
    { label: 'Al menos 8 caracteres', regex: /.{8,}/ },
    { label: 'Una letra mayúscula', regex: /[A-Z]/ },
    { label: 'Una letra minúscula', regex: /[a-z]/ },
    { label: 'Un número', regex: /[0-9]/ },
    { label: 'Un caracter especial (!@#$%^&*)', regex: /[!@#$%^&*]/ },
  ];

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-indigo-50 to-purple-50 flex flex-col items-center justify-center p-4 relative overflow-hidden">
      {/* Elementos decorativos - formas geométricas sutiles */}
      <div className="absolute top-0 right-0 w-64 h-64 bg-indigo-100 rounded-full -mr-32 -mt-32 opacity-70"></div>
      <div className="absolute bottom-0 left-0 w-80 h-80 bg-purple-100 rounded-full -ml-40 -mb-40 opacity-70"></div>
      <div className="absolute top-1/3 left-1/4 w-12 h-12 bg-indigo-200 rounded-full transform rotate-45 opacity-60"></div>
      <div className="absolute bottom-1/4 right-1/3 w-20 h-20 bg-purple-200 rounded-full transform rotate-12 opacity-60"></div>
      
      <ToastContainer position="top-right" autoClose={3000} hideProgressBar={false} newestOnTop closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover />
      
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="relative z-10 w-full max-w-2xl my-8"
      >
        <div className="bg-white rounded-3xl shadow-xl overflow-hidden">
          <div className="px-8 pt-8 pb-4">
            <div className="flex items-center justify-center mb-6">
              <div className="p-3 bg-indigo-100 rounded-2xl">
                <FiUser className="text-indigo-600 text-2xl" />
              </div>
            </div>
            <h1 className="text-3xl font-bold mb-2 text-center text-gray-800">
              Crear cuenta
            </h1>
            <p className="text-center text-gray-500 mb-6">Completa tus datos para registrarte</p>
          </div>
          
          <div className="px-6 sm:px-8 pb-8">
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
                <InputField
                  icon={<FiUser className="text-indigo-500" />}
                  label="Nombre Completo"
                  name="nombre"
                  type="text"
                  placeholder="Tu nombre completo"
                  register={register}
                  error={errors.nombre}
                />

                <InputField
                  icon={<FiMail className="text-indigo-500" />}
                  label="Correo Electrónico"
                  name="email"
                  type="email"
                  placeholder="tu@email.com"
                  register={register}
                  error={errors.email}
                />

                <InputField
                  icon={<FiPhone className="text-indigo-500" />}
                  label="Teléfono"
                  name="telefono"
                  type="tel"
                  placeholder="Tu número de teléfono"
                  register={register}
                  error={errors.telefono}
                />

                <InputField
                  icon={<FiMapPin className="text-indigo-500" />}
                  label="Dirección"
                  name="direccion"
                  type="text"
                  placeholder="Tu dirección"
                  register={register}
                  error={errors.direccion}
                />
              </div>

              <div className="mt-2">
                <PasswordField
                  label="Contraseña"
                  name="password"
                  register={register}
                  error={errors.password}
                  showPassword={showPassword}
                  setShowPassword={setShowPassword}
                />
              </div>

              <div className="bg-indigo-50 rounded-xl p-4 space-y-3 mt-2">
                {/* Indicador de fortaleza */}
                <div className="flex space-x-1">
                  {[0, 1, 2, 3, 4].map((index) => (
                    <motion.div
                      key={index}
                      initial={{ width: '20%', opacity: 0.3 }}
                      animate={{ 
                        opacity: index < getPasswordStrength() ? 1 : 0.3,
                      }}
                      transition={{ duration: 0.3 }}
                      className={`h-1.5 flex-grow rounded-full ${
                        index < getPasswordStrength() ? strengthColors[getPasswordStrength() - 1] : 'bg-gray-200'
                      }`}
                    ></motion.div>
                  ))}
                </div>
                
                {/* Criterios de contraseña */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {passwordCriteria.map((criterion, index) => (
                    <motion.div 
                      key={index}
                      initial={{ opacity: 0.5 }}
                      animate={{ 
                        opacity: 1,
                        scale: criterion.regex.test(password) ? [1, 1.05, 1] : 1
                      }}
                      transition={{ duration: 0.2 }}
                      className="flex items-center text-xs"
                    >
                      <div className={`w-4 h-4 mr-2 rounded-full flex items-center justify-center ${
                        criterion.regex.test(password) ? 'bg-green-100' : 'bg-gray-100'
                      }`}>
                        <div className={`w-2 h-2 rounded-full ${
                          criterion.regex.test(password) ? 'bg-green-500' : 'bg-gray-300'
                        }`}></div>
                      </div>
                      <span className={criterion.regex.test(password) ? 'text-gray-700' : 'text-gray-500'}>
                        {criterion.label}
                      </span>
                    </motion.div>
                  ))}
                </div>
              </div>

              <div className="mt-2">
                <PasswordField
                  label="Confirmar Contraseña"
                  name="confirmPassword"
                  register={register}
                  error={errors.confirmPassword}
                  showPassword={showConfirmPassword}
                  setShowPassword={setShowConfirmPassword}
                />
              </div>

              <motion.button
                whileHover={{ scale: 1.01 }}
                whileTap={{ scale: 0.99 }}
                type="submit"
                className={`w-full py-3 mt-6 rounded-xl font-semibold text-white shadow-lg transition-all duration-300 ${
                  loading 
                    ? 'bg-indigo-400 cursor-not-allowed' 
                    : 'bg-indigo-600 hover:bg-indigo-700 shadow-indigo-200'
                }`}
                disabled={loading}
              >
                {loading ? (
                  <div className="flex items-center justify-center">
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Registrando...
                  </div>
                ) : 'Crear Cuenta'}
              </motion.button>
            </form>
            
            <div className="mt-8 text-center">
              <p className="text-sm text-gray-600">
                ¿Ya tienes cuenta?{' '}
                <Link to="/signin" className="font-medium text-indigo-600 hover:text-indigo-500 transition-all duration-200">
                  Inicia Sesión
                </Link>
              </p>
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  );
}

const InputField = ({ icon, label, name, type, placeholder, register, error }) => (
  <div className="space-y-2">
    <label htmlFor={name} className="text-sm font-medium text-gray-700 block">{label}</label>
    <div className="relative">
      <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
        {icon}
      </div>
      <input
        {...register(name)}
        type={type}
        className="w-full pl-11 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
        placeholder={placeholder}
      />
    </div>
    {error && (
      <motion.p 
        initial={{ opacity: 0, height: 0 }}
        animate={{ opacity: 1, height: 'auto' }}
        exit={{ opacity: 0, height: 0 }}
        className="text-xs text-red-500 mt-1"
      >
        {error.message}
      </motion.p>
    )}
  </div>
);

const PasswordField = ({ label, name, register, error, showPassword, setShowPassword }) => (
  <div className="space-y-2">
    <label htmlFor={name} className="text-sm font-medium text-gray-700 block">{label}</label>
    <div className="relative">
      <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
        <FiLock className="text-indigo-500" />
      </div>
      <input
        {...register(name)}
        type={showPassword ? 'text' : 'password'}
        className="w-full pl-11 pr-11 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
        placeholder="Tu contraseña"
      />
      <button
        type="button"
        onClick={() => setShowPassword(!showPassword)}
        className="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-indigo-500 transition-all duration-200"
      >
        {showPassword ? <FiEyeOff size={18} /> : <FiEye size={18} />}
      </button>
    </div>
    {error && (
      <motion.p 
        initial={{ opacity: 0, height: 0 }}
        animate={{ opacity: 1, height: 'auto' }}
        exit={{ opacity: 0, height: 0 }}
        className="text-xs text-red-500 mt-1"
      >
        {error.message}
      </motion.p>
    )}
  </div>
);\n\n
=== ./auth/pages/index.js ===
// Exportar todos los componentes de auth/pages
\n\n
=== ./auth/services/index.js ===
// Exportar todos los componentes de auth/services
\n\n
=== ./catalogo/components/index.js ===
// Exportar todos los componentes de catalogo/components
\n\n
=== ./catalogo/hooks/index.js ===
// Exportar todos los componentes de catalogo/hooks
\n\n
=== ./catalogo/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n
=== ./catalogo/pages/admin/alimento/OpcionAlimentoForm.jsx ===
import React from 'react';
import { FiTag, FiFileText, FiDollarSign, FiClock, FiCheckSquare } from 'react-icons/fi';
import { useForm } from 'react-hook-form';

const OpcionAlimentoForm = ({ editingItem, onSave, activeTab }) => {
    const { register, handleSubmit, watch, formState: { errors } } = useForm({
        defaultValues: editingItem || {
            precio_adulto: 0,
            precio_nino: 0,
            precio_extra: 0,
            precio_papas: 19.00,
            disponible: true,
            opcion_papas: false,
            turno: 'ambos'
        }
    });

    const opcionPapas = watch('opcion_papas', false);

    const onSubmit = (data) => {
        const formData = {
            ...data,
            precio_adulto: Number(data.precio_adulto) || 0,
            precio_nino: Number(data.precio_nino) || 0,
            precio_extra: Number(data.precio_extra) || 0,
            precio_papas: data.opcion_papas ? (Number(data.precio_papas) || 19.00) : 19.00,
            disponible: Boolean(data.disponible),
            opcion_papas: Boolean(data.opcion_papas),
            activo: true
        };
        
        onSave(formData);
    };

    return (
        <form id={activeTab + 'Form'} onSubmit={handleSubmit(onSubmit)} className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="col-span-1 md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
                <div className="relative">
                    <FiTag className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                        {...register('nombre', { required: 'Este campo es requerido' })}
                        type="text"
                        className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        placeholder="Nombre de la opción de alimento"
                    />
                    {errors.nombre && <span className="text-red-500 text-sm">{errors.nombre.message}</span>}
                </div>
            </div>

            {/* Sección de Precios */}
            <div className="col-span-1 md:col-span-2 bg-gray-50 p-4 rounded-lg space-y-4">
                <h3 className="text-lg font-medium text-gray-700">Precios</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Precio por Adulto</label>
                        <div className="relative">
                            <FiDollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                            <input
                                {...register('precio_adulto', { 
                                    required: 'Este campo es requerido',
                                    min: { value: 0, message: 'El precio debe ser mayor o igual a 0' },
                                    valueAsNumber: true
                                })}
                                type="number"
                                step="0.01"
                                className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                placeholder="Precio por adulto"
                            />
                            {errors.precio_adulto && <span className="text-red-500 text-sm">{errors.precio_adulto.message}</span>}
                        </div>
                    </div>

                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Precio por Niño</label>
                        <div className="relative">
                            <FiDollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                            <input
                                {...register('precio_nino', { 
                                    required: 'Este campo es requerido',
                                    min: { value: 0, message: 'El precio debe ser mayor o igual a 0' },
                                    valueAsNumber: true
                                })}
                                type="number"
                                step="0.01"
                                className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                placeholder="Precio por niño"
                            />
                            {errors.precio_nino && <span className="text-red-500 text-sm">{errors.precio_nino.message}</span>}
                        </div>
                    </div>

                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Precio Extra</label>
                        <div className="relative">
                            <FiDollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                            <input
                                {...register('precio_extra', { 
                                    required: 'Este campo es requerido',
                                    min: { value: 0, message: 'El precio debe ser mayor o igual a 0' },
                                    valueAsNumber: true
                                })}
                                type="number"
                                step="0.01"
                                className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                placeholder="Precio extra"
                            />
                            {errors.precio_extra && <span className="text-red-500 text-sm">{errors.precio_extra.message}</span>}
                        </div>
                    </div>
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Turno</label>
                <div className="relative">
                    <FiClock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <select
                        {...register('turno', { required: 'Este campo es requerido' })}
                        className="w-full pl-10 pr-3 py-2 text-gray-700 bg-white border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    >
                        <option value="">Seleccionar turno</option>
                        <option value="manana">Mañana</option>
                        <option value="tarde">Tarde</option>
                        <option value="ambos">Ambos</option>
                    </select>
                    {errors.turno && <span className="text-red-500 text-sm">{errors.turno.message}</span>}
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Disponibilidad</label>
                <div className="relative">
                    <select
                        {...register('disponible')}
                        className="w-full pl-10 pr-3 py-2 text-gray-700 bg-white border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    >
                        <option value="true">Disponible</option>
                        <option value="false">No Disponible</option>
                    </select>
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Platillo Adulto</label>
                <div className="relative">
                    <FiCheckSquare className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                        {...register('platillo_adulto', { required: 'Este campo es requerido' })}
                        type="text"
                        className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        placeholder="Platillo para adultos"
                    />
                    {errors.platillo_adulto && <span className="text-red-500 text-sm">{errors.platillo_adulto.message}</span>}
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Platillo Niño</label>
                <div className="relative">
                    <FiCheckSquare className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                        {...register('platillo_nino', { required: 'Este campo es requerido' })}
                        type="text"
                        className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        placeholder="Platillo para niños"
                    />
                    {errors.platillo_nino && <span className="text-red-500 text-sm">{errors.platillo_nino.message}</span>}
                </div>
            </div>

            <div className="col-span-1 md:col-span-2">
                <div className="flex items-center mb-4">
                    <input
                        {...register('opcion_papas')}
                        type="checkbox"
                        className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                    />
                    <label className="ml-2 block text-sm text-gray-900">
                        Incluye opción de papas
                    </label>
                </div>
                {opcionPapas && (
                    <div className="relative">
                        <FiDollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                        <input
                            {...register('precio_papas', {
                                valueAsNumber: true,
                                min: { value: 0, message: 'El precio debe ser mayor o igual a 0' }
                            })}
                            type="number"
                            step="0.01"
                            defaultValue={19.00}
                            className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                            placeholder="Precio de las papas"
                        />
                        {errors.precio_papas && <span className="text-red-500 text-sm">{errors.precio_papas.message}</span>}
                    </div>
                )}
            </div>

            <div className="col-span-1 md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
                <div className="relative">
                    <FiFileText className="absolute left-3 top-3 text-gray-400" />
                    <textarea
                        {...register('descripcion')}
                        className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        rows="3"
                        placeholder="Descripción de la opción de alimento"
                    ></textarea>
                </div>
            </div>
        </form>
    );
};

export default OpcionAlimentoForm;\n\n
=== ./catalogo/pages/admin/alimento/OpcionAlimentoTable.jsx ===
import React, { useMemo } from 'react';
import { FiEdit2, FiTrash2 } from 'react-icons/fi';
// Usar el alias @ para garantizar resolución correcta en Docker
import { formatNumber } from '@shared/utils/formatters';

const OpcionAlimentoTable = ({ opcionesAlimento, handleEditItem, handleDeleteItem }) => {
  const activeOpcionesAlimento = useMemo(() => {
    return opcionesAlimento.filter(opcion => opcion.activo);
  }, [opcionesAlimento]);

  return (
    <table className="w-full">
      <thead>
        <tr className="bg-gray-100">
          <th className="px-4 py-2 text-left">Nombre</th>
          <th className="px-4 py-2 text-left">Descripción</th>
          <th className="px-4 py-2 text-left">Precio Extra</th>
          <th className="px-4 py-2 text-left">Turno</th>
          <th className="px-4 py-2 text-left">Acciones</th>
        </tr>
      </thead>
      <tbody>
        {activeOpcionesAlimento.map((opcion) => (
          <tr key={opcion.id} className="border-b border-gray-200 hover:bg-gray-50">
            <td className="px-4 py-2">{opcion.nombre}</td>
            <td className="px-4 py-2">{opcion.descripcion}</td>
            <td className="px-4 py-2">{formatNumber(opcion.precio_extra)}</td>
            <td className="px-4 py-2">{opcion.turno}</td>
            <td className="px-4 py-2">
              <button
                onClick={() => handleEditItem(opcion)}
                className="text-blue-500 hover:text-blue-700 mr-2"
              >
                <FiEdit2 />
              </button>
              <button
                onClick={() => handleDeleteItem(opcion.id)}
                className="text-red-500 hover:text-red-700"
              >
                <FiTrash2 />
              </button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default OpcionAlimentoTable;\n\n
=== ./catalogo/pages/admin/alimento/index.js ===
export { default as OpcionAlimentoForm } from './OpcionAlimentoForm';
export { default as OpcionAlimentoTable } from './OpcionAlimentoTable';\n\n
=== ./catalogo/pages/admin/categoria/CategoriaForm.jsx ===
    import { FiTag, FiHash } from 'react-icons/fi';
import ColorPicker from '@shared/components/ColorPicker';
import { useForm } from 'react-hook-form';

const CategoriaForm = ({ editingItem, onSave, activeTab }) => {
    const { register, handleSubmit } = useForm({
        defaultValues: editingItem || {}
    });

    const onSubmit = (data) => {
        onSave(data);
    };

    return (
        <form id={activeTab + 'Form'} onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
                <div className="relative">
                    <FiTag className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                        {...register('nombre', { required: 'Este campo es requerido' })}
                        type="text"
                        className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        placeholder="Nombre de la categoría"
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Color</label>
                <div className="relative">
                    <FiHash className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <ColorPicker
                        {...register('color')}
                        defaultValue={editingItem?.color || '#000000'}
                    />
                </div>
            </div>
        </form>
    );
};

export default CategoriaForm;\n\n
=== ./catalogo/pages/admin/categoria/CategoriaTable.jsx ===
import React from 'react';
import { FiEdit2, FiTrash2 } from 'react-icons/fi';

const CategoriaTable = ({ categorias, handleEditItem, handleDeleteItem }) => (
    <table className="w-full">
        <thead>
        <tr className="bg-gray-100">
            <th className="px-4 py-2 text-left">Nombre</th>
            <th className="px-4 py-2 text-left">Color</th>
            <th className="px-4 py-2 text-left">Acciones</th>
        </tr>
        </thead>
        <tbody>
        {categorias.map((categoria) => (
            <tr key={categoria.id} className="border-b border-gray-200 hover:bg-gray-50">
                <td className="px-4 py-2">{categoria.nombre}</td>
                <td className="px-4 py-2">
                    <div
                        className="w-6 h-6 rounded-full"
                        style={{ backgroundColor: categoria.color }}
                    ></div>
                </td>
                <td className="px-4 py-2">
                    <button
                        onClick={() => handleEditItem(categoria)}
                        className="text-blue-500 hover:text-blue-700 mr-2"
                    >
                        <FiEdit2 />
                    </button>
                    <button
                        onClick={() => handleDeleteItem(categoria.id)}
                        className="text-red-500 hover:text-red-700"
                    >
                        <FiTrash2 />
                    </button>
                </td>
            </tr>
        ))}
        </tbody>
    </table>
);

export default CategoriaTable;\n\n
=== ./catalogo/pages/admin/categoria/index.js ===
export { default as CategoriaForm } from './CategoriaForm';
export { default as CategoriaTable } from './CategoriaTable';\n\n
=== ./catalogo/pages/admin/extra/ExtraForm.jsx ===
import React from 'react';
import { FiTag, FiFileText, FiDollarSign } from 'react-icons/fi';
import { useForm } from 'react-hook-form';

const ExtraForm = ({ editingItem, onSave, activeTab }) => {
    const { register, handleSubmit } = useForm({
        defaultValues: editingItem || {}
    });

    const onSubmit = (data) => {
        onSave(data);
    };

    return (
        <form id={activeTab + 'Form'} onSubmit={handleSubmit(onSubmit)} className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
                <div className="relative">
                    <FiTag className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                        {...register('nombre', { required: 'Este campo es requerido' })}
                        type="text"
                        className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        placeholder="Nombre del extra"
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Precio</label>
                <div className="relative">
                    <FiDollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                        {...register('precio', { required: 'Este campo es requerido' })}
                        type="number"
                        step="0.01"
                        className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        placeholder="Precio del extra"
                    />
                </div>
            </div>

            <div className="col-span-1 md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
                <div className="relative">
                    <FiFileText className="absolute left-3 top-3 text-gray-400" />
                    <textarea
                        {...register('descripcion')}
                        className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        rows="3"
                        placeholder="Descripción del extra"
                    ></textarea>
                </div>
            </div>
        </form>
    );
};

export default ExtraForm;\n\n
=== ./catalogo/pages/admin/extra/ExtraTable.jsx ===
import React, { useMemo } from 'react';
import { FiEdit2, FiTrash2 } from 'react-icons/fi';
// Usar el alias @ para garantizar resolución correcta en Docker
import { formatNumber } from '@shared/utils/formatters';

const ExtraTable = ({ extras, handleEditItem, handleDeleteItem }) => {
  const activeExtras = useMemo(() => {
    return extras.filter(extra => extra.activo);
  }, [extras]);

  return (
    <table className="w-full">
      <thead>
        <tr className="bg-gray-100">
          <th className="px-4 py-2 text-left">Nombre</th>
          <th className="px-4 py-2 text-left">Descripción</th>
          <th className="px-4 py-2 text-left">Precio</th>
          <th className="px-4 py-2 text-left">Acciones</th>
        </tr>
      </thead>
      <tbody>
        {activeExtras.map((extra) => (
          <tr key={extra.id} className="border-b border-gray-200 hover:bg-gray-50">
            <td className="px-4 py-2">{extra.nombre}</td>
            <td className="px-4 py-2">{extra.descripcion}</td>
            <td className="px-4 py-2">{formatNumber(extra.precio)}</td>
            <td className="px-4 py-2">
              <button
                onClick={() => handleEditItem(extra)}
                className="text-blue-500 hover:text-blue-700 mr-2"
              >
                <FiEdit2 />
              </button>
              <button
                onClick={() => handleDeleteItem(extra.id)}
                className="text-red-500 hover:text-red-700"
              >
                <FiTrash2 />
              </button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default ExtraTable;\n\n
=== ./catalogo/pages/admin/extra/index.js ===
export { default as ExtraForm } from './ExtraForm';
export { default as ExtraTable } from './ExtraTable';\n\n
=== ./catalogo/pages/admin/index.js ===
// src\domains\catalogo\pages\admin\index.js
export * from './alimento';
export * from './categoria';
export * from './extra';
export * from './mampara';
export * from './paquete';
export * from './tematica';\n\n
=== ./catalogo/pages/admin/mampara/MamparaForm.jsx ===
import React, { useEffect } from 'react';
import { FiDollarSign, FiGrid } from 'react-icons/fi';
import { useForm, Controller } from 'react-hook-form';
import Select from 'react-select';
import CloudinaryImageSelector from '@shared/components/cloudinary/CloudinaryImageSelector';

const MamparaForm = ({ editingItem, onSave, activeTab, tematicas }) => {
  const { register, handleSubmit, control, setValue, watch } = useForm({
    defaultValues: editingItem || {}
  });
  
  const foto = watch('foto');

  // Establecer el select de temática cuando se está editando
  useEffect(() => {
    if (editingItem && editingItem.id_tematica) {
      const tematicaOption = tematicas.find(t => t.id === editingItem.id_tematica);
      if (tematicaOption) {
        setValue('id_tematica', { value: tematicaOption.id, label: tematicaOption.nombre });
      }
    }
  }, [editingItem, tematicas, setValue]);

  // Manejar cambios en la imagen
  const handleImageChange = (imageUrl) => {
    setValue('foto', imageUrl);
  };

  const onSubmit = (data) => {
    // Extraer el valor de id_tematica del objeto select
    const adjustedData = {
      ...data,
      id_tematica: data.id_tematica ? data.id_tematica.value : null,
    };
    onSave(adjustedData);
  };

  return (
    <form id={activeTab + 'Form'} onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Piezas</label>
        <div className="relative">
          <FiGrid className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <input
            {...register('piezas', { required: 'Este campo es requerido', valueAsNumber: true })}
            type="number"
            className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
            placeholder="Número de piezas"
          />
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Precio</label>
        <div className="relative">
          <FiDollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <input
            {...register('precio', { required: 'Este campo es requerido', valueAsNumber: true })}
            type="number"
            step="0.01"
            className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
            placeholder="Precio de la mampara"
          />
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Temática</label>
        <div className="relative">
          <Controller
            name="id_tematica"
            control={control}
            rules={{ required: 'Este campo es requerido' }}
            render={({ field }) => (
              <Select
                {...field}
                options={tematicas?.map(tematica => ({
                  value: tematica.id,
                  label: tematica.nombre,
                })) || []}
                placeholder="Seleccionar temática"
                className="react-select-container"
                classNamePrefix="react-select"
              />
            )}
          />
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Imagen</label>
        <CloudinaryImageSelector 
          value={foto} 
          onChange={handleImageChange}
          previewSize="medium"
          placeholder="URL de la imagen de la mampara"
        />
      </div>
    </form>
  );
};

export default MamparaForm;\n\n
=== ./catalogo/pages/admin/mampara/MamparaModal.jsx ===
import { FiX } from 'react-icons/fi';
import MamparaForm from './MamparaForm.jsx';

const MamparaModal = ({
  isOpen,
  onClose,
  activeTab,
  handleSubmit,
  editingItem,
  tematicas,
}) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-auto bg-gray-500 bg-opacity-75 flex items-center justify-center">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl flex flex-col">
        <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
          <h2 className="text-2xl font-semibold text-gray-800">
            {editingItem ? 'Editar Mampara' : 'Crear Mampara'}
          </h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition duration-150 ease-in-out"
          >
            <FiX size={24} />
          </button>
        </div>

        <div className="flex-grow overflow-y-auto p-6">
          <MamparaForm
            editingItem={editingItem}
            onSave={handleSubmit}
            activeTab={activeTab}
            tematicas={tematicas}
          />
        </div>

        <div className="px-6 py-4 border-t border-gray-200 flex justify-end">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md mr-2 hover:bg-gray-300 transition duration-150 ease-in-out"
          >
            Cancelar
          </button>
          <button
            form={`${activeTab}Form`}
            type="submit"
            className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition duration-150 ease-in-out"
          >
            {editingItem ? 'Guardar Cambios' : 'Crear Mampara'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default MamparaModal;
\n\n
=== ./catalogo/pages/admin/mampara/MamparaTable.jsx ===
import React, { useState, useMemo } from 'react';
import { FiEdit2, FiTrash2, FiEye, FiX, FiMaximize, FiImage, FiPlus } from 'react-icons/fi';
// Usar el alias @ para garantizar resolución correcta en Docker
import { formatNumber } from '@/utils/formatters';

// Componente para mostrar imágenes a pantalla completa
const ImageLightbox = ({ isOpen, onClose, imageUrl, alt }) => {
  if (!isOpen) return null;

  // Handler para detectar clics en el fondo
  const handleBackdropClick = (e) => {
    // Cerrar el lightbox al hacer clic en cualquier parte
    onClose();
  };

  // Handler para evitar que los clics en la imagen cierren el lightbox
  const handleImageClick = (e) => {
    e.stopPropagation(); // Evita que el clic se propague al fondo
  };

  return (
    <div 
      className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-90 transition-opacity duration-300"
      onClick={handleBackdropClick} // Cerrar al hacer clic en cualquier parte
    >
      <div className="relative w-full h-full flex flex-col">
        {/* Barra superior con botón de cierre */}
        <div className="flex justify-end p-4">
          <button 
            onClick={onClose}
            className="text-white p-2 rounded-full hover:bg-white/10 transition-colors"
            aria-label="Cerrar"
          >
            <FiX size={24} />
          </button>
        </div>
        
        {/* Contenedor de la imagen */}
        <div className="flex-1 flex items-center justify-center p-4">
          <img 
            src={imageUrl}
            alt={alt}
            className="max-h-full max-w-full object-contain"
            onClick={handleImageClick}
          />
        </div>
      </div>
    </div>
  );
};

const MamparaTable = ({ mamparas, tematicas, handleEditItem, handleDeleteItem }) => {
  // Estado para el lightbox
  const [selectedImage, setSelectedImage] = useState(null);
  const [lightboxOpen, setLightboxOpen] = useState(false);

  const activeMamparas = useMemo(() => {
    return Array.isArray(mamparas) ? mamparas.filter(mampara => mampara.activo) : [];
  }, [mamparas]);

  const getTematicaNombre = (id_tematica) => {
    if (Array.isArray(tematicas)) {
      const tematica = tematicas.find(t => t.id === id_tematica);
      return tematica ? tematica.nombre : 'No especificada';
    }
    return 'No especificada';
  };

  // Función para abrir el lightbox con la imagen seleccionada
  const openLightbox = (imageUrl) => {
    setSelectedImage(imageUrl);
    setLightboxOpen(true);
  };

  return (
    <div className="overflow-x-auto">
      <table className="w-full">
        <thead>
          <tr className="bg-gray-100">
            <th className="px-4 py-2 text-left">ID</th>
            <th className="px-4 py-2 text-center">Imagen</th>
            <th className="px-4 py-2 text-left">Piezas</th>
            <th className="px-4 py-2 text-left">Precio</th>
            <th className="px-4 py-2 text-left">Temática</th>
            <th className="px-4 py-2 text-center">Acciones</th>
          </tr>
        </thead>
        <tbody>
          {activeMamparas.length > 0 ? (
            activeMamparas.map((mampara) => (
              <tr key={mampara.id} className="border-b border-gray-200 hover:bg-gray-50">
                <td className="px-4 py-2 align-middle">{mampara.id}</td>
                <td className="px-4 py-2 align-middle text-center">
                  {mampara.foto ? (
                    <div className="relative group w-14 h-14">
                      <img
                        src={mampara.foto}
                        alt={`Mampara de ${mampara.piezas} piezas`}
                        className="w-14 h-14 object-cover rounded-md border border-gray-200 cursor-pointer"
                        onClick={() => openLightbox(mampara.foto)}
                        onError={(e) => {
                          e.target.onerror = null;
                          e.target.src = 'https://via.placeholder.com/60x60?text=Error';
                        }}
                      />
                      <div 
                        className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100 cursor-pointer rounded-md"
                        onClick={() => openLightbox(mampara.foto)}
                      >
                        <div className="p-1 bg-white bg-opacity-80 rounded-full">
                          <FiMaximize className="text-indigo-600" size={14} />
                        </div>
                      </div>
                    </div>
                  ) : (
                    <span className="text-gray-400 text-sm">Sin imagen</span>
                  )}
                </td>
                <td className="px-4 py-2 align-middle">{mampara.piezas}</td>
                <td className="px-4 py-2 align-middle">{formatNumber(mampara.precio)}</td>
                <td className="px-4 py-2 align-middle">{getTematicaNombre(mampara.id_tematica)}</td>
                <td className="px-4 py-2 flex items-center justify-center space-x-2">
                  <button
                    onClick={() => handleEditItem(mampara)}
                    className="p-1 text-blue-500 hover:text-blue-700 hover:bg-blue-50 rounded-full transition-colors"
                    title="Editar"
                  >
                    <FiEdit2 size={18} />
                  </button>
                  <button
                    onClick={() => handleDeleteItem(mampara.id)}
                    className="p-1 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-full transition-colors"
                    title="Eliminar"
                  >
                    <FiTrash2 size={18} />
                  </button>
                  {mampara.foto && (
                    <button
                      onClick={() => openLightbox(mampara.foto)}
                      className="p-1 text-indigo-500 hover:text-indigo-700 hover:bg-indigo-50 rounded-full transition-colors"
                      title="Ver imagen"
                    >
                      <FiEye size={18} />
                    </button>
                  )}
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="6" className="px-4 py-8 text-center">
                <div className="flex flex-col items-center justify-center p-6 border border-dashed border-gray-300 rounded-lg">
                  <FiImage className="w-12 h-12 mb-3 text-gray-400" />
                  <p className="text-lg font-semibold text-gray-700 mb-1">No hay mamparas disponibles</p>
                  <p className="text-sm text-gray-500 mb-4">Añade tu primera mampara para comenzar</p>
                  <button 
                    onClick={() => handleEditItem({ id: 0, activo: true, piezas: '', precio: 0, id_tematica: '' })} 
                    className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors flex items-center"
                  >
                    <span className="mr-2">Agregar Mampara</span>
                    <FiPlus size={16} />
                  </button>
                </div>
              </td>
            </tr>
          )}
        </tbody>
      </table>

      {/* Lightbox para vista ampliada de imágenes */}
      <ImageLightbox 
        isOpen={lightboxOpen}
        onClose={() => setLightboxOpen(false)}
        imageUrl={selectedImage || ''}
        alt="Imagen de mampara"
      />
    </div>
  );
};

export default MamparaTable;
\n\n
=== ./catalogo/pages/admin/mampara/index.js ===
export { default as MamparaForm } from './MamparaForm';
export { default as MamparaModal } from './MamparaModal';
export { default as MamparaTable } from './MamparaTable';\n\n
=== ./catalogo/pages/admin/paquete/PackageForm.jsx ===
import { FiPackage, FiFileText, FiDollarSign, FiToggleRight } from 'react-icons/fi';
import { useForm } from 'react-hook-form';

const PackageForm = ({ editingItem, onSave, activeTab }) => {
    const handleSubmit = (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData.entries());
        const errors = {};
        onSave(data);
    };

    return (
        <form id={activeTab + 'Form'} onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="col-span-1 md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">Nombre del Paquete</label>
                <div className="relative">
                    <FiPackage className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                        name="nombre"
                        type="text"
                        defaultValue={editingItem?.nombre || ''}
                        className="w-full pl-10 pr-3 py-2 text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Nombre del paquete"
                    />
                </div>
            </div>

            <div className="col-span-1 md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
                <div className="relative">
                    <FiFileText className="absolute left-3 top-3 text-gray-400" />
                    <textarea
                        name="descripcion"
                        defaultValue={editingItem?.descripcion || ''}
                        className="w-full pl-10 pr-3 py-2 text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                        rows="3"
                        placeholder="Descripción detallada del paquete"
                    ></textarea>
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Precio Lunes a Jueves</label>
                <div className="relative">
                    <FiDollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                        name="precio_lunes_jueves"
                        type="number"
                        step="0.01"
                        defaultValue={editingItem?.precio_lunes_jueves || ''}
                        className="w-full pl-10 pr-3 py-2 text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Precio de lunes a jueves"
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Precio Viernes a Domingo</label>
                <div className="relative">
                    <FiDollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                        name="precio_viernes_domingo"
                        type="number"
                        step="0.01"
                        defaultValue={editingItem?.precio_viernes_domingo || ''}
                        className="w-full pl-10 pr-3 py-2 text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Precio de viernes a domingo"
                    />
                </div>
            </div>

            <div className="col-span-1 md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">Estado del Paquete</label>
                <div className="relative">
                    <FiToggleRight className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <select
                        name="activo"
                        defaultValue={editingItem?.activo !== undefined ? editingItem.activo : 1}
                        className="w-full pl-10 pr-3 py-2 text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                        <option value={1}>Activo</option>
                        <option value={0}>Inactivo</option>
                    </select>
                </div>
            </div>
        </form>
    );
};

export default PackageForm;\n\n
=== ./catalogo/pages/admin/paquete/PackageTable.jsx ===
import React, { useMemo } from 'react';
import { FiEdit2, FiTrash2 } from 'react-icons/fi';
// Usar el alias @ para garantizar resolución correcta en Docker
import { formatNumber } from '@/utils/formatters';

const PackageTable = ({ packages, handleEditItem, handleDeleteItem }) => {
  const activePackages = useMemo(() => {
    return packages.filter(pkg => pkg.activo);
  }, [packages]);

  return (
    <div className="overflow-x-auto">
      <table className="w-full">
        <thead>
          <tr className="bg-gray-100">
            <th className="px-4 py-2 text-left">Nombre</th>
            <th className="px-4 py-2 text-left">Precio Lunes-Jueves</th>
            <th className="px-4 py-2 text-left">Precio Viernes-Domingo</th>
            <th className="px-4 py-2 text-left">Acciones</th>
          </tr>
        </thead>
        <tbody>
          {activePackages.map((pkg) => (
            <tr key={pkg.id} className="border-b border-gray-200 hover:bg-gray-50">
              <td className="px-4 py-2">{pkg.nombre}</td>
              <td className="px-4 py-2">{formatNumber(pkg.precio_lunes_jueves)}</td>
              <td className="px-4 py-2">{formatNumber(pkg.precio_viernes_domingo)}</td>
              <td className="px-4 py-2">
                <button
                  onClick={() => handleEditItem(pkg)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                  aria-label="Editar paquete"
                >
                  <FiEdit2 />
                </button>
                <button
                  onClick={() => handleDeleteItem(pkg.id)}
                  className="text-red-500 hover:text-red-700"
                  aria-label="Eliminar paquete"
                >
                  <FiTrash2 />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default PackageTable;\n\n
=== ./catalogo/pages/admin/paquete/PaquetesPersonalizaciones.jsx ===
import  {useState, useEffect} from 'react';
import axios from 'axios';
import {useForm} from 'react-hook-form';
import {ToastContainer, toast} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import {FiEdit, FiTrash2, FiPlus, FiSearch, FiSun, FiMoon} from 'react-icons/fi';
import Modal from 'react-modal';
import {CSVLink} from 'react-csv';
import {Page, Text, View, Document, StyleSheet} from '@react-pdf/renderer';

const Dashboard = () => {
    const [paquetes, setPaquetes] = useState([]);
    const [personalizaciones, setPersonalizaciones] = useState([]);
    const [modalIsOpen, setModalIsOpen] = useState(false);
    const [modalMode, setModalMode] = useState('create');
    const [selectedItem, setSelectedItem] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [darkMode, setDarkMode] = useState(false);
    const {register, handleSubmit, reset} = useForm();

    useEffect(() => {
        fetchPaquetes();
        fetchPersonalizaciones();
    }, []);

    const fetchPaquetes = async () => {
        try {
            const response = await axios.get('/api/paquetes');
            setPaquetes(response.data);
        } catch (error) {
            console.error('Error al obtener los paquetes:', error);
            toast.error('Error al cargar los paquetes');
        }
    };

    const fetchPersonalizaciones = async () => {
        try {
            const response = await axios.get('/api/personalizaciones');
            setPersonalizaciones(response.data);
        } catch (error) {
            console.error('Error al obtener las personalizaciones:', error);
            toast.error('Error al cargar las personalizaciones');
        }
    };

    const openModal = (mode, item = null) => {
        setModalMode(mode);
        setSelectedItem(item);
        setModalIsOpen(true);
    };

    const closeModal = () => {
        setModalIsOpen(false);
        setSelectedItem(null);
        reset();
    };

    const onSubmit = async (data) => {
        try {
            if (modalMode === 'edit') {
                await axios.put(`/api/${selectedItem.type}/${selectedItem.id}`, data);
                toast.success(`${selectedItem.type === 'paquetes' ? 'Paquete' : 'Personalización'} actualizado con éxito`);
            } else {
                await axios.post(`/api/${selectedItem.type}`, data);
                toast.success(`${selectedItem.type === 'paquetes' ? 'Paquete' : 'Personalización'} creado con éxito`);
            }
            closeModal();
            fetchPaquetes();
            fetchPersonalizaciones();
        } catch (error) {
            console.error('Error al guardar:', error);
            toast.error('Error al guardar');
        }
    };

    const handleDelete = async (type, id) => {
        if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
            try {
                await axios.delete(`/api/${type}/${id}`);
                toast.success(`${type === 'paquetes' ? 'Paquete' : 'Personalización'} eliminado con éxito`);
                fetchPaquetes();
                fetchPersonalizaciones();
            } catch (error) {
                console.error('Error al eliminar:', error);
                toast.error('Error al eliminar');
            }
        }
    };

    const filteredPaquetes = paquetes.filter((paquete) =>
        paquete.nombre.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const filteredPersonalizaciones = personalizaciones.filter((personalizacion) =>
        personalizacion.nombre.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const toggleDarkMode = () => {
        setDarkMode(!darkMode);
    };

    const renderCSV = (data) => {
        const headers = ['ID', 'Nombre', 'Precio'];
        const csvData = data.map((item) => [item.id, item.nombre, item.precio || item.precio_adicional]);
        return {data: csvData, headers: headers};
    };

    const renderPDF = (data) => (
        <Document>
            <Page style={styles.page}>
                <View style={styles.table}>
                    <View style={styles.tableRow}>
                        <Text style={styles.tableHeader}>ID</Text>
                        <Text style={styles.tableHeader}>Nombre</Text>
                        <Text style={styles.tableHeader}>Precio</Text>
                    </View>
                    {data.map((item, index) => (
                        <View key={index} style={styles.tableRow}>
                            <Text style={styles.tableCell}>{item.id}</Text>
                            <Text style={styles.tableCell}>{item.nombre}</Text>
                            <Text style={styles.tableCell}>{item.precio || item.precio_adicional}</Text>
                        </View>
                    ))}
                </View>
            </Page>
        </Document>
    );

    return (
        <div className={`container mx-auto px-4 py-8 ${darkMode ? 'dark' : ''}`}>
            <ToastContainer/>
            <nav className="flex items-center justify-between mb-8">
                <div className="text-2xl font-bold text-gray-800 dark:text-white">Dashboard</div>
                <div className="flex items-center">
                    <button
                        className="p-2 rounded-full focus:outline-none focus:shadow-outline-gray"
                        onClick={toggleDarkMode}
                        aria-label="Toggle color mode"
                    >
                        {darkMode ? (
                            <FiSun className="w-5 h-5 text-gray-800 dark:text-white"/>
                        ) : (
                            <FiMoon className="w-5 h-5 text-gray-800 dark:text-white"/>
                        )}
                    </button>
                </div>
            </nav>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
                <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Resumen de Paquetes</h3>
                    <p className="text-3xl font-bold text-blue-500">{paquetes.length}</p>
                </div>
                <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Resumen de
                        Personalizaciones</h3>
                    <p className="text-3xl font-bold text-blue-500">{personalizaciones.length}</p>
                </div>
            </div>
            <div className="mb-8">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-2xl font-bold text-gray-800 dark:text-white">Paquetes y Personalizaciones</h2>
                    <div className="flex items-center">
                        <div className="relative mr-4">
                            <input
                                type="text"
                                placeholder="Buscar..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white dark:border-gray-600"
                            />
                            <FiSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"/>
                        </div>
                        <button
                            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded mr-2"
                            onClick={() => openModal('create', {type: 'paquetes'})}
                        >
                            <FiPlus className="inline-block mr-2"/>
                            Nuevo Paquete
                        </button>
                        <button
                            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
                            onClick={() => openModal('create', {type: 'personalizaciones'})}
                        >
                            <FiPlus className="inline-block mr-2"/>
                            Nueva Personalización
                        </button>
                    </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div>
                        <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Paquetes</h3>
                        <div className="overflow-x-auto">
                            <table className="table-auto w-full">
                                <thead>
                                <tr className="bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-200 uppercase text-sm leading-normal">
                                    <th className="py-3 px-6 text-left">Nombre</th>
                                    <th className="py-3 px-6 text-left">Precio</th>
                                    <th className="py-3 px-6 text-center">Acciones</th>
                                </tr>
                                </thead>
                                <tbody className="text-gray-600 dark:text-gray-100 text-sm">
                                {filteredPaquetes.map((paquete) => (
                                    <tr key={paquete.id}
                                        className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600">
                                        <td className="py-3 px-6 text-left whitespace-nowrap">{paquete.nombre}</td>
                                        <td className="py-3 px-6 text-left">${paquete.precio}</td>
                                        <td className="py-3 px-6 text-center">
                                            <div className="flex item-center justify-center">
                                                <div
                                                    className="w-4 mr-2 transform hover:text-blue-500 hover:scale-110 cursor-pointer"
                                                    onClick={() => openModal('edit', {...paquete, type: 'paquetes'})}
                                                >
                                                    <FiEdit/>
                                                </div>
                                                <div
                                                    className="w-4 mr-2 transform hover:text-red-500 hover:scale-110 cursor-pointer"
                                                    onClick={() => handleDelete('paquetes', paquete.id)}
                                                >
                                                    <FiTrash2/>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div>
                        <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Personalizaciones</h3>
                        <div className="overflow-x-auto">
                            <table className="table-auto w-full">
                                <thead>
                                <tr className="bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-200 uppercase text-sm leading-normal">
                                    <th className="py-3 px-6 text-left">Nombre</th>
                                    <th className="py-3 px-6 text-left">Precio Adicional</th>
                                    <th className="py-3 px-6 text-center">Acciones</th>
                                </tr>
                                </thead>
                                <tbody className="text-gray-600 dark:text-gray-100 text-sm">
                                {filteredPersonalizaciones.map((personalizacion) => (
                                    <tr key={personalizacion.id}
                                        className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600">
                                        <td className="py-3 px-6 text-left whitespace-nowrap">{personalizacion.nombre}</td>
                                        <td className="py-3 px-6 text-left">${personalizacion.precio_adicional}</td>
                                        <td className="py-3 px-6 text-center">
                                            <div className="flex item-center justify-center">
                                                <div
                                                    className="w-4 mr-2 transform hover:text-blue-500 hover:scale-110 cursor-pointer"
                                                    onClick={() => openModal('edit', {
                                                        ...personalizacion,
                                                        type: 'personalizaciones'
                                                    })}
                                                >
                                                    <FiEdit/>
                                                </div>
                                                <div
                                                    className="w-4 mr-2 transform hover:text-red-500 hover:scale-110 cursor-pointer"
                                                    onClick={() => handleDelete('personalizaciones', personalizacion.id)}
                                                >
                                                    <FiTrash2/>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <footer className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md">
                <div className="flex justify-between items-center">
                    <p className="text-gray-600 dark:text-gray-400">&copy; {new Date().getFullYear()} Tu Empresa. Todos
                        los derechos reservados.</p>
                    <div>
                        <CSVLink
                            data={renderCSV(paquetes.concat(personalizaciones)).data}
                            headers={renderCSV(paquetes.concat(personalizaciones)).headers}
                            filename="datos.csv"
                            className="text-blue-500 hover:underline mr-4"
                        >
                            Exportar CSV
                        </CSVLink>
                        <button className="text-blue-500 hover:underline">Exportar PDF</button>
                    </div>
                </div>
            </footer>

            <Modal
                isOpen={modalIsOpen}
                onRequestClose={closeModal}
                contentLabel={`${modalMode === 'create' ? 'Crear' : 'Editar'} ${selectedItem?.type === 'paquetes' ? 'Paquete' : 'Personalización'}`}
                className="modal"
                overlayClassName="modal-overlay"
            >
                <h2 className="text-2xl font-bold mb-4 text-gray-800 dark:text-white">
                    {modalMode === 'create' ? 'Crear' : 'Editar'} {selectedItem?.type === 'paquetes' ? 'Paquete' : 'Personalización'}
                </h2>
                <form onSubmit={handleSubmit(onSubmit)}>
                    <div className="mb-4">
                        <label htmlFor="nombre" className="block text-gray-700 dark:text-gray-300 font-bold mb-2">
                            Nombre
                        </label>
                        <input
                            type="text"
                            id="nombre"
                            className="w-full px-3 py-2 text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:border-blue-500"
                            defaultValue={selectedItem?.nombre || ''}
                            {...register('nombre', {required: true})}
                        />
                    </div>
                    <div className="mb-4">
                        <label htmlFor="precio" className="block text-gray-700 dark:text-gray-300 font-bold mb-2">
                            {selectedItem?.type === 'paquetes' ? 'Precio' : 'Precio Adicional'}
                        </label>
                        <input
                            type="number"
                            id="precio"
                            step="0.01"
                            className="w-full px-3 py-2 text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:border-blue-500"
                            defaultValue={selectedItem?.precio || selectedItem?.precio_adicional || ''}
                            {...register(selectedItem?.type === 'paquetes' ? 'precio' : 'precio_adicional', {required: true})}
                        />
                    </div>
                    <div className="flex justify-end">
                        <button
                            type="button"
                            className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mr-2"
                            onClick={closeModal}
                        >
                            Cancelar
                        </button>
                        <button
                            type="submit"
                            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
                        >
                            {modalMode === 'create' ? 'Crear' : 'Guardar'}
                        </button>
                    </div>
                </form>
            </Modal>
        </div>
    );
};
const styles = StyleSheet.create({
    page: {
        flexDirection: 'column',
        backgroundColor: '#ffffff',
        padding: 20,
    },
    table: {
        width: '100%',
        borderStyle: 'solid',
        borderWidth: 1,
        borderColor: '#bfbfbf',
        marginBottom: 10,
    },
    tableRow: {
        flexDirection: 'row',
        borderBottomStyle: 'solid',
        borderBottomWidth: 1,
        borderBottomColor: '#bfbfbf',
        alignItems: 'center',
        height: 30,
        fontStyle: 'bold',
    },
    tableHeader: {
        width: '33.33%',
        textAlign: 'center',
        fontSize: 12,
        padding: 5,
    },
    tableCell: {
        width: '33.33%',
        textAlign: 'center',
        fontSize: 10,
        padding: 5,
    },
});
export default Dashboard;\n\n
=== ./catalogo/pages/admin/paquete/index.js ===
export { default as PackageForm } from './PackageForm';
export { default as PackageTable } from './PackageTable';
export { default as PaquetesPersonalizaciones } from './PaquetesPersonalizaciones';\n\n
=== ./catalogo/pages/admin/tematica/TematicaForm.jsx ===
import React from 'react';
import { FiTag, FiFileText } from 'react-icons/fi';
import { useForm } from 'react-hook-form';
import CloudinaryImageSelector from '@/components/cloudinary/CloudinaryImageSelector';

const TematicaForm = ({ editingItem, onSave, activeTab }) => {
    const { register, handleSubmit, setValue, watch } = useForm({
        defaultValues: editingItem || {}
    });
    
    const foto = watch('foto');

    const onSubmit = (data) => {
        onSave(data);
    };

    // Manejar cambios en la imagen
    const handleImageChange = (imageUrl) => {
        setValue('foto', imageUrl);
    };

    return (
        <form id={activeTab + 'Form'} onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
                <div className="relative">
                    <FiTag className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                        {...register('nombre', { required: 'Este campo es requerido' })}
                        type="text"
                        className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        placeholder="Nombre de la temática"
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
                <div className="relative">
                    <FiFileText className="absolute left-3 top-3 text-gray-400" />
                    <textarea
                        {...register('descripcion')}
                        className="w-full pl-10 pr-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        rows="3"
                        placeholder="Descripción de la temática"
                    ></textarea>
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Imagen</label>
                <CloudinaryImageSelector 
                    value={foto} 
                    onChange={handleImageChange}
                    previewSize="medium"
                    placeholder="URL de la imagen de la temática"
                />
            </div>
        </form>
    );
};

export default TematicaForm;\n\n
=== ./catalogo/pages/admin/tematica/TematicaTable.jsx ===
import React, { useMemo, useState, useEffect } from 'react';
import { FiEdit2, FiTrash2, FiImage, FiAlertCircle, FiX, FiMaximize, FiEye, FiPlus } from 'react-icons/fi';
import { AdvancedImage } from '@cloudinary/react';
import { Cloudinary } from '@cloudinary/url-gen';
import { fill } from '@cloudinary/url-gen/actions/resize';
import { autoGravity } from '@cloudinary/url-gen/qualifiers/gravity';
import { auto } from '@cloudinary/url-gen/qualifiers/format';
import { format } from '@cloudinary/url-gen/actions/delivery';
import { auto as autoFormat } from '@cloudinary/url-gen/qualifiers/format';

// Componente para mostrar imágenes a pantalla completa
const ImageLightbox = ({ isOpen, onClose, imageUrl, alt }) => {
  if (!isOpen) return null;

  // Handler para detectar clics en el fondo
  const handleBackdropClick = (e) => {
    // Cerrar el lightbox al hacer clic en cualquier parte
    onClose();
  };

  // Handler para evitar que los clics en la imagen cierren el lightbox
  const handleImageClick = (e) => {
    e.stopPropagation(); // Evita que el clic se propague al fondo
  };

  return (
    <div 
      className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-90 transition-opacity duration-300"
      onClick={handleBackdropClick} // Cerrar al hacer clic en cualquier parte
    >
      <div className="relative w-full h-full flex flex-col">
        {/* Barra superior con botón de cierre */}
        <div className="flex justify-end p-4">
          <button 
            onClick={onClose}
            className="text-white p-2 rounded-full hover:bg-white/10 transition-colors"
            aria-label="Cerrar"
          >
            <FiX size={24} />
          </button>
        </div>
        
        {/* Contenedor de la imagen */}
        <div className="flex-1 flex items-center justify-center p-4">
          <img 
            src={imageUrl}
            alt={alt}
            className="max-h-full max-w-full object-contain"
            onClick={handleImageClick}
          />
        </div>
      </div>
    </div>
  );
};

const TematicaTable = ({ tematicas, handleEditItem, handleDeleteItem }) => {
  const [cloudinary, setCloudinary] = useState(null);
  const [cloudinaryImages, setCloudinaryImages] = useState({});
  const [imageErrors, setImageErrors] = useState({});
  
  // Estados para el lightbox
  const [selectedImage, setSelectedImage] = useState(null);
  const [lightboxOpen, setLightboxOpen] = useState(false);

  const activeTematicas = useMemo(() => {
    return tematicas.filter(tematica => tematica.activo);
  }, [tematicas]);

  // Inicializar Cloudinary
  useEffect(() => {
    const cloudName = import.meta.env.VITE_CLOUDINARY_CLOUD_NAME || 'dswklswqw';
    setCloudinary(new Cloudinary({
      cloud: { cloudName }
    }));
  }, []);

  // Procesar imágenes de Cloudinary
  useEffect(() => {
    if (!cloudinary || activeTematicas.length === 0) return;
    
    const newCloudinaryImages = {};
    const newImageErrors = {};
    
    activeTematicas.forEach(tematica => {
      try {
        if (!tematica.foto) {
          return;
        }
        
        const cldImg = getCloudinaryImage(tematica.foto);
        if (cldImg) {
          newCloudinaryImages[tematica.id] = cldImg;
        } else {
          newImageErrors[tematica.id] = "Error al procesar la imagen";
        }
      } catch (err) {
        console.error(`Error procesando imagen ${tematica.id}:`, err);
        newImageErrors[tematica.id] = "Error al procesar la imagen";
      }
    });
    
    setCloudinaryImages(newCloudinaryImages);
    setImageErrors(newImageErrors);
  }, [cloudinary, activeTematicas]);

  // Función para procesar URLs de Cloudinary
  const getCloudinaryImage = (publicId) => {
    if (!publicId || typeof publicId !== 'string' || !cloudinary) {
      return null;
    }
    
    try {
      // Si es una URL completa, extraemos el ID y la versión
      if (publicId.includes('cloudinary.com')) {
        // Para URLs de Cloudinary, procesamos correctamente
        const url = new URL(publicId);
        const pathSegments = url.pathname.split('/');
        
        // Buscar si hay una versión (v1234567)
        let versionIndex = -1;
        let idIndex = -1;
        
        for (let i = 0; i < pathSegments.length; i++) {
          if (pathSegments[i].startsWith('v') && /^v\d+$/.test(pathSegments[i])) {
            versionIndex = i;
            idIndex = i + 1;
            break;
          }
        }
        
        // Si encontramos versión e ID
        if (versionIndex >= 0 && idIndex < pathSegments.length) {
          const version = pathSegments[versionIndex];
          let imageId = pathSegments[idIndex];
          
          // Quitar extensión si existe
          if (imageId.includes('.')) {
            imageId = imageId.substring(0, imageId.lastIndexOf('.'));
          }
          
          // Configurar imagen con Cloudinary SDK
          return cloudinary.image(imageId)
            .format(autoFormat())
            .quality(auto())
            .resize(
              fill()
                .gravity(autoGravity())
                .width(80)
                .height(60)
            );
        }
      }
      
      // Si el ID ya es simple, usarlo directamente
      return cloudinary.image(publicId)
        .format(autoFormat())
        .quality(auto())
        .resize(
          fill()
            .gravity(autoGravity())
            .width(80)
            .height(60)
        );
    } catch (error) {
      console.error('Error al procesar URL de Cloudinary:', error);
      return null;
    }
  };

  // Función para abrir el lightbox
  const openLightbox = (imageUrl) => {
    setSelectedImage(imageUrl);
    setLightboxOpen(true);
  };

  return (
    <div className="overflow-x-auto">
      <table className="w-full">
        <thead>
          <tr className="bg-gray-100">
            <th className="px-4 py-2 text-center">Imagen</th>
            <th className="px-4 py-2 text-left">Nombre</th>
            <th className="px-4 py-2 text-left">Descripción</th>
            <th className="px-4 py-2 text-center">Acciones</th>
          </tr>
        </thead>
        <tbody>
          {activeTematicas.map((tematica) => (
            <tr key={tematica.id} className="border-b border-gray-200 hover:bg-gray-50">
              <td className="px-4 py-2 w-24 align-middle">
                <div className="flex items-center justify-center h-16 w-20 bg-gray-100 rounded overflow-hidden group relative">
                  {tematica.foto && cloudinaryImages[tematica.id] ? (
                    <div className="w-full h-full relative group cursor-pointer" onClick={() => openLightbox(tematica.foto)}>
                      <AdvancedImage 
                        cldImg={cloudinaryImages[tematica.id]}
                        className="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                        alt={tematica.nombre || 'Imagen de temática'}
                      />
                      <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100">
                        <div className="p-1 bg-white bg-opacity-80 rounded-full">
                          <FiMaximize className="text-indigo-600" size={14} />
                        </div>
                      </div>
                    </div>
                  ) : tematica.foto ? (
                    <div className="w-full h-full relative group cursor-pointer" onClick={() => openLightbox(tematica.foto)}>
                      <img 
                        src={tematica.foto} 
                        alt={tematica.nombre}
                        className="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                        onError={(e) => {
                          e.target.onerror = null; 
                          setImageErrors(prev => ({...prev, [tematica.id]: true}));
                          e.target.style.display = 'none';
                          e.target.parentNode.innerHTML = `<div class="flex flex-col items-center justify-center text-red-500 p-2 text-center">
                            <svg stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                            <span class="text-xs">Error</span>
                          </div>`;
                        }}
                      />
                      <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100">
                        <div className="p-1 bg-white bg-opacity-80 rounded-full">
                          <FiMaximize className="text-indigo-600" size={14} />
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="flex flex-col items-center justify-center text-gray-400 p-2">
                      <FiImage size={18} className="mb-1" />
                      <span className="text-xs">Sin imagen</span>
                    </div>
                  )}
                </div>
              </td>
              <td className="px-4 py-2 align-middle">{tematica.nombre}</td>
              <td className="px-4 py-2 align-middle">{tematica.descripcion}</td>
              <td className="px-4 py-2 flex items-center justify-center space-x-2">
                <button
                  onClick={() => handleEditItem(tematica)}
                  className="p-1 text-blue-500 hover:text-blue-700 hover:bg-blue-50 rounded-full transition-colors"
                  title="Editar"
                >
                  <FiEdit2 size={18} />
                </button>
                <button
                  onClick={() => handleDeleteItem(tematica.id)}
                  className="p-1 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-full transition-colors"
                  title="Eliminar"
                >
                  <FiTrash2 size={18} />
                </button>
                {tematica.foto && (
                  <button
                    onClick={() => openLightbox(tematica.foto)}
                    className="p-1 text-indigo-500 hover:text-indigo-700 hover:bg-indigo-50 rounded-full transition-colors"
                    title="Ver imagen"
                  >
                    <FiEye size={18} />
                  </button>
                )}
              </td>
            </tr>
          ))}
          {activeTematicas.length === 0 && (
            <tr>
              <td colSpan="4" className="px-4 py-8 text-center">
                <div className="flex flex-col items-center justify-center p-6 border border-dashed border-gray-300 rounded-lg">
                  <FiImage className="w-12 h-12 mb-3 text-gray-400" />
                  <p className="text-lg font-semibold text-gray-700 mb-1">No hay temáticas disponibles</p>
                  <p className="text-sm text-gray-500 mb-4">Añade tu primera temática para comenzar</p>
                  <button 
                    onClick={() => handleEditItem({ id: 0, activo: true, nombre: '', descripcion: '', foto: '' })} 
                    className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors flex items-center"
                  >
                    <span className="mr-2">Agregar Temática</span>
                    <FiPlus size={16} />
                  </button>
                </div>
              </td>
            </tr>
          )}
        </tbody>
      </table>

      {/* Lightbox para vista ampliada de imágenes */}
      <ImageLightbox 
        isOpen={lightboxOpen}
        onClose={() => setLightboxOpen(false)}
        imageUrl={selectedImage || ''}
        alt="Imagen de temática"
      />
    </div>
  );
};

export default TematicaTable;
\n\n
=== ./catalogo/pages/admin/tematica/index.js ===
export { default as TematicaForm } from './TematicaForm';
export { default as TematicaTable } from './TematicaTable';\n\n
=== ./catalogo/pages/index.js ===
// Exportar todos los componentes de catalogo/pages
\n\n
=== ./catalogo/pages/public/PaquetesPersonalizaciones.jsx ===
import  {useState, useEffect} from 'react';
import axios from 'axios';
import {useForm} from 'react-hook-form';
import {ToastContainer, toast} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import {FiEdit, FiTrash2, FiPlus, FiSearch, FiSun, FiMoon} from 'react-icons/fi';
import Modal from 'react-modal';
import {CSVLink} from 'react-csv';
import {Page, Text, View, Document, StyleSheet} from '@react-pdf/renderer';

const Dashboard = () => {
    const [paquetes, setPaquetes] = useState([]);
    const [personalizaciones, setPersonalizaciones] = useState([]);
    const [modalIsOpen, setModalIsOpen] = useState(false);
    const [modalMode, setModalMode] = useState('create');
    const [selectedItem, setSelectedItem] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [darkMode, setDarkMode] = useState(false);
    const {register, handleSubmit, reset} = useForm();

    useEffect(() => {
        fetchPaquetes();
        fetchPersonalizaciones();
    }, []);

    const fetchPaquetes = async () => {
        try {
            const response = await axios.get('/api/paquetes');
            setPaquetes(response.data);
        } catch (error) {
            console.error('Error al obtener los paquetes:', error);
            toast.error('Error al cargar los paquetes');
        }
    };

    const fetchPersonalizaciones = async () => {
        try {
            const response = await axios.get('/api/personalizaciones');
            setPersonalizaciones(response.data);
        } catch (error) {
            console.error('Error al obtener las personalizaciones:', error);
            toast.error('Error al cargar las personalizaciones');
        }
    };

    const openModal = (mode, item = null) => {
        setModalMode(mode);
        setSelectedItem(item);
        setModalIsOpen(true);
    };

    const closeModal = () => {
        setModalIsOpen(false);
        setSelectedItem(null);
        reset();
    };

    const onSubmit = async (data) => {
        try {
            if (modalMode === 'edit') {
                await axios.put(`/api/${selectedItem.type}/${selectedItem.id}`, data);
                toast.success(`${selectedItem.type === 'paquetes' ? 'Paquete' : 'Personalización'} actualizado con éxito`);
            } else {
                await axios.post(`/api/${selectedItem.type}`, data);
                toast.success(`${selectedItem.type === 'paquetes' ? 'Paquete' : 'Personalización'} creado con éxito`);
            }
            closeModal();
            fetchPaquetes();
            fetchPersonalizaciones();
        } catch (error) {
            console.error('Error al guardar:', error);
            toast.error('Error al guardar');
        }
    };

    const handleDelete = async (type, id) => {
        if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
            try {
                await axios.delete(`/api/${type}/${id}`);
                toast.success(`${type === 'paquetes' ? 'Paquete' : 'Personalización'} eliminado con éxito`);
                fetchPaquetes();
                fetchPersonalizaciones();
            } catch (error) {
                console.error('Error al eliminar:', error);
                toast.error('Error al eliminar');
            }
        }
    };

    const filteredPaquetes = paquetes.filter((paquete) =>
        paquete.nombre.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const filteredPersonalizaciones = personalizaciones.filter((personalizacion) =>
        personalizacion.nombre.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const toggleDarkMode = () => {
        setDarkMode(!darkMode);
    };

    const renderCSV = (data) => {
        const headers = ['ID', 'Nombre', 'Precio'];
        const csvData = data.map((item) => [item.id, item.nombre, item.precio || item.precio_adicional]);
        return {data: csvData, headers: headers};
    };

    const renderPDF = (data) => (
        <Document>
            <Page style={styles.page}>
                <View style={styles.table}>
                    <View style={styles.tableRow}>
                        <Text style={styles.tableHeader}>ID</Text>
                        <Text style={styles.tableHeader}>Nombre</Text>
                        <Text style={styles.tableHeader}>Precio</Text>
                    </View>
                    {data.map((item, index) => (
                        <View key={index} style={styles.tableRow}>
                            <Text style={styles.tableCell}>{item.id}</Text>
                            <Text style={styles.tableCell}>{item.nombre}</Text>
                            <Text style={styles.tableCell}>{item.precio || item.precio_adicional}</Text>
                        </View>
                    ))}
                </View>
            </Page>
        </Document>
    );

    return (
        <div className={`container mx-auto px-4 py-8 ${darkMode ? 'dark' : ''}`}>
            <ToastContainer/>
            <nav className="flex items-center justify-between mb-8">
                <div className="text-2xl font-bold text-gray-800 dark:text-white">Dashboard</div>
                <div className="flex items-center">
                    <button
                        className="p-2 rounded-full focus:outline-none focus:shadow-outline-gray"
                        onClick={toggleDarkMode}
                        aria-label="Toggle color mode"
                    >
                        {darkMode ? (
                            <FiSun className="w-5 h-5 text-gray-800 dark:text-white"/>
                        ) : (
                            <FiMoon className="w-5 h-5 text-gray-800 dark:text-white"/>
                        )}
                    </button>
                </div>
            </nav>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
                <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Resumen de Paquetes</h3>
                    <p className="text-3xl font-bold text-blue-500">{paquetes.length}</p>
                </div>
                <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
                    <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Resumen de
                        Personalizaciones</h3>
                    <p className="text-3xl font-bold text-blue-500">{personalizaciones.length}</p>
                </div>
            </div>
            <div className="mb-8">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-2xl font-bold text-gray-800 dark:text-white">Paquetes y Personalizaciones</h2>
                    <div className="flex items-center">
                        <div className="relative mr-4">
                            <input
                                type="text"
                                placeholder="Buscar..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white dark:border-gray-600"
                            />
                            <FiSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"/>
                        </div>
                        <button
                            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded mr-2"
                            onClick={() => openModal('create', {type: 'paquetes'})}
                        >
                            <FiPlus className="inline-block mr-2"/>
                            Nuevo Paquete
                        </button>
                        <button
                            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
                            onClick={() => openModal('create', {type: 'personalizaciones'})}
                        >
                            <FiPlus className="inline-block mr-2"/>
                            Nueva Personalización
                        </button>
                    </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div>
                        <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Paquetes</h3>
                        <div className="overflow-x-auto">
                            <table className="table-auto w-full">
                                <thead>
                                <tr className="bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-200 uppercase text-sm leading-normal">
                                    <th className="py-3 px-6 text-left">Nombre</th>
                                    <th className="py-3 px-6 text-left">Precio</th>
                                    <th className="py-3 px-6 text-center">Acciones</th>
                                </tr>
                                </thead>
                                <tbody className="text-gray-600 dark:text-gray-100 text-sm">
                                {filteredPaquetes.map((paquete) => (
                                    <tr key={paquete.id}
                                        className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600">
                                        <td className="py-3 px-6 text-left whitespace-nowrap">{paquete.nombre}</td>
                                        <td className="py-3 px-6 text-left">${paquete.precio}</td>
                                        <td className="py-3 px-6 text-center">
                                            <div className="flex item-center justify-center">
                                                <div
                                                    className="w-4 mr-2 transform hover:text-blue-500 hover:scale-110 cursor-pointer"
                                                    onClick={() => openModal('edit', {...paquete, type: 'paquetes'})}
                                                >
                                                    <FiEdit/>
                                                </div>
                                                <div
                                                    className="w-4 mr-2 transform hover:text-red-500 hover:scale-110 cursor-pointer"
                                                    onClick={() => handleDelete('paquetes', paquete.id)}
                                                >
                                                    <FiTrash2/>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div>
                        <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Personalizaciones</h3>
                        <div className="overflow-x-auto">
                            <table className="table-auto w-full">
                                <thead>
                                <tr className="bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-200 uppercase text-sm leading-normal">
                                    <th className="py-3 px-6 text-left">Nombre</th>
                                    <th className="py-3 px-6 text-left">Precio Adicional</th>
                                    <th className="py-3 px-6 text-center">Acciones</th>
                                </tr>
                                </thead>
                                <tbody className="text-gray-600 dark:text-gray-100 text-sm">
                                {filteredPersonalizaciones.map((personalizacion) => (
                                    <tr key={personalizacion.id}
                                        className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600">
                                        <td className="py-3 px-6 text-left whitespace-nowrap">{personalizacion.nombre}</td>
                                        <td className="py-3 px-6 text-left">${personalizacion.precio_adicional}</td>
                                        <td className="py-3 px-6 text-center">
                                            <div className="flex item-center justify-center">
                                                <div
                                                    className="w-4 mr-2 transform hover:text-blue-500 hover:scale-110 cursor-pointer"
                                                    onClick={() => openModal('edit', {
                                                        ...personalizacion,
                                                        type: 'personalizaciones'
                                                    })}
                                                >
                                                    <FiEdit/>
                                                </div>
                                                <div
                                                    className="w-4 mr-2 transform hover:text-red-500 hover:scale-110 cursor-pointer"
                                                    onClick={() => handleDelete('personalizaciones', personalizacion.id)}
                                                >
                                                    <FiTrash2/>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <footer className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md">
                <div className="flex justify-between items-center">
                    <p className="text-gray-600 dark:text-gray-400">&copy; {new Date().getFullYear()} Tu Empresa. Todos
                        los derechos reservados.</p>
                    <div>
                        <CSVLink
                            data={renderCSV(paquetes.concat(personalizaciones)).data}
                            headers={renderCSV(paquetes.concat(personalizaciones)).headers}
                            filename="datos.csv"
                            className="text-blue-500 hover:underline mr-4"
                        >
                            Exportar CSV
                        </CSVLink>
                        <button className="text-blue-500 hover:underline">Exportar PDF</button>
                    </div>
                </div>
            </footer>

            <Modal
                isOpen={modalIsOpen}
                onRequestClose={closeModal}
                contentLabel={`${modalMode === 'create' ? 'Crear' : 'Editar'} ${selectedItem?.type === 'paquetes' ? 'Paquete' : 'Personalización'}`}
                className="modal"
                overlayClassName="modal-overlay"
            >
                <h2 className="text-2xl font-bold mb-4 text-gray-800 dark:text-white">
                    {modalMode === 'create' ? 'Crear' : 'Editar'} {selectedItem?.type === 'paquetes' ? 'Paquete' : 'Personalización'}
                </h2>
                <form onSubmit={handleSubmit(onSubmit)}>
                    <div className="mb-4">
                        <label htmlFor="nombre" className="block text-gray-700 dark:text-gray-300 font-bold mb-2">
                            Nombre
                        </label>
                        <input
                            type="text"
                            id="nombre"
                            className="w-full px-3 py-2 text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:border-blue-500"
                            defaultValue={selectedItem?.nombre || ''}
                            {...register('nombre', {required: true})}
                        />
                    </div>
                    <div className="mb-4">
                        <label htmlFor="precio" className="block text-gray-700 dark:text-gray-300 font-bold mb-2">
                            {selectedItem?.type === 'paquetes' ? 'Precio' : 'Precio Adicional'}
                        </label>
                        <input
                            type="number"
                            id="precio"
                            step="0.01"
                            className="w-full px-3 py-2 text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:border-blue-500"
                            defaultValue={selectedItem?.precio || selectedItem?.precio_adicional || ''}
                            {...register(selectedItem?.type === 'paquetes' ? 'precio' : 'precio_adicional', {required: true})}
                        />
                    </div>
                    <div className="flex justify-end">
                        <button
                            type="button"
                            className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mr-2"
                            onClick={closeModal}
                        >
                            Cancelar
                        </button>
                        <button
                            type="submit"
                            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
                        >
                            {modalMode === 'create' ? 'Crear' : 'Guardar'}
                        </button>
                    </div>
                </form>
            </Modal>
        </div>
    );
};
const styles = StyleSheet.create({
    page: {
        flexDirection: 'column',
        backgroundColor: '#ffffff',
        padding: 20,
    },
    table: {
        width: '100%',
        borderStyle: 'solid',
        borderWidth: 1,
        borderColor: '#bfbfbf',
        marginBottom: 10,
    },
    tableRow: {
        flexDirection: 'row',
        borderBottomStyle: 'solid',
        borderBottomWidth: 1,
        borderBottomColor: '#bfbfbf',
        alignItems: 'center',
        height: 30,
        fontStyle: 'bold',
    },
    tableHeader: {
        width: '33.33%',
        textAlign: 'center',
        fontSize: 12,
        padding: 5,
    },
    tableCell: {
        width: '33.33%',
        textAlign: 'center',
        fontSize: 10,
        padding: 5,
    },
});
export default Dashboard;\n\n
=== ./catalogo/services/alimentos.service.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'

const useFoodOptionsStore = create((set, get) => ({
  // Estado
  foodOptions: [],
  
  // Acciones
  fetchFoodOptions: async () => {
    try {
      const response = await axiosInstance.get('/opciones-alimentos')
      set({ foodOptions: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar opciones de alimentos:', error)
      toast.error('Error al cargar las opciones de alimentos')
      throw error
    }
  },
  
  addFoodOption: async (foodOptionData) => {
    try {
      const response = await axiosInstance.post('/opciones-alimentos', foodOptionData)
      set(state => ({ foodOptions: [...state.foodOptions, response.data] }))
      toast.success('Opción de alimento creada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al crear opción de alimento:', error)
      toast.error('Error al crear la opción de alimento')
      throw error
    }
  },
  
  updateFoodOption: async (id, foodOptionData) => {
    try {
      const response = await axiosInstance.put(`/opciones-alimentos/${id}`, foodOptionData)
      set(state => ({
        foodOptions: state.foodOptions.map(option => 
          option.id === id ? { ...option, ...response.data } : option
        )
      }))
      toast.success('Opción de alimento actualizada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar opción de alimento:', error)
      toast.error('Error al actualizar la opción de alimento')
      throw error
    }
  },
  
  deleteFoodOption: async (id) => {
    try {
      await axiosInstance.delete(`/opciones-alimentos/${id}`)
      set(state => ({
        foodOptions: state.foodOptions.filter(option => option.id !== id)
      }))
      toast.success('Opción de alimento eliminada con éxito')
    } catch (error) {
      console.error('Error al eliminar opción de alimento:', error)
      toast.error('Error al eliminar la opción de alimento')
      throw error
    }
  },
  
  // Selectores
  getFoodOptionById: (id) => {
    const { foodOptions } = get()
    return foodOptions.find(option => option.id === id)
  },
  
  getActiveFoodOptions: () => {
    const { foodOptions } = get()
    return foodOptions.filter(option => option.activo)
  }
}))

export default useFoodOptionsStore\n\n
=== ./catalogo/services/categorias.service.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'

const useCategoriesStore = create((set, get) => ({
  // Estado
  categories: [],
  
  // Acciones
  fetchCategories: async () => {
    try {
      const response = await axiosInstance.get('/categorias')
      set({ categories: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar categorías:', error)
      
      // No mostrar toast para errores 404 (recurso no encontrado)
      if (error.response?.status !== 404) {
        toast.error('Error al cargar las categorías')
      }
      
      throw error
    }
  },
  
  addCategory: async (categoryData) => {
    try {
      const response = await axiosInstance.post('/categorias', {
        nombre: categoryData.nombre,
        color: categoryData.color || '#000000'
      })
      set(state => ({ categories: [...state.categories, response.data] }))
      toast.success('Categoría añadida con éxito')
      return response.data
    } catch (error) {
      console.error('Error al añadir la categoría:', error)
      toast.error('Error al añadir la categoría')
      throw error
    }
  },
  
  updateCategory: async (id, categoryData) => {
    try {
      const response = await axiosInstance.put(`/categorias/${id}`, categoryData)
      set(state => ({
        categories: state.categories.map(category =>
          category.id === id ? { ...category, ...response.data } : category
        )
      }))
      toast.success('Categoría actualizada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar categoría:', error)
      toast.error('Error al actualizar la categoría')
      throw error
    }
  },
  
  deleteCategory: async (id) => {
    try {
      await axiosInstance.delete(`/categorias/${id}`)
      set(state => ({
        categories: state.categories.filter(category => category.id !== id)
      }))
      toast.success('Categoría eliminada con éxito')
    } catch (error) {
      console.error('Error al eliminar categoría:', error)
      toast.error('Error al eliminar la categoría')
      throw error
    }
  },
  
  // Selectores
  getCategoryById: (id) => {
    const { categories } = get()
    return categories.find(category => category.id === id)
  },
  
  getCategoryByName: (name) => {
    const { categories } = get()
    return categories.find(category => 
      category.nombre.toLowerCase() === name.toLowerCase()
    )
  }
}))

export default useCategoriesStore\n\n
=== ./catalogo/services/extras.service.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'

const useExtrasStore = create((set, get) => ({
  // Estado
  extras: [],
  
  // Acciones
  fetchExtras: async () => {
    try {
      const response = await axiosInstance.get('/extras')
      set({ extras: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar extras:', error)
      toast.error('Error al cargar los extras')
      throw error
    }
  },
  
  addExtra: async (extraData) => {
    try {
      const response = await axiosInstance.post('/extras', extraData)
      set(state => ({ extras: [...state.extras, response.data] }))
      toast.success('Extra creado exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al crear extra:', error)
      toast.error('Error al crear el extra')
      throw error
    }
  },
  
  updateExtra: async (id, extraData) => {
    try {
      const response = await axiosInstance.put(`/extras/${id}`, extraData)
      set(state => ({
        extras: state.extras.map(extra => 
          extra.id === id ? { ...extra, ...response.data } : extra
        )
      }))
      toast.success('Extra actualizado exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar extra:', error)
      toast.error('Error al actualizar el extra')
      throw error
    }
  },
  
  deleteExtra: async (id) => {
    try {
      await axiosInstance.delete(`/extras/${id}`)
      set(state => ({
        extras: state.extras.filter(extra => extra.id !== id)
      }))
      toast.success('Extra eliminado con éxito')
    } catch (error) {
      console.error('Error al eliminar extra:', error)
      toast.error('Error al eliminar el extra')
      throw error
    }
  },
  
  // Selectores
  getExtraById: (id) => {
    const { extras } = get()
    return extras.find(extra => extra.id === id)
  },
  
  getActiveExtras: () => {
    const { extras } = get()
    return extras.filter(extra => extra.activo)
  }
}))

export default useExtrasStore\n\n
=== ./catalogo/services/index.js ===
﻿// Servicios del dominio Catálogo - Arquitectura optimizada
export * from './alimentos.service';
export * from './categorias.service'; 
export * from './extras.service';
export * from './mamparas.service';
export * from './paquetes.service';
export * from './tematicas.service';

// Re-exportaciones para compatibilidad
export { default as AlimentosService } from './alimentos.service';
export { default as CategoriasService } from './categorias.service';
export { default as ExtrasService } from './extras.service';
export { default as MamparasService } from './mamparas.service';
export { default as PaquetesService } from './paquetes.service';
export { default as TematicasService } from './tematicas.service';
\n\n
=== ./catalogo/services/mamparas.service.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'

const useMamparasStore = create((set, get) => ({
  // Estado
  mamparas: [],
  
  // Acciones
  fetchMamparas: async () => {
    try {
      const response = await axiosInstance.get('/mamparas')
      set({ mamparas: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar mamparas:', error)
      toast.error('Error al cargar las mamparas')
      throw error
    }
  },
  
  addMampara: async (mamparaData) => {
    try {
      const response = await axiosInstance.post('/mamparas', mamparaData)
      set(state => ({ mamparas: [...state.mamparas, response.data] }))
      toast.success('Mampara creada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al crear mampara:', error)
      toast.error('Error al crear la mampara')
      throw error
    }
  },
  
  updateMampara: async (id, mamparaData) => {
    try {
      const response = await axiosInstance.put(`/mamparas/${id}`, mamparaData)
      set(state => ({
        mamparas: state.mamparas.map(mampara => 
          mampara.id === id ? { ...mampara, ...response.data } : mampara
        )
      }))
      toast.success('Mampara actualizada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar mampara:', error)
      toast.error('Error al actualizar la mampara')
      throw error
    }
  },
  
  deleteMampara: async (id) => {
    try {
      await axiosInstance.delete(`/mamparas/${id}`)
      set(state => ({
        mamparas: state.mamparas.filter(mampara => mampara.id !== id)
      }))
      toast.success('Mampara eliminada con éxito')
    } catch (error) {
      console.error('Error al eliminar mampara:', error)
      toast.error('Error al eliminar la mampara')
      throw error
    }
  },
  
  // Selectores
  getMamparaById: (id) => {
    const { mamparas } = get()
    return mamparas.find(mampara => mampara.id === id)
  },
  
  getMamparasByTheme: (themeId) => {
    const { mamparas } = get()
    return mamparas.filter(mampara => mampara.id_tematica === themeId)
  },
  
  getActiveMamparas: () => {
    const { mamparas } = get()
    return mamparas.filter(mampara => mampara.activo)
  }
}))

export default useMamparasStore\n\n
=== ./catalogo/services/paquetes.service.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'

const usePackagesStore = create((set, get) => ({
  // Estado
  packages: [],
  
  // Acciones
  fetchPackages: async () => {
    try {
      const response = await axiosInstance.get('/paquetes')
      set({ packages: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar paquetes:', error)
      toast.error('Error al cargar los paquetes')
      throw error
    }
  },
  
  addPackage: async (packageData) => {
    try {
      const response = await axiosInstance.post('/paquetes', packageData)
      set(state => ({ packages: [...state.packages, response.data] }))
      toast.success('Paquete creado exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al crear paquete:', error)
      toast.error('Error al crear el paquete')
      throw error
    }
  },
  
  updatePackage: async (id, packageData) => {
    try {
      const response = await axiosInstance.put(`/paquetes/${id}`, packageData)
      set(state => ({
        packages: state.packages.map(pkg => 
          pkg.id === id ? { ...pkg, ...response.data } : pkg
        )
      }))
      toast.success('Paquete actualizado exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar paquete:', error)
      toast.error('Error al actualizar el paquete')
      throw error
    }
  },
  
  deletePackage: async (id) => {
    try {
      await axiosInstance.delete(`/paquetes/${id}`)
      set(state => ({
        packages: state.packages.filter(pkg => pkg.id !== id)
      }))
      toast.success('Paquete desactivado con éxito')
    } catch (error) {
      console.error('Error al desactivar paquete:', error)
      toast.error('Error al desactivar el paquete')
      throw error
    }
  },
  
  // Selectores
  getPackageById: (id) => {
    const { packages } = get()
    return packages.find(pkg => pkg.id === id)
  },
  
  getActivePackages: () => {
    const { packages } = get()
    return packages.filter(pkg => pkg.activo)
  }
}))

export default usePackagesStore\n\n
=== ./catalogo/services/tematicas.service.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'

const useThemesStore = create((set, get) => ({
  // Estado
  themes: [],
  
  // Acciones
  fetchThemes: async () => {
    try {
      const response = await axiosInstance.get('/tematicas')
      set({ themes: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar temáticas:', error)
      toast.error('Error al cargar las temáticas')
      throw error
    }
  },
  
  addTheme: async (themeData) => {
    try {
      const response = await axiosInstance.post('/tematicas', themeData)
      set(state => ({ themes: [...state.themes, response.data] }))
      toast.success('Temática creada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al crear temática:', error)
      toast.error('Error al crear la temática')
      throw error
    }
  },
  
  updateTheme: async (id, themeData) => {
    try {
      const response = await axiosInstance.put(`/tematicas/${id}`, themeData)
      set(state => ({
        themes: state.themes.map(theme => 
          theme.id === id ? { ...theme, ...response.data } : theme
        )
      }))
      toast.success('Temática actualizada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar temática:', error)
      toast.error('Error al actualizar la temática')
      throw error
    }
  },
  
  deleteTheme: async (id) => {
    try {
      await axiosInstance.delete(`/tematicas/${id}`)
      set(state => ({
        themes: state.themes.filter(theme => theme.id !== id)
      }))
      toast.success('Temática eliminada con éxito')
    } catch (error) {
      console.error('Error al eliminar temática:', error)
      toast.error('Error al eliminar la temática')
      throw error
    }
  },
  
  // Selectores
  getThemeById: (id) => {
    const { themes } = get()
    return themes.find(theme => theme.id === id)
  }
}))

export default useThemesStore\n\n
=== ./cotizaciones/components/index.js ===
// Exportar todos los componentes de cotizaciones/components
\n\n
=== ./cotizaciones/hooks/index.js ===
// Exportar todos los componentes de cotizaciones/hooks
\n\n
=== ./cotizaciones/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n
=== ./cotizaciones/pages/index.js ===
// Exportar todos los componentes de cotizaciones/pages
\n\n
=== ./cotizaciones/pages/index.jsx ===
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { motion } from 'framer-motion';
import { FiArrowLeft, FiCalendar, FiPackage, FiClock, FiUsers, FiAlertCircle } from 'react-icons/fi';

// Stores
import useCotizacionesStore from '@shared/store/cotizacionesStore';
import usePreReservasStore from '@shared/store/preReservasStore';

// Componentes
import ParticlesBackground from '../../public/home-components/decorative/ParticlesBackground';

const CotizacionesPage = () => {
  const navigate = useNavigate();
  
  // Estados del store de cotizaciones
  const { 
    cotizaciones, 
    obtenerCotizaciones, 
    convertirAReserva, 
    loading, 
    error 
  } = useCotizacionesStore();
  
  // Estados del store de pre-reservas (para el flujo de pago)
  const { iniciarProcesoPago } = usePreReservasStore();
  
  // Estados locales
  const [procesando, setProcesando] = useState(false);
  const [cotizacionSeleccionada, setCotizacionSeleccionada] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  
  // Cargar cotizaciones al montar el componente
  useEffect(() => {
    const cargarCotizaciones = async () => {
      try {
        await obtenerCotizaciones();
      } catch (error) {
        console.error('Error al cargar cotizaciones:', error);
      }
    };
    
    cargarCotizaciones();
  }, [obtenerCotizaciones]);
  
  // Función para convertir una cotización a reserva
  const handleConvertirAReserva = async (cotizacion) => {
    try {
      setProcesando(true);
      setCotizacionSeleccionada(cotizacion);
      setModalVisible(true);
    } catch (error) {
      console.error('Error al preparar conversión:', error);
      toast.error('Error al preparar la conversión a reserva.');
      setProcesando(false);
    }
  };
  
  // Función para confirmar la conversión a reserva
  const confirmarConversion = async () => {
    try {
      console.log('Iniciando conversión de cotización a reserva:', cotizacionSeleccionada.id);
      
      // Convertir cotización a reserva
      const resultado = await convertirAReserva(cotizacionSeleccionada.id);
      
      console.log('Resultado de conversión:', resultado);
      
      if (!resultado || !resultado.reserva) {
        throw new Error('No se recibió información de la reserva');
      }
      
      // Asegurarse de que la reserva tenga el estado correcto
      const reservaConEstado = {
        ...resultado.reserva,
        estado: 'pendiente'
      };
      
      console.log('Iniciando proceso de pago con reserva:', reservaConEstado);
      
      // Iniciar proceso de pago con la reserva creada
      // Usar 'transferencia' como método de pago para asegurar compatibilidad
      await iniciarProcesoPago(reservaConEstado, 'transferencia');
      
      toast.success('Cotización convertida a reserva. Proceda con el pago.');
      setModalVisible(false);
      
      // Navegar a la página de estado de reserva
      navigate(`/customer/reservationstatus/${resultado.reserva.id}`);
    } catch (error) {
      console.error('Error al convertir cotización:', error);
      toast.error('Error al convertir la cotización a reserva.');
    } finally {
      setProcesando(false);
    }
  };
  
  // Función para formatear fecha
  const formatearFecha = (fechaStr) => {
    const fecha = new Date(fechaStr);
    return fecha.toLocaleDateString('es-MX', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };
  
  // Función para determinar el color de estado
  const getEstadoColor = (estado) => {
    switch (estado) {
      case 'creada':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
      case 'expirada':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
      case 'convertida':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    }
  };
  
  // Renderizar modal de confirmación
  const renderModal = () => {
    if (!modalVisible || !cotizacionSeleccionada) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <motion.div 
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full p-6"
        >
          <h2 className="text-2xl font-bold mb-4 text-indigo-800 dark:text-indigo-400">Confirmar Reserva</h2>
          
          <p className="mb-6 text-gray-600 dark:text-gray-300">
            ¿Estás seguro de que deseas convertir esta cotización en una reserva? 
            Una vez confirmada, procederás al proceso de pago.
          </p>
          
          <div className="bg-indigo-50 dark:bg-indigo-900/30 p-4 rounded-lg mb-6">
            <p className="dark:text-gray-200"><strong>Cotización:</strong> #{cotizacionSeleccionada.codigo_seguimiento}</p>
            <p className="dark:text-gray-200"><strong>Fecha del evento:</strong> {formatearFecha(cotizacionSeleccionada.fecha_evento)}</p>
            <p className="dark:text-gray-200"><strong>Horario:</strong> {cotizacionSeleccionada.hora_inicio} - {cotizacionSeleccionada.hora_fin}</p>
            <p className="dark:text-gray-200"><strong>Total:</strong> ${parseFloat(cotizacionSeleccionada.total).toFixed(2)}</p>
          </div>
          
          <div className="flex justify-end space-x-4">
            <button
              onClick={() => setModalVisible(false)}
              className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
              disabled={procesando}
            >
              Cancelar
            </button>
            
            <button
              onClick={confirmarConversion}
              className="px-4 py-2 bg-indigo-600 dark:bg-indigo-700 text-white rounded-lg hover:bg-indigo-700 dark:hover:bg-indigo-600 disabled:opacity-50"
              disabled={procesando}
            >
              {procesando ? 'Procesando...' : 'Confirmar y Proceder al Pago'}
            </button>
          </div>
        </motion.div>
      </div>
    );
  };
  
  // Renderizar tarjeta de cotización
  const renderCotizacionCard = (cotizacion) => {
    return (
      <motion.div 
        key={cotizacion.id}
        whileHover={{ y: -5 }}
        className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden border border-gray-200 dark:border-gray-700"
      >
        <div className="bg-indigo-600 dark:bg-indigo-800 text-white p-4">
          <h3 className="font-bold text-lg">Cotización #{cotizacion.codigo_seguimiento}</h3>
          <p className="text-sm opacity-90">Creada: {formatearFecha(cotizacion.fecha_creacion)}</p>
        </div>
        
        <div className="p-4">
          <div className="mb-4 grid grid-cols-2 gap-2">
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Fecha del Evento</p>
              <p className="font-medium dark:text-white">{formatearFecha(cotizacion.fecha_evento)}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Horario</p>
              <p className="font-medium dark:text-white">{cotizacion.hora_inicio} - {cotizacion.hora_fin}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Paquete</p>
              <p className="font-medium dark:text-white">{cotizacion.paquete_nombre || 'No especificado'}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Total</p>
              <p className="font-bold text-indigo-700 dark:text-indigo-400">${parseFloat(cotizacion.total).toFixed(2)}</p>
            </div>
          </div>
          
          <div className="flex items-center justify-between mt-4">
            <span className={`px-3 py-1 rounded-full text-xs font-medium ${getEstadoColor(cotizacion.estado)}`}>
              {cotizacion.estado === 'creada' ? 'Activa' : 
               cotizacion.estado === 'expirada' ? 'Expirada' : 
               cotizacion.estado === 'convertida' ? 'Convertida' : cotizacion.estado}
            </span>
            
            {cotizacion.estado === 'creada' && (
              <button
                onClick={() => handleConvertirAReserva(cotizacion)}
                disabled={procesando}
                className="bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-700 dark:hover:bg-indigo-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors disabled:opacity-50"
              >
                Reservar Ahora
              </button>
            )}
            
            {cotizacion.estado === 'expirada' && (
              <button
                onClick={() => navigate('/customer/reservation')}
                className="bg-gray-600 hover:bg-gray-700 dark:bg-gray-700 dark:hover:bg-gray-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
              >
                Crear Nueva
              </button>
            )}
          </div>
          
          {cotizacion.estado === 'expirada' && (
            <div className="mt-3 flex items-center text-sm text-red-600 dark:text-red-400">
              <FiAlertCircle className="mr-1" />
              <span>Esta cotización ha expirado</span>
            </div>
          )}
          
          {cotizacion.fecha_expiracion && cotizacion.estado === 'creada' && (
            <div className="mt-3 text-sm text-gray-500 dark:text-gray-400">
              Expira: {formatearFecha(cotizacion.fecha_expiracion)}
            </div>
          )}
        </div>
      </motion.div>
    );
  };
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 to-purple-100 dark:from-gray-900 dark:to-indigo-950 relative">
      {/* Fondo decorativo */}
      <div className="absolute inset-0 z-0 opacity-40">
        <ParticlesBackground color="#4f46e5" />
      </div>
      
      {/* Contenido principal */}
      <div className="relative z-10 container mx-auto px-4 py-12">
        <ToastContainer
          position="top-right"
          autoClose={5000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="light"
        />
        
        {/* Cabecera */}
        <div className="mb-10">
          <button
            onClick={() => navigate('/customer/dashboard')}
            className="flex items-center text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-300 mb-6 transition-colors"
          >
            <FiArrowLeft className="mr-2" />
            <span>Volver al Dashboard</span>
          </button>
          
          <h1 className="text-3xl md:text-4xl font-bold text-indigo-800 dark:text-indigo-400 mb-4">
            Mis Cotizaciones
          </h1>
          
          <p className="text-gray-600 dark:text-gray-300 max-w-2xl">
            Aquí puedes ver todas tus cotizaciones activas y convertirlas en reservas cuando estés listo para confirmar.
          </p>
        </div>
        
        {/* Estado de carga */}
        {loading && (
          <div className="flex justify-center items-center py-20">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-600 dark:border-indigo-400"></div>
          </div>
        )}
        
        {/* Mensaje de error */}
        {error && !loading && (
          <div className="bg-red-100 dark:bg-red-900/50 border-l-4 border-red-500 text-red-700 dark:text-red-300 p-4 rounded mb-6">
            <p className="font-bold">Error</p>
            <p>{error}</p>
          </div>
        )}
        
        {/* Sin cotizaciones */}
        {!loading && !error && cotizaciones.length === 0 && (
          <div className="bg-white dark:bg-gray-800 bg-opacity-80 dark:bg-opacity-80 backdrop-blur-sm rounded-xl shadow-lg p-8 text-center max-w-md mx-auto">
            <div className="w-20 h-20 bg-indigo-100 dark:bg-indigo-900/50 rounded-full flex items-center justify-center mx-auto mb-6">
              <FiCalendar className="w-10 h-10 text-indigo-600 dark:text-indigo-400" />
            </div>
            
            <h2 className="text-xl font-bold text-gray-800 dark:text-white mb-2">No tienes cotizaciones</h2>
            
            <p className="text-gray-600 dark:text-gray-300 mb-6">
              Crea una cotización para tu evento y recibe un presupuesto sin compromiso.
            </p>
            
            <button
              onClick={() => navigate('/customer/reservation')}
              className="bg-indigo-600 dark:bg-indigo-700 hover:bg-indigo-700 dark:hover:bg-indigo-600 text-white px-6 py-3 rounded-lg font-medium transition-colors"
            >
              Crear Nueva Cotización
            </button>
          </div>
        )}
        
        {/* Lista de cotizaciones */}
        {!loading && !error && cotizaciones.length > 0 && (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {cotizaciones.map(renderCotizacionCard)}
            </div>
            
            <div className="mt-8 text-center">
              <button
                onClick={() => navigate('/customer/reservation')}
                className="bg-indigo-600 dark:bg-indigo-700 hover:bg-indigo-700 dark:hover:bg-indigo-600 text-white px-6 py-3 rounded-lg font-medium transition-colors"
              >
                Crear Nueva Cotización
              </button>
            </div>
          </>
        )}
      </div>
      
      {/* Modal de confirmación */}
      {renderModal()}
    </div>
  );
};

export default CotizacionesPage;\n\n
=== ./cotizaciones/services/cotizaciones.service.js ===
﻿import { create } from 'zustand';
import axiosInstance from '@shared/utils/axiosConfig';
import { toast } from 'react-toastify';

/**
 * Store para gestionar las cotizaciones
 */
const useCotizacionesStore = create((set, get) => ({
  // Estado
  cotizaciones: [],
  cotizacionActual: null,
  loading: false,
  error: null,
  
  /**
   * Crear una nueva cotizaciÃ³n
   * @param {Object} cotizacionData - Datos de la cotizaciÃ³n
   * @returns {Promise} - Promesa con el resultado
   */
  crearCotizacion: async (cotizacionData) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axiosInstance.post('/api/cotizaciones', cotizacionData);
      
      set(state => ({
        loading: false,
        cotizacionActual: response.data.cotizacion,
        cotizaciones: [response.data.cotizacion, ...state.cotizaciones]
      }));
      
      return response.data;
    } catch (error) {
      console.error('Error al crear cotizaciÃ³n:', error);
      
      const errorMessage = error.response?.data?.message || 
        'Error al crear la cotizaciÃ³n. Por favor, intenta nuevamente.';
      
      set({ 
        loading: false, 
        error: errorMessage 
      });
      
      throw new Error(errorMessage);
    }
  },
  
  /**
   * Obtener todas las cotizaciones del usuario
   * @returns {Promise} - Promesa con el resultado
   */
  obtenerCotizaciones: async () => {
    set({ loading: true, error: null });
    
    try {
      const response = await axiosInstance.get('/api/cotizaciones');
      
      set({ 
        loading: false, 
        cotizaciones: response.data.cotizaciones 
      });
      
      return response.data.cotizaciones;
    } catch (error) {
      console.error('Error al obtener cotizaciones:', error);
      
      const errorMessage = error.response?.data?.message || 
        'Error al obtener las cotizaciones. Por favor, intenta nuevamente.';
      
      set({ 
        loading: false, 
        error: errorMessage 
      });
      
      throw new Error(errorMessage);
    }
  },
  
  /**
   * Obtener detalles de una cotizaciÃ³n especÃ­fica
   * @param {number} id - ID de la cotizaciÃ³n
   * @returns {Promise} - Promesa con el resultado
   */
  obtenerCotizacion: async (id) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axiosInstance.get(`/api/cotizaciones/${id}`);
      
      set({ 
        loading: false, 
        cotizacionActual: response.data.cotizacion 
      });
      
      return response.data.cotizacion;
    } catch (error) {
      console.error('Error al obtener cotizaciÃ³n:', error);
      
      const errorMessage = error.response?.data?.message || 
        'Error al obtener la cotizaciÃ³n. Por favor, intenta nuevamente.';
      
      set({ 
        loading: false, 
        error: errorMessage 
      });
      
      throw new Error(errorMessage);
    }
  },
  
  /**
   * Convertir una cotizaciÃ³n en reserva
   * @param {number} id - ID de la cotizaciÃ³n
   * @returns {Promise} - Promesa con el resultado
   */
  convertirAReserva: async (id) => {
    set({ loading: true, error: null });
    
    try {
      console.log('Convirtiendo cotizaciÃ³n a reserva:', id);
      const response = await axiosInstance.post(`/api/cotizaciones/${id}/convertir`);
      
      console.log('Respuesta de conversiÃ³n:', response.data);
      
      // Asegurarse de que la reserva tenga todos los campos necesarios
      if (response.data && response.data.reserva) {
        // Asegurar que la reserva tenga el estado correcto
        response.data.reserva.estado = 'pendiente';
        
        // Asegurar que el campo total estÃ© presente (no precio_total)
        if (response.data.reserva.precio_total && !response.data.reserva.total) {
          response.data.reserva.total = response.data.reserva.precio_total;
        }
      }
      
      // Actualizar la lista de cotizaciones para reflejar el cambio de estado
      set(state => ({
        loading: false,
        cotizaciones: state.cotizaciones.map(cotizacion =>
          cotizacion.id === id
            ? { ...cotizacion, estado: 'convertida' }
            : cotizacion
        )
      }));
      
      return response.data;
    } catch (error) {
      console.error('Error al convertir cotizaciÃ³n a reserva:', error);
      
      const errorMessage = error.response?.data?.message || 
        'Error al convertir la cotizaciÃ³n a reserva. Por favor, intenta nuevamente.';
      
      set({ 
        loading: false, 
        error: errorMessage 
      });
      
      throw new Error(errorMessage);
    }
  },
  
  /**
   * Verificar disponibilidad para una cotizaciÃ³n
   * @param {Object} datos - Datos para verificar disponibilidad
   * @returns {Promise} - Promesa con el resultado
   */
  verificarDisponibilidad: async (datos) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axiosInstance.post('/api/cotizaciones/verificar-disponibilidad', datos);
      
      set({ loading: false });
      
      return response.data;
    } catch (error) {
      console.error('Error al verificar disponibilidad:', error);
      
      const errorMessage = error.response?.data?.message || 
        'Error al verificar disponibilidad. Por favor, intenta nuevamente.';
      
      set({ 
        loading: false, 
        error: errorMessage 
      });
      
      throw new Error(errorMessage);
    }
  },
  
  /**
   * Limpiar la cotizaciÃ³n actual
   */
  limpiarCotizacionActual: () => {
    set({ cotizacionActual: null });
  },
  
  /**
   * Limpiar errores
   */
  limpiarError: () => {
    set({ error: null });
  }
}));

export default useCotizacionesStore;
\n\n
=== ./cotizaciones/services/cotizacionesStore.js ===
import { create } from 'zustand';
import axiosInstance from '@/components/axiosConfig';
import { toast } from 'react-toastify';

/**
 * Store para gestionar las cotizaciones
 */
const useCotizacionesStore = create((set, get) => ({
  // Estado
  cotizaciones: [],
  cotizacionActual: null,
  loading: false,
  error: null,
  
  /**
   * Crear una nueva cotización
   * @param {Object} cotizacionData - Datos de la cotización
   * @returns {Promise} - Promesa con el resultado
   */
  crearCotizacion: async (cotizacionData) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axiosInstance.post('/api/cotizaciones', cotizacionData);
      
      set(state => ({
        loading: false,
        cotizacionActual: response.data.cotizacion,
        cotizaciones: [response.data.cotizacion, ...state.cotizaciones]
      }));
      
      return response.data;
    } catch (error) {
      console.error('Error al crear cotización:', error);
      
      const errorMessage = error.response?.data?.message || 
        'Error al crear la cotización. Por favor, intenta nuevamente.';
      
      set({ 
        loading: false, 
        error: errorMessage 
      });
      
      throw new Error(errorMessage);
    }
  },
  
  /**
   * Obtener todas las cotizaciones del usuario
   * @returns {Promise} - Promesa con el resultado
   */
  obtenerCotizaciones: async () => {
    set({ loading: true, error: null });
    
    try {
      const response = await axiosInstance.get('/api/cotizaciones');
      
      set({ 
        loading: false, 
        cotizaciones: response.data.cotizaciones 
      });
      
      return response.data.cotizaciones;
    } catch (error) {
      console.error('Error al obtener cotizaciones:', error);
      
      const errorMessage = error.response?.data?.message || 
        'Error al obtener las cotizaciones. Por favor, intenta nuevamente.';
      
      set({ 
        loading: false, 
        error: errorMessage 
      });
      
      throw new Error(errorMessage);
    }
  },
  
  /**
   * Obtener detalles de una cotización específica
   * @param {number} id - ID de la cotización
   * @returns {Promise} - Promesa con el resultado
   */
  obtenerCotizacion: async (id) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axiosInstance.get(`/api/cotizaciones/${id}`);
      
      set({ 
        loading: false, 
        cotizacionActual: response.data.cotizacion 
      });
      
      return response.data.cotizacion;
    } catch (error) {
      console.error('Error al obtener cotización:', error);
      
      const errorMessage = error.response?.data?.message || 
        'Error al obtener la cotización. Por favor, intenta nuevamente.';
      
      set({ 
        loading: false, 
        error: errorMessage 
      });
      
      throw new Error(errorMessage);
    }
  },
  
  /**
   * Convertir una cotización en reserva
   * @param {number} id - ID de la cotización
   * @returns {Promise} - Promesa con el resultado
   */
  convertirAReserva: async (id) => {
    set({ loading: true, error: null });
    
    try {
      console.log('Convirtiendo cotización a reserva:', id);
      const response = await axiosInstance.post(`/api/cotizaciones/${id}/convertir`);
      
      console.log('Respuesta de conversión:', response.data);
      
      // Asegurarse de que la reserva tenga todos los campos necesarios
      if (response.data && response.data.reserva) {
        // Asegurar que la reserva tenga el estado correcto
        response.data.reserva.estado = 'pendiente';
        
        // Asegurar que el campo total esté presente (no precio_total)
        if (response.data.reserva.precio_total && !response.data.reserva.total) {
          response.data.reserva.total = response.data.reserva.precio_total;
        }
      }
      
      // Actualizar la lista de cotizaciones para reflejar el cambio de estado
      set(state => ({
        loading: false,
        cotizaciones: state.cotizaciones.map(cotizacion =>
          cotizacion.id === id
            ? { ...cotizacion, estado: 'convertida' }
            : cotizacion
        )
      }));
      
      return response.data;
    } catch (error) {
      console.error('Error al convertir cotización a reserva:', error);
      
      const errorMessage = error.response?.data?.message || 
        'Error al convertir la cotización a reserva. Por favor, intenta nuevamente.';
      
      set({ 
        loading: false, 
        error: errorMessage 
      });
      
      throw new Error(errorMessage);
    }
  },
  
  /**
   * Verificar disponibilidad para una cotización
   * @param {Object} datos - Datos para verificar disponibilidad
   * @returns {Promise} - Promesa con el resultado
   */
  verificarDisponibilidad: async (datos) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axiosInstance.post('/api/cotizaciones/verificar-disponibilidad', datos);
      
      set({ loading: false });
      
      return response.data;
    } catch (error) {
      console.error('Error al verificar disponibilidad:', error);
      
      const errorMessage = error.response?.data?.message || 
        'Error al verificar disponibilidad. Por favor, intenta nuevamente.';
      
      set({ 
        loading: false, 
        error: errorMessage 
      });
      
      throw new Error(errorMessage);
    }
  },
  
  /**
   * Limpiar la cotización actual
   */
  limpiarCotizacionActual: () => {
    set({ cotizacionActual: null });
  },
  
  /**
   * Limpiar errores
   */
  limpiarError: () => {
    set({ error: null });
  }
}));

export default useCotizacionesStore;\n\n
=== ./cotizaciones/services/index.js ===
// Exportar todos los componentes de cotizaciones/services
export { default as cotizacionesService } from './cotizaciones.service.js';
\n\n
=== ./dashboard/components/ItemModal.jsx ===
﻿// Usar el alias @ para garantizar resoluciÃ³n correcta en Docker
import Modal from '@shared/components/Modal'
import UserForm from '../user-service/UserForm.jsx'
import ReservationForm from '../reservation-service/ReservationForm.jsx'
import FinanceForm from '../finance-service/FinanceForm.jsx'
import PackageForm from '../catalog-service/paquete-service/PackageForm.jsx'
import ExtraForm from '../catalog-service/extra-service/ExtraForm.jsx'
import OpcionAlimentoForm from '../catalog-service/alimento-service/OpcionAlimentoForm.jsx'
import TematicaForm from '../catalog-service/tematica-service/TematicaForm.jsx'
import MamparaForm from '../catalog-service/mampara-service/MamparaForm.jsx'
import PaymentForm from '../payment-service/PaymentForm.jsx'

const ItemModal = ({
  isOpen,
  onClose,
  title,
  loading,
  activeTab,
  handleSubmit,
  editingItem,
  generatedPassword,
  generateRandomPassword,
  users,
  packages,
  reservations,
  categories,
  onAddCategory,
  foodOptions,
  extras,
  tematicas,
  mamparas,
  payments,
  currentUser
}) => {
  const commonProps = {
    editingItem,
    onSave: handleSubmit,
    activeTab,
    payment: editingItem,
    onClose,
    users,
    packages,
    foodOptions,
    currentUser,
    extras,
    tematicas,
    mamparas,
    payments,
    reservations,
    blockedDates: reservations
      .filter(r => r.estado === 'confirmada')
      .map(r => new Date(r.fecha_reserva)),
    existingReservations: reservations
  }

  const renderForm = () => {
    switch (activeTab) {
      case 'users':
        return (
          <UserForm
            {...commonProps}
            generatedPassword={generatedPassword}
            generateRandomPassword={generateRandomPassword}
          />
        )

      case 'reservations':
        console.log('Abriendo formulario de reserva con los siguientes props:', commonProps)
        return <ReservationForm {...commonProps} />

      case 'finances':
        return (
          <FinanceForm
            {...commonProps}
            categories={categories}
            onAddCategory={onAddCategory}
            reservations={reservations}
          />
        )
      case 'packages':
        return <PackageForm {...commonProps} />
      case 'extras':
        return <ExtraForm {...commonProps} />
      case 'opcionesAlimento':
        return <OpcionAlimentoForm {...commonProps} />
      case 'tematicas':
        return <TematicaForm {...commonProps} />
      case 'mamparas':
        return <MamparaForm {...commonProps} />
      case 'payments':
        return <PaymentForm {...commonProps} payment={editingItem} />
      default:
        return null
    }
  }

  if (!isOpen) return null

  const footerContent = (
    <div className="flex justify-end">
      <button
        onClick={onClose}
        className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md mr-2 hover:bg-gray-300 transition duration-150 ease-in-out"
      >
        Cancelar
      </button>
      <button
        form={`${activeTab}Form`}
        type="submit"
        className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition duration-150 ease-in-out"
        disabled={loading}
      >
        {loading ? 'Guardando...' : 'Guardar'}
      </button>
    </div>
  );

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={title || `${editingItem ? 'Editar' : 'Agregar'} ${activeTab}`}
      footer={footerContent}
    >
      {renderForm()}
    </Modal>
  )
}

export default ItemModal

\n\n
=== ./dashboard/components/MonthSelector.jsx ===
import { useState, useEffect } from 'react';

const MonthSelector = ({ selectedMonth, setSelectedMonth, selectedYear, setSelectedYear }) => {
    const currentYear = new Date().getFullYear();
    const years = Array.from({ length: 5 }, (_, i) => currentYear - 2 + i);

    const months = [
        'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
        'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
    ];

    return (
        <div className="mt-8 flex justify-end gap-4 items-center">
            <div className="flex gap-2 items-center">
                <select
                    value={selectedMonth}
                    onChange={(e) => setSelectedMonth(parseInt(e.target.value))}
                    className="bg-white border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                >
                    {months.map((month, index) => (
                        <option key={index} value={index}>
                            {month}
                        </option>
                    ))}
                </select>
                <select
                    value={selectedYear}
                    onChange={(e) => setSelectedYear(parseInt(e.target.value))}
                    className="bg-white border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                >
                    {years.map(year => (
                        <option key={year} value={year}>
                            {year}
                        </option>
                    ))}
                </select>
            </div>
            <div className="text-sm text-gray-600">
                {months[selectedMonth]} {selectedYear}
            </div>
        </div>
    );
};

export default MonthSelector;\n\n
=== ./dashboard/components/ReservationCalendar.jsx ===
﻿import { useState, useEffect } from 'react';
import Modal from '@shared/components/Modal';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import moment from 'moment';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import { motion, AnimatePresence } from 'framer-motion';
import { FiChevronLeft, FiChevronRight, FiCalendar, FiX, FiInfo, FiCheck, FiAlertCircle } from 'react-icons/fi';
import axios from '@shared/components/axiosConfig';
import { toast } from 'react-hot-toast';

const localizer = momentLocalizer(moment);

const ReservationCalendar = ({ reservations }) => {
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [dateAvailability, setDateAvailability] = useState({});
  const [isBlockingMode, setIsBlockingMode] = useState(false);
  const [selectedDates, setSelectedDates] = useState([]);
  const [isDragging, setIsDragging] = useState(false);
  const [showLegend, setShowLegend] = useState(false);
  const [showBlockModal, setShowBlockModal] = useState(false);

  const checkDateAvailability = (date, reservations) => {
    const dateReservations = reservations.filter(
      r => r.fecha_reserva === date && r.estado !== 'cancelada'
    );

    const morningReserved = dateReservations.some(r => r.hora_inicio === '11:00:00');
    const eveningReserved = dateReservations.some(r => r.hora_inicio !== '11:00:00');

    if (morningReserved && eveningReserved) return 'unavailable';
    if (morningReserved || eveningReserved) return 'partial';
    return 'available';
  };

  useEffect(() => {
    const availability = {};
    const uniqueDates = [...new Set(reservations.map(r => r.fecha_reserva))];
    uniqueDates.forEach(date => {
      availability[date] = checkDateAvailability(date, reservations);
    });
    setDateAvailability(availability);
  }, [reservations]);

  const events = reservations.map(reservation => ({
    title: `#${reservation.id} ${reservation.usuario?.nombre || ''}`,
    start: new Date(reservation.fecha_reserva),
    end: new Date(reservation.fecha_reserva),
    allDay: true,
    resource: reservation,
  }));

  const eventStyleGetter = (event, start, end, isSelected) => {
    if (event.isBlockingPreview) {
      return {
        style: {
          backgroundColor: '#DC2626',
          borderRadius: '4px',
          opacity: 0.7,
          color: 'white',
          border: '2px dashed #991B1B',
          padding: '1px 4px',
          fontSize: '0.75rem'
        }
      };
    }

    const date = moment(start).format('YYYY-MM-DD');
    const availability = dateAvailability[date];
    let backgroundColor = '#4F46E5';
    
    if (availability === 'unavailable') {
      backgroundColor = '#EF4444';
    } else if (availability === 'partial') {
      backgroundColor = '#F59E0B';
    } else if (availability === 'available') {
      backgroundColor = '#10B981';
    }

    return {
      style: {
        backgroundColor: isSelected ? '#3730A3' : backgroundColor,
        borderRadius: '4px',
        opacity: 0.8,
        color: 'white',
        border: '0px',
        padding: '1px 4px',
        fontSize: '0.75rem'
      }
    };
  };

  const handleBlockDates = async () => {
    try {
      const response = await axios.post('/api/reservas/block-dates', {
        dates: selectedDates
      });
      
      if (response.status === 201) {
        // Toast con animaciÃ³n personalizada
        toast.custom(
          (t) => (
            <motion.div
              initial={{ opacity: 0, y: -40, scale: 0.6 }}
              animate={{ opacity: 1, y: 0, scale: 1 }}
              exit={{ opacity: 0, y: 20, scale: 0.9 }}
              transition={{
                type: "spring",
                stiffness: 500,
                damping: 30,
                duration: 0.4
              }}
              className={`${
                t.visible ? 'animate-enter' : 'animate-leave'
              } max-w-md w-full bg-white shadow-lg rounded-lg pointer-events-auto flex ring-1 ring-black ring-opacity-5`}
            >
              <div className="flex-1 w-0 p-4">
                <div className="flex items-start">
                  <div className="flex-shrink-0 pt-0.5">
                    <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center">
                      <FiCheck className="h-6 w-6 text-green-600" />
                    </div>
                  </div>
                  <div className="ml-3 flex-1">
                    <p className="text-sm font-medium text-gray-900">
                      Â¡DÃ­as bloqueados exitosamente!
                    </p>
                    <p className="mt-1 text-sm text-gray-500">
                      {selectedDates.length} {selectedDates.length === 1 ? 'dÃ­a administrativo' : 'dÃ­as administrativos'} bloqueado(s).
                    </p>
                  </div>
                </div>
              </div>
              <div className="flex border-l border-gray-200">
                <button
                  onClick={() => toast.dismiss(t.id)}
                  className="w-full border border-transparent rounded-none rounded-r-lg p-4 flex items-center justify-center text-sm font-medium text-indigo-600 hover:text-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                >
                  Cerrar
                </button>
              </div>
            </motion.div>
          ),
          { duration: 5000 }
        );
        
        setIsBlockingMode(false);
        setSelectedDates([]);
        
        // Emitir evento para actualizar reservas sin recargar la pÃ¡gina
        window.dispatchEvent(new CustomEvent('reservationsUpdated'));
        
        // Cerrar modal de bloqueo si estÃ¡ abierto
        setShowBlockModal(false);
      }
    } catch (error) {
      let errorMessage = 'Error al bloquear los dÃ­as';
      let invalidDatesText = '';
      
      if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
        if (error.response.data.invalidDates) {
          invalidDatesText = 'Fechas invÃ¡lidas: ' + error.response.data.invalidDates.join(', ');
        }
      }
      
      // Toast de error con animaciÃ³n
      toast.custom(
        (t) => (
          <motion.div
            initial={{ opacity: 0, y: -40, scale: 0.6 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.9 }}
            transition={{
              type: "spring",
              stiffness: 500,
              damping: 30,
              duration: 0.4
            }}
            className={`${
              t.visible ? 'animate-enter' : 'animate-leave'
            } max-w-md w-full bg-white shadow-lg rounded-lg pointer-events-auto flex ring-1 ring-black ring-opacity-5`}
          >
            <div className="flex-1 w-0 p-4">
              <div className="flex items-start">
                <div className="flex-shrink-0 pt-0.5">
                  <div className="h-10 w-10 rounded-full bg-red-100 flex items-center justify-center">
                    <FiAlertCircle className="h-6 w-6 text-red-600" />
                  </div>
                </div>
                <div className="ml-3 flex-1">
                  <p className="text-sm font-medium text-gray-900">
                    {errorMessage}
                  </p>
                  {invalidDatesText && (
                    <p className="mt-1 text-sm text-gray-500">
                      {invalidDatesText}
                    </p>
                  )}
                </div>
              </div>
            </div>
            <div className="flex border-l border-gray-200">
              <button
                onClick={() => toast.dismiss(t.id)}
                className="w-full border border-transparent rounded-none rounded-r-lg p-4 flex items-center justify-center text-sm font-medium text-indigo-600 hover:text-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              >
                Cerrar
              </button>
            </div>
          </motion.div>
        ),
        { duration: 6000 }
      );
    }
  };

  const CustomToolbar = ({ date, onNavigate, label }) => (
    <div className="flex justify-between items-center px-2 py-1">
      <button
        onClick={() => onNavigate('PREV')}
        className="p-1 rounded-full hover:bg-indigo-100 transition-colors duration-200"
      >
        <FiChevronLeft className="text-indigo-600 text-lg" />
      </button>
      <span className="text-sm font-medium text-indigo-800">{label}</span>
      <div className="flex items-center gap-1">
        <button
          onClick={() => onNavigate('TODAY')}
          className="px-2 py-1 text-xs bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors duration-200 flex items-center gap-1"
        >
          <FiCalendar className="text-sm" /> Hoy
        </button>
        <button
          onClick={() => onNavigate('NEXT')}
          className="p-1 rounded-full hover:bg-indigo-100 transition-colors duration-200"
        >
          <FiChevronRight className="text-indigo-600 text-lg" />
        </button>
      </div>
    </div>
  );

  return (
    <div className="h-full">
      {/* Header con gradiente */}
      <div className="bg-gradient-to-r from-blue-600 to-indigo-700 px-6 py-4 rounded-t-xl">
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold text-white">Calendario de Reservas</h2>
          <div className="flex items-center gap-2">
            <button
              onClick={() => setShowLegend(!showLegend)}
              className="p-2 rounded-full hover:bg-white/20 transition-colors duration-200 text-white"
              title="Mostrar leyenda"
            >
              <FiInfo className="w-5 h-5" />
            </button>
            <button
              onClick={() => {
                setIsBlockingMode(!isBlockingMode);
                if (!isBlockingMode) {
                  setSelectedDates([]);
                }
              }}
              className={`px-3 py-1.5 rounded-full transition-all duration-300 flex items-center gap-2 text-sm ${
                isBlockingMode
                  ? 'bg-red-600 text-white hover:bg-red-700 shadow-md'
                  : 'bg-white/20 text-white hover:bg-white/30 backdrop-blur-sm'
              }`}
            >
              {isBlockingMode ? (
                <>
                  <FiX className="text-lg" />
                  <span>Cancelar</span>
                </>
              ) : (
                <>
                  <FiCalendar className="text-lg" />
                  <span>Bloquear</span>
                </>
              )}
            </button>
          </div>
        </div>
      </div>

      <div className="p-4 bg-white">
        {/* Calendario */}
        <div className={`relative ${isBlockingMode && selectedDates.length > 0 ? 'lg:w-3/4' : 'w-full'}`}>
          {/* Leyenda flotante */}
          <AnimatePresence>
            {showLegend && (
              <motion.div
                initial={{ opacity: 0, scale: 0.95, y: -10 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.95, y: -10 }}
                transition={{
                  duration: 0.2,
                  ease: "easeOut",
                  scale: {
                    type: "spring",
                    damping: 20,
                    stiffness: 300
                  }
                }}
                className="absolute top-2 right-2 z-10 bg-white/95 backdrop-blur-sm p-3 rounded-lg shadow-lg border border-indigo-100 dark:bg-gray-800/95 dark:border-gray-700"
              >
                <div className="grid grid-cols-2 gap-2 text-xs">
                  <div className="flex items-center gap-1.5">
                    <div className="w-2.5 h-2.5 rounded bg-[#10B981]"></div>
                    <span>Disponible</span>
                  </div>
                  <div className="flex items-center gap-1.5">
                    <div className="w-2.5 h-2.5 rounded bg-[#F59E0B]"></div>
                    <span>Parcial</span>
                  </div>
                  <div className="flex items-center gap-1.5">
                    <div className="w-2.5 h-2.5 rounded bg-[#EF4444]"></div>
                    <span>Ocupado</span>
                  </div>
                  {isBlockingMode && (
                    <div className="flex items-center gap-1.5">
                      <div className="w-2.5 h-2.5 rounded bg-[#DC2626] border border-dashed border-[#991B1B]"></div>
                      <span>A bloquear</span>
                    </div>
                  )}
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Calendario */}
          <div className="border border-indigo-100 rounded-lg shadow-sm overflow-hidden bg-white hover:shadow-md transition-shadow duration-300">
            <Calendar
              localizer={localizer}
              events={[
                ...events,
                ...selectedDates.map(date => ({
                  title: 'Bloquear',
                  start: new Date(date),
                  end: new Date(date),
                  allDay: true,
                  isBlockingPreview: true
                }))
              ]}
              startAccessor="start"
              endAccessor="end"
              views={['month']}
              eventPropGetter={eventStyleGetter}
              onSelectEvent={(event) => !isBlockingMode && setSelectedEvent(event.resource)}
              onSelectSlot={({ start, action }) => {
                if (!isBlockingMode) return;
                
                const date = new Date(start);
                date.setMinutes(date.getMinutes() + date.getTimezoneOffset());
                const dateStr = moment(date).format('YYYY-MM-DD');
                
                // Verificar si la fecha es anterior a hoy
                const isPastDate = moment(date).isBefore(moment(), 'day');
                if (isPastDate) return; // No permitir seleccionar fechas pasadas
                
                if (action === 'click') {
                  setSelectedDates(prev => {
                    if (prev.includes(dateStr)) {
                      return prev.filter(d => d !== dateStr);
                    }
                    return [...prev, dateStr];
                  });
                } else if (action === 'select') {
                  if (!isDragging) {
                    setIsDragging(true);
                    setSelectedDates([dateStr]);
                  }
                }
              }}
              onSelecting={({ start, end }) => {
                if (!isBlockingMode || !isDragging) return;

                const dates = [];
                const startDate = new Date(start);
                const endDate = new Date(end);
                startDate.setMinutes(startDate.getMinutes() + startDate.getTimezoneOffset());
                endDate.setMinutes(endDate.getMinutes() + endDate.getTimezoneOffset());
                
                let current = moment(startDate);
                const endMoment = moment(endDate);
                const today = moment().startOf('day');

                while (current.isSameOrBefore(endMoment, 'day')) {
                  // Solo incluir fechas desde hoy en adelante
                  if (!current.isBefore(today)) {
                    dates.push(current.format('YYYY-MM-DD'));
                  }
                  current.add(1, 'days');
                }

                setSelectedDates(dates);
                return true;
              }}
              onSelectEnd={() => {
                setIsDragging(false);
              }}
              selectable={isBlockingMode}
              components={{
                toolbar: CustomToolbar,
              }}
              dayPropGetter={date => {
                const dateStr = moment(date).format('YYYY-MM-DD');
                const isSelected = selectedDates.includes(dateStr);
                const isPastDate = moment(date).isBefore(moment(), 'day');
                
                return {
                  className: `text-sm ${isSelected ? 'selected-date' : ''} ${isPastDate ? 'past-date' : ''}`,
                  style: {
                    margin: 0,
                    padding: '0.25rem',
                    backgroundColor: isPastDate 
                      ? 'rgba(229, 231, 235, 0.5)' 
                      : isSelected 
                        ? 'rgba(220, 38, 38, 0.1)' 
                        : 'transparent',
                    opacity: isPastDate ? 0.5 : 1,
                    cursor: isPastDate ? 'not-allowed' : 'pointer',
                    transition: 'background-color 0.2s ease, opacity 0.2s ease',
                    pointerEvents: isPastDate ? 'none' : 'auto'
                  }
                };
              }}
              style={{ height: 500 }}
            />
          </div>
        </div>

        {/* BotÃ³n flotante para seleccionar dÃ­as */}
        <AnimatePresence>
          {isBlockingMode && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
              className="fixed bottom-6 right-6 z-50"
            >
              <button
                onClick={() => setShowBlockModal(true)}
                className="bg-indigo-600 text-white px-5 py-3 rounded-full shadow-lg hover:bg-indigo-700 transition-all duration-300 flex items-center gap-2 hover:shadow-indigo-200 hover:shadow-md"
              >
                <FiCalendar className="text-lg" />
                <span>
                  {selectedDates.length === 0 
                    ? 'Seleccionar DÃ­as' 
                    : `${selectedDates.length} ${selectedDates.length === 1 ? 'dÃ­a' : 'dÃ­as'} seleccionados`}
                </span>
              </button>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Modal de bloqueo de fechas */}
        <Modal
          isOpen={showBlockModal}
          onClose={() => {
            setShowBlockModal(false);
            if (!selectedDates.length) {
              setIsBlockingMode(false);
            }
          }}
          title="Bloquear Fechas"
          maxWidth="sm"
        >
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
            className="space-y-4"
          >
            <div className="bg-indigo-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 rounded-full bg-indigo-100 flex items-center justify-center">
                    <FiCalendar className="text-indigo-600 text-xl" />
                  </div>
                  <div>
                    <h4 className="text-sm font-medium text-indigo-900">SelecciÃ³n de DÃ­as</h4>
                    <p className="text-sm text-indigo-600">
                      Selecciona los dÃ­as que deseas bloquear
                    </p>
                  </div>
                </div>
                <p className="text-xs text-indigo-600">
                  Haz clic en el calendario para agregar mÃ¡s dÃ­as
                </p>
              </div>
            </div>

            <div className="border border-indigo-100 rounded-lg divide-y max-h-[300px] overflow-y-auto">
              <AnimatePresence mode="popLayout">
              {selectedDates
                .sort((a, b) => moment(a).diff(moment(b)))
                .map(date => (
                <motion.div
                  key={date}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: 20 }}
                  transition={{ 
                    duration: 0.2,
                    type: "spring",
                    stiffness: 500,
                    damping: 30
                  }}
                  className="px-4 py-2 flex justify-between items-center"
                >
                  <span className="text-sm text-gray-600">
                    {moment(date).format('LL')}
                  </span>
                  <button
                    onClick={() => setSelectedDates(prev => prev.filter(d => d !== date))}
                    className="text-red-500 hover:text-red-600 p-1 rounded-full hover:bg-red-50 transition-colors duration-200"
                  >
                    <FiX className="text-lg" />
                  </button>
                </motion.div>
              ))}
              </AnimatePresence>
            </div>

            <div className="flex flex-col gap-3 mt-6 sticky bottom-0 bg-white pt-4 border-t shadow-lg">
              <div className="w-full text-center text-sm text-gray-500 mb-3">
                {selectedDates.length} {selectedDates.length === 1 ? 'dÃ­a seleccionado' : 'dÃ­as seleccionados'}
              </div>
              <div className="flex gap-3 w-full">
                <button
                  onClick={() => {
                    setShowBlockModal(false);
                    setIsBlockingMode(false);
                    setSelectedDates([]);
                  }}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors duration-200 text-sm font-medium"
                >
                  Cancelar
                </button>
                <button
                  onClick={handleBlockDates}
                  disabled={selectedDates.length === 0}
                  className={`flex-1 px-4 py-2 text-white rounded-md transition-colors duration-200 text-sm font-medium
                    ${selectedDates.length === 0 
                      ? 'bg-gray-400 cursor-not-allowed' 
                      : 'bg-indigo-600 hover:bg-indigo-700'}`}
                >
                  Confirmar Bloqueo
                </button>
              </div>
            </div>
          </motion.div>
        </Modal>

        {/* Modal de detalles de la reserva */}
        <Modal
          isOpen={!!selectedEvent}
          onClose={() => setSelectedEvent(null)}
          title="Detalles de la Reserva"
          maxWidth="lg"
        >
          {selectedEvent && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{
                duration: 0.3,
                ease: "easeOut",
                y: {
                  type: "spring",
                  damping: 25,
                  stiffness: 200
                }
              }}
              className="space-y-6"
            >
              {/* Estado de la reserva */}
              <div className="flex justify-end">
                <span className={`px-3 py-1.5 rounded-full text-sm font-medium ${
                  selectedEvent.estado === 'pendiente' ? 'bg-yellow-100 text-yellow-800' :
                  selectedEvent.estado === 'confirmada' ? 'bg-green-100 text-green-800' :
                  selectedEvent.estado === 'cancelada' ? 'bg-red-100 text-red-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  {selectedEvent.estado.charAt(0).toUpperCase() + selectedEvent.estado.slice(1)}
                </span>
              </div>

              {/* InformaciÃ³n del Cliente */}
              <div className="flex items-start space-x-4 bg-white p-4 rounded-lg border border-indigo-100">
                <div className="w-12 h-12 rounded-full bg-indigo-100 flex items-center justify-center flex-shrink-0">
                  <span className="text-indigo-600 text-xl font-medium">
                    {(selectedEvent.usuario?.nombre || 'N')[0].toUpperCase()}
                  </span>
                </div>
                <div>
                  <h4 className="text-lg font-medium text-gray-900">
                    {selectedEvent.usuario?.nombre || 'No especificado'}
                  </h4>
                  <p className="text-sm text-gray-500">Cliente #{selectedEvent.id}</p>
                </div>
              </div>

              {/* Fecha y Hora */}
              <div className="bg-indigo-50 rounded-lg p-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-indigo-600 font-medium mb-1">Fecha</p>
                    <p className="text-lg text-gray-900">{moment(selectedEvent.fecha_reserva).format('LL')}</p>
                  </div>
                  <div>
                    <p className="text-sm text-indigo-600 font-medium mb-1">Hora</p>
                    <p className="text-lg text-gray-900">{moment(selectedEvent.hora_inicio, 'HH:mm:ss').format('h:mm A')}</p>
                  </div>
                </div>
              </div>

              {/* Disponibilidad del DÃ­a */}
              <div className="border border-indigo-100 rounded-lg overflow-hidden">
                <div className="bg-indigo-50 px-3 py-2">
                  <h4 className="text-xs font-medium text-indigo-600">Disponibilidad del DÃ­a</h4>
                </div>
                <div className="divide-y divide-indigo-100">
                  <div className="px-3 py-2">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">MaÃ±ana</span>
                      <div className="flex items-center space-x-1">
                        <span className="text-xs text-gray-500">(11:00 - 16:00)</span>
                        <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                          selectedEvent.hora_inicio === '11:00:00' 
                          ? 'bg-red-100 text-red-700' 
                          : 'bg-green-100 text-green-700'
                        }`}>
                          {selectedEvent.hora_inicio === '11:00:00' ? 'Ocupado' : 'Disponible'}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="px-3 py-2">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Tarde</span>
                      <div className="flex items-center space-x-1">
                        <span className="text-xs text-gray-500">(17:00 - 22:00)</span>
                        <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                          selectedEvent.hora_inicio !== '11:00:00' 
                          ? 'bg-red-100 text-red-700' 
                          : 'bg-green-100 text-green-700'
                        }`}>
                          {selectedEvent.hora_inicio !== '11:00:00' ? 'Ocupado' : 'Disponible'}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </Modal>
      </div>

      <style jsx="true" global="true">{`
        .rbc-day-bg.selected-date:hover {
          background-color: rgba(220, 38, 38, 0.2) !important;
        }
        .rbc-day-bg {
          transition: background-color 0.2s ease;
        }
        .rbc-calendar {
          font-size: 0.875rem;
        }
        .rbc-header {
          padding: 0.5rem 0;
          font-weight: 500;
          color: #4B5563;
        }
        .rbc-date-cell {
          padding: 0.25rem;
          font-size: 0.75rem;
        }
        .rbc-day-bg.past-date {
          background-color: rgba(229, 231, 235, 0.5) !important;
          cursor: not-allowed;
          opacity: 0.5;
        }
        .rbc-date-cell.past-date {
          color: #9CA3AF;
          opacity: 0.7;
        }
        .rbc-event {
          padding: 2px 4px !important;
          font-size: 0.75rem !important;
        }
        .rbc-toolbar button {
          font-size: 0.875rem;
          padding: 0.375rem 0.75rem;
        }
      `}</style>
    </div>
  );
};

export default ReservationCalendar;
\n\n
=== ./dashboard/components/ScreenSizeAlert.jsx ===
import { FiAlertCircle, FiX } from 'react-icons/fi';

const ScreenSizeAlert = ({ setShowAlert }) => (
    <div className="fixed top-0 left-0 right-0 bg-yellow-100 text-yellow-800 px-4 py-3 shadow-md z-50">
        <div className="flex items-center justify-between">
            <div className="flex items-center">
                <FiAlertCircle className="mr-2" />
                <p>
                    Para una mejor experiencia, se recomienda usar un iPad o dispositivo con pantalla más
                    grande.
                </p>
            </div>
            <button onClick={() => setShowAlert(false)} className="text-yellow-800 hover:text-yellow-900">
                <FiX size={24} />
            </button>
        </div>
    </div>
);

export default ScreenSizeAlert;\n\n
=== ./dashboard/components/TabNavigation.jsx ===
import React, { useState } from 'react';
import { FiChevronDown, FiPlus } from 'react-icons/fi';

const TabNavigation = ({ activeTab, setActiveTab, handleAddItem }) => {
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);

    const tabs = [
        { id: 'users', label: 'Usuarios' },
        { id: 'reservations', label: 'Reservas' },
        { id: 'finances', label: 'Finanzas' },
        { id: 'packages', label: 'Paquetes' },
        { id: 'extras', label: 'Extras' },
        { id: 'opcionesAlimento', label: 'Opc. Alimento' },
        { id: 'tematicas', label: 'Temáticas' },
        { id: 'mamparas', label: 'Mamparas' },
        { id: 'payments', label: 'Pagos' },
        { id: 'galeria', label: 'Galería' },
        { id: 'auditoria', label: 'Historial' },
        { id: 'archived', label: 'Archivados' },
    ];

    // Determinar si se debe mostrar el botón de agregar
    const showAddButton = !['auditoria', 'archived'].includes(activeTab);

    return (
        <div className="flex flex-col sm:flex-row justify-between items-center mb-4 space-y-4 sm:space-y-0">
            <div className="w-full sm:w-auto relative">
                {/* Dropdown para pantallas pequeñas */}
                <div className="sm:hidden w-full">
                    <button
                        onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                        className="w-full flex justify-between items-center bg-gray-200 text-gray-700 py-2 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                        {tabs.find(tab => tab.id === activeTab)?.label || 'Seleccionar'}
                        <FiChevronDown className={`ml-2 transform transition-transform duration-200 ${isDropdownOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isDropdownOpen && (
                        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg">
                            {tabs.map(({ id, label }) => (
                                <button
                                    key={id}
                                    onClick={() => {
                                        setActiveTab(id);
                                        setIsDropdownOpen(false);
                                    }}
                                    className={`w-full text-left py-2 px-4 hover:bg-gray-100 ${
                                        activeTab === id ? 'bg-blue-100 text-blue-700' : 'text-gray-700'
                                    }`}
                                >
                                    {label}
                                </button>
                            ))}
                        </div>
                    )}
                </div>

                {/* Tabs para pantallas medianas y grandes */}
                <div className="hidden sm:flex flex-wrap">
                    {tabs.map(({ id, label }) => (
                        <button
                            key={id}
                            onClick={() => setActiveTab(id)}
                            className={`mr-2 mb-2 py-2 px-4 rounded-lg transition-colors duration-200 ${
                                activeTab === id 
                                    ? 'bg-blue-500 text-white' 
                                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                            }`}
                        >
                            {label}
                        </button>
                    ))}
                </div>
            </div>
            {showAddButton && (
                <button
                    onClick={handleAddItem}
                    className="w-full sm:w-auto bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center"
                >
                    <FiPlus className="mr-2" />
                    Agregar
                </button>
            )}
        </div>
    );
};

export default TabNavigation;\n\n
=== ./dashboard/components/index.js ===
﻿export { default as ItemModal } from './ItemModal';
export { default as MonthSelector } from './MonthSelector';
export { default as ReservationCalendar } from './ReservationCalendar';
export { default as ScreenSizeAlert } from './ScreenSizeAlert';
export { default as TabNavigation } from './TabNavigation';
\n\n
=== ./dashboard/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n
=== ./dashboard/pages/Dashboard.jsx ===
﻿import { useState, useEffect, useCallback, useMemo } from 'react'
import { useNavigate } from 'react-router-dom'
import { toast } from 'react-toastify'
// Asegurar que todas las importaciones usen el alias @ para resolver correctamente en Docker
import axiosInstance from '@/components/axiosConfig'
import { useAuth } from '@/hooks/useAuth'
import * as socketService from '@/services/socketService'
import CrmLayout from '@/components/layout/CrmLayout'
import { Breadcrumb } from '@shared/components'
// Importar tiendas Zustand
import {
  useUiStore,
  useUsersStore,
  useReservationsStore,
  useFinancesStore,
  usePackagesStore,
  useCategoriesStore,
  useThemesStore,
  useextrasService,
  useFoodOptionsStore,
  usemamparasService,
  usePaymentsStore
} from '@/store'
import ScreenSizeAlert from '@domains/dashboard/components/ScreenSizeAlert'
import UserSummary from './user-service/UserSummary.jsx'
import ReservationSummary from './reservation-service/ReservationSummary.jsx'
import FinancialSummary from './finance-service/FinancialSummary.jsx'
import UserTable from './user-service/UserTable.jsx'
import ReservationTable from './reservation-service/ReservationTable.jsx'
import FinanceTable from './finance-service/FinanceTable.jsx'
import PackageTable from './catalog-service/paquete-service/PackageTable.jsx'
import MonthSelector from '@domains/dashboard/components/MonthSelector'
import ReservationCalendar from '@domains/dashboard/components/ReservationCalendar'
import ReservationModal from './reservation-service/ReservationModal.jsx'
import ItemModal from '@domains/dashboard/components/ItemModal'
import FinanceDetailModal from './finance-service/FinanceDetailModal.jsx'
import UserForm from './user-service/UserForm.jsx'
import ReservationForm from './reservation-service/ReservationForm.jsx'
import FinanceForm from './finance-service/FinanceForm.jsx'
import PackageForm from './catalog-service/paquete-service/PackageForm.jsx'
import UserModal from './user-service/UserModal.jsx'
import ExtraForm from './catalog-service/extra-service/ExtraForm.jsx'
import ExtraTable from './catalog-service/extra-service/ExtraTable.jsx'
import OpcionAlimentoForm from './catalog-service/alimento-service/OpcionAlimentoForm.jsx'
import OpcionAlimentoTable from './catalog-service/alimento-service/OpcionAlimentoTable.jsx'
import TematicaForm from './catalog-service/tematica-service/TematicaForm.jsx'
import TematicaTable from './catalog-service/tematica-service/TematicaTable.jsx'
import Swal from 'sweetalert2'
import MonthlyReportModal from './finance-service/MonthlyReportModal.jsx'
import MamparaTable from './catalog-service/mampara-service/MamparaTable.jsx'
import 'react-big-calendar/lib/css/react-big-calendar.css'
import MamparaForm from './catalog-service/mampara-service/MamparaForm.jsx'
import PaymentTable from './payment-service/PaymentTable.jsx'
import PaymentForm from './payment-service/PaymentForm.jsx'
import PaymentModal from './payment-service/PaymentModal.jsx'
import PaymentDetails from './payment-service/PaymentDetails.jsx'
import AuditHistory from './auditory-service/AuditHistory.jsx'
import ArchivedTable from './auditory-service/ArchivedTable.jsx'
import GaleriaManagement from './gallery-service/GaleriaManagement.jsx'
import { HiPlus } from 'react-icons/hi'

const Dashboard = () => {
  const { user: currentUser } = useAuth();
  const navigate = useNavigate()
  
  // Estados de UI desde Zustand
  const { 
    activeTab, setActiveTab,
    isModalOpen, setIsModalOpen,
    isReservationModalOpen, setIsReservationModalOpen,
    isReportModalOpen, setIsReportModalOpen,
    isPaymentModalOpen, setIsPaymentModalOpen,
    isUserModalOpen, setIsUserModalOpen,
    loading, setLoading,
    isSmallScreen, setIsSmallScreen,
    showAlert, setShowAlert,
    userSearch, setUserSearch,
    reservationSearch, setReservationSearch,
    archivedSearch, setArchivedSearch,
    selectedMonth, setSelectedMonth,
    selectedYear, setSelectedYear,
    paymentModalMode, setPaymentModalMode,
    generatedPassword, generateRandomPassword
  } = useUiStore();

  // Estados de entidades (todavÃ­a mantenemos el estado local por ahora)
  const [users, setUsers] = useState([])
  const [reservations, setReservations] = useState([])
  const [finances, setFinances] = useState([])
  const [packages, setPackages] = useState([])
  const [categories, setCategories] = useState([])
  const [extras, setExtras] = useState([])
  const [tematicas, setTematicas] = useState([])
  const [archivedItems, setArchivedItems] = useState([]);
  const [editingItem, setEditingItem] = useState(null)
  const [selectedReservation, setSelectedReservation] = useState(null)
  const [selectedFinance, setSelectedFinance] = useState(null)
  const [mamparas, setMamparas] = useState([])
  const [foodOptions, setFoodOptions] = useState([])
  const [payments, setPayments] = useState([])
  const [selectedPayment, setSelectedPayment] = useState(null)
  const [selectedUser, setSelectedUser] = useState(null)
  
  // Determinar si mostrar el dashboard principal o contenido especÃ­fico
  const isMainDashboard = activeTab === 'dashboard';
  
  // Mapeo de categorÃ­as y sus pestaÃ±as para las migajas de pan
  const breadcrumbsMap = {
    dashboard: [{ label: 'Panel Principal', path: 'dashboard' }],
    users: [{ label: 'Usuarios', path: 'users' }],
    reservations: [{ label: 'Reservaciones', path: 'reservations' }],
    finances: [{ label: 'Finanzas', path: 'finances' }],
    payments: [{ label: 'Pagos', path: 'payments' }],
    packages: [{ label: 'CatÃ¡logo', path: 'catalog' }, { label: 'Paquetes', path: 'packages' }],
    extras: [{ label: 'CatÃ¡logo', path: 'catalog' }, { label: 'Extras', path: 'extras' }],
    opcionesAlimento: [{ label: 'CatÃ¡logo', path: 'catalog' }, { label: 'Opciones de Alimento', path: 'opcionesAlimento' }],
    tematicas: [{ label: 'CatÃ¡logo', path: 'catalog' }, { label: 'TemÃ¡ticas', path: 'tematicas' }],
    mamparas: [{ label: 'CatÃ¡logo', path: 'catalog' }, { label: 'Mamparas', path: 'mamparas' }],
    galeria: [{ label: 'Sistema', path: 'system' }, { label: 'GalerÃ­a', path: 'galeria' }],
    auditoria: [{ label: 'Sistema', path: 'system' }, { label: 'AuditorÃ­a', path: 'auditoria' }],
    archived: [{ label: 'Sistema', path: 'system' }, { label: 'Elementos Archivados', path: 'archived' }]
  };
  
  // Obtener los Ã­tems del breadcrumb actual
  const currentBreadcrumbItems = useMemo(() => {
    return breadcrumbsMap[activeTab] || [];
  }, [activeTab]);
  
  // Manejar navegaciÃ³n desde el breadcrumb
  const handleBreadcrumbNavigation = useCallback((path) => {
    if (path === 'dashboard') {
      setActiveTab('dashboard');
    } else if (path === 'catalog') {
      setActiveTab('packages');
    } else if (path === 'system') {
      setActiveTab('galeria');
    } else if (breadcrumbsMap[path]) {
      setActiveTab(path);
    }
  }, [setActiveTab]);
  
  const handleViewUser = useCallback(user => {
    setSelectedUser(user)
    setIsUserModalOpen(true)
  }, [setIsUserModalOpen])

  const generateMonthlyReport = () => {
    setIsReportModalOpen(true)
  }

  const handleSelectReservation = reservation => {
    setSelectedReservation(reservation)
  }

  const handleCloseReservationModal = () => {
    setSelectedReservation(null)
  }

  // Obtener las funciones fetch de las tiendas
  const { fetchUsers: fetchUsersZustand } = useUsersStore();
  const { fetchReservations: fetchReservationsZustand, initSocketListeners } = useReservationsStore();
  const { fetchFinances: fetchFinancesZustand } = useFinancesStore();
  const { fetchPackages: fetchPackagesZustand } = usePackagesStore();
  const { fetchCategories: fetchCategoriesZustand } = useCategoriesStore();
  const { fetchExtras: fetchExtrasZustand } = useextrasService();
  const { fetchFoodOptions: fetchFoodOptionsZustand } = useFoodOptionsStore();
  const { fetchThemes: fetchThemesZustand } = useThemesStore();
  const { fetchMamparas: fetchMamparasZustand } = usemamparasService();
  const { fetchPayments: fetchPaymentsZustand } = usePaymentsStore();

  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      // Usar Promise.allSettled para manejar errores individuales sin detener todo el proceso
      const results = await Promise.allSettled([
        fetchUsersZustand().then(data => setUsers(data)),
        fetchReservationsZustand().then(data => setReservations(data)),
        fetchFinancesZustand().then(data => setFinances(data)),
        fetchPackagesZustand().then(data => setPackages(data)),
        fetchCategoriesZustand().then(data => setCategories(data)),
        fetchExtrasZustand().then(data => setExtras(data)),
        fetchFoodOptionsZustand().then(data => setFoodOptions(data)),
        fetchThemesZustand().then(data => setTematicas(data)),
        fetchMamparasZustand().then(data => setMamparas(data)),
        fetchPaymentsZustand().then(data => setPayments(data)),
        // Obtener elementos archivados - todavÃ­a usando axios ya que no tenemos tiendas para estos
        axiosInstance.get('/reservas/archived'),
        axiosInstance.get('/pagos/archived'),
        axiosInstance.get('/finanzas/archived')
      ]);

      // Manejar elementos archivados
      const archivedData = [];
      if (results[10].status === 'fulfilled') {
        archivedData.push(...results[10].value.data.map(item => ({ ...item, type: 'reservas' })));
      }
      if (results[11].status === 'fulfilled') {
        archivedData.push(...results[11].value.data.map(item => ({ ...item, type: 'pagos' })));
      }
      if (results[12].status === 'fulfilled') {
        archivedData.push(...results[12].value.data.map(item => ({ ...item, type: 'finanzas' })));
      }
      setArchivedItems(archivedData);

      // Reportar errores
      results.forEach((result, index) => {
        if (result.status === 'rejected') {
          console.error(`Error en la solicitud ${index}:`, result.reason);
          
          // No mostrar toast para errores 404 en solicitudes de elementos archivados (Ã­ndices 10, 11, 12)
          const isArchivedRequest = index >= 10 && index <= 12;
          const is404Error = result.reason?.response?.status === 404;
          
          if (!(isArchivedRequest && is404Error)) {
            toast.error(`Error al cargar los datos de la solicitud ${index + 1}`);
          }
        }
      });
    } catch (error) {
      console.error('Error al cargar los datos:', error);
      toast.error('Error al cargar los datos');
    } finally {
      setLoading(false);
    }
  }, [
    fetchUsersZustand, fetchReservationsZustand, fetchFinancesZustand, 
    fetchPackagesZustand, fetchCategoriesZustand, fetchExtrasZustand, 
    fetchFoodOptionsZustand, fetchThemesZustand, fetchMamparasZustand, 
    fetchPaymentsZustand, setLoading
  ]);

  useEffect(() => {
    // Inicializar datos y configurar Socket.IO
    fetchData().then(() => {
      // Usar la funciÃ³n initSocketListeners de reservationsStore para centralizar la lÃ³gica de sockets
      // Esta funciÃ³n se encarga de inicializar Socket.IO y configurar todos los listeners
      // TambiÃ©n actualiza automÃ¡ticamente el estado global de reservations en la tienda
      initSocketListeners({
        onReservaCreada: (nuevaReserva) => {
          console.log('Reserva creada recibida vÃ­a Socket.IO:', nuevaReserva);
          toast.success(`Nueva reserva #${nuevaReserva.id} creada`);
        },
        onReservaActualizada: (reservaActualizada) => {
          console.log('Reserva actualizada recibida vÃ­a Socket.IO:', reservaActualizada);
        },
        onReservaEliminada: (data) => {
          console.log('Reserva eliminada recibida vÃ­a Socket.IO:', data);
        },
        onFechasBloqueadas: (data) => {
          console.log('Fechas bloqueadas recibidas vÃ­a Socket.IO:', data);
          if (!data.reservas || !Array.isArray(data.reservas)) {
            // Si no tenemos datos completos de las reservas, recargar todo
            fetchData();
          }
        },
        onError: (error) => {
          console.error('Error en Socket.IO:', error);
          toast.error('Error en la comunicaciÃ³n en tiempo real');
        }
      });
    });

    // Limpieza al desmontar el componente
    return () => {
      // Desconectar y limpiar Socket.IO
      socketService.disconnect();
      // Limpiar listeners de Socket.IO
      useReservationsStore.getState().cleanupSocketListeners();
    };
  }, [fetchData, initSocketListeners]);

  const filteredUsers = useMemo(() => {
    return users.filter(
      user =>
        user.nombre.toLowerCase().includes(userSearch.toLowerCase()) ||
        user.email.toLowerCase().includes(userSearch.toLowerCase()) ||
        (user.id_personalizado &&
          user.id_personalizado
            .toLowerCase()
            .includes(userSearch.toLowerCase()))
    )
  }, [users, userSearch])

  const filteredReservations = useMemo(() => {
    return reservations.filter(
      reservation =>
        reservation.id.toString().includes(reservationSearch) ||
        (reservation.nombre_festejado &&
          reservation.nombre_festejado
            .toLowerCase()
            .includes(reservationSearch.toLowerCase()))
    )
  }, [reservations, reservationSearch])

  useEffect(() => {
    const checkScreenSize = () => {
      setIsSmallScreen(window.innerWidth < 768)
    }

    checkScreenSize()
    window.addEventListener('resize', checkScreenSize)

    return () => window.removeEventListener('resize', checkScreenSize)
  }, [])

  const handleViewReservation = useCallback(reservation => {
    setSelectedReservation(reservation)
    setIsReservationModalOpen(true)
  }, [])

  // FunciÃ³n para filtrar datos por mes
  const filterDataByMonth = useCallback(
    (data, dateField) => {
      // Primero verificar si data es un array
      if (!Array.isArray(data)) return [];
      
      // Filtrar por mes
      return data.filter(item => {
        // Verificar que el item y el campo de fecha existen
        if (!item || !item[dateField]) return false;
        
        // Convertir a objeto Date
        const itemDate = new Date(item[dateField]);
        
        // Asegurarse de que la fecha es vÃ¡lida
        if (isNaN(itemDate.getTime())) return false;
        
        // Comparar tanto mes como aÃ±o
        return itemDate.getMonth() === selectedMonth && 
               itemDate.getFullYear() === selectedYear;
      });
    },
    [selectedMonth, selectedYear]
  );

  const handleAddItem = useCallback(() => {
    if (activeTab === 'payments') {
      setSelectedPayment(null)
      setPaymentModalMode('add')
      setIsPaymentModalOpen(true)
    } else {
      setEditingItem(null)
      setIsModalOpen(true)
    }
  }, [activeTab])

  const handleSavePayment = useCallback(async (paymentData) => {
    try {
      await usePaymentsStore.getState().addPayment(paymentData);
      setIsPaymentModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al crear el pago:', error);
      toast.error('Error al crear el pago');
      if (error.response?.status === 401) {
        navigate('/signin');
      }
    }
  }, [navigate, fetchData, setIsPaymentModalOpen])

  const handleEditItem = useCallback(
    item => {
      console.log('Editando elemento:', item)
      if (activeTab === 'payments') {
        setSelectedPayment(item)
        setPaymentModalMode('add')
        setIsPaymentModalOpen(true)
      } else {
        setEditingItem(item)
        setIsModalOpen(true)
      }
    },
    [activeTab]
  )
  
  const handleUpdatePaymentStatus = useCallback(async (paymentId, newStatus) => {
    try {
      await usePaymentsStore.getState().updatePaymentStatus(paymentId, newStatus);
      // Actualizar la UI con datos frescos
      await fetchData();
    } catch (error) {
      console.error('Error al actualizar el estado del pago:', error);
      toast.error('Error al actualizar el estado del pago');
      
      if (error.response?.status === 401) {
        navigate('/signin');
      }
    }
  }, [navigate, fetchData])

  const handleReservationStatusChange = useCallback(async (reservationId, newStatus) => {
    try {
      // Usar la tienda Zustand para actualizar el estado de la reserva
      await useReservationsStore.getState().updateReservationStatus(reservationId, newStatus);
      // No es necesario actualizar manualmente el estado local, ya que se actualizarÃ¡
      // automÃ¡ticamente desde la tienda al llamar a updateReservationStatus
      toast.success('Estado de la reserva actualizado con Ã©xito');
    } catch (error) {
      console.error('Error al actualizar el estado de la reserva:', error);
      toast.error('Error al actualizar el estado de la reserva');
      
      if (error.response?.status === 401) {
        navigate('/signin');
      }
    }
  }, [navigate])

  const handleSendEmail = useCallback(reservation => {
    toast.info(`Funcionalidad de enviar correo a ${reservation.usuario.email}`)
  }, [])

  const handleContactUser = useCallback(reservation => {
    toast.info(
      `Funcionalidad de contactar al usuario ${reservation.usuario.nombre}`
    )
  }, [])

  const handleError = useCallback(
    (error, action) => {
      if (error.response) {
        if (error.response.status === 404) {
          toast.warning('El elemento ya no existe')
        } else if (error.response.status === 401) {
          toast.error(
            'Tu sesiÃ³n ha expirado. Por favor, inicia sesiÃ³n nuevamente.'
          )
          navigate('/signin')
        } else {
          toast.error(
            `Error del servidor al ${action} el elemento: ${
              error.response.data.message || 'Algo saliÃ³ mal'
            }`
          )
        }
      } else if (error.request) {
        toast.error('No se recibiÃ³ respuesta del servidor')
      } else {
        toast.error(`Error al ${action} el elemento`)
      }
      console.error(`Error al ${action} el elemento:`, error)
    },
    [navigate]
  )

  function removeCircularReferences (obj, seen = new WeakSet()) {
    if (typeof obj !== 'object' || obj === null) {
      return obj
    }
    if (seen.has(obj)) {
      return '[Circular]'
    }
    seen.add(obj)
    const newObj = Array.isArray(obj) ? [] : {}
    for (const key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        newObj[key] = removeCircularReferences(obj[key], seen)
      }
    }
    return newObj
  }

  const handleSubmit = useCallback(
    async data => {
      setLoading(true)
      try {
        console.log('Datos recibidos en handleSubmit:', data)
        
        // Limpiar y validar los datos
        const cleanedData = removeCircularReferences(data)
        console.log('Datos limpios a enviar al servidor:', cleanedData)
        
        // Para reservas, validar y asegurar que id_usuario sea un nÃºmero
        if (activeTab === 'reservations' && !cleanedData.id_usuario) {
          toast.error('Debe seleccionar un usuario para la reserva')
          setLoading(false)
          return
        }
        
        if (activeTab === 'reservations') {
          cleanedData.id_usuario = Number(cleanedData.id_usuario)
        }
        
        // Usar las tiendas Zustand para crear/actualizar
        let result;
        
        if (editingItem) {
          // Actualizar usando las tiendas Zustand
          switch (activeTab) {
            case 'users':
              result = await useUsersStore.getState().updateUser(editingItem.id, cleanedData);
              break;
            case 'reservations':
              result = await useReservationsStore.getState().updateReservation(editingItem.id, cleanedData);
              break;
            case 'finances':
              result = await useFinancesStore.getState().updateFinance(editingItem.id, cleanedData);
              break;
            case 'packages':
              result = await usePackagesStore.getState().updatePackage(editingItem.id, cleanedData);
              break;
            case 'extras':
              result = await useextrasService.getState().updateExtra(editingItem.id, cleanedData);
              break;
            case 'opcionesAlimento':
              result = await useFoodOptionsStore.getState().updateFoodOption(editingItem.id, cleanedData);
              break;
            case 'tematicas':
              result = await useThemesStore.getState().updateTheme(editingItem.id, cleanedData);
              break;
            case 'mamparas':
              result = await usemamparasService.getState().updateMampara(editingItem.id, cleanedData);
              break;
            case 'payments':
              result = await usePaymentsStore.getState().updatePayment(editingItem.id, cleanedData);
              break;
            default:
              throw new Error('Tipo de formulario no reconocido');
          }
        } else {
          // Crear usando las tiendas Zustand
          switch (activeTab) {
            case 'users':
              result = await useUsersStore.getState().addUser(cleanedData);
              break;
            case 'reservations':
              result = await useReservationsStore.getState().addReservation(cleanedData);
              break;
            case 'finances':
              result = await useFinancesStore.getState().addFinance(cleanedData);
              break;
            case 'packages':
              result = await usePackagesStore.getState().addPackage(cleanedData);
              break;
            case 'extras':
              result = await useextrasService.getState().addExtra(cleanedData);
              break;
            case 'opcionesAlimento':
              result = await useFoodOptionsStore.getState().addFoodOption(cleanedData);
              break;
            case 'tematicas':
              result = await useThemesStore.getState().addTheme(cleanedData);
              break;
            case 'mamparas':
              result = await usemamparasService.getState().addMampara(cleanedData);
              break;
            case 'payments':
              result = await usePaymentsStore.getState().addPayment(cleanedData);
              break;
            default:
              throw new Error('Tipo de formulario no reconocido');
          }
        }
        
        setIsModalOpen(false);
        // Actualizar la UI con datos frescos
        await fetchData();
        
      } catch (error) {
        console.error('Error en handleSubmit:', error)
        if (error.response && error.response.status === 401) {
          toast.error(
            'Tu sesiÃ³n ha expirado. Por favor, inicia sesiÃ³n nuevamente.'
          )
          navigate('/signin')
          return
        } else {
          handleError(error, editingItem ? 'actualizar' : 'crear')
        }
      } finally {
        setLoading(false)
      }
    },
    [activeTab, editingItem, fetchData, handleError, navigate, setLoading, setIsModalOpen]
  )

  const handleDeleteItem = async (endpoint, id, successMessage) => {
    const result = await Swal.fire({
      title: 'Â¿EstÃ¡s seguro?',
      text: 'Esta acciÃ³n desactivarÃ¡ el registro. PodrÃ¡s reactivarlo mÃ¡s tarde si es necesario.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'SÃ­, desactivar',
      cancelButtonText: 'Cancelar'
    })

    if (result.isConfirmed) {
      try {
        // Determinar quÃ© tienda usar basado en el endpoint
        switch (endpoint) {
          case '/api/usuarios':
            await useUsersStore.getState().deleteUser(id);
            break;
          case '/api/reservas':
            await useReservationsStore.getState().deleteReservation(id);
            break;
          case '/api/finanzas':
            await useFinancesStore.getState().deleteFinance(id);
            break;
          case '/api/paquetes':
            await usePackagesStore.getState().deletePackage(id);
            break;
          case '/api/extras':
            await useextrasService.getState().deleteExtra(id);
            break;
          case '/api/opciones-alimentos':
            await useFoodOptionsStore.getState().deleteFoodOption(id);
            break;
          case '/api/tematicas':
            await useThemesStore.getState().deleteTheme(id);
            break;
          case '/api/mamparas':
            await usemamparasService.getState().deleteMampara(id);
            break;
          case '/api/pagos':
            await usePaymentsStore.getState().deletePayment(id);
            break;
          default:
            // Si no hay una tienda especÃ­fica para el endpoint, usar axios directamente
            await axiosInstance.delete(`${endpoint}/${id}`);
        }
        
        Swal.fire('Â¡Desactivado!', successMessage, 'success');
        // Actualizar la UI con datos frescos
        await fetchData();
      } catch (error) {
        handleError(error, 'desactivar');
      }
    }
  }

  // Eliminada la funciÃ³n local generateRandomPassword ya que la estamos importando desde useUiStore

  const handleDownloadFile = useCallback(async (id, type) => {
    try {
      // Usar la tienda Zustand para descargar el archivo
      const blob = await useFinancesStore.getState().downloadFinanceFile(id, type);
      
      // Crear URL para el blob y descargar el archivo
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `finanza_${id}_${type}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.parentNode.removeChild(link);
      
      // Liberar la URL
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error al descargar el archivo:', error);
      toast.error('Error al descargar el archivo');
    }
  }, [])

  const handleViewDetails = useCallback(finance => {
    setSelectedFinance(finance)
  }, [])

  const handleAddCategory = useCallback(async newCategory => {
    try {
      await useCategoriesStore.getState().addCategory({
        nombre: newCategory.nombre,
        color: newCategory.color || '#000000'
      });
      // Actualizar categorÃ­as tras la adiciÃ³n
      const updatedCategories = await fetchCategoriesZustand();
      setCategories(updatedCategories);
      toast.success('CategorÃ­a aÃ±adida con Ã©xito');
    } catch (error) {
      console.error('Error al aÃ±adir la categorÃ­a:', error);
      toast.error('Error al aÃ±adir la categorÃ­a');
    }
  }, [fetchCategoriesZustand])

  const renderModalContent = useCallback(() => {
    const props = {
      editingItem,
      onSave: handleSubmit,
      generateRandomPassword,
      generatedPassword,
      users,
      packages,
      categories,
      onAddCategory: handleAddCategory,
      reservations,
      tematicas,
      foodOptions,
      extras,
      currentUser
    }
    switch (activeTab) {
      case 'users':
        return <UserForm {...props} />
      case 'reservations':
        return <ReservationForm {...props} />
      case 'finances':
        return <FinanceForm {...props} />
      case 'packages':
        return <PackageForm {...props} />
      case 'extras':
        return <ExtraForm {...props} />
      case 'opcionesAlimento':
        return <OpcionAlimentoForm {...props} />
      case 'tematicas':
        return <TematicaForm {...props} />
      case 'mamparas':
        return <MamparaForm {...props} />
      case 'payments':
        return <PaymentForm {...props} />
      default:
        return null
    }
  }, [
    activeTab,
    editingItem,
    handleSubmit,
    generateRandomPassword,
    generatedPassword,
    users,
    packages,
    categories,
    handleAddCategory,
    reservations,
    tematicas,
    foodOptions,
    extras
  ])

  
  // Renderizar componente del panel segÃºn la categorÃ­a activa
  const renderDashboardWidgets = () => {
    if (!isMainDashboard) return null;
    
    return (
      <div className='mb-8'>
        {/* Header del Dashboard con gradiente */}
        <div className="bg-gradient-to-r from-indigo-600 to-purple-600 rounded-xl shadow-lg p-6 mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">Panel de Control</h1>
          <p className="text-indigo-100">Bienvenido al sistema de administraciÃ³n de Tramboory</p>
        </div>
        
        {/* Widgets de estadÃ­sticas */}
        <div className='grid grid-cols-1 md:grid-cols-3 gap-6 mb-8'>
          <div className="bg-gradient-to-br from-indigo-50 to-white p-0 rounded-xl shadow-md overflow-hidden border border-indigo-100 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
            <UserSummary users={users} />
          </div>
          <div className="bg-gradient-to-br from-green-50 to-white p-0 rounded-xl shadow-md overflow-hidden border border-green-100 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
            <ReservationSummary
              reservations={reservations}
              filterDataByMonth={filterDataByMonth}
            />
          </div>
          <div className="bg-gradient-to-br from-purple-50 to-white p-0 rounded-xl shadow-md overflow-hidden border border-purple-100 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-2xl font-semibold text-gray-800">Pagos</h2>
                <div className="p-2 rounded-full bg-purple-100 text-purple-600">
                  <HiPlus className="w-5 h-5" />
                </div>
              </div>
              <p className="text-4xl font-bold text-purple-600">{payments.length}</p>
              <p className="text-sm text-gray-500 mt-1">
                {payments.filter(p => p.estado === 'completado').length} completados
              </p>
            </div>
          </div>
        </div>
        
        {/* Widgets principales */}
        <div className='grid grid-cols-1 lg:grid-cols-3 gap-6'>
          <div className="lg:col-span-2 bg-white rounded-xl shadow-md overflow-hidden border border-indigo-100 transform transition-all duration-300 hover:shadow-lg">
            <ReservationCalendar
              reservations={reservations}
              onSelectReservation={handleSelectReservation}
            />
          </div>
          <div className="bg-white rounded-xl shadow-md overflow-hidden border border-indigo-100 transform transition-all duration-300 hover:shadow-lg">
            <FinancialSummary
              finances={finances}
              filterDataByMonth={filterDataByMonth}
              categories={categories}
            />
          </div>
        </div>
      </div>
    );
  };
  
  // BotÃ³n de acciÃ³n contextual segÃºn la pestaÃ±a activa
  const renderActionButton = () => {
    // No mostrar botÃ³n en el dashboard principal
    if (isMainDashboard) return null;
    
    return (
      <div className="flex justify-end mb-4">
        <button
          onClick={handleAddItem}
          className="flex items-center px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors"
        >
          <HiPlus className="mr-2" />
          Agregar {getActiveTabLabel()}
        </button>
      </div>
    );
  };
  
  // Obtener nombre amigable para la pestaÃ±a activa
  const getActiveTabLabel = () => {
    switch (activeTab) {
      case 'users': return 'Usuario';
      case 'reservations': return 'ReservaciÃ³n';
      case 'finances': return 'Registro';
      case 'payments': return 'Pago';
      case 'packages': return 'Paquete';
      case 'extras': return 'Extra';
      case 'opcionesAlimento': return 'OpciÃ³n de Alimento';
      case 'tematicas': return 'TemÃ¡tica';
      case 'mamparas': return 'Mampara';
      case 'galeria': return 'Imagen';
      default: return 'Elemento';
    }
  };
  
  return (
    <CrmLayout>
      {isSmallScreen && showAlert && (
        <ScreenSizeAlert setShowAlert={setShowAlert} />
      )}
      
      {/* Widgets del dashboard principal, solo se muestran en la vista de dashboard */}
      {renderDashboardWidgets()}
      
      {/* Contenedor principal contextual */}
      <div className='bg-white rounded-xl shadow-md p-6 border border-gray-100'>
        {/* Breadcrumb para navegaciÃ³n contextual */}
        <Breadcrumb 
          items={currentBreadcrumbItems} 
          onNavigate={handleBreadcrumbNavigation}
        />
        
        {/* BotÃ³n de acciÃ³n contextual */}
        {renderActionButton()}
        {/* Contenido segÃºn pestaÃ±a activa */}
        {activeTab === 'users' && (
          <UserTable
            users={filteredUsers}
            userSearch={userSearch}
            setUserSearch={setUserSearch}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/usuarios',
                id,
                'Usuario desactivado con Ã©xito',
                () => setIsModalOpen(false)
              )
            }
            handleViewUser={handleViewUser}
          />
        )}
        {activeTab === 'reservations' && (
          <ReservationTable
            reservations={filterDataByMonth(reservations, 'fecha_reserva')}
            reservationSearch={reservationSearch}
            setReservationSearch={setReservationSearch}
            handleViewReservation={handleViewReservation}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/reservas',
                id,
                'Reserva desactivada con Ã©xito'
              )
            }
            selectedMonth={selectedMonth}
          />
        )}
        {activeTab === 'finances' && (
          <FinanceTable
            finances={filterDataByMonth(finances, 'fecha')}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/finanzas',
                id,
                'Finanza desactivada con Ã©xito',
                () => setIsModalOpen(false)
              )
            }
            handleDownloadFile={handleDownloadFile}
            handleViewDetails={handleViewDetails}
            categories={categories}
            generateMonthlyReport={generateMonthlyReport}
          />
        )}
        {activeTab === 'packages' && (
          <PackageTable
            packages={packages}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/paquetes',
                id,
                'Paquete desactivado con Ã©xito',
                () => setIsModalOpen(false),
                'paquetes'
              )
            }
          />
        )}
        {activeTab === 'extras' && (
          <ExtraTable
            extras={extras}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem('/api/extras', id, 'Extra eliminado con Ã©xito')
            }
          />
        )}
        {activeTab === 'opcionesAlimento' && (
          <OpcionAlimentoTable
            opcionesAlimento={foodOptions}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/opciones-alimentos',
                id,
                'OpciÃ³n de alimento eliminada con Ã©xito'
              )
            }
          />
        )}
        {activeTab === 'tematicas' && (
          <TematicaTable
            tematicas={tematicas}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/tematicas',
                id,
                'TemÃ¡tica eliminada con Ã©xito'
              )
            }
          />
        )}
        {activeTab === 'mamparas' && (
          <MamparaTable
            tematicas={tematicas}
            mamparas={mamparas}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/mamparas',
                id,
                'Mampara eliminada con Ã©xito'
              )
            }
          />
        )}
        {activeTab === 'payments' && (
          <PaymentTable
            payments={payments}
            reservations={reservations}
            onViewPayment={(payment) => {
              setSelectedPayment(payment)
              setPaymentModalMode('view')
              setIsPaymentModalOpen(true)
            }}
            onEditPayment={(payment) => {
              setSelectedPayment(payment)
              setPaymentModalMode('edit')
              setIsPaymentModalOpen(true)
            }}
          />
        )}
        {activeTab === 'auditoria' && (
          <AuditHistory />
        )}
        {activeTab === 'archived' && (
          <ArchivedTable
            items={archivedItems}
            itemSearch={archivedSearch}
            setItemSearch={setArchivedSearch}
            fetchData={fetchData}
            selectedMonth={selectedMonth}
            type="reservas"
          />
        )}
        {activeTab === 'galeria' && (
          <GaleriaManagement />
        )}
      </div>
      <MonthSelector
        selectedMonth={selectedMonth}
        setSelectedMonth={setSelectedMonth}
        selectedYear={selectedYear}
        setSelectedYear={setSelectedYear}
      />
      {isReservationModalOpen && selectedReservation && (
        <ReservationModal
          reservation={selectedReservation}
          onClose={handleCloseReservationModal}
          onStatusChange={newStatus =>
            handleReservationStatusChange(selectedReservation.id, newStatus)
          }
          onSendEmail={handleSendEmail}
          onContactUser={handleContactUser}
          tematicas={tematicas}
          extras={extras}
        />
      )}
      {isModalOpen && (
        <ItemModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          title={`${editingItem ? 'Editar' : 'Agregar'} ${activeTab.slice(
            0,
            -1
          )}`}
          loading={loading}
          activeTab={activeTab}
          handleSubmit={handleSubmit}
          editingItem={editingItem}
          generatedPassword={generatedPassword}
          generateRandomPassword={generateRandomPassword}
          users={users}
          packages={packages}
          reservations={reservations}
          categories={categories}
          onAddCategory={handleAddCategory}
          tematicas={tematicas}
          foodOptions={foodOptions}
          extras={extras}
          mamparas={mamparas}
          currentUser={currentUser}
        />
      )}
      {selectedFinance && (
        <FinanceDetailModal
          finance={selectedFinance}
          onClose={() => setSelectedFinance(null)}
          onDownloadFile={handleDownloadFile}
        />
      )}
      {isPaymentModalOpen && (
        <PaymentModal
          payment={selectedPayment}
          isOpen={isPaymentModalOpen}
          onClose={() => {
            setSelectedPayment(null)
            setIsPaymentModalOpen(false)
          }}
          onUpdateStatus={handleUpdatePaymentStatus}
          onSavePayment={handleSavePayment}
          reservations={reservations}
          mode={paymentModalMode}
        />
      )}
      {isUserModalOpen && selectedUser && (
        <UserModal
          user={selectedUser}
          reservations={reservations.filter(res => res.id_usuario === selectedUser.id)}
          onClose={() => {
            setSelectedUser(null)
            setIsUserModalOpen(false)
          }}
          onEdit={handleEditItem}
          onSendEmail={() => toast.info(`Funcionalidad de enviar correo a ${selectedUser.email}`)}
        />
      )}
      {isReportModalOpen && (
        <MonthlyReportModal
          isOpen={isReportModalOpen}
          onClose={() => setIsReportModalOpen(false)}
          finances={finances}
          categories={categories}
          selectedMonth={selectedMonth}
          selectedYear={selectedYear}
        />
      )}
    </CrmLayout>
  )
}

export default Dashboard

\n\n
=== ./dashboard/pages/Dashboard.jsx.backup.20250521220248 ===
import { useState, useEffect, useCallback, useMemo } from 'react'
import { useNavigate } from 'react-router-dom'
import { toast } from 'react-toastify'
// Asegurar que todas las importaciones usen el alias @ para resolver correctamente en Docker
import axiosInstance from '@/components/axiosConfig'
import { useAuth } from '@/hooks/useAuth'
import * as socketService from '@/services/socketService'
import CrmLayout from '@/components/layout/CrmLayout'
import { Breadcrumb } from '@/components/ui'
// Importar tiendas Zustand
import {
  useUiStore,
  useUsersStore,
  useReservationsStore,
  useFinancesStore,
  usePackagesStore,
  useCategoriesStore,
  useThemesStore,
  useExtrasStore,
  useFoodOptionsStore,
  useMamparasStore,
  usePaymentsStore
} from '@/store'
import ScreenSizeAlert from './dashboard-components/ScreenSizeAlert.jsx'
import UserSummary from './user-service/UserSummary.jsx'
import ReservationSummary from './reservation-service/ReservationSummary.jsx'
import FinancialSummary from './finance-service/FinancialSummary.jsx'
import UserTable from './user-service/UserTable.jsx'
import ReservationTable from './reservation-service/ReservationTable.jsx'
import FinanceTable from './finance-service/FinanceTable.jsx'
import PackageTable from './catalog-service/paquete-service/PackageTable.jsx'
import MonthSelector from './dashboard-components/MonthSelector.jsx'
import ReservationCalendar from './dashboard-components/ReservationCalendar.jsx'
import ReservationModal from './reservation-service/ReservationModal.jsx'
import ItemModal from './dashboard-components/ItemModal.jsx'
import FinanceDetailModal from './finance-service/FinanceDetailModal.jsx'
import UserForm from './user-service/UserForm.jsx'
import ReservationForm from './reservation-service/ReservationForm.jsx'
import FinanceForm from './finance-service/FinanceForm.jsx'
import PackageForm from './catalog-service/paquete-service/PackageForm.jsx'
import UserModal from './user-service/UserModal.jsx'
import ExtraForm from './catalog-service/extra-service/ExtraForm.jsx'
import ExtraTable from './catalog-service/extra-service/ExtraTable.jsx'
import OpcionAlimentoForm from './catalog-service/alimento-service/OpcionAlimentoForm.jsx'
import OpcionAlimentoTable from './catalog-service/alimento-service/OpcionAlimentoTable.jsx'
import TematicaForm from './catalog-service/tematica-service/TematicaForm.jsx'
import TematicaTable from './catalog-service/tematica-service/TematicaTable.jsx'
import Swal from 'sweetalert2'
import MonthlyReportModal from './finance-service/MonthlyReportModal.jsx'
import MamparaTable from './catalog-service/mampara-service/MamparaTable.jsx'
import 'react-big-calendar/lib/css/react-big-calendar.css'
import MamparaForm from './catalog-service/mampara-service/MamparaForm.jsx'
import PaymentTable from './payment-service/PaymentTable.jsx'
import PaymentForm from './payment-service/PaymentForm.jsx'
import PaymentModal from './payment-service/PaymentModal.jsx'
import PaymentDetails from './payment-service/PaymentDetails.jsx'
import AuditHistory from './auditory-service/AuditHistory.jsx'
import ArchivedTable from './auditory-service/ArchivedTable.jsx'
import GaleriaManagement from './gallery-service/GaleriaManagement.jsx'
import { HiPlus } from 'react-icons/hi'

const Dashboard = () => {
  const { user: currentUser } = useAuth();
  const navigate = useNavigate()
  
  // Estados de UI desde Zustand
  const { 
    activeTab, setActiveTab,
    isModalOpen, setIsModalOpen,
    isReservationModalOpen, setIsReservationModalOpen,
    isReportModalOpen, setIsReportModalOpen,
    isPaymentModalOpen, setIsPaymentModalOpen,
    isUserModalOpen, setIsUserModalOpen,
    loading, setLoading,
    isSmallScreen, setIsSmallScreen,
    showAlert, setShowAlert,
    userSearch, setUserSearch,
    reservationSearch, setReservationSearch,
    archivedSearch, setArchivedSearch,
    selectedMonth, setSelectedMonth,
    selectedYear, setSelectedYear,
    paymentModalMode, setPaymentModalMode,
    generatedPassword, generateRandomPassword
  } = useUiStore();

  // Estados de entidades (todavía mantenemos el estado local por ahora)
  const [users, setUsers] = useState([])
  const [reservations, setReservations] = useState([])
  const [finances, setFinances] = useState([])
  const [packages, setPackages] = useState([])
  const [categories, setCategories] = useState([])
  const [extras, setExtras] = useState([])
  const [tematicas, setTematicas] = useState([])
  const [archivedItems, setArchivedItems] = useState([]);
  const [editingItem, setEditingItem] = useState(null)
  const [selectedReservation, setSelectedReservation] = useState(null)
  const [selectedFinance, setSelectedFinance] = useState(null)
  const [mamparas, setMamparas] = useState([])
  const [foodOptions, setFoodOptions] = useState([])
  const [payments, setPayments] = useState([])
  const [selectedPayment, setSelectedPayment] = useState(null)
  const [selectedUser, setSelectedUser] = useState(null)
  
  // Determinar si mostrar el dashboard principal o contenido específico
  const isMainDashboard = activeTab === 'dashboard';
  
  // Mapeo de categorías y sus pestañas para las migajas de pan
  const breadcrumbsMap = {
    dashboard: [{ label: 'Panel Principal', path: 'dashboard' }],
    users: [{ label: 'Usuarios', path: 'users' }],
    reservations: [{ label: 'Reservaciones', path: 'reservations' }],
    finances: [{ label: 'Finanzas', path: 'finances' }],
    payments: [{ label: 'Pagos', path: 'payments' }],
    packages: [{ label: 'Catálogo', path: 'catalog' }, { label: 'Paquetes', path: 'packages' }],
    extras: [{ label: 'Catálogo', path: 'catalog' }, { label: 'Extras', path: 'extras' }],
    opcionesAlimento: [{ label: 'Catálogo', path: 'catalog' }, { label: 'Opciones de Alimento', path: 'opcionesAlimento' }],
    tematicas: [{ label: 'Catálogo', path: 'catalog' }, { label: 'Temáticas', path: 'tematicas' }],
    mamparas: [{ label: 'Catálogo', path: 'catalog' }, { label: 'Mamparas', path: 'mamparas' }],
    galeria: [{ label: 'Sistema', path: 'system' }, { label: 'Galería', path: 'galeria' }],
    auditoria: [{ label: 'Sistema', path: 'system' }, { label: 'Auditoría', path: 'auditoria' }],
    archived: [{ label: 'Sistema', path: 'system' }, { label: 'Elementos Archivados', path: 'archived' }]
  };
  
  // Obtener los ítems del breadcrumb actual
  const currentBreadcrumbItems = useMemo(() => {
    return breadcrumbsMap[activeTab] || [];
  }, [activeTab]);
  
  // Manejar navegación desde el breadcrumb
  const handleBreadcrumbNavigation = useCallback((path) => {
    if (path === 'dashboard') {
      setActiveTab('dashboard');
    } else if (path === 'catalog') {
      setActiveTab('packages');
    } else if (path === 'system') {
      setActiveTab('galeria');
    } else if (breadcrumbsMap[path]) {
      setActiveTab(path);
    }
  }, [setActiveTab]);
  
  const handleViewUser = useCallback(user => {
    setSelectedUser(user)
    setIsUserModalOpen(true)
  }, [setIsUserModalOpen])

  const generateMonthlyReport = () => {
    setIsReportModalOpen(true)
  }

  const handleSelectReservation = reservation => {
    setSelectedReservation(reservation)
  }

  const handleCloseReservationModal = () => {
    setSelectedReservation(null)
  }

  // Obtener las funciones fetch de las tiendas
  const { fetchUsers: fetchUsersZustand } = useUsersStore();
  const { fetchReservations: fetchReservationsZustand, initSocketListeners } = useReservationsStore();
  const { fetchFinances: fetchFinancesZustand } = useFinancesStore();
  const { fetchPackages: fetchPackagesZustand } = usePackagesStore();
  const { fetchCategories: fetchCategoriesZustand } = useCategoriesStore();
  const { fetchExtras: fetchExtrasZustand } = useExtrasStore();
  const { fetchFoodOptions: fetchFoodOptionsZustand } = useFoodOptionsStore();
  const { fetchThemes: fetchThemesZustand } = useThemesStore();
  const { fetchMamparas: fetchMamparasZustand } = useMamparasStore();
  const { fetchPayments: fetchPaymentsZustand } = usePaymentsStore();

  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      // Usar Promise.allSettled para manejar errores individuales sin detener todo el proceso
      const results = await Promise.allSettled([
        fetchUsersZustand().then(data => setUsers(data)),
        fetchReservationsZustand().then(data => setReservations(data)),
        fetchFinancesZustand().then(data => setFinances(data)),
        fetchPackagesZustand().then(data => setPackages(data)),
        fetchCategoriesZustand().then(data => setCategories(data)),
        fetchExtrasZustand().then(data => setExtras(data)),
        fetchFoodOptionsZustand().then(data => setFoodOptions(data)),
        fetchThemesZustand().then(data => setTematicas(data)),
        fetchMamparasZustand().then(data => setMamparas(data)),
        fetchPaymentsZustand().then(data => setPayments(data)),
        // Obtener elementos archivados - todavía usando axios ya que no tenemos tiendas para estos
        axiosInstance.get('/reservas/archived'),
        axiosInstance.get('/pagos/archived'),
        axiosInstance.get('/finanzas/archived')
      ]);

      // Manejar elementos archivados
      const archivedData = [];
      if (results[10].status === 'fulfilled') {
        archivedData.push(...results[10].value.data.map(item => ({ ...item, type: 'reservas' })));
      }
      if (results[11].status === 'fulfilled') {
        archivedData.push(...results[11].value.data.map(item => ({ ...item, type: 'pagos' })));
      }
      if (results[12].status === 'fulfilled') {
        archivedData.push(...results[12].value.data.map(item => ({ ...item, type: 'finanzas' })));
      }
      setArchivedItems(archivedData);

      // Reportar errores
      results.forEach((result, index) => {
        if (result.status === 'rejected') {
          console.error(`Error en la solicitud ${index}:`, result.reason);
          
          // No mostrar toast para errores 404 en solicitudes de elementos archivados (índices 10, 11, 12)
          const isArchivedRequest = index >= 10 && index <= 12;
          const is404Error = result.reason?.response?.status === 404;
          
          if (!(isArchivedRequest && is404Error)) {
            toast.error(`Error al cargar los datos de la solicitud ${index + 1}`);
          }
        }
      });
    } catch (error) {
      console.error('Error al cargar los datos:', error);
      toast.error('Error al cargar los datos');
    } finally {
      setLoading(false);
    }
  }, [
    fetchUsersZustand, fetchReservationsZustand, fetchFinancesZustand, 
    fetchPackagesZustand, fetchCategoriesZustand, fetchExtrasZustand, 
    fetchFoodOptionsZustand, fetchThemesZustand, fetchMamparasZustand, 
    fetchPaymentsZustand, setLoading
  ]);

  useEffect(() => {
    // Inicializar datos y configurar Socket.IO
    fetchData().then(() => {
      // Usar la función initSocketListeners de reservationsStore para centralizar la lógica de sockets
      // Esta función se encarga de inicializar Socket.IO y configurar todos los listeners
      // También actualiza automáticamente el estado global de reservations en la tienda
      initSocketListeners({
        onReservaCreada: (nuevaReserva) => {
          console.log('Reserva creada recibida vía Socket.IO:', nuevaReserva);
          toast.success(`Nueva reserva #${nuevaReserva.id} creada`);
        },
        onReservaActualizada: (reservaActualizada) => {
          console.log('Reserva actualizada recibida vía Socket.IO:', reservaActualizada);
        },
        onReservaEliminada: (data) => {
          console.log('Reserva eliminada recibida vía Socket.IO:', data);
        },
        onFechasBloqueadas: (data) => {
          console.log('Fechas bloqueadas recibidas vía Socket.IO:', data);
          if (!data.reservas || !Array.isArray(data.reservas)) {
            // Si no tenemos datos completos de las reservas, recargar todo
            fetchData();
          }
        },
        onError: (error) => {
          console.error('Error en Socket.IO:', error);
          toast.error('Error en la comunicación en tiempo real');
        }
      });
    });

    // Limpieza al desmontar el componente
    return () => {
      // Desconectar y limpiar Socket.IO
      socketService.disconnect();
      // Limpiar listeners de Socket.IO
      useReservationsStore.getState().cleanupSocketListeners();
    };
  }, [fetchData, initSocketListeners]);

  const filteredUsers = useMemo(() => {
    return users.filter(
      user =>
        user.nombre.toLowerCase().includes(userSearch.toLowerCase()) ||
        user.email.toLowerCase().includes(userSearch.toLowerCase()) ||
        (user.id_personalizado &&
          user.id_personalizado
            .toLowerCase()
            .includes(userSearch.toLowerCase()))
    )
  }, [users, userSearch])

  const filteredReservations = useMemo(() => {
    return reservations.filter(
      reservation =>
        reservation.id.toString().includes(reservationSearch) ||
        (reservation.nombre_festejado &&
          reservation.nombre_festejado
            .toLowerCase()
            .includes(reservationSearch.toLowerCase()))
    )
  }, [reservations, reservationSearch])

  useEffect(() => {
    const checkScreenSize = () => {
      setIsSmallScreen(window.innerWidth < 768)
    }

    checkScreenSize()
    window.addEventListener('resize', checkScreenSize)

    return () => window.removeEventListener('resize', checkScreenSize)
  }, [])

  const handleViewReservation = useCallback(reservation => {
    setSelectedReservation(reservation)
    setIsReservationModalOpen(true)
  }, [])

  // Función para filtrar datos por mes
  const filterDataByMonth = useCallback(
    (data, dateField) => {
      // Primero verificar si data es un array
      if (!Array.isArray(data)) return [];
      
      // Filtrar por mes
      return data.filter(item => {
        // Verificar que el item y el campo de fecha existen
        if (!item || !item[dateField]) return false;
        
        // Convertir a objeto Date
        const itemDate = new Date(item[dateField]);
        
        // Asegurarse de que la fecha es válida
        if (isNaN(itemDate.getTime())) return false;
        
        // Comparar tanto mes como año
        return itemDate.getMonth() === selectedMonth && 
               itemDate.getFullYear() === selectedYear;
      });
    },
    [selectedMonth, selectedYear]
  );

  const handleAddItem = useCallback(() => {
    if (activeTab === 'payments') {
      setSelectedPayment(null)
      setPaymentModalMode('add')
      setIsPaymentModalOpen(true)
    } else {
      setEditingItem(null)
      setIsModalOpen(true)
    }
  }, [activeTab])

  const handleSavePayment = useCallback(async (paymentData) => {
    try {
      await usePaymentsStore.getState().addPayment(paymentData);
      setIsPaymentModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al crear el pago:', error);
      toast.error('Error al crear el pago');
      if (error.response?.status === 401) {
        navigate('/signin');
      }
    }
  }, [navigate, fetchData, setIsPaymentModalOpen])

  const handleEditItem = useCallback(
    item => {
      console.log('Editando elemento:', item)
      if (activeTab === 'payments') {
        setSelectedPayment(item)
        setPaymentModalMode('add')
        setIsPaymentModalOpen(true)
      } else {
        setEditingItem(item)
        setIsModalOpen(true)
      }
    },
    [activeTab]
  )
  
  const handleUpdatePaymentStatus = useCallback(async (paymentId, newStatus) => {
    try {
      await usePaymentsStore.getState().updatePaymentStatus(paymentId, newStatus);
      // Actualizar la UI con datos frescos
      await fetchData();
    } catch (error) {
      console.error('Error al actualizar el estado del pago:', error);
      toast.error('Error al actualizar el estado del pago');
      
      if (error.response?.status === 401) {
        navigate('/signin');
      }
    }
  }, [navigate, fetchData])

  const handleReservationStatusChange = useCallback(async (reservationId, newStatus) => {
    try {
      // Usar la tienda Zustand para actualizar el estado de la reserva
      await useReservationsStore.getState().updateReservationStatus(reservationId, newStatus);
      // No es necesario actualizar manualmente el estado local, ya que se actualizará
      // automáticamente desde la tienda al llamar a updateReservationStatus
      toast.success('Estado de la reserva actualizado con éxito');
    } catch (error) {
      console.error('Error al actualizar el estado de la reserva:', error);
      toast.error('Error al actualizar el estado de la reserva');
      
      if (error.response?.status === 401) {
        navigate('/signin');
      }
    }
  }, [navigate])

  const handleSendEmail = useCallback(reservation => {
    toast.info(`Funcionalidad de enviar correo a ${reservation.usuario.email}`)
  }, [])

  const handleContactUser = useCallback(reservation => {
    toast.info(
      `Funcionalidad de contactar al usuario ${reservation.usuario.nombre}`
    )
  }, [])

  const handleError = useCallback(
    (error, action) => {
      if (error.response) {
        if (error.response.status === 404) {
          toast.warning('El elemento ya no existe')
        } else if (error.response.status === 401) {
          toast.error(
            'Tu sesión ha expirado. Por favor, inicia sesión nuevamente.'
          )
          navigate('/signin')
        } else {
          toast.error(
            `Error del servidor al ${action} el elemento: ${
              error.response.data.message || 'Algo salió mal'
            }`
          )
        }
      } else if (error.request) {
        toast.error('No se recibió respuesta del servidor')
      } else {
        toast.error(`Error al ${action} el elemento`)
      }
      console.error(`Error al ${action} el elemento:`, error)
    },
    [navigate]
  )

  function removeCircularReferences (obj, seen = new WeakSet()) {
    if (typeof obj !== 'object' || obj === null) {
      return obj
    }
    if (seen.has(obj)) {
      return '[Circular]'
    }
    seen.add(obj)
    const newObj = Array.isArray(obj) ? [] : {}
    for (const key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        newObj[key] = removeCircularReferences(obj[key], seen)
      }
    }
    return newObj
  }

  const handleSubmit = useCallback(
    async data => {
      setLoading(true)
      try {
        console.log('Datos recibidos en handleSubmit:', data)
        
        // Limpiar y validar los datos
        const cleanedData = removeCircularReferences(data)
        console.log('Datos limpios a enviar al servidor:', cleanedData)
        
        // Para reservas, validar y asegurar que id_usuario sea un número
        if (activeTab === 'reservations' && !cleanedData.id_usuario) {
          toast.error('Debe seleccionar un usuario para la reserva')
          setLoading(false)
          return
        }
        
        if (activeTab === 'reservations') {
          cleanedData.id_usuario = Number(cleanedData.id_usuario)
        }
        
        // Usar las tiendas Zustand para crear/actualizar
        let result;
        
        if (editingItem) {
          // Actualizar usando las tiendas Zustand
          switch (activeTab) {
            case 'users':
              result = await useUsersStore.getState().updateUser(editingItem.id, cleanedData);
              break;
            case 'reservations':
              result = await useReservationsStore.getState().updateReservation(editingItem.id, cleanedData);
              break;
            case 'finances':
              result = await useFinancesStore.getState().updateFinance(editingItem.id, cleanedData);
              break;
            case 'packages':
              result = await usePackagesStore.getState().updatePackage(editingItem.id, cleanedData);
              break;
            case 'extras':
              result = await useExtrasStore.getState().updateExtra(editingItem.id, cleanedData);
              break;
            case 'opcionesAlimento':
              result = await useFoodOptionsStore.getState().updateFoodOption(editingItem.id, cleanedData);
              break;
            case 'tematicas':
              result = await useThemesStore.getState().updateTheme(editingItem.id, cleanedData);
              break;
            case 'mamparas':
              result = await useMamparasStore.getState().updateMampara(editingItem.id, cleanedData);
              break;
            case 'payments':
              result = await usePaymentsStore.getState().updatePayment(editingItem.id, cleanedData);
              break;
            default:
              throw new Error('Tipo de formulario no reconocido');
          }
        } else {
          // Crear usando las tiendas Zustand
          switch (activeTab) {
            case 'users':
              result = await useUsersStore.getState().addUser(cleanedData);
              break;
            case 'reservations':
              result = await useReservationsStore.getState().addReservation(cleanedData);
              break;
            case 'finances':
              result = await useFinancesStore.getState().addFinance(cleanedData);
              break;
            case 'packages':
              result = await usePackagesStore.getState().addPackage(cleanedData);
              break;
            case 'extras':
              result = await useExtrasStore.getState().addExtra(cleanedData);
              break;
            case 'opcionesAlimento':
              result = await useFoodOptionsStore.getState().addFoodOption(cleanedData);
              break;
            case 'tematicas':
              result = await useThemesStore.getState().addTheme(cleanedData);
              break;
            case 'mamparas':
              result = await useMamparasStore.getState().addMampara(cleanedData);
              break;
            case 'payments':
              result = await usePaymentsStore.getState().addPayment(cleanedData);
              break;
            default:
              throw new Error('Tipo de formulario no reconocido');
          }
        }
        
        setIsModalOpen(false);
        // Actualizar la UI con datos frescos
        await fetchData();
        
      } catch (error) {
        console.error('Error en handleSubmit:', error)
        if (error.response && error.response.status === 401) {
          toast.error(
            'Tu sesión ha expirado. Por favor, inicia sesión nuevamente.'
          )
          navigate('/signin')
          return
        } else {
          handleError(error, editingItem ? 'actualizar' : 'crear')
        }
      } finally {
        setLoading(false)
      }
    },
    [activeTab, editingItem, fetchData, handleError, navigate, setLoading, setIsModalOpen]
  )

  const handleDeleteItem = async (endpoint, id, successMessage) => {
    const result = await Swal.fire({
      title: '¿Estás seguro?',
      text: 'Esta acción desactivará el registro. Podrás reactivarlo más tarde si es necesario.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Sí, desactivar',
      cancelButtonText: 'Cancelar'
    })

    if (result.isConfirmed) {
      try {
        // Determinar qué tienda usar basado en el endpoint
        switch (endpoint) {
          case '/api/usuarios':
            await useUsersStore.getState().deleteUser(id);
            break;
          case '/api/reservas':
            await useReservationsStore.getState().deleteReservation(id);
            break;
          case '/api/finanzas':
            await useFinancesStore.getState().deleteFinance(id);
            break;
          case '/api/paquetes':
            await usePackagesStore.getState().deletePackage(id);
            break;
          case '/api/extras':
            await useExtrasStore.getState().deleteExtra(id);
            break;
          case '/api/opciones-alimentos':
            await useFoodOptionsStore.getState().deleteFoodOption(id);
            break;
          case '/api/tematicas':
            await useThemesStore.getState().deleteTheme(id);
            break;
          case '/api/mamparas':
            await useMamparasStore.getState().deleteMampara(id);
            break;
          case '/api/pagos':
            await usePaymentsStore.getState().deletePayment(id);
            break;
          default:
            // Si no hay una tienda específica para el endpoint, usar axios directamente
            await axiosInstance.delete(`${endpoint}/${id}`);
        }
        
        Swal.fire('¡Desactivado!', successMessage, 'success');
        // Actualizar la UI con datos frescos
        await fetchData();
      } catch (error) {
        handleError(error, 'desactivar');
      }
    }
  }

  // Eliminada la función local generateRandomPassword ya que la estamos importando desde useUiStore

  const handleDownloadFile = useCallback(async (id, type) => {
    try {
      // Usar la tienda Zustand para descargar el archivo
      const blob = await useFinancesStore.getState().downloadFinanceFile(id, type);
      
      // Crear URL para el blob y descargar el archivo
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `finanza_${id}_${type}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.parentNode.removeChild(link);
      
      // Liberar la URL
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error al descargar el archivo:', error);
      toast.error('Error al descargar el archivo');
    }
  }, [])

  const handleViewDetails = useCallback(finance => {
    setSelectedFinance(finance)
  }, [])

  const handleAddCategory = useCallback(async newCategory => {
    try {
      await useCategoriesStore.getState().addCategory({
        nombre: newCategory.nombre,
        color: newCategory.color || '#000000'
      });
      // Actualizar categorías tras la adición
      const updatedCategories = await fetchCategoriesZustand();
      setCategories(updatedCategories);
      toast.success('Categoría añadida con éxito');
    } catch (error) {
      console.error('Error al añadir la categoría:', error);
      toast.error('Error al añadir la categoría');
    }
  }, [fetchCategoriesZustand])

  const renderModalContent = useCallback(() => {
    const props = {
      editingItem,
      onSave: handleSubmit,
      generateRandomPassword,
      generatedPassword,
      users,
      packages,
      categories,
      onAddCategory: handleAddCategory,
      reservations,
      tematicas,
      foodOptions,
      extras,
      currentUser
    }
    switch (activeTab) {
      case 'users':
        return <UserForm {...props} />
      case 'reservations':
        return <ReservationForm {...props} />
      case 'finances':
        return <FinanceForm {...props} />
      case 'packages':
        return <PackageForm {...props} />
      case 'extras':
        return <ExtraForm {...props} />
      case 'opcionesAlimento':
        return <OpcionAlimentoForm {...props} />
      case 'tematicas':
        return <TematicaForm {...props} />
      case 'mamparas':
        return <MamparaForm {...props} />
      case 'payments':
        return <PaymentForm {...props} />
      default:
        return null
    }
  }, [
    activeTab,
    editingItem,
    handleSubmit,
    generateRandomPassword,
    generatedPassword,
    users,
    packages,
    categories,
    handleAddCategory,
    reservations,
    tematicas,
    foodOptions,
    extras
  ])

  
  // Renderizar componente del panel según la categoría activa
  const renderDashboardWidgets = () => {
    if (!isMainDashboard) return null;
    
    return (
      <div className='mb-8'>
        {/* Header del Dashboard con gradiente */}
        <div className="bg-gradient-to-r from-indigo-600 to-purple-600 rounded-xl shadow-lg p-6 mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">Panel de Control</h1>
          <p className="text-indigo-100">Bienvenido al sistema de administración de Tramboory</p>
        </div>
        
        {/* Widgets de estadísticas */}
        <div className='grid grid-cols-1 md:grid-cols-3 gap-6 mb-8'>
          <div className="bg-gradient-to-br from-indigo-50 to-white p-0 rounded-xl shadow-md overflow-hidden border border-indigo-100 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
            <UserSummary users={users} />
          </div>
          <div className="bg-gradient-to-br from-green-50 to-white p-0 rounded-xl shadow-md overflow-hidden border border-green-100 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
            <ReservationSummary
              reservations={reservations}
              filterDataByMonth={filterDataByMonth}
            />
          </div>
          <div className="bg-gradient-to-br from-purple-50 to-white p-0 rounded-xl shadow-md overflow-hidden border border-purple-100 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-2xl font-semibold text-gray-800">Pagos</h2>
                <div className="p-2 rounded-full bg-purple-100 text-purple-600">
                  <HiPlus className="w-5 h-5" />
                </div>
              </div>
              <p className="text-4xl font-bold text-purple-600">{payments.length}</p>
              <p className="text-sm text-gray-500 mt-1">
                {payments.filter(p => p.estado === 'completado').length} completados
              </p>
            </div>
          </div>
        </div>
        
        {/* Widgets principales */}
        <div className='grid grid-cols-1 lg:grid-cols-3 gap-6'>
          <div className="lg:col-span-2 bg-white rounded-xl shadow-md overflow-hidden border border-indigo-100 transform transition-all duration-300 hover:shadow-lg">
            <ReservationCalendar
              reservations={reservations}
              onSelectReservation={handleSelectReservation}
            />
          </div>
          <div className="bg-white rounded-xl shadow-md overflow-hidden border border-indigo-100 transform transition-all duration-300 hover:shadow-lg">
            <FinancialSummary
              finances={finances}
              filterDataByMonth={filterDataByMonth}
              categories={categories}
            />
          </div>
        </div>
      </div>
    );
  };
  
  // Botón de acción contextual según la pestaña activa
  const renderActionButton = () => {
    // No mostrar botón en el dashboard principal
    if (isMainDashboard) return null;
    
    return (
      <div className="flex justify-end mb-4">
        <button
          onClick={handleAddItem}
          className="flex items-center px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors"
        >
          <HiPlus className="mr-2" />
          Agregar {getActiveTabLabel()}
        </button>
      </div>
    );
  };
  
  // Obtener nombre amigable para la pestaña activa
  const getActiveTabLabel = () => {
    switch (activeTab) {
      case 'users': return 'Usuario';
      case 'reservations': return 'Reservación';
      case 'finances': return 'Registro';
      case 'payments': return 'Pago';
      case 'packages': return 'Paquete';
      case 'extras': return 'Extra';
      case 'opcionesAlimento': return 'Opción de Alimento';
      case 'tematicas': return 'Temática';
      case 'mamparas': return 'Mampara';
      case 'galeria': return 'Imagen';
      default: return 'Elemento';
    }
  };
  
  return (
    <CrmLayout>
      {isSmallScreen && showAlert && (
        <ScreenSizeAlert setShowAlert={setShowAlert} />
      )}
      
      {/* Widgets del dashboard principal, solo se muestran en la vista de dashboard */}
      {renderDashboardWidgets()}
      
      {/* Contenedor principal contextual */}
      <div className='bg-white rounded-xl shadow-md p-6 border border-gray-100'>
        {/* Breadcrumb para navegación contextual */}
        <Breadcrumb 
          items={currentBreadcrumbItems} 
          onNavigate={handleBreadcrumbNavigation}
        />
        
        {/* Botón de acción contextual */}
        {renderActionButton()}
        {/* Contenido según pestaña activa */}
        {activeTab === 'users' && (
          <UserTable
            users={filteredUsers}
            userSearch={userSearch}
            setUserSearch={setUserSearch}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/usuarios',
                id,
                'Usuario desactivado con éxito',
                () => setIsModalOpen(false)
              )
            }
            handleViewUser={handleViewUser}
          />
        )}
        {activeTab === 'reservations' && (
          <ReservationTable
            reservations={filterDataByMonth(reservations, 'fecha_reserva')}
            reservationSearch={reservationSearch}
            setReservationSearch={setReservationSearch}
            handleViewReservation={handleViewReservation}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/reservas',
                id,
                'Reserva desactivada con éxito'
              )
            }
            selectedMonth={selectedMonth}
          />
        )}
        {activeTab === 'finances' && (
          <FinanceTable
            finances={filterDataByMonth(finances, 'fecha')}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/finanzas',
                id,
                'Finanza desactivada con éxito',
                () => setIsModalOpen(false)
              )
            }
            handleDownloadFile={handleDownloadFile}
            handleViewDetails={handleViewDetails}
            categories={categories}
            generateMonthlyReport={generateMonthlyReport}
          />
        )}
        {activeTab === 'packages' && (
          <PackageTable
            packages={packages}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/paquetes',
                id,
                'Paquete desactivado con éxito',
                () => setIsModalOpen(false),
                'paquetes'
              )
            }
          />
        )}
        {activeTab === 'extras' && (
          <ExtraTable
            extras={extras}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem('/api/extras', id, 'Extra eliminado con éxito')
            }
          />
        )}
        {activeTab === 'opcionesAlimento' && (
          <OpcionAlimentoTable
            opcionesAlimento={foodOptions}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/opciones-alimentos',
                id,
                'Opción de alimento eliminada con éxito'
              )
            }
          />
        )}
        {activeTab === 'tematicas' && (
          <TematicaTable
            tematicas={tematicas}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/tematicas',
                id,
                'Temática eliminada con éxito'
              )
            }
          />
        )}
        {activeTab === 'mamparas' && (
          <MamparaTable
            tematicas={tematicas}
            mamparas={mamparas}
            handleEditItem={handleEditItem}
            handleDeleteItem={id =>
              handleDeleteItem(
                '/api/mamparas',
                id,
                'Mampara eliminada con éxito'
              )
            }
          />
        )}
        {activeTab === 'payments' && (
          <PaymentTable
            payments={payments}
            reservations={reservations}
            onViewPayment={(payment) => {
              setSelectedPayment(payment)
              setPaymentModalMode('view')
              setIsPaymentModalOpen(true)
            }}
            onEditPayment={(payment) => {
              setSelectedPayment(payment)
              setPaymentModalMode('edit')
              setIsPaymentModalOpen(true)
            }}
          />
        )}
        {activeTab === 'auditoria' && (
          <AuditHistory />
        )}
        {activeTab === 'archived' && (
          <ArchivedTable
            items={archivedItems}
            itemSearch={archivedSearch}
            setItemSearch={setArchivedSearch}
            fetchData={fetchData}
            selectedMonth={selectedMonth}
            type="reservas"
          />
        )}
        {activeTab === 'galeria' && (
          <GaleriaManagement />
        )}
      </div>
      <MonthSelector
        selectedMonth={selectedMonth}
        setSelectedMonth={setSelectedMonth}
        selectedYear={selectedYear}
        setSelectedYear={setSelectedYear}
      />
      {isReservationModalOpen && selectedReservation && (
        <ReservationModal
          reservation={selectedReservation}
          onClose={handleCloseReservationModal}
          onStatusChange={newStatus =>
            handleReservationStatusChange(selectedReservation.id, newStatus)
          }
          onSendEmail={handleSendEmail}
          onContactUser={handleContactUser}
          tematicas={tematicas}
          extras={extras}
        />
      )}
      {isModalOpen && (
        <ItemModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          title={`${editingItem ? 'Editar' : 'Agregar'} ${activeTab.slice(
            0,
            -1
          )}`}
          loading={loading}
          activeTab={activeTab}
          handleSubmit={handleSubmit}
          editingItem={editingItem}
          generatedPassword={generatedPassword}
          generateRandomPassword={generateRandomPassword}
          users={users}
          packages={packages}
          reservations={reservations}
          categories={categories}
          onAddCategory={handleAddCategory}
          tematicas={tematicas}
          foodOptions={foodOptions}
          extras={extras}
          mamparas={mamparas}
          currentUser={currentUser}
        />
      )}
      {selectedFinance && (
        <FinanceDetailModal
          finance={selectedFinance}
          onClose={() => setSelectedFinance(null)}
          onDownloadFile={handleDownloadFile}
        />
      )}
      {isPaymentModalOpen && (
        <PaymentModal
          payment={selectedPayment}
          isOpen={isPaymentModalOpen}
          onClose={() => {
            setSelectedPayment(null)
            setIsPaymentModalOpen(false)
          }}
          onUpdateStatus={handleUpdatePaymentStatus}
          onSavePayment={handleSavePayment}
          reservations={reservations}
          mode={paymentModalMode}
        />
      )}
      {isUserModalOpen && selectedUser && (
        <UserModal
          user={selectedUser}
          reservations={reservations.filter(res => res.id_usuario === selectedUser.id)}
          onClose={() => {
            setSelectedUser(null)
            setIsUserModalOpen(false)
          }}
          onEdit={handleEditItem}
          onSendEmail={() => toast.info(`Funcionalidad de enviar correo a ${selectedUser.email}`)}
        />
      )}
      {isReportModalOpen && (
        <MonthlyReportModal
          isOpen={isReportModalOpen}
          onClose={() => setIsReportModalOpen(false)}
          finances={finances}
          categories={categories}
          selectedMonth={selectedMonth}
          selectedYear={selectedYear}
        />
      )}
    </CrmLayout>
  )
}

export default Dashboard\n\n
=== ./dashboard/pages/index.js ===
﻿export { default as Dashboard } from './Dashboard';
\n\n
=== ./finanzas/components/index.js ===
// Exportar todos los componentes de finanzas/components
\n\n
=== ./finanzas/hooks/index.js ===
// Exportar todos los componentes de finanzas/hooks
\n\n
=== ./finanzas/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n
=== ./finanzas/pages/FinanceDetailModal.jsx ===
﻿import React, { useState } from 'react';
import PropTypes from 'prop-types';
// Usar el alias @ para garantizar resoluciÃ³n correcta en Docker
import Modal from '@shared/components/Modal';
import { FiDollarSign, FiCalendar, FiTag, FiFileText, FiDownload, FiPrinter, FiEye, FiCode, FiFile } from 'react-icons/fi';
import ReservationPreviewModal from '@shared/@domains/dashboard/pages/Dashboard/reservation-service/ReservationPreviewModal';
import { formatDate, formatNumber } from '@shared/utils/formatters';
import CloudinaryFileSelector from '@shared/components/cloudinary/CloudinaryFileSelector';

const FinanceDetailModal = ({ finance, onClose }) => {
    const [showReservationPreview, setShowReservationPreview] = useState(false);
    const IconWrapper = ({ icon: Icon, text, color = "text-gray-700" }) => (
        <div className={`flex items-center mb-3 group hover:scale-[1.02] transition-all duration-200 ${color}`}>
            <div className={`flex items-center justify-center w-8 h-8 rounded-lg ${color} bg-opacity-10 mr-3`}>
                <Icon className={`w-4 h-4 ${color} group-hover:scale-110 transition-transform duration-200`} />
            </div>
            <span className="text-sm font-medium">{text}</span>
        </div>
    );

    const footerContent = (
        <div className="flex justify-end gap-2 sm:gap-4">
            <button
                onClick={() => {/* Implementar funciÃ³n de impresiÃ³n */}}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-200 flex items-center text-sm hover:shadow-md"
                title="Imprimir detalle del movimiento"
            >
                <FiPrinter className="mr-2" />
                Imprimir Detalle
            </button>
            <button
                onClick={onClose}
                className="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-all duration-200 flex items-center text-sm border border-gray-300"
                title="Cerrar ventana"
            >
                Cerrar
            </button>
        </div>
    );

    return (
        <Modal
            isOpen={true}
            onClose={onClose}
            title="Detalles del Movimiento Financiero"
            footer={footerContent}
            className="animate-modalEntry"
            overlayClassName="backdrop-blur-sm"
        >
            <style jsx global>{`
                @keyframes modalEntry {
                    from {
                        opacity: 0;
                        transform: scale(0.95) translateY(-10px);
                    }
                    to {
                        opacity: 1;
                        transform: scale(1) translateY(0);
                    }
                }
                .animate-modalEntry {
                    animation: modalEntry 0.3s ease-out;
                }
            `}</style>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
                <div className="space-y-6">
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">InformaciÃ³n General</h3>
                        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                            <IconWrapper
                                icon={FiDollarSign}
                                text={`Monto: ${formatNumber(Math.abs(finance.monto))}`}
                                color={finance.tipo === 'ingreso' ? 'text-green-600' : 'text-red-600'}
                            />
                            <IconWrapper icon={FiCalendar} text={`Fecha: ${formatDate(finance.fecha)}`} />
                            <IconWrapper icon={FiTag} text={`Tipo: ${finance.tipo.charAt(0).toUpperCase() + finance.tipo.slice(1)}`} />
            <div className="flex items-center mb-3 group">
                <FiTag className="mr-2 text-xl text-gray-700 group-hover:text-indigo-500 transition-colors duration-200" />
                <span className="text-sm flex items-center">
                    CategorÃ­a: {finance.categoria ? (
                        <span className="flex items-center ml-1">
                            <span 
                                className="w-3 h-3 rounded-full mr-1 inline-block"
                                style={{ backgroundColor: finance.categoria.color }}
                            />
                            {finance.categoria.nombre}
                        </span>
                    ) : 'No especificada'}
                </span>
            </div>
            {finance.reserva && (
                <div 
                    className="flex items-center mb-3 text-blue-600 hover:text-blue-800 transition-all duration-300 cursor-pointer group hover:scale-[1.02] active:scale-95 hover:bg-blue-50/50 p-2 rounded-lg"
                    title="Ver detalles de la reserva"
                    onClick={() => setShowReservationPreview(true)}
                >
                    <FiEye className="mr-2 text-xl group-hover:scale-125 group-hover:rotate-12 transition-all duration-300" />
                    <FiCalendar className="mr-2 text-xl group-hover:scale-110 group-hover:-rotate-12 transition-all duration-300" />
                    <span className="text-sm group-hover:translate-x-1 transition-transform duration-300">
                        Reserva: #{finance.reserva.id} - {finance.reserva.nombre_festejado}
                        <span className="text-gray-500 ml-2">
                            ({formatDate(finance.reserva.fecha_reserva)})
                        </span>
                    </span>
                </div>
            )}
            {showReservationPreview && finance.reserva && (
                <ReservationPreviewModal
                    reservation={finance.reserva}
                    onClose={() => setShowReservationPreview(false)}
                />
            )}
                        </div>
                    </div>
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">DescripciÃ³n</h3>
                        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                            <p className="text-gray-700 text-sm">{finance.descripcion}</p>
                        </div>
                    </div>
                </div>
                <div className="space-y-6 overflow-y-auto max-h-[600px] pr-2">
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">Archivos Adjuntos</h3>
                        <div className="space-y-4">
                            {finance.factura_pdf && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                                        <FiFileText className="mr-2 text-indigo-600" />
                                        Factura PDF
                                    </h4>
                                    <CloudinaryFileSelector
                                        value={finance.factura_pdf}
                                        readOnly={true}
                                        icon={FiFileText}
                                        acceptTypes="application/pdf"
                                        showPreview={true}
                                    />
                                </div>
                            )}
                            
                            {finance.factura_xml && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                                        <FiCode className="mr-2 text-indigo-600" />
                                        Factura XML
                                    </h4>
                                    <CloudinaryFileSelector
                                        value={finance.factura_xml}
                                        readOnly={true}
                                        icon={FiCode}
                                        acceptTypes="application/xml"
                                        showPreview={true}
                                    />
                                </div>
                            )}
                            
                            {finance.archivo_prueba && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                                        <FiFile className="mr-2 text-indigo-600" />
                                        Archivo de Prueba
                                    </h4>
                                    <CloudinaryFileSelector
                                        value={finance.archivo_prueba}
                                        readOnly={true}
                                        icon={FiFile}
                                        acceptTypes="application/pdf,image/jpeg,image/png"
                                        showPreview={true}
                                    />
                                </div>
                            )}
                            
                            {!finance.factura_pdf && !finance.factura_xml && !finance.archivo_prueba && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <p className="text-gray-500 text-sm">No hay archivos adjuntos</p>
                                </div>
                            )}
                        </div>
                    </div>
                    {finance.comentarios && (
                        <div>
                            <h3 className="text-lg font-medium text-gray-900 mb-3">Comentarios</h3>
                        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                <p className="text-gray-700 text-sm">{finance.comentarios}</p>
                            </div>
                        </div>
                    )}
                </div>
            </div>

        </Modal>
    );
};

FinanceDetailModal.propTypes = {
    finance: PropTypes.shape({
        id: PropTypes.number.isRequired,
        descripcion: PropTypes.string.isRequired,
        monto: PropTypes.number.isRequired,
        tipo: PropTypes.oneOf(['ingreso', 'gasto']).isRequired,
        fecha: PropTypes.string.isRequired,
        categoria: PropTypes.shape({
            id: PropTypes.number,
            nombre: PropTypes.string,
            color: PropTypes.string
        }),
        reserva: PropTypes.shape({
            id: PropTypes.number,
            nombre_festejado: PropTypes.string,
            fecha_reserva: PropTypes.string,
            estado: PropTypes.string,
            hora_inicio: PropTypes.string,
            hora_fin: PropTypes.string,
            total: PropTypes.number,
            comentarios: PropTypes.string,
            edad_festejado: PropTypes.number
        }),
        factura_pdf: PropTypes.string,
        factura_xml: PropTypes.string,
        archivo_prueba: PropTypes.string,
        comentarios: PropTypes.string
    }).isRequired,
    onClose: PropTypes.func.isRequired
};

export default FinanceDetailModal;

\n\n
=== ./finanzas/pages/FinanceDetailModal.jsx.pre-legacy-fix.20250521220728 ===
import React, { useState } from 'react';
import PropTypes from 'prop-types';
// Usar el alias @ para garantizar resolución correcta en Docker
import Modal from '@shared/components/ui/Modal';
import { FiDollarSign, FiCalendar, FiTag, FiFileText, FiDownload, FiPrinter, FiEye, FiCode, FiFile } from 'react-icons/fi';
import ReservationPreviewModal from '@shared/pages/admin/dashboard/reservation-service/ReservationPreviewModal';
import { formatDate, formatNumber } from '@shared/utils/formatters';
import CloudinaryFileSelector from '@shared/components/cloudinary/CloudinaryFileSelector';

const FinanceDetailModal = ({ finance, onClose }) => {
    const [showReservationPreview, setShowReservationPreview] = useState(false);
    const IconWrapper = ({ icon: Icon, text, color = "text-gray-700" }) => (
        <div className={`flex items-center mb-3 group hover:scale-[1.02] transition-all duration-200 ${color}`}>
            <div className={`flex items-center justify-center w-8 h-8 rounded-lg ${color} bg-opacity-10 mr-3`}>
                <Icon className={`w-4 h-4 ${color} group-hover:scale-110 transition-transform duration-200`} />
            </div>
            <span className="text-sm font-medium">{text}</span>
        </div>
    );

    const footerContent = (
        <div className="flex justify-end gap-2 sm:gap-4">
            <button
                onClick={() => {/* Implementar función de impresión */}}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-200 flex items-center text-sm hover:shadow-md"
                title="Imprimir detalle del movimiento"
            >
                <FiPrinter className="mr-2" />
                Imprimir Detalle
            </button>
            <button
                onClick={onClose}
                className="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-all duration-200 flex items-center text-sm border border-gray-300"
                title="Cerrar ventana"
            >
                Cerrar
            </button>
        </div>
    );

    return (
        <Modal
            isOpen={true}
            onClose={onClose}
            title="Detalles del Movimiento Financiero"
            footer={footerContent}
            className="animate-modalEntry"
            overlayClassName="backdrop-blur-sm"
        >
            <style jsx global>{`
                @keyframes modalEntry {
                    from {
                        opacity: 0;
                        transform: scale(0.95) translateY(-10px);
                    }
                    to {
                        opacity: 1;
                        transform: scale(1) translateY(0);
                    }
                }
                .animate-modalEntry {
                    animation: modalEntry 0.3s ease-out;
                }
            `}</style>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
                <div className="space-y-6">
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">Información General</h3>
                        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                            <IconWrapper
                                icon={FiDollarSign}
                                text={`Monto: ${formatNumber(Math.abs(finance.monto))}`}
                                color={finance.tipo === 'ingreso' ? 'text-green-600' : 'text-red-600'}
                            />
                            <IconWrapper icon={FiCalendar} text={`Fecha: ${formatDate(finance.fecha)}`} />
                            <IconWrapper icon={FiTag} text={`Tipo: ${finance.tipo.charAt(0).toUpperCase() + finance.tipo.slice(1)}`} />
            <div className="flex items-center mb-3 group">
                <FiTag className="mr-2 text-xl text-gray-700 group-hover:text-indigo-500 transition-colors duration-200" />
                <span className="text-sm flex items-center">
                    Categoría: {finance.categoria ? (
                        <span className="flex items-center ml-1">
                            <span 
                                className="w-3 h-3 rounded-full mr-1 inline-block"
                                style={{ backgroundColor: finance.categoria.color }}
                            />
                            {finance.categoria.nombre}
                        </span>
                    ) : 'No especificada'}
                </span>
            </div>
            {finance.reserva && (
                <div 
                    className="flex items-center mb-3 text-blue-600 hover:text-blue-800 transition-all duration-300 cursor-pointer group hover:scale-[1.02] active:scale-95 hover:bg-blue-50/50 p-2 rounded-lg"
                    title="Ver detalles de la reserva"
                    onClick={() => setShowReservationPreview(true)}
                >
                    <FiEye className="mr-2 text-xl group-hover:scale-125 group-hover:rotate-12 transition-all duration-300" />
                    <FiCalendar className="mr-2 text-xl group-hover:scale-110 group-hover:-rotate-12 transition-all duration-300" />
                    <span className="text-sm group-hover:translate-x-1 transition-transform duration-300">
                        Reserva: #{finance.reserva.id} - {finance.reserva.nombre_festejado}
                        <span className="text-gray-500 ml-2">
                            ({formatDate(finance.reserva.fecha_reserva)})
                        </span>
                    </span>
                </div>
            )}
            {showReservationPreview && finance.reserva && (
                <ReservationPreviewModal
                    reservation={finance.reserva}
                    onClose={() => setShowReservationPreview(false)}
                />
            )}
                        </div>
                    </div>
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">Descripción</h3>
                        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                            <p className="text-gray-700 text-sm">{finance.descripcion}</p>
                        </div>
                    </div>
                </div>
                <div className="space-y-6 overflow-y-auto max-h-[600px] pr-2">
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">Archivos Adjuntos</h3>
                        <div className="space-y-4">
                            {finance.factura_pdf && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                                        <FiFileText className="mr-2 text-indigo-600" />
                                        Factura PDF
                                    </h4>
                                    <CloudinaryFileSelector
                                        value={finance.factura_pdf}
                                        readOnly={true}
                                        icon={FiFileText}
                                        acceptTypes="application/pdf"
                                        showPreview={true}
                                    />
                                </div>
                            )}
                            
                            {finance.factura_xml && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                                        <FiCode className="mr-2 text-indigo-600" />
                                        Factura XML
                                    </h4>
                                    <CloudinaryFileSelector
                                        value={finance.factura_xml}
                                        readOnly={true}
                                        icon={FiCode}
                                        acceptTypes="application/xml"
                                        showPreview={true}
                                    />
                                </div>
                            )}
                            
                            {finance.archivo_prueba && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                                        <FiFile className="mr-2 text-indigo-600" />
                                        Archivo de Prueba
                                    </h4>
                                    <CloudinaryFileSelector
                                        value={finance.archivo_prueba}
                                        readOnly={true}
                                        icon={FiFile}
                                        acceptTypes="application/pdf,image/jpeg,image/png"
                                        showPreview={true}
                                    />
                                </div>
                            )}
                            
                            {!finance.factura_pdf && !finance.factura_xml && !finance.archivo_prueba && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <p className="text-gray-500 text-sm">No hay archivos adjuntos</p>
                                </div>
                            )}
                        </div>
                    </div>
                    {finance.comentarios && (
                        <div>
                            <h3 className="text-lg font-medium text-gray-900 mb-3">Comentarios</h3>
                        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                <p className="text-gray-700 text-sm">{finance.comentarios}</p>
                            </div>
                        </div>
                    )}
                </div>
            </div>

        </Modal>
    );
};

FinanceDetailModal.propTypes = {
    finance: PropTypes.shape({
        id: PropTypes.number.isRequired,
        descripcion: PropTypes.string.isRequired,
        monto: PropTypes.number.isRequired,
        tipo: PropTypes.oneOf(['ingreso', 'gasto']).isRequired,
        fecha: PropTypes.string.isRequired,
        categoria: PropTypes.shape({
            id: PropTypes.number,
            nombre: PropTypes.string,
            color: PropTypes.string
        }),
        reserva: PropTypes.shape({
            id: PropTypes.number,
            nombre_festejado: PropTypes.string,
            fecha_reserva: PropTypes.string,
            estado: PropTypes.string,
            hora_inicio: PropTypes.string,
            hora_fin: PropTypes.string,
            total: PropTypes.number,
            comentarios: PropTypes.string,
            edad_festejado: PropTypes.number
        }),
        factura_pdf: PropTypes.string,
        factura_xml: PropTypes.string,
        archivo_prueba: PropTypes.string,
        comentarios: PropTypes.string
    }).isRequired,
    onClose: PropTypes.func.isRequired
};

export default FinanceDetailModal;\n\n
=== ./finanzas/pages/FinanceForm.jsx ===
import React, { useState, useEffect, useRef } from 'react'
import { useForm, Controller } from 'react-hook-form'
import { toast } from 'react-toastify'
import { yupResolver } from '@hookform/resolvers/yup'
import * as yup from 'yup'
import {
  FiDollarSign,
  FiCalendar,
  FiFileText,
  FiTag,
  FiPackage,
  FiUpload,
  FiFile,
  FiPlus,
  FiMinus,
  FiX,
  FiInfo,
  FiSearch,
  FiChevronDown,
  FiSave,
  FiFileText as FiFilePdf,
  FiCode
} from 'react-icons/fi'
// Usar el alias @ para garantizar resolución correcta en Docker
import CurrencyInput from '@shared/components/CurrencyInput'
import CloudinaryFileSelector from '@shared/components/cloudinary/CloudinaryFileSelector'
import ColorPalette from '@shared/components/ColorPalette'

// Esquema de validación con Yup
const financeSchema = yup.object().shape({
  tipo: yup
    .string()
    .required('El tipo de transacción es requerido')
    .oneOf(['ingreso', 'gasto'], 'Tipo de transacción inválido'),
  monto: yup
    .string()
    .required('El monto es requerido')
    .test('is-number', 'El monto debe ser un número válido', value => !isNaN(parseFloat(value)))
    .test('is-positive', 'El monto debe ser mayor que 0', value => parseFloat(value) > 0),
  fecha: yup
    .string()
    .required('La fecha es requerida')
    .test('is-date', 'Fecha inválida', value => !isNaN(Date.parse(value))),
  id_categoria: yup
    .number()
    .nullable()
    .required('La categoría es requerida'),
  descripcion: yup
    .string()
    .nullable(),
  id_reserva: yup
    .number()
    .nullable(),
  factura_pdf: yup
    .string()
    .nullable(),
  factura_xml: yup
    .string()
    .nullable(),
  archivo_prueba: yup
    .string()
    .nullable()
})

const FinanceForm = ({
  editingItem,
  onSave,
  categories,
  onAddCategory,
  reservations = [],
  activeTab,
  currentUser // Necesitamos el usuario actual para id_usuario
}) => {
  const { register, handleSubmit, control, setValue, watch, formState: { errors } } = useForm({
    resolver: yupResolver(financeSchema),
    defaultValues: editingItem || {
      fecha: new Date().toISOString().split('T')[0],
      tipo: '',
      monto: '',
      id_categoria: null,
      id_usuario: currentUser?.id,
      factura_pdf: null,
      factura_xml: null,
      archivo_prueba: null
    }
  })

  const [showNewCategoryInput, setShowNewCategoryInput] = useState(false)
  const [newCategory, setNewCategory] = useState('')
  const [categoryColor, setCategoryColor] = useState('#FF6900')
  const [showInvoiceFields, setShowInvoiceFields] = useState(false)

  const [searchTerm, setSearchTerm] = useState('')
  const [filteredReservations, setFilteredReservations] = useState([])
  const [showSuggestions, setShowSuggestions] = useState(false)
  const [selectedReservation, setSelectedReservation] = useState(null)

  // ----------------------------------------------------------------------
  // Si el formulario está en edición, establecemos la reserva inicial (si la hay)
  // ----------------------------------------------------------------------
  useEffect(() => {
    if (editingItem && editingItem.id_reserva) {
      const found = reservations.find(r => r.id === editingItem.id_reserva)
      if (found) {
        setSelectedReservation(found)
      }
    }
  }, [editingItem, reservations])

  // ----------------------------------------------------------------------
  // Al escribir en el buscador, filtramos las reservas
  // ----------------------------------------------------------------------
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredReservations([])
      return
    }
    const term = searchTerm.toLowerCase()
    const filtered = reservations.filter(res => {
      const festejado = res.nombre_festejado?.toLowerCase() || ''
      const idString = String(res.id)
      return festejado.includes(term) || idString === term
    })
    setFilteredReservations(filtered)
  }, [searchTerm, reservations])

  // ----------------------------------------------------------------------
  // Manejador de selección de reserva en la lista de sugerencias
  // ----------------------------------------------------------------------
  const handleSelectReservation = (res) => {
    setSelectedReservation(res)
    // Asignamos el id de la reserva al form
    setValue('id_reserva', res.id)
    // Limpiamos el buscador y cerramos las sugerencias
    setSearchTerm('')
    setShowSuggestions(false)
  }

  // ----------------------------------------------------------------------
  // Manejador para quitar la reserva seleccionada
  // ----------------------------------------------------------------------
  const handleRemoveReservation = () => {
    setSelectedReservation(null)
    setValue('id_reserva', '')
  }

  const onSubmit = data => {
    try {
      if (!currentUser?.id) {
        toast.error('Error: Usuario no disponible');
        return;
      }

      const formattedData = {
        ...data,
        id_categoria: data.id_categoria,
        id_reserva: data.id_reserva || null,
        id_usuario: currentUser.id,
        monto: parseFloat(data.monto || '0'),
        // Las URLs de Cloudinary ya están en los campos
        factura_pdf: data.factura_pdf || null,
        factura_xml: data.factura_xml || null,
        archivo_prueba: data.archivo_prueba || null
      };

      // Validación adicional por seguridad
      if (isNaN(formattedData.monto) || formattedData.monto <= 0) {
        toast.error('El monto debe ser mayor que 0');
        return;
      }

      if (!formattedData.id_categoria) {
        toast.error('Debe seleccionar una categoría');
        return;
      }

      console.log('Enviando datos financieros:', formattedData);
      onSave(formattedData);
    } catch (error) {
      console.error('Error al procesar el formulario:', error);
      toast.error('Error al procesar el formulario. Por favor, revise los datos e intente nuevamente.');
    }
  }

  const handleAddCategory = () => {
    if (newCategory && !categories.find(cat => cat.nombre === newCategory)) {
      onAddCategory({ nombre: newCategory, color: categoryColor || '#000000' })
      setNewCategory('')
      setShowNewCategoryInput(false)
    }
  }

  // Asegurarnos de que id_usuario esté establecido
  useEffect(() => {
    if (currentUser?.id) {
      setValue('id_usuario', currentUser.id);
    } else {
      console.error('No hay usuario disponible');
    }
  }, [currentUser, setValue]);

  // Establecer id_usuario al montar el componente
  useEffect(() => {
    if (currentUser?.id && !watch('id_usuario')) {
      setValue('id_usuario', currentUser.id);
    }
  }, []);

  return (
    <form
      id={activeTab + 'Form'}
      onSubmit={handleSubmit(onSubmit)}
      className='flex flex-col space-y-4 max-h-[calc(100vh-200px)] overflow-y-auto px-4 py-3'
    >
      {/* Campo oculto para id_usuario */}
      <input type="hidden" {...register('id_usuario')} />
      <div className='grid grid-cols-1 lg:grid-cols-2 gap-3'>
        {/* Tipo */}
        <div>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Tipo
          </label>
          <div className='relative'>
            <FiDollarSign className='absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5 z-10 transition-colors duration-200' />
            <div className="relative">
              <select
                {...register('tipo')}
                className={`pl-10 w-full p-2.5 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white hover:border-indigo-300 transition-colors duration-200 ${
                  errors.tipo ? 'border-red-500' : ''
                }`}
              >
                <option value=''>Seleccionar tipo</option>
                <option value='ingreso'>Ingreso</option>
                <option value='gasto'>Gasto</option>
              </select>
              {errors.tipo && (
                <p className="mt-1 text-xs text-red-500">{errors.tipo.message}</p>
              )}
            </div>
          </div>
        </div>

        {/* Monto */}
        <div>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Monto
          </label>
          <Controller
            name='monto'
            control={control}
            defaultValue=""
            render={({ field: { onChange, value, ...field } }) => (
              <>
                <CurrencyInput
                  {...field}
                  value={value}
                  onChange={(e) => {
                    const numericValue = e.target.value.replace(/[^0-9.]/g, '');
                    const parsedValue = parseFloat(numericValue);
                    if (!isNaN(parsedValue)) {
                      onChange(numericValue);
                    }
                  }}
                  className={`pl-10 w-full p-2.5 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white hover:border-indigo-300 transition-colors duration-200 ${
                    errors.monto ? 'border-red-500' : ''
                  }`}
                  placeholder='Monto'
                  icon={FiDollarSign}
                />
                {errors.monto && (
                  <p className="mt-1 text-xs text-red-500">{errors.monto.message}</p>
                )}
              </>
            )}
          />
        </div>

        {/* Fecha */}
        <div>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Fecha
          </label>
          <div className='relative'>
            <FiCalendar className='absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5 z-10 transition-colors duration-200' />
            <input
              type='date'
              {...register('fecha')}
              className={`pl-10 w-full p-2.5 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white hover:border-indigo-300 transition-colors duration-200 ${
                errors.fecha ? 'border-red-500' : ''
              }`}
            />
            {errors.fecha && (
              <p className="mt-1 text-xs text-red-500">{errors.fecha.message}</p>
            )}
          </div>
        </div>

        {/* Categoría */}
        <div>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Categoría
          </label>
          <div className='relative flex items-center'>
            <FiTag className='absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5 z-10 transition-colors duration-200' />
            <select
              {...register('id_categoria', {
                setValueAs: value => value === '' ? null : parseInt(value, 10)
              })}
              className={`pl-10 w-full p-2.5 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white hover:border-indigo-300 transition-colors duration-200 ${
                errors.id_categoria ? 'border-red-500' : ''
              }`}
            >
              <option value=''>Seleccionar categoría</option>
              {categories.map(cat => (
                <option key={cat.id} value={cat.id}>
                  {cat.nombre}
                </option>
              ))}
            </select>
            {errors.id_categoria && (
              <p className="mt-1 text-xs text-red-500">{errors.id_categoria.message}</p>
            )}
            <button
              type='button'
              onClick={() => setShowNewCategoryInput(!showNewCategoryInput)}
              className='ml-2 p-2.5 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 shadow-sm transition-all duration-200 hover:shadow-md'
            >
              {showNewCategoryInput ? <FiMinus /> : <FiPlus />}
            </button>
          </div>
        </div>
      </div>

      {showNewCategoryInput && (
        <div className='mt-2 p-3 bg-gray-100 rounded-md'>
          <div className='flex items-center space-x-2 mb-2'>
            <input
              type='text'
              value={newCategory}
              onChange={e => setNewCategory(e.target.value)}
              placeholder='Nueva categoría'
              className='flex-grow p-2.5 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white hover:border-indigo-300 transition-colors duration-200'
            />
            <div
              className='w-8 h-8 rounded-full cursor-pointer'
              style={{ backgroundColor: categoryColor }}
              onClick={() => setShowColorPicker(!showColorPicker)}
            />
          </div>
          <div className='mb-2'>
            <ColorPalette 
              selectedColor={categoryColor} 
              onSelectColor={setCategoryColor} 
            />
          </div>
          <button
            type='button'
            onClick={handleAddCategory}
            className='mt-2 p-2 bg-green-500 text-white rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500'
          >
            Añadir Categoría
          </button>
        </div>
      )}

      {/* Descripción */}
      <div className='lg:col-span-2'>
        <label className='block text-sm font-medium text-gray-700 mb-1'>
          Descripción
        </label>
        <div className='relative'>
          <FiFileText className='absolute left-3 top-3 text-gray-500 w-5 h-5 z-10 transition-colors duration-200' />
          <textarea
            {...register('descripcion')}
            className='pl-10 w-full p-2.5 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white hover:border-indigo-300 transition-colors duration-200'
            rows='3'
            placeholder='Descripción'
          ></textarea>
        </div>
      </div>

      {/* ------------------------------------------------------------- */}
      {/* Buscador de Reserva Asociada (Opcional) */}
      {/* ------------------------------------------------------------- */}
      <div className='lg:col-span-2'>
        <label className='block text-sm font-medium text-gray-700 mb-1'>
          Reserva Asociada (Opcional)
        </label>
        <div className='flex items-center text-sm text-gray-500 mb-1'>
          <FiInfo className='mr-1' />
          <span>
            Seleccione la reserva si el ingreso o gasto está relacionado con una reserva. De lo contrario, déjelo en blanco.
          </span>
        </div>

        {/* Si NO tenemos reserva seleccionada, mostramos el buscador */}
        {!selectedReservation && (
          <div className='relative'>
            <FiSearch className='absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5 z-10 transition-colors duration-200' />
            <input
              type='text'
              className='pl-10 w-full p-2 border rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500'
              placeholder='Buscar reserva por ID o nombre del festejado...'
              value={searchTerm}
              onChange={e => {
                setSearchTerm(e.target.value)
                setShowSuggestions(true)
              }}
            />

            {/* Lista de sugerencias */}
            {showSuggestions && filteredReservations.length > 0 && (
              <ul className='absolute z-10 mt-1 bg-white border border-gray-200 rounded-md w-full max-h-60 overflow-auto shadow-lg'>
                {filteredReservations.map(res => (
                  <li
                    key={res.id}
              className='px-4 py-2.5 cursor-pointer hover:bg-indigo-50 transition-colors duration-200'
                    onClick={() => handleSelectReservation(res)}
                  >
                    {`Reserva #${res.id} - ${res.nombre_festejado}`}
                  </li>
                ))}
              </ul>
            )}

            {/* Registramos un input oculto para id_reserva */}
            <input
              type='hidden'
              {...register('id_reserva')}
            />
          </div>
        )}

        {/* Si SÍ tenemos reserva seleccionada, mostramos el "chip" con opción de quitar */}
        {selectedReservation && (
          <div className='flex items-center bg-gray-50 p-2.5 rounded-lg border mt-2 hover:bg-gray-100 transition-colors duration-200'>
            <div className='flex-1 text-sm text-gray-700'>
              <strong>Reserva #{selectedReservation.id}</strong> - {selectedReservation.nombre_festejado}
            </div>
            <button
              type='button'
              className='p-1 text-gray-500 hover:text-gray-700'
              onClick={handleRemoveReservation}
            >
              <FiX className='w-4 h-4' />
            </button>
          </div>
        )}
      </div>
      {/* ------------------------------------------------------------- */}

      {/* Botón para mostrar/ocultar facturas */}
      <div className='lg:col-span-2'>
        <button
          type='button'
          onClick={() => setShowInvoiceFields(!showInvoiceFields)}
          className='w-full p-2 flex items-center text-gray-700 hover:text-gray-900 transition-colors duration-200'
        >
          <div className='flex-1 flex items-center'>
            <div className={`w-6 h-6 rounded-full flex items-center justify-center mr-2 transition-colors duration-200 ${
              showInvoiceFields ? 'bg-indigo-100 text-indigo-600' : 'bg-gray-100'
            }`}>
              <FiFile className='w-4 h-4' />
            </div>
            <span className='font-medium'>
              {showInvoiceFields ? 'Ocultar facturas' : 'Agregar facturas'}
            </span>
          </div>
          <FiChevronDown 
            className={`w-5 h-5 transform transition-transform duration-200 ${
              showInvoiceFields ? 'rotate-180 text-indigo-600' : 'text-gray-400'
            }`}
          />
        </button>
      </div>

      {/* Sección de facturas con animación suave y scroll */}
      <div 
        className={`space-y-4 transition-all duration-700 ease-in-out transform origin-top ${
          showInvoiceFields 
            ? 'opacity-100 max-h-[800px] mb-4 scale-y-100' 
            : 'opacity-0 max-h-0 mb-0 scale-y-95 overflow-hidden'
        }`}
      >
        <div className='lg:col-span-2 space-y-4'>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Factura PDF
          </label>
          <Controller
            name="factura_pdf"
            control={control}
            defaultValue=""
            render={({ field }) => (
              <CloudinaryFileSelector
                value={field.value}
                onChange={field.onChange}
                placeholder="Selecciona o sube un archivo PDF"
                acceptTypes="application/pdf"
                label="Factura PDF"
                icon={FiFilePdf}
              />
            )}
          />
        </div>

        {/* Factura XML */}
        <div className='lg:col-span-2'>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Factura XML
          </label>
          <Controller
            name="factura_xml"
            control={control}
            defaultValue=""
            render={({ field }) => (
              <CloudinaryFileSelector
                value={field.value}
                onChange={field.onChange}
                placeholder="Selecciona o sube un archivo XML"
                acceptTypes="application/xml,text/xml"
                label="Factura XML"
                icon={FiCode}
              />
            )}
          />
        </div>

        {/* Archivo de prueba */}
        <div className='lg:col-span-2'>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Archivo de Prueba (Opcional - PNG, JPG o PDF)
          </label>
          <Controller
            name="archivo_prueba"
            control={control}
            defaultValue=""
            render={({ field }) => (
              <CloudinaryFileSelector
                value={field.value}
                onChange={field.onChange}
                placeholder="Selecciona o sube un archivo (PNG, JPG o PDF)"
                acceptTypes="image/png,image/jpeg,application/pdf"
                label="Archivo de Prueba"
                icon={FiFile}
              />
            )}
          />
        </div>
      </div>

      {/* Botón de guardar */}
      <div className="mt-6 flex justify-end">
        <button
          type="submit"
          className="flex items-center px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors duration-200"
        >
          <FiSave className="mr-2" />
          Guardar
        </button>
      </div>
    </form>
  )
}

export default FinanceForm
\n\n
=== ./finanzas/pages/FinanceTable.jsx ===
import React, { useMemo } from 'react';
import { FiEdit2, FiTrash2, FiEye, FiFileText, FiFile } from 'react-icons/fi';
import PropTypes from 'prop-types';
// Usar el alias @ para garantizar resolución correcta en Docker
import { formatDate, formatNumber } from '@shared/utils/formatters';

const FinanceTable = ({ 
    finances, 
    handleEditItem, 
    handleDeleteItem, 
    handleViewDetails, 
    categories,  
    generateMonthlyReport 
}) => {
    const getCategoryColor = (finance) => {
        return finance.categoria ? finance.categoria.color : '#CCCCCC';
    };
    
    const getCategoryName = (finance) => {
        return finance.categoria ? finance.categoria.nombre : 'Sin categoría';
    };

    // Filtramos las finanzas activas
    const activeFinances = useMemo(() => {
        return finances.filter(finance => finance.activo);
    }, [finances]);

    const monthlyTotal = useMemo(() => {
        return activeFinances.reduce((total, finance) => {
            return total + (finance.tipo === 'ingreso' ? finance.monto : -finance.monto);
        }, 0);
    }, [activeFinances]);

    return (
        <div className="overflow-x-auto">
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold">
                    Total del mes: {formatNumber(monthlyTotal)}
                </h3>
                <button
                    onClick={generateMonthlyReport}
                    className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded inline-flex items-center"
                >
                    <FiFileText className="mr-2" />
                    Generar Informe
                </button>
            </div>

            <table className="w-full min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Descripción
                    </th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Monto
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Fecha
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Categoría
                    </th>
                    <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Archivo
                    </th>
                    <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Acciones
                    </th>
                </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                {activeFinances.map((finance) => (
                    <tr key={finance.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm font-medium text-gray-900">{finance.descripcion}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right">
                            <div className={`text-sm font-medium ${finance.tipo === 'ingreso' ? 'text-green-600' : 'text-red-600'}`}>
                                {finance.tipo === 'ingreso' ? '+' : '-'}
                                {formatNumber(Math.abs(finance.monto))}
                            </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-gray-900">{formatDate(finance.fecha)}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                            <span
                                className="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full"
                                style={{
                                    backgroundColor: getCategoryColor(finance),
                                    color: '#FFFFFF'
                                }}
                            >
                                {getCategoryName(finance)}
                            </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-center">
                            {finance.factura_pdf || finance.factura_xml || finance.archivo_prueba ? (
                                <button
                                    onClick={() => handleViewDetails(finance)}
                                    className="text-indigo-600 hover:text-indigo-900"
                                    title="Ver archivos"
                                >
                                    <FiFile className="h-5 w-5" />
                                </button>
                            ) : (
                                <span className="text-gray-400">N/A</span>
                            )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                            <button
                                onClick={() => handleViewDetails(finance)}
                                className="text-green-600 hover:text-green-900 mr-2"
                                title="Ver detalles"
                            >
                                <FiEye className="h-5 w-5" />
                            </button>
                            <button
                                onClick={() => handleEditItem(finance)}
                                className="text-indigo-600 hover:text-indigo-900 mr-2"
                                title="Editar"
                            >
                                <FiEdit2 className="h-5 w-5" />
                            </button>
                            <button
                                onClick={() => handleDeleteItem(finance.id)}
                                className="text-red-600 hover:text-red-900"
                                title="Eliminar"
                            >
                                <FiTrash2 className="h-5 w-5" />
                            </button>
                        </td>
                    </tr>
                ))}
                </tbody>
            </table>
        </div>
    );
};

FinanceTable.propTypes = {
    finances: PropTypes.arrayOf(PropTypes.shape({
        id: PropTypes.number.isRequired,
        descripcion: PropTypes.string.isRequired,
        monto: PropTypes.number.isRequired,
        tipo: PropTypes.oneOf(['ingreso', 'gasto']).isRequired,
        fecha: PropTypes.string.isRequired,
        categoria: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        factura_pdf: PropTypes.string,
        factura_xml: PropTypes.string,
        archivo_prueba: PropTypes.string,
        activo: PropTypes.bool.isRequired
    })).isRequired,
    handleEditItem: PropTypes.func.isRequired,
    handleDeleteItem: PropTypes.func.isRequired,
    handleViewDetails: PropTypes.func.isRequired,
    categories: PropTypes.arrayOf(PropTypes.shape({
        id: PropTypes.number.isRequired,
        nombre: PropTypes.string.isRequired,
        color: PropTypes.string.isRequired,
    })).isRequired,
    generateMonthlyReport: PropTypes.func.isRequired,
};

export default FinanceTable;\n\n
=== ./finanzas/pages/FinancialSummary.jsx ===
import React, { useState, useMemo, useEffect } from 'react';
import { motion } from 'framer-motion';
import { FiPieChart, FiBarChart, FiChevronDown, FiChevronUp } from 'react-icons/fi';
import { Bar, Pie } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend);

// Función para formatear moneda de manera compacta en dispositivos móviles
const formatCompactCurrency = (value) => {
    if (value >= 1000000) {
        return '$' + (value / 1000000).toFixed(1) + 'M';
    }
    if (value >= 1000) {
        return '$' + (value / 1000).toFixed(1) + 'k';
    }
    return '$' + value.toFixed(2);
};

const FinancialSummary = ({ finances, filterDataByMonth, categories }) => {
    const [chartType, setChartType] = useState('bar');
    const [selectedCategories, setSelectedCategories] = useState([]);
    const [showCategoryMenu, setShowCategoryMenu] = useState(false);

    const filteredFinances = useMemo(() => filterDataByMonth(finances, 'fecha'), [finances, filterDataByMonth]);

    const categoryMap = useMemo(() => {
        return categories.reduce((acc, cat) => {
            acc[cat.id] = cat.nombre;
            return acc;
        }, {});
    }, [categories]);

    const categoryData = useMemo(() => {
        const cats = {};
        filteredFinances.forEach(f => {
            const categoryName = f.categoria ? f.categoria.nombre : 'Sin categoría';
            if (!cats[categoryName]) {
                cats[categoryName] = { ingreso: 0, gasto: 0 };
            }
            cats[categoryName][f.tipo] += f.monto;
        });
        return cats;
    }, [filteredFinances]);

    useEffect(() => {
        setSelectedCategories(Object.keys(categoryData));
    }, [categoryData]);

    const chartData = useMemo(() => {
        const labels = Object.keys(categoryData).filter(cat => selectedCategories.includes(cat));
        const incomeData = labels.map(cat => categoryData[cat].ingreso);
        const expenseData = labels.map(cat => categoryData[cat].gasto);

        if (chartType === 'pie') {
            return {
                labels: [...labels.map(l => `${l} (Ingresos)`), ...labels.map(l => `${l} (Gastos)`)],
                datasets: [
                    {
                        data: [...incomeData, ...expenseData],
                        backgroundColor: [
                            ...labels.map(() => `rgba(54, 162, 235, ${Math.random() * 0.5 + 0.3})`),
                            ...labels.map(() => `rgba(255, 99, 132, ${Math.random() * 0.5 + 0.3})`)
                        ],
                    }
                ],
            };
        }

        return {
            labels,
            datasets: [
                {
                    label: 'Ingresos',
                    data: incomeData,
                    backgroundColor: 'rgba(54, 162, 235, 0.6)',
                },
                {
                    label: 'Gastos',
                    data: expenseData,
                    backgroundColor: 'rgba(255, 99, 132, 0.6)',
                }
            ],
        };
    }, [categoryData, selectedCategories, chartType]);

    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false, // Permite que el gráfico se ajuste al contenedor
        plugins: {
            legend: {
                position: window.innerWidth < 768 ? 'bottom' : 'top', // Leyenda abajo en móviles
                labels: {
                    boxWidth: window.innerWidth < 768 ? 12 : 40, // Cajas más pequeñas en móviles
                    font: {
                        size: window.innerWidth < 768 ? 10 : 12 // Fuente más pequeña en móviles
                    }
                }
            },
            title: {
                display: false, // Ocultar el título del gráfico ya que lo mostramos fuera
            },
            tooltip: {
                callbacks: {
                    label: function(context) {
                        let label = context.label || '';
                        if (label) {
                            label += ': ';
                        }
                        if (context.parsed.y !== null) {
                            label += new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(context.parsed.y || context.parsed);
                        }
                        return label;
                    }
                }
            }
        },
        scales: chartType === 'bar' ? {
            x: {
                ticks: {
                    autoSkip: true, // Permitir saltar etiquetas si no hay espacio
                    maxRotation: window.innerWidth < 768 ? 45 : 90, // Menor rotación en móviles
                    minRotation: 0,
                    font: {
                        size: window.innerWidth < 768 ? 8 : 11 // Fuente más pequeña en móviles
                    }
                }
            },
            y: {
                beginAtZero: true,
                ticks: {
                    callback: function(value) {
                        // Formato abreviado para móviles
                        if (window.innerWidth < 768) {
                            if (value >= 1000) {
                                return '$' + (value / 1000).toFixed(1) + 'k';
                            }
                            return '$' + value;
                        }
                        return new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(value);
                    },
                    font: {
                        size: window.innerWidth < 768 ? 8 : 11 // Fuente más pequeña en móviles
                    }
                },
            },
        } : undefined,
    };

    const renderChart = () => {
        const ChartComponent = chartType === 'bar' ? Bar : Pie;
        return <ChartComponent data={chartData} options={chartOptions} />;
    };

    const handleCategoryChange = (category) => {
        setSelectedCategories(prev => 
            prev.includes(category)
                ? prev.filter(c => c !== category)
                : [...prev, category]
        );
    };

    return (
        <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="h-full"
        >
            {/* Header con gradiente */}
            <div className="bg-gradient-to-r from-purple-600 to-indigo-600 p-6 rounded-t-xl">
                <div className="flex items-center justify-between">
                    <h2 className="text-xl font-semibold text-white">Finanzas</h2>
                    <div className="p-2 rounded-full bg-white/20 text-white">
                        <button
                            onClick={() => setChartType(chartType === 'bar' ? 'pie' : 'bar')}
                            className="w-8 h-8 flex items-center justify-center rounded-full hover:bg-white/20 transition-all duration-300"
                            title={`Cambiar a gráfico de ${chartType === 'bar' ? 'pastel' : 'barras'}`}
                        >
                            {chartType === 'bar' ? <FiPieChart className="w-5 h-5" /> : <FiBarChart className="w-5 h-5" />}
                        </button>
                    </div>
                </div>
            </div>
            
            {/* Contenido */}
            <div className="p-4 md:p-6 bg-white">
                {/* Tarjetas de resumen */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-6 mb-6">
                    <div className="bg-white rounded-lg p-3 md:p-4 shadow-sm border border-gray-100 text-center">
                        <div className="mx-auto w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-full bg-blue-100 text-blue-600 mb-2 md:mb-3">
                            <svg xmlns="http://www.w3.org/2000/svg" className="w-4 h-4 md:w-5 md:h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <polyline points="22 7 13.5 15.5 8.5 10.5 2 17"></polyline>
                                <polyline points="16 7 22 7 22 13"></polyline>
                            </svg>
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className="text-base md:text-xl font-bold text-gray-800">
                                {window.innerWidth < 768
                                    ? formatCompactCurrency(filteredFinances.reduce((sum, f) => f.tipo === 'ingreso' ? sum + f.monto : sum, 0))
                                    : new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(
                                        filteredFinances.reduce((sum, f) => f.tipo === 'ingreso' ? sum + f.monto : sum, 0)
                                    )
                                }
                            </p>
                            <p className="text-xs md:text-sm font-medium text-gray-600 text-center">Ingresos</p>
                        </div>
                    </div>
                    <div className="bg-white rounded-lg p-3 md:p-4 shadow-sm border border-gray-100 text-center">
                        <div className="mx-auto w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-full bg-red-100 text-red-600 mb-2 md:mb-3">
                            <svg xmlns="http://www.w3.org/2000/svg" className="w-4 h-4 md:w-5 md:h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <polyline points="22 17 13.5 8.5 8.5 13.5 2 7"></polyline>
                                <polyline points="16 17 22 17 22 11"></polyline>
                            </svg>
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className="text-base md:text-xl font-bold text-gray-800">
                                {window.innerWidth < 768
                                    ? formatCompactCurrency(filteredFinances.reduce((sum, f) => f.tipo === 'gasto' ? sum + f.monto : sum, 0))
                                    : new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(
                                        filteredFinances.reduce((sum, f) => f.tipo === 'gasto' ? sum + f.monto : sum, 0)
                                    )
                                }
                            </p>
                            <p className="text-xs md:text-sm font-medium text-gray-600 text-center">Gastos</p>
                        </div>
                    </div>
                </div>

                {/* Selector de categorías */}
                <div className="mb-4 md:mb-6">
                    <button
                        onClick={() => setShowCategoryMenu(!showCategoryMenu)}
                        className="flex items-center justify-between w-full p-2 md:p-3 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-all duration-300"
                    >
                        <div className="flex items-center">
                            <div className="w-6 h-6 md:w-8 md:h-8 flex items-center justify-center rounded-full bg-purple-100 text-purple-600 mr-2 md:mr-3">
                                <svg xmlns="http://www.w3.org/2000/svg" className="w-3 h-3 md:w-4 md:h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <path d="M3 6h18"></path>
                                    <path d="M3 12h18"></path>
                                    <path d="M3 18h18"></path>
                                </svg>
                            </div>
                            <span className="text-sm md:text-base font-medium text-gray-700">Seleccionar Categorías</span>
                        </div>
                        <div className="w-5 h-5 md:w-6 md:h-6 flex items-center justify-center rounded-full bg-purple-100 text-purple-600">
                            {showCategoryMenu ? <FiChevronUp className="w-3 h-3 md:w-4 md:h-4" /> : <FiChevronDown className="w-3 h-3 md:w-4 md:h-4" />}
                        </div>
                    </button>
                    
                    {showCategoryMenu && (
                        <motion.div
                            initial={{ opacity: 0, y: -10, height: 0 }}
                            animate={{ opacity: 1, y: 0, height: 'auto' }}
                            exit={{ opacity: 0, y: -10, height: 0 }}
                            transition={{ duration: 0.3, ease: "easeInOut" }}
                            className="mt-2 md:mt-3 p-3 md:p-4 border border-gray-200 rounded-lg shadow-sm bg-white overflow-hidden"
                        >
                            <div className="flex flex-wrap gap-1 md:gap-2">
                                {Object.keys(categoryData).map(category => (
                                    <button
                                        key={category}
                                        onClick={() => handleCategoryChange(category)}
                                        className={`px-2 py-1 md:px-3 md:py-2 rounded-lg text-xs md:text-sm font-medium transition-all duration-200 ${
                                            selectedCategories.includes(category)
                                                ? 'bg-purple-100 text-purple-700 shadow-sm'
                                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                        }`}
                                    >
                                        {category}
                                    </button>
                                ))}
                            </div>
                        </motion.div>
                    )}
                </div>
                
                {/* Gráfico */}
                <div className="bg-white rounded-lg p-3 md:p-4 shadow-sm border border-gray-200">
                    <h3 className="text-base md:text-lg font-semibold text-gray-700 mb-2 md:mb-4 text-center">Resumen por Categorías</h3>
                    <div className="h-[250px] md:h-[300px] lg:h-[350px]">
                        {renderChart()}
                    </div>
                </div>
            </div>
        </motion.div>
    );
};

export default FinancialSummary;\n\n
=== ./finanzas/pages/MonthlyReportModal.jsx ===
import React, { useRef, useEffect } from 'react';
import { Bar } from 'react-chartjs-2';
import { FiTrendingUp, FiTrendingDown, FiPrinter, FiDownload, FiX } from 'react-icons/fi';
// Usar el alias @ para garantizar resolución correcta en Docker
import { formatNumber } from '@shared/utils/formatters';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

const MonthlyReportModal = ({ isOpen, onClose, finances, categories, selectedMonth, selectedYear }) => {
    const reportRef = useRef(null);

    // Add event listener for escape key
    useEffect(() => {
        const handleEscKey = (event) => {
            if (event.key === 'Escape') {
                onClose();
            }
        };

        // Add event listener
        document.addEventListener('keydown', handleEscKey);

        // Cleanup function
        return () => {
            document.removeEventListener('keydown', handleEscKey);
        };
    }, [onClose]);

    if (!isOpen) return null;

    // Filtrar finanzas del mes actual
    const currentMonthFinances = finances.filter(finance => {
        const financeDate = new Date(finance.fecha);
        return financeDate.getMonth() === selectedMonth && 
               financeDate.getFullYear() === selectedYear;
    });

    // Calcular mes anterior
    const previousMonth = selectedMonth === 0 ? 11 : selectedMonth - 1;
    const previousYear = selectedMonth === 0 ? selectedYear - 1 : selectedYear;

    // Filtrar finanzas del mes anterior
    const previousMonthFinances = finances.filter(finance => {
        const financeDate = new Date(finance.fecha);
        return financeDate.getMonth() === previousMonth && 
               financeDate.getFullYear() === previousYear;
    });

    const categoryTotals = currentMonthFinances.reduce((acc, finance) => {
        const categoryName = finance.categoria?.nombre || 'Sin categoría';
        if (!acc[categoryName]) {
            acc[categoryName] = { ingreso: 0, gasto: 0 };
        }
        acc[categoryName][finance.tipo] += finance.monto;
        return acc;
    }, {});

    const chartData = {
        labels: Object.keys(categoryTotals),
        datasets: [
            {
                label: 'Ingresos',
                data: Object.values(categoryTotals).map(cat => cat.ingreso),
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
            },
            {
                label: 'Gastos',
                data: Object.values(categoryTotals).map(cat => cat.gasto),
                backgroundColor: 'rgba(255, 99, 132, 0.6)',
            }
        ]
    };

    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            y: {
                beginAtZero: true,
                ticks: {
                    callback: function(value) {
                        return formatNumber(value);
                    },
                },
            },
        },
    };

    // Calcular totales del mes anterior
    const previousMonthIngresos = previousMonthFinances.reduce((sum, f) => f.tipo === 'ingreso' ? sum + f.monto : sum, 0);
    const previousMonthGastos = previousMonthFinances.reduce((sum, f) => f.tipo === 'gasto' ? sum + f.monto : sum, 0);
    const previousMonthBalance = previousMonthIngresos - previousMonthGastos;

    // Calcular totales del mes actual
    const totalIngresos = currentMonthFinances.reduce((sum, f) => f.tipo === 'ingreso' ? sum + f.monto : sum, 0);
    const totalGastos = currentMonthFinances.reduce((sum, f) => f.tipo === 'gasto' ? sum + f.monto : sum, 0);
    const balance = totalIngresos - totalGastos;

    // Calcular diferencia porcentual
    const balanceChange = previousMonthBalance !== 0 
        ? ((balance - previousMonthBalance) / Math.abs(previousMonthBalance)) * 100 
        : balance > 0 ? 100 : balance < 0 ? -100 : 0;

    const handlePrint = () => {
        const printContent = document.getElementById('monthly-report');
        const winPrint = window.open('', '', 'left=0,top=0,width=800,height=900,toolbar=0,scrollbars=0,status=0');
        winPrint.document.write(`
            <html>
                <head>
                    <title>Informe Mensual</title>
                    <style>
                        body { font-family: Arial, sans-serif; }
                        .page-break { page-break-after: always; }
                        table { width: 100%; border-collapse: collapse; }
                        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                        th { background-color: #f2f2f2; }
                    </style>
                </head>
                <body>
                    ${printContent.innerHTML}
                </body>
            </html>
        `);
        winPrint.document.close();
        winPrint.focus();
        winPrint.print();
        winPrint.close();
    };

    const handleExportPDF = () => {
        const input = document.getElementById('monthly-report');
        html2canvas(input, { scale: 2 }).then((canvas) => {
            const imgData = canvas.toDataURL('image/png');
            const pdf = new jsPDF('p', 'mm', 'a4');
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();
            const imgWidth = canvas.width;
            const imgHeight = canvas.height;
            const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
            const imgX = (pdfWidth - imgWidth * ratio) / 2;
            const imgY = 30;
            pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);
            pdf.save("informe_mensual.pdf");
        });
    };

    return (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center z-50">
            <div className="bg-white p-8 rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto relative">
                <button
                    onClick={onClose}
                    className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
                >
                    <FiX size={24} />
                </button>
                <div id="monthly-report" ref={reportRef}>
                    <h2 className="text-2xl font-bold mb-4">Informe Mensual de Finanzas</h2>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                        <div className="bg-blue-100 p-4 rounded-lg">
                            <h3 className="text-lg font-semibold mb-2">Ingresos</h3>
                            <p className="text-2xl text-blue-600">{formatNumber(totalIngresos)}</p>
                        </div>
                        <div className="bg-red-100 p-4 rounded-lg">
                            <h3 className="text-lg font-semibold mb-2">Gastos</h3>
                            <p className="text-2xl text-red-600">{formatNumber(totalGastos)}</p>
                        </div>
                        <div className={`p-4 rounded-lg ${balance >= 0 ? 'bg-green-100' : 'bg-yellow-100'}`}>
                            <h3 className="text-lg font-semibold mb-2">Balance</h3>
                            <p className={`text-2xl ${balance >= 0 ? 'text-green-600' : 'text-yellow-600'}`}>
                                {formatNumber(balance)}
                            </p>
                        </div>
                    </div>
                    <div className="mb-6">
                        <h3 className="text-xl font-semibold mb-4">Análisis</h3>
                        <div className="space-y-4">
                            {/* Mes Actual */}
                            <div className="flex items-center">
                                {balance >= 0 ? (
                                    <FiTrendingUp className="text-green-500 text-4xl mr-2" />
                                ) : (
                                    <FiTrendingDown className="text-red-500 text-4xl mr-2" />
                                )}
                                <p className="text-lg">
                                    {balance >= 0
                                        ? `Ganancia de ${formatNumber(balance)}`
                                        : `Pérdida de ${formatNumber(Math.abs(balance))}`}
                                </p>
                            </div>

                            {/* Comparación con Mes Anterior */}
                            <div className="bg-gray-50 p-4 rounded-lg">
                                <h4 className="text-md font-medium mb-2">Comparación con Mes Anterior</h4>
                                <div className="grid grid-cols-2 gap-4">
                                    <div>
                                        <p className="text-sm text-gray-600">Balance Mes Anterior:</p>
                                        <p className={`text-lg font-medium ${previousMonthBalance >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                                            {formatNumber(previousMonthBalance)}
                                        </p>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-600">Cambio Porcentual:</p>
                                        <div className="flex items-center">
                                            {balanceChange > 0 ? (
                                                <FiTrendingUp className="text-green-500 mr-1" />
                                            ) : balanceChange < 0 ? (
                                                <FiTrendingDown className="text-red-500 mr-1" />
                                            ) : (
                                                <span className="text-gray-500 mr-1">=</span>
                                            )}
                                            <p className={`text-lg font-medium ${
                                                balanceChange > 0 ? 'text-green-600' : 
                                                balanceChange < 0 ? 'text-red-600' : 
                                                'text-gray-600'
                                            }`}>
                                                {balanceChange.toFixed(1)}%
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="mb-6">
                        <h3 className="text-xl font-semibold mb-2">Resumen por Categorías</h3>
                        <div style={{ height: '300px' }}>
                            <Bar data={chartData} options={chartOptions} />
                        </div>
                    </div>
                </div>
                <div className="flex justify-end space-x-2 mt-4">
                    <button
                        onClick={handlePrint}
                        className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded inline-flex items-center"
                    >
                        <FiPrinter className="mr-2" />
                        Imprimir
                    </button>
                    <button
                        onClick={handleExportPDF}
                        className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded inline-flex items-center"
                    >
                        <FiDownload className="mr-2" />
                        Exportar PDF
                    </button>
                </div>
            </div>
        </div>
    );
};

export default MonthlyReportModal;\n\n
=== ./finanzas/pages/index.js ===
// Exportar todos los componentes de finanzas/pages
// src\domains\finanzas\pages\index.js
export * from './payment';\n\n
=== ./finanzas/pages/payment/PaymentDetails.jsx ===
import React from 'react';
// Usar el alias @ para garantizar resolución correcta en Docker
import { formatDate, formatNumber } from '@/utils/formatters';

const PaymentDetails = ({ payment }) => {
  return (
    <div className='space-y-4'>
      <div>
        <h3 className='text-lg font-medium'>ID de Reserva:</h3>
        <p>{payment.id_reserva}</p>
      </div>
      <div>
        <h3 className='text-lg font-medium'>Monto:</h3>
        <p>{formatNumber(payment.monto)}</p>
      </div>
      <div>
        <h3 className='text-lg font-medium'>Fecha de Pago:</h3>
        <p>{formatDate(payment.fecha_pago)}</p>
      </div>
      <div>
        <h3 className='text-lg font-medium'>Método de Pago:</h3>
        <p>{payment.metodo_pago}</p>
      </div>

    
            
    </div>
  );
};

export default PaymentDetails;
\n\n
=== ./finanzas/pages/payment/PaymentForm.jsx ===
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { toast } from 'react-hot-toast';
import { 
  FiDollarSign, 
  FiCalendar, 
  FiCreditCard, 
  FiMapPin, 
  FiCheckCircle, 
  FiSearch 
} from 'react-icons/fi';

// Componente para mostrar un campo de información
const InfoField = ({ icon: Icon, label, value }) => (
  <div className="mb-4">
    <label className="block text-sm font-medium text-gray-500 mb-1">
      <div className="flex items-center">
        <Icon className="mr-2 text-gray-400" />
        {label}
      </div>
    </label>
    <div className="mt-1 p-2 bg-gray-50 rounded-md">
      <span className="text-gray-900">{value}</span>
    </div>
  </div>
);

// Componente principal del formulario de pago
export const PaymentForm = ({
  payment,
  onUpdateStatus,
  reservations = [],
  onSave
}) => {
  const isEditing = !!payment;

  const [formData, setFormData] = useState({
    id_reserva: payment ? payment.id_reserva : '',
    monto: payment ? payment.monto : '',
    fecha_pago: payment ? payment.fecha_pago : new Date().toISOString().split('T')[0],
    metodo_pago: payment ? payment.metodo_pago : '',
    estado: payment ? payment.estado : 'pendiente',
  });

  // Estado para manejar la búsqueda y las reservas filtradas
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredReservations, setFilteredReservations] = useState(reservations);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [reservationPayments, setReservationPayments] = useState({ total: 0, completed: 0 });


  // Efecto para filtrar reservas
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredReservations(reservations);
    } else {
      const filtered = reservations.filter((res) => {
        const nombreFestejado = res.nombre_festejado?.toLowerCase() || '';
        const nombreUsuario = res.usuario?.nombre?.toLowerCase() || '';
        const term = searchTerm.toLowerCase();
        return (
          nombreFestejado.includes(term) ||
          nombreUsuario.includes(term) ||
          res.id.toString() === term
        );
      });
      setFilteredReservations(filtered);
    }
  }, [searchTerm, reservations]);

  // Efecto para cargar los pagos de la reserva seleccionada
  useEffect(() => {
    const fetchReservationPayments = async () => {
      if (formData.id_reserva) {
        try {
          const response = await fetch(`/api/pagos/reserva/${formData.id_reserva}`);
          const data = await response.json();
          const reservation = reservations.find(r => r.id === formData.id_reserva);
          
          if (reservation) {
            const completedPayments = data.reduce((sum, pago) => 
              pago.estado === 'completado' ? sum + parseFloat(pago.monto) : sum, 0
            );
            
            setReservationPayments({
              total: parseFloat(reservation.total),
              completed: completedPayments
            });
            
            // Actualizar el monto al restante por pagar
            const remaining = parseFloat(reservation.total) - completedPayments;
            setFormData(prev => ({
              ...prev,
              monto: remaining.toFixed(2)
            }));
          }
        } catch (error) {
          console.error('Error al cargar los pagos:', error);
        }
      }
    };

    fetchReservationPayments();
  }, [formData.id_reserva, reservations]);

  const getStatusColor = (status) => {
    switch (status) {
      case 'completado':
        return 'bg-green-100 text-green-800';
      case 'pendiente':
        return 'bg-yellow-100 text-yellow-800';
      case 'fallido':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getReservationInfo = (id) => {
    const reservation = reservations.find(r => r.id === id);
    return reservation 
      ? `#${reservation.id} - ${reservation.nombre_festejado || reservation.usuario?.nombre || 'Sin nombre'}`
      : 'No encontrada';
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === 'monto') {
      const monto = parseFloat(value);
      const remaining = reservationPayments.total - reservationPayments.completed;
      
      if (monto > remaining) {
        toast.error(`El monto máximo permitido es ${remaining.toFixed(2)}`);
        return;
      }
    }
    setFormData({ ...formData, [name]: value });
  };

  // Manejador para seleccionar una reserva del "autocompletado"
  const handleSelectReservation = (res) => {
    setSelectedReservation(res);
    setFormData({ 
      ...formData, 
      id_reserva: res.id,
      monto: '' // Se actualizará en el useEffect
    });
    setSearchTerm(res.nombre_festejado || res.usuario?.nombre || `Reserva #${res.id}`);
    setShowSuggestions(false);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (onSave) {
      // Asegurar que el estado sea 'completado' al crear
      const paymentData = {
        ...formData,
        estado: 'completado'
      };
      onSave(paymentData);
    }
  };

  if (!isEditing) {
    // Formulario para crear un nuevo pago
    return (
      <form onSubmit={handleSubmit} id="paymentsForm">
        <div className="space-y-6 p-6 bg-white rounded-lg">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Campo de Reserva (Ahora con buscador) */}
            <div className="mb-4 relative">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <div className="flex items-center">
                  <FiMapPin className="mr-2 text-gray-400" />
                  Buscar Reserva
                </div>
              </label>

              <div className="flex items-center bg-gray-50 rounded-md p-2">
                <FiSearch className="mr-2 text-gray-400" />
                <input
                  type="text"
                  placeholder="Buscar por nombre, festejado o ID..."
                  value={searchTerm}
                  onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setShowSuggestions(true);
                  }}
                  className="bg-transparent w-full focus:outline-none"
                />
              </div>

              {/* Lista desplegable de sugerencias */}
              {showSuggestions && filteredReservations.length > 0 && (
                <ul className="absolute z-10 mt-1 bg-white border border-gray-200 rounded-md w-full max-h-60 overflow-auto shadow-lg">
                  {filteredReservations.map((res) => {
                    const displayName =
                      res.nombre_festejado ||
                      res.usuario?.nombre ||
                      `Reserva #${res.id}`;
                    return (
                      <li
                        key={res.id}
                        className="px-4 py-2 cursor-pointer hover:bg-gray-100"
                        onClick={() => handleSelectReservation(res)}
                      >
                        #{res.id} - {displayName}
                      </li>
                    );
                  })}
                </ul>
              )}
            </div>

            {/* Información de la Reserva */}
            {selectedReservation && (
              <div className="col-span-2 mb-4 p-4 bg-gray-50 rounded-lg">
                <h3 className="text-lg font-medium text-gray-900 mb-2">Información de Pagos</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600">Total de la Reserva:</p>
                    <p className="text-lg font-semibold text-gray-900">
                      ${reservationPayments.total.toFixed(2)}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Pagado hasta ahora:</p>
                    <p className="text-lg font-semibold text-gray-900">
                      ${reservationPayments.completed.toFixed(2)}
                    </p>
                  </div>
                  <div className="col-span-2">
                    <p className="text-sm text-gray-600">Restante por pagar:</p>
                    <p className="text-lg font-semibold text-indigo-600">
                      ${(reservationPayments.total - reservationPayments.completed).toFixed(2)}
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Campo de Monto */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <div className="flex items-center">
                  <FiDollarSign className="mr-2 text-gray-400" />
                  Monto a Pagar
                </div>
              </label>
              <input
                type="number"
                name="monto"
                value={formData.monto}
                onChange={handleChange}
                className="mt-1 p-2 bg-gray-50 rounded-md w-full"
                required
                max={reservationPayments.total - reservationPayments.completed}
                step="0.01"
              />
              {selectedReservation && (
                <p className="text-sm text-gray-500 mt-1">
                  Monto máximo: ${(reservationPayments.total - reservationPayments.completed).toFixed(2)}
                </p>
              )}
            </div>

            {/* Campo de Fecha de Pago */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <div className="flex items-center">
                  <FiCalendar className="mr-2 text-gray-400" />
                  Fecha de Pago
                </div>
              </label>
              <input
                type="date"
                name="fecha_pago"
                value={formData.fecha_pago}
                onChange={handleChange}
                className="mt-1 p-2 bg-gray-50 rounded-md w-full"
                required
              />
            </div>

            {/* Campo de Método de Pago */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <div className="flex items-center">
                  <FiCreditCard className="mr-2 text-gray-400" />
                  Método de Pago
                </div>
              </label>
              <select
                name="metodo_pago"
                value={formData.metodo_pago}
                onChange={handleChange}
                className="mt-1 p-2 bg-gray-50 rounded-md w-full"
                required
              >
                <option value="">Seleccionar método de pago</option>
                <option value="efectivo">Efectivo</option>
                <option value="transferencia">Transferencia</option>
                <option value="tarjeta_debito" disabled>Tarjeta de débito</option>
                <option value="tarjeta_credito" disabled>Tarjeta de crédito</option>
              </select>
            </div>
          </div>

          {/* Sección de Estado del Pago */}
          <div className="mt-8 border-t pt-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
              <FiCheckCircle className="mr-2" />
              Estado del Pago
            </h3>
            <div className="flex flex-wrap gap-3">
              {['pendiente', 'completado', 'fallido'].map((status) => (
                <motion.button
                  key={status}
                  type="button"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setFormData({ ...formData, estado: status })}
                  className={`px-4 py-2 rounded-full capitalize font-medium ${
                    formData.estado === status 
                      ? `${getStatusColor(status)} ring-2 ring-offset-2 ring-indigo-500` 
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  {status}
                </motion.button>
              ))}
            </div>
          </div>
        </div>
      </form>
    );
  }

  // Si estamos editando o viendo un pago existente
  return (
    <div className="space-y-6 p-6 bg-white rounded-lg">
      {/* Sección de Información del Pago */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <InfoField
          icon={FiMapPin}
          label="Reserva"
          value={getReservationInfo(payment.id_reserva)}
        />
        <InfoField
          icon={FiDollarSign}
          label="Monto"
          value={`$${parseFloat(payment.monto).toFixed(2)}`}
        />
        <InfoField
          icon={FiCalendar}
          label="Fecha de Pago"
          value={new Date(payment.fecha_pago).toLocaleDateString()}
        />
        <InfoField
          icon={FiCreditCard}
          label="Método de Pago"
          value={payment.metodo_pago}
        />
      </div>

      {/* Sección de Estado del Pago */}
      <div className="mt-8 border-t pt-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
          <FiCheckCircle className="mr-2" />
          Estado del Pago
        </h3>

        <div className="flex flex-wrap gap-3">
          {['pendiente', 'completado', 'fallido'].map((status) => (
            <motion.button
              key={status}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => onUpdateStatus(payment.id, status)}
              className={`px-4 py-2 rounded-full capitalize font-medium ${
                payment.estado === status 
                  ? `${getStatusColor(status)} ring-2 ring-offset-2 ring-indigo-500` 
                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
              }`}
            >
              {status}
            </motion.button>
          ))}
        </div>
      </div>

      {/* Mensaje de Ayuda */}
      <div className="mt-4 text-sm text-gray-500 bg-gray-50 p-4 rounded-md">
        <p>
          Solo se puede modificar el estado del pago. Para realizar otros cambios, 
          contacta con el administrador del sistema.
        </p>
      </div>
    </div>
  );
};

export default PaymentForm;
\n\n
=== ./finanzas/pages/payment/PaymentModal.jsx ===
﻿import React from 'react';
import PropTypes from 'prop-types';
import Modal from '@shared/components/Modal';
import PaymentForm from './PaymentForm.jsx';

const PaymentModal = ({
    payment,
    isOpen,
    onClose,
    onUpdateStatus,
    onSavePayment,
    reservations,
    mode // 'add', 'edit', 'view'
}) => {
    const getTitle = () => {
        switch (mode) {
            case 'add':
                return 'Agregar Nuevo Pago';
            case 'edit':
                return 'Editar Pago';
            default:
                return 'Detalles del Pago';
        }
    };

    const footerContent = (
        <div className="flex justify-end gap-2">
            {mode === 'add' && (
                <>
                    <button
                        onClick={onClose}
                        className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition duration-150 ease-in-out"
                    >
                        Cancelar
                    </button>
                    <button
                        form="paymentsForm"
                        type="submit"
                        className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition duration-150 ease-in-out"
                    >
                        Guardar
                    </button>
                </>
            )}
            {mode !== 'add' && (
                <button
                    onClick={onClose}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition duration-150 ease-in-out"
                >
                    Cerrar
                </button>
            )}
        </div>
    );

    return (
        <Modal
            isOpen={isOpen}
            onClose={onClose}
            title={getTitle()}
            footer={footerContent}
        >
            <PaymentForm
                payment={mode === 'add' ? null : payment}
                reservations={reservations}
                onSave={mode === 'add' ? onSavePayment : undefined}
                onUpdateStatus={mode !== 'add' ? onUpdateStatus : undefined}
            />
        </Modal>
    );
};

PaymentModal.propTypes = {
    payment: PropTypes.object,
    isOpen: PropTypes.bool.isRequired,
    onClose: PropTypes.func.isRequired,
    onUpdateStatus: PropTypes.func,
    onSavePayment: PropTypes.func,
    reservations: PropTypes.array.isRequired,
    mode: PropTypes.oneOf(['add', 'edit', 'view']).isRequired
};

export default PaymentModal;

\n\n
=== ./finanzas/pages/payment/PaymentTable.jsx ===
import React from 'react';
import { FiEye, FiEdit2 } from 'react-icons/fi';

const PaymentTable = ({
  payments = [],
  reservations = [],
  onViewPayment,
  onEditPayment
}) => {
  // Determina la clase de estilos según el estado del pago
  const getEstadoBadgeClass = (estado) => {
    if (!estado) return 'bg-gray-100 text-gray-800';
    switch (estado.toLowerCase()) {
      case 'completado':
        return 'bg-green-100 text-green-800';
      case 'pendiente':
        return 'bg-yellow-100 text-yellow-800';
      case 'cancelado':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  // Formatea un número o string como moneda MXN
  const formatCurrency = (amount) => {
    if (!amount) return '$0.00';
    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
    return new Intl.NumberFormat('es-MX', {
      style: 'currency',
      currency: 'MXN'
    }).format(numAmount);
  };

  // Formatea la fecha en formato español (día, mes, año)
  const formatDate = (dateString) => {
    if (!dateString) return 'Fecha no disponible';
    try {
      return new Date(dateString).toLocaleDateString('es-MX', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (error) {
      console.error('Error al formatear fecha:', error);
      return 'Fecha inválida';
    }
  };

  // Obtiene la información de la reserva según el ID
  const getReservationInfo = (reservationId) => {
    const reservation = reservations.find((r) => r.id === reservationId);
    return reservation
      ? `#${reservation.id} - ${reservation.nombre_festejado || 'Sin nombre'}`
      : `Reserva #${reservationId}`;
  };

  return (
    <div className="overflow-x-auto rounded-lg border border-gray-200">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              ID
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Reserva
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Monto
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Fecha de pago
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Estado
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Fecha creación
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Fecha actualización
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {payments.map((payment) => (
            <tr
              key={payment.id}
              className="hover:bg-gray-50 transition-colors duration-150"
            >
              {/* ID */}
              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                {payment.id}
              </td>
              {/* Reserva */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {getReservationInfo(payment.id_reserva)}
              </td>
              {/* Monto */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {formatCurrency(payment.monto)}
              </td>
              {/* Fecha de pago */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {formatDate(payment.fecha_pago)}
              </td>
              {/* Estado */}
              <td className="px-6 py-4 whitespace-nowrap text-sm">
                <span
                  className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getEstadoBadgeClass(
                    payment.estado
                  )}`}
                >
                  {payment.estado}
                </span>
              </td>
              {/* Fecha creación */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {formatDate(payment.fecha_creacion)}
              </td>
              {/* Fecha actualización */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {formatDate(payment.fecha_actualizacion)}
              </td>
              {/* Acciones */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {/* Botón "Ver" */}
                {onViewPayment && (
                  <button
                    onClick={() => onViewPayment(payment)}
                    className="inline-flex items-center px-3 py-1 mr-2 border border-transparent text-sm leading-4 font-medium rounded-md text-indigo-600 hover:text-indigo-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-150"
                  >
                    <FiEye className="mr-1.5 h-4 w-4" />
                    Ver
                  </button>
                )}
                {/* Botón "Editar" (si se proporcionó la prop onEditPayment) */}
                {onEditPayment && (
                  <button
                    onClick={() => onEditPayment(payment)}
                    className="inline-flex items-center px-3 py-1 border border-transparent text-sm leading-4 font-medium rounded-md text-blue-600 hover:text-blue-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-150"
                  >
                    <FiEdit2 className="mr-1.5 h-4 w-4" />
                    Editar
                  </button>
                )}
              </td>
            </tr>
          ))}
          {payments.length === 0 && (
            <tr>
              <td colSpan="8" className="px-6 py-8 text-center text-gray-500">
                No se encontraron pagos
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default PaymentTable;
\n\n
=== ./finanzas/pages/payment/index.js ===
export { default as PaymentDetails } from './PaymentDetails';
export { default as PaymentForm } from './PaymentForm';
export { default as PaymentModal } from './PaymentModal';
export { default as PaymentTable } from './PaymentTable';\n\n
=== ./finanzas/services/categorias.service.js ===
﻿import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@shared/utils/axiosConfig'

const useCategoriesStore = create((set, get) => ({
  // Estado
  categories: [],
  
  // Acciones
  fetchCategories: async () => {
    try {
      const response = await axiosInstance.get('/categorias')
      set({ categories: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar categorÃ­as:', error)
      
      // No mostrar toast para errores 404 (recurso no encontrado)
      if (error.response?.status !== 404) {
        toast.error('Error al cargar las categorÃ­as')
      }
      
      throw error
    }
  },
  
  addCategory: async (categoryData) => {
    try {
      const response = await axiosInstance.post('/categorias', {
        nombre: categoryData.nombre,
        color: categoryData.color || '#000000'
      })
      set(state => ({ categories: [...state.categories, response.data] }))
      toast.success('CategorÃ­a aÃ±adida con Ã©xito')
      return response.data
    } catch (error) {
      console.error('Error al aÃ±adir la categorÃ­a:', error)
      toast.error('Error al aÃ±adir la categorÃ­a')
      throw error
    }
  },
  
  updateCategory: async (id, categoryData) => {
    try {
      const response = await axiosInstance.put(`/categorias/${id}`, categoryData)
      set(state => ({
        categories: state.categories.map(category =>
          category.id === id ? { ...category, ...response.data } : category
        )
      }))
      toast.success('CategorÃ­a actualizada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar categorÃ­a:', error)
      toast.error('Error al actualizar la categorÃ­a')
      throw error
    }
  },
  
  deleteCategory: async (id) => {
    try {
      await axiosInstance.delete(`/categorias/${id}`)
      set(state => ({
        categories: state.categories.filter(category => category.id !== id)
      }))
      toast.success('CategorÃ­a eliminada con Ã©xito')
    } catch (error) {
      console.error('Error al eliminar categorÃ­a:', error)
      toast.error('Error al eliminar la categorÃ­a')
      throw error
    }
  },
  
  // Selectores
  getCategoryById: (id) => {
    const { categories } = get()
    return categories.find(category => category.id === id)
  },
  
  getCategoryByName: (name) => {
    const { categories } = get()
    return categories.find(category => 
      category.nombre.toLowerCase() === name.toLowerCase()
    )
  }
}))

export default useCategoriesStore
\n\n
=== ./finanzas/services/finanzasStore.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'

const useFinancesStore = create((set, get) => ({
  // Estado
  finances: [],
  selectedFinance: null,
  
  // Acciones
  fetchFinances: async () => {
    try {
      const response = await axiosInstance.get('/finanzas')
      // Convertir montos a números
      const formattedFinances = response.data.map(finance => ({
        ...finance,
        monto: Number(finance.monto)
      }))
      set({ finances: formattedFinances })
      return formattedFinances
    } catch (error) {
      console.error('Error al cargar finanzas:', error)
      toast.error('Error al cargar las finanzas')
      throw error
    }
  },
  
  addFinance: async (financeData) => {
    try {
      const response = await axiosInstance.post('/finanzas', financeData)
      const newFinance = {
        ...response.data,
        monto: Number(response.data.monto)
      }
      set(state => ({ finances: [...state.finances, newFinance] }))
      toast.success('Registro financiero creado exitosamente')
      return newFinance
    } catch (error) {
      console.error('Error al crear registro financiero:', error)
      toast.error('Error al crear el registro financiero')
      throw error
    }
  },
  
  updateFinance: async (id, financeData) => {
    try {
      const response = await axiosInstance.put(`/finanzas/${id}`, financeData)
      const updatedFinance = {
        ...response.data,
        monto: Number(response.data.monto)
      }
      set(state => ({
        finances: state.finances.map(finance => 
          finance.id === id ? updatedFinance : finance
        )
      }))
      toast.success('Registro financiero actualizado exitosamente')
      return updatedFinance
    } catch (error) {
      console.error('Error al actualizar registro financiero:', error)
      toast.error('Error al actualizar el registro financiero')
      throw error
    }
  },
  
  deleteFinance: async (id) => {
    try {
      await axiosInstance.delete(`/finanzas/${id}`)
      set(state => ({
        finances: state.finances.filter(finance => finance.id !== id)
      }))
      toast.success('Finanza desactivada con éxito')
    } catch (error) {
      console.error('Error al desactivar finanza:', error)
      toast.error('Error al desactivar la finanza')
      throw error
    }
  },
  
  setSelectedFinance: (finance) => set({ selectedFinance: finance }),
  
  downloadFile: async (id, type) => {
    try {
      const response = await axiosInstance.get(
        `/finanzas/${id}/download/${type}`,
        { responseType: 'blob' }
      )
      const url = window.URL.createObjectURL(new Blob([response.data]))
      const link = document.createElement('a')
      link.href = url
      link.setAttribute('download', `finanza_${id}_${type}.pdf`)
      document.body.appendChild(link)
      link.click()
      link.parentNode.removeChild(link)
      toast.success('Archivo descargado con éxito')
    } catch (error) {
      console.error('Error al descargar el archivo:', error)
      toast.error('Error al descargar el archivo')
      throw error
    }
  },
  
  // Selectores
  getFinancesByMonth: (month, year) => {
    const { finances } = get()
    return finances.filter(finance => {
      // Verificar que finance y el campo de fecha existen
      if (!finance || !finance.fecha) return false
      
      // Convertir a objeto Date
      const financeDate = new Date(finance.fecha)
      
      // Asegurarse de que la fecha es válida
      if (isNaN(financeDate.getTime())) return false
      
      // Comparar tanto mes como año
      return financeDate.getMonth() === month && 
             financeDate.getFullYear() === year
    })
  },
  
  // Estadísticas
  getSummaryByMonth: (month, year) => {
    const financesByMonth = get().getFinancesByMonth(month, year)
    
    const ingresos = financesByMonth
      .filter(f => f.tipo === 'ingreso')
      .reduce((sum, f) => sum + f.monto, 0)
    
    const egresos = financesByMonth
      .filter(f => f.tipo === 'egreso')
      .reduce((sum, f) => sum + f.monto, 0)
    
    const saldo = ingresos - egresos
    
    return {
      ingresos,
      egresos,
      saldo,
      count: financesByMonth.length
    }
  },
  
  getSummaryByCategory: (month, year) => {
    const financesByMonth = get().getFinancesByMonth(month, year)
    
    // Agrupar por categoría
    const categorySummary = financesByMonth.reduce((summary, finance) => {
      const categoryId = finance.id_categoria
      const categoryName = finance.categoria?.nombre || 'Sin categoría'
      const categoryColor = finance.categoria?.color || '#000000'
      
      if (!summary[categoryId]) {
        summary[categoryId] = {
          id: categoryId,
          nombre: categoryName,
          color: categoryColor,
          ingresos: 0,
          egresos: 0,
          total: 0
        }
      }
      
      if (finance.tipo === 'ingreso') {
        summary[categoryId].ingresos += finance.monto
        summary[categoryId].total += finance.monto
      } else {
        summary[categoryId].egresos += finance.monto
        summary[categoryId].total -= finance.monto
      }
      
      return summary
    }, {})
    
    return Object.values(categorySummary)
  }
}))

export default useFinancesStore\n\n
=== ./finanzas/services/index.js ===
// Exportar todos los componentes de finanzas/services
export { default as categoriasService } from './categorias.service.js';
\n\n
=== ./finanzas/services/pagosStore.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'

const usePaymentsStore = create((set, get) => ({
  // Estado
  payments: [],
  selectedPayment: null,
  
  // Acciones
  fetchPayments: async () => {
    try {
      const response = await axiosInstance.get('/pagos')
      set({ payments: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar pagos:', error)
      toast.error('Error al cargar los pagos')
      throw error
    }
  },
  
  addPayment: async (paymentData) => {
    try {
      const response = await axiosInstance.post('/pagos', paymentData)
      set(state => ({ payments: [...state.payments, response.data] }))
      toast.success('Pago creado exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al crear pago:', error)
      toast.error('Error al crear el pago')
      throw error
    }
  },
  
  updatePayment: async (id, paymentData) => {
    try {
      const response = await axiosInstance.put(`/pagos/${id}`, paymentData)
      set(state => ({
        payments: state.payments.map(payment => 
          payment.id === id ? { ...payment, ...response.data } : payment
        )
      }))
      toast.success('Pago actualizado exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar pago:', error)
      toast.error('Error al actualizar el pago')
      throw error
    }
  },
  
  deletePayment: async (id) => {
    try {
      await axiosInstance.delete(`/pagos/${id}`)
      set(state => ({
        payments: state.payments.filter(payment => payment.id !== id)
      }))
      toast.success('Pago eliminado con éxito')
    } catch (error) {
      console.error('Error al eliminar pago:', error)
      toast.error('Error al eliminar el pago')
      throw error
    }
  },
  
  updatePaymentStatus: async (id, newStatus) => {
    try {
      const response = await axiosInstance.put(`/pagos/${id}/status`, {
        estado: newStatus
      })
      
      set(state => ({
        payments: state.payments.map(payment => 
          payment.id === id ? { ...payment, estado: newStatus } : payment
        )
      }))
      
      toast.success('Estado del pago actualizado con éxito')
      return response.data
    } catch (error) {
      console.error('Error al actualizar el estado del pago:', error)
      toast.error('Error al actualizar el estado del pago')
      throw error
    }
  },
  
  setSelectedPayment: (payment) => set({ selectedPayment: payment }),
  
  // Selectores
  getPaymentById: (id) => {
    const { payments } = get()
    return payments.find(payment => payment.id === id)
  },
  
  getPaymentsByReservation: (reservationId) => {
    const { payments } = get()
    return payments.filter(payment => payment.id_reserva === reservationId)
  },
  
  getPaymentsByStatus: (status) => {
    const { payments } = get()
    return payments.filter(payment => payment.estado === status)
  },
  
  getPaymentsByMonth: (month, year) => {
    const { payments } = get()
    return payments.filter(payment => {
      if (!payment || !payment.fecha) return false
      
      const paymentDate = new Date(payment.fecha)
      
      if (isNaN(paymentDate.getTime())) return false
      
      return paymentDate.getMonth() === month && 
             paymentDate.getFullYear() === year
    })
  },
  
  // Estadísticas
  getPaymentsSummary: () => {
    const { payments } = get()
    
    const total = payments.reduce((sum, payment) => sum + Number(payment.monto), 0)
    
    const byStatus = payments.reduce((summary, payment) => {
      const status = payment.estado
      
      if (!summary[status]) {
        summary[status] = {
          count: 0,
          total: 0
        }
      }
      
      summary[status].count++
      summary[status].total += Number(payment.monto)
      
      return summary
    }, {})
    
    return {
      total,
      count: payments.length,
      byStatus
    }
  }
}))

export default usePaymentsStore\n\n
=== ./galeria/components/index.js ===
// Exportar todos los componentes de galeria/components
\n\n
=== ./galeria/hooks/index.js ===
// Exportar todos los componentes de galeria/hooks
\n\n
=== ./galeria/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n
=== ./galeria/pages/GaleriaManagement.jsx ===
import React, { useState, useRef, useEffect } from 'react';
import { FiImage, FiInfo, FiPlus } from 'react-icons/fi';
import GaleriaTable from './GaleriaTable.jsx';
import GaleriaModal from './GaleriaModal.jsx';
import * as galeriaService from '@domains/galeria/services/galeriaService';

const GaleriaManagement = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [notification, setNotification] = useState(null);
  const [isMobile, setIsMobile] = useState(false);
  
  // Referencia a la tabla de galería usando useRef
  const galeriaTableRef = useRef(null);

  // Detectar si es dispositivo móvil
  useEffect(() => {
    const checkIfMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkIfMobile();
    window.addEventListener('resize', checkIfMobile);
    
    return () => {
      window.removeEventListener('resize', checkIfMobile);
    };
  }, []);

  // Mostrar notificación temporal
  const showNotification = (message, type = 'success') => {
    setNotification({ message, type });
    setTimeout(() => {
      setNotification(null);
    }, 5000);
  };

  // Abrir modal para crear nueva imagen
  const handleNewClick = () => {
    setEditingItem(null);
    setIsModalOpen(true);
  };

  // Abrir modal para editar imagen existente
  const handleEditClick = (item) => {
    setEditingItem(item);
    setIsModalOpen(true);
  };

  // Cerrar modal
  const handleCloseModal = () => {
    setIsModalOpen(false);
    setEditingItem(null);
  };

  // Guardar nueva imagen o actualizar existente
  const handleSave = async (formData, additionalImages = []) => {
    try {
      setIsLoading(true);
      let message = '';
      
      if (editingItem) {
        // Actualizar imagen existente
        await galeriaService.updateImagenCarousel(editingItem.id, formData);
        message = 'Imagen actualizada correctamente';
      } else {
        // Crear nueva imagen principal
        await galeriaService.createImagenCarousel(formData);
        
        // Si hay imágenes adicionales, guardarlas también
        if (additionalImages && additionalImages.length > 0) {
          // Procesamos las imágenes adicionales en paralelo
          const promises = additionalImages.map(imagen => 
            galeriaService.createImagenCarousel({
              imagen_url: imagen.url,
              cloudinary_id: imagen.cloudinary_id,
              descripcion: formData.descripcion,
              activo: formData.activo,
              es_promocion: false, // Por defecto, solo la primera se marca como promoción
              orden: formData.orden
            })
          );
          
          await Promise.all(promises);
          message = `${additionalImages.length + 1} imágenes agregadas correctamente`;
        } else {
          message = 'Imagen agregada correctamente';
        }
      }
      
      // Cerrar modal y limpiar estado
      setIsModalOpen(false);
      setEditingItem(null);
      
      // Mostrar notificación de éxito
      showNotification(message);
      
      // Forzar recarga de tabla usando la referencia de React
      console.log('Intentando recargar imágenes...');
      if (galeriaTableRef.current && typeof galeriaTableRef.current.loadImagenes === 'function') {
        console.log('Recargando imágenes de la galería');
        galeriaTableRef.current.loadImagenes();
      } else {
        console.warn('No se pudo acceder al método loadImagenes en la referencia de la tabla');
      }
    } catch (error) {
      console.error('Error al guardar la(s) imagen(es):', error);
      showNotification(
        `Error al ${editingItem ? 'actualizar' : 'guardar'} la(s) imagen(es). ${error.message || 'Intente nuevamente'}`,
        'error'
      );
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full max-w-full px-2 sm:px-4 py-4 sm:py-8">
      {/* Encabezado */}
      <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4 sm:mb-6 gap-3">
        <div className="flex-1">
          <h1 className="text-xl sm:text-2xl font-bold text-gray-800">Gestión de Galería</h1>
          <p className="text-sm sm:text-base text-gray-600 mt-1">
            Administra las imágenes que aparecen en el carrusel de la página principal
          </p>
        </div>
        <div>
          <button
            onClick={handleNewClick}
            className="w-full sm:w-auto flex items-center justify-center px-3 sm:px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition duration-200 shadow-sm"
            disabled={isLoading}
          >
            {isMobile ? (
              <FiPlus className="mr-1" />
            ) : (
              <FiImage className="mr-2" />
            )}
            {isMobile ? 'Agregar' : 'Agregar Imagen'}
          </button>
        </div>
      </div>

      {/* Notificación */}
      {notification && (
        <div
          className={`mb-4 p-3 sm:p-4 rounded-md ${
            notification.type === 'error' ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'
          }`}
        >
          <div className="flex items-center">
            <FiInfo className="mr-2 flex-shrink-0" />
            <span className="text-sm sm:text-base">{notification.message}</span>
          </div>
        </div>
      )}

      {/* Contenido principal */}
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <div className="p-2 sm:p-4 md:p-6">
          <GaleriaTable
            onEdit={handleEditClick}
            onNewClick={handleNewClick}
            ref={galeriaTableRef}
          />
        </div>
      </div>

      {/* Modal para crear/editar imagen */}
      <GaleriaModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onSave={handleSave}
        editingItem={editingItem}
      />
    </div>
  );
};

export default GaleriaManagement;\n\n
=== ./galeria/pages/GaleriaModal.jsx ===
import React, { useState, useEffect, useCallback } from 'react';
import { FiUpload, FiLink, FiAlignLeft, FiImage, FiX, FiCheck, FiPlusCircle, FiCamera, FiToggleRight, FiStar, FiCopy } from 'react-icons/fi';
import Modal from '@shared/components/Modal';
import { uploadImageToCloudinary, uploadMultipleImagesToCloudinary } from '@domains/galeria/services/galeriaService';

const GaleriaModal = ({ isOpen, onClose, onSave, editingItem }) => {
  const [formData, setFormData] = useState({
    imagen_url: '',
    cloudinary_id: '',
    descripcion: '',
    activo: true,
    orden: 0,
    es_promocion: false
  });
  const [imagePreview, setImagePreview] = useState('');
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [filesSelected, setFilesSelected] = useState([]);
  const [error, setError] = useState('');
  const [isDragging, setIsDragging] = useState(false);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const [additionalImageResults, setAdditionalImageResults] = useState([]);

  // Inicializar el formulario con los datos del item a editar
  useEffect(() => {
    if (editingItem) {
      setFormData({
        imagen_url: editingItem.imagen_url || '',
        cloudinary_id: editingItem.cloudinary_id || '',
        descripcion: editingItem.descripcion || '',
        activo: editingItem.activo !== undefined ? editingItem.activo : true,
        orden: editingItem.orden || 0,
        es_promocion: editingItem.es_promocion || false
      });
      setImagePreview(editingItem.imagen_url || '');
      setFilesSelected([]);
    } else {
      resetForm();
    }
  }, [editingItem, isOpen]);

  // Resetear el formulario
  const resetForm = useCallback(() => {
    setFormData({
      imagen_url: '',
      cloudinary_id: '',
      descripcion: '',
      activo: true,
      orden: 0,
      es_promocion: false
    });
    setImagePreview('');
    setFilesSelected([]);
    setSelectedImageIndex(0);
    setError('');
    setUploadProgress(0);
    setUploadSuccess(false);
  }, []);

  // Manejar cambios en los campos del formulario
  const handleChange = useCallback((e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));

    // Actualizar la previsualización si es la URL de la imagen
    if (name === 'imagen_url') {
      setImagePreview(value);
    }
  }, []);

  // Manejar la selección de archivos para subir
  const handleFileChange = useCallback((e) => {
    const newFiles = Array.from(e.target.files);
    if (newFiles.length > 0) {
      setFilesSelected(prev => [...prev, ...newFiles]);
      
      // Crear URLs para previsualizar las imágenes
      const previewUrl = URL.createObjectURL(newFiles[0]);
      setImagePreview(previewUrl);
      setSelectedImageIndex(filesSelected.length);
    }
  }, [filesSelected.length]);

  // Manejar eventos de arrastrar y soltar
  const handleDragEnter = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
  }, []);

  const handleDragOver = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
  }, []);

  const handleDrop = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
    
    const newFiles = Array.from(e.dataTransfer.files).filter(
      file => file.type.startsWith('image/')
    );

    if (newFiles.length === 0) {
      setError('Por favor, arrastra solo archivos de imagen.');
      return;
    }

    setFilesSelected(prev => {
      const updatedFiles = [...prev, ...newFiles];
      
      // Crear URL para previsualizar la primera imagen nueva
      if (newFiles.length > 0) {
        const previewUrl = URL.createObjectURL(newFiles[0]);
        setImagePreview(previewUrl);
        setSelectedImageIndex(prev.length);
      }
      
      return updatedFiles;
    });
  }, []);

  // Cambiar la imagen seleccionada para vista previa
  const handleSelectImage = useCallback((index) => {
    if (filesSelected[index]) {
      const previewUrl = URL.createObjectURL(filesSelected[index]);
      setImagePreview(previewUrl);
      setSelectedImageIndex(index);
    }
  }, [filesSelected]);

  // Eliminar una imagen de la selección
  const handleRemoveFile = useCallback((index) => {
    setFilesSelected(prev => {
      const updatedFiles = [...prev];
      updatedFiles.splice(index, 1);
      
      if (updatedFiles.length === 0) {
        setImagePreview('');
        setSelectedImageIndex(-1);
      } else if (selectedImageIndex >= updatedFiles.length) {
        // Si eliminamos la imagen seleccionada y era la última, mostramos la nueva última
        const newIndex = Math.max(0, updatedFiles.length - 1);
        const previewUrl = URL.createObjectURL(updatedFiles[newIndex]);
        setImagePreview(previewUrl);
        setSelectedImageIndex(newIndex);
      } else if (selectedImageIndex === index) {
        // Si eliminamos la imagen seleccionada, mostramos la que está en la misma posición
        const previewUrl = URL.createObjectURL(updatedFiles[selectedImageIndex]);
        setImagePreview(previewUrl);
      }
      
      return updatedFiles;
    });
  }, [selectedImageIndex]);

  // Simular progreso de carga
  const simulateProgressAnimation = useCallback(() => {
    setUploadProgress(0);
    const interval = setInterval(() => {
      setUploadProgress(prev => {
        if (prev >= 95) {
          clearInterval(interval);
          return 95;
        }
        return prev + (Math.random() * 10);
      });
    }, 200);
    return interval;
  }, []);

  // Manejar la subida de imágenes a Cloudinary
  const handleUpload = useCallback(async () => {
    if (filesSelected.length === 0) {
      setError('Por favor selecciona al menos una imagen para subir.');
      return;
    }

    try {
      setUploading(true);
      setError('');
      setUploadSuccess(false);
      
      // Iniciamos animación de progreso
      const progressInterval = simulateProgressAnimation();

      let result;
      if (filesSelected.length === 1) {
        // Si hay un solo archivo, usamos la función original
        result = await uploadImageToCloudinary(filesSelected[0]);
        
        setFormData(prev => ({
          ...prev,
          imagen_url: result.url,
          cloudinary_id: result.cloudinary_id
        }));
        
        setImagePreview(result.url);
      } else {
        // Si hay múltiples archivos, usamos la función de carga múltiple
        const results = await uploadMultipleImagesToCloudinary(filesSelected);
        result = results[0]; // Usamos el primero para el formulario actual
        
        setFormData(prev => ({
          ...prev,
          imagen_url: result.url,
          cloudinary_id: result.cloudinary_id
        }));
        
        setImagePreview(result.url);
        
        // Guardar las imágenes adicionales para procesarlas al guardar
        if (results.length > 1) {
          // Guardamos todas las imágenes adicionales excepto la primera que ya se usó
          const additionalImages = results.slice(1).map(img => ({
            url: img.url,
            cloudinary_id: img.cloudinary_id
          }));
          setAdditionalImageResults(additionalImages);
          console.log(`Se subieron ${results.length} imágenes. ${additionalImages.length} adicionales disponibles.`);
        }
      }
      
      clearInterval(progressInterval);
      setUploadProgress(100);
      setUploadSuccess(true);
      setFilesSelected([]);
      
    } catch (err) {
      console.error('Error al subir la(s) imagen(es):', err);
      setError('Error al subir la(s) imagen(es). Por favor, intenta de nuevo.');
      setUploadProgress(0);
    } finally {
      setTimeout(() => {
        setUploading(false);
      }, 500);
    }
  }, [filesSelected, simulateProgressAnimation]);

  // Manejar el envío del formulario
  const handleSubmit = useCallback((e) => {
    e.preventDefault();
    
    // Validación básica
    if (!formData.imagen_url) {
      setError('La URL de la imagen es requerida.');
      return;
    }
    
    // Enviar datos al componente padre, incluyendo imágenes adicionales
    onSave(formData, additionalImageResults);
    
    // Limpiar estado de imágenes adicionales después de guardar
    setAdditionalImageResults([]);
  }, [formData, onSave, additionalImageResults]);

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={editingItem ? 'Editar Imagen' : 'Agregar Nueva Imagen'}
    >
      <form onSubmit={handleSubmit} className="space-y-8 max-h-[80vh] overflow-y-auto px-1 py-2">
        {/* Mensajes de error */}
        {error && (
          <div className="p-4 rounded-lg bg-red-50 border-l-4 border-red-500 shadow-sm animate-fadeIn">
            <div className="flex items-start">
              <div className="flex-shrink-0">
                <FiX className="h-5 w-5 text-red-500" />
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-red-800">{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Layout de dos columnas en pantallas medianas y grandes */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Columna izquierda - Subida y previsualización */}
          <div className="space-y-6">
            {/* Tarjeta de subida de imágenes */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              <div className="p-4 bg-gradient-to-r from-blue-50 to-indigo-50 border-b">
                <h3 className="text-sm font-semibold text-gray-800 flex items-center">
                  <FiCamera className="mr-2 text-blue-500" /> 
                  Subir Imágenes
                </h3>
              </div>
              
              {/* Zona de arrastrar y soltar */}
              <div className="p-4">
                <div 
                  className={`border-2 border-dashed rounded-lg p-5 transition-all duration-300 ease-in-out
                    ${isDragging 
                      ? 'border-blue-500 bg-blue-50 shadow-inner' 
                      : 'border-gray-300 hover:border-blue-400 bg-white'
                    }`}
                  onDragEnter={handleDragEnter}
                  onDragOver={handleDragOver}
                  onDragLeave={handleDragLeave}
                  onDrop={handleDrop}
                >
                  <div className="text-center py-4">
                    <div className="mx-auto h-14 w-14 rounded-full bg-blue-100 flex items-center justify-center mb-3">
                      <FiUpload className="h-6 w-6 text-blue-600" />
                    </div>
                    <h3 className="mt-2 text-sm font-medium text-gray-900">
                      {isDragging 
                        ? 'Suelta para añadir imágenes' 
                        : 'Arrastra imágenes aquí'
                      }
                    </h3>
                    <p className="mt-1 text-xs text-gray-500 max-w-xs mx-auto">
                      Soporta JPG, PNG y GIF hasta 10MB
                    </p>
                    <div className="mt-4">
                      <label className="inline-flex items-center justify-center px-4 py-2 rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 cursor-pointer transition-all duration-200 transform hover:scale-105">
                        <FiPlusCircle className="mr-2" />
                        Seleccionar imágenes
                        <input
                          type="file"
                          className="hidden"
                          accept="image/*"
                          multiple
                          onChange={handleFileChange}
                        />
                      </label>
                    </div>
                  </div>
                </div>
                
                {/* Botón de carga */}
                <button
                  type="button"
                  onClick={handleUpload}
                  disabled={filesSelected.length === 0 || uploading}
                  className={`mt-4 w-full flex items-center justify-center px-4 py-2 rounded-md shadow-sm text-sm font-medium transition-all duration-200 ${
                    filesSelected.length === 0 || uploading
                      ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                      : uploadSuccess 
                        ? 'bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:from-green-600 hover:to-emerald-700 transform hover:scale-[1.02]'
                        : 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white hover:from-blue-600 hover:to-indigo-700 transform hover:scale-[1.02]'
                  }`}
                >
                  {uploading ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Procesando imágenes...
                    </>
                  ) : uploadSuccess ? (
                    <>
                      <FiCheck className="mr-2" />
                      Subida completada
                    </>
                  ) : (
                    <>
                      <FiUpload className="mr-2" />
                      {filesSelected.length > 1 ? `Subir ${filesSelected.length} imágenes` : 'Subir imagen'}
                    </>
                  )}
                </button>
                
                {/* Barra de progreso */}
                {(uploading || uploadProgress > 0) && (
                  <div className="mt-3 relative">
                    <div className="overflow-hidden h-2 text-xs flex rounded-full bg-blue-100">
                      <div 
                        style={{ width: `${uploadProgress}%` }} 
                        className={`shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center transition-all duration-300 ease-out ${
                          uploadSuccess ? 'bg-gradient-to-r from-green-400 to-emerald-500' : 'bg-gradient-to-r from-blue-400 to-indigo-500'
                        }`}
                      ></div>
                    </div>
                    <div className="flex justify-between mt-1">
                      <span className="text-xs text-gray-500">Progreso</span>
                      <span className="text-xs font-medium text-gray-800">{Math.round(uploadProgress)}%</span>
                    </div>
                  </div>
                )}
              </div>
            </div>
          
            {/* Previsualización de la imagen */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              <div className="p-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b">
                <h3 className="text-sm font-semibold text-gray-800 flex items-center">
                  <FiImage className="mr-2 text-gray-600" /> 
                  Previsualización
                </h3>
              </div>
              <div className="p-4">
                <div className="aspect-w-16 aspect-h-9 overflow-hidden rounded-lg shadow-inner bg-gray-100">
                  {imagePreview ? (
                    <img 
                      src={imagePreview} 
                      alt="Previsualización" 
                      className="w-full h-full object-contain transition-all duration-300 ease-in-out hover:scale-105"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center">
                      <div className="text-center p-4">
                        <div className="mx-auto h-14 w-14 rounded-full bg-gray-200 flex items-center justify-center mb-2">
                          <FiImage className="h-6 w-6 text-gray-400" />
                        </div>
                        <p className="text-sm text-gray-400">Sin previsualización disponible</p>
                      </div>
                    </div>
                  )}
                </div>
                
                {/* Indicador de imágenes seleccionadas */}
                {filesSelected.length > 0 && (
                  <div className="mt-3 bg-blue-50 p-2 rounded-md border border-blue-100">
                    <p className="text-xs text-blue-700 text-center">
                      {filesSelected.length === 1 
                        ? '1 imagen seleccionada'
                        : `${filesSelected.length} imágenes seleccionadas • Mostrando ${selectedImageIndex + 1} de ${filesSelected.length}`
                      }
                    </p>
                  </div>
                )}

                {/* Miniaturas de imágenes seleccionadas */}
                {filesSelected.length > 1 && (
                  <div className="mt-3">
                    <div className="flex overflow-x-auto space-x-2 pb-2 px-1">
                      {filesSelected.map((file, index) => (
                        <div 
                          key={index} 
                          className={`relative flex-shrink-0 group cursor-pointer
                            ${selectedImageIndex === index 
                              ? 'ring-2 ring-blue-500 transform scale-105' 
                              : 'ring-1 ring-gray-200 opacity-70 hover:opacity-100'
                            }`}
                          onClick={() => handleSelectImage(index)}
                        >
                          <div className="h-14 w-14 overflow-hidden rounded-md">
                            <img
                              src={URL.createObjectURL(file)}
                              alt={`Miniatura ${index + 1}`}
                              className="h-full w-full object-cover"
                            />
                          </div>
                          <button
                            type="button"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleRemoveFile(index);
                            }}
                            className="absolute -top-1 -right-1 bg-white rounded-full p-0.5 shadow-md border border-red-100 text-red-500 transition-opacity hover:bg-red-500 hover:text-white hover:border-red-500"
                          >
                            <FiX size={12} />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          {/* Columna derecha - Información y configuración */}
          <div className="space-y-6">
            {/* URL de la imagen */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              <div className="p-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b">
                <h3 className="text-sm font-semibold text-gray-800 flex items-center">
                  <FiLink className="mr-2 text-gray-600" /> 
                  URL de la Imagen
                </h3>
              </div>
              <div className="p-4">
                <div className="relative">
                  <input
                    id="imagen_url"
                    name="imagen_url"
                    type="text"
                    value={formData.imagen_url}
                    onChange={handleChange}
                    className="block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    placeholder="https://res.cloudinary.com/..."
                  />
                  {formData.imagen_url && (
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3">
                      <button
                        type="button"
                        onClick={() => navigator.clipboard.writeText(formData.imagen_url)}
                        className="text-gray-400 hover:text-gray-600"
                        title="Copiar URL"
                      >
                        <FiCopy size={16} />
                      </button>
                    </div>
                  )}
                </div>
                <p className="mt-2 text-xs text-gray-500">
                  Esta URL se actualiza automáticamente al subir una imagen
                </p>
              </div>
            </div>
            
            {/* Descripción */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              <div className="p-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b">
                <h3 className="text-sm font-semibold text-gray-800 flex items-center">
                  <FiAlignLeft className="mr-2 text-gray-600" /> 
                  Descripción
                </h3>
              </div>
              <div className="p-4">
                <textarea
                  id="descripcion"
                  name="descripcion"
                  value={formData.descripcion}
                  onChange={handleChange}
                  rows="3"
                  className="block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                  placeholder="Agrega una descripción para esta imagen..."
                />
              </div>
            </div>
            
            {/* Estado y configuración */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              <div className="p-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b">
                <h3 className="text-sm font-semibold text-gray-800 flex items-center">
                  <FiToggleRight className="mr-2 text-gray-600" /> 
                  Configuración
                </h3>
              </div>
              <div className="p-4">
                <div className="space-y-4">
                  {/* Estado (activo/inactivo) */}
                  <div className="flex items-center justify-between p-3 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg transition-all hover:shadow-sm">
                    <div className="flex items-center">
                      <div className="h-9 w-9 rounded-full bg-blue-100 flex items-center justify-center">
                        <FiCheck className={`h-5 w-5 ${formData.activo ? 'text-blue-600' : 'text-gray-400'}`} />
                      </div>
                      <div className="ml-3">
                        <label htmlFor="activo" className="block text-sm font-medium text-gray-700">
                          Imagen activa
                        </label>
                        <span className="text-xs text-gray-500">
                          Determina si la imagen se mostrará en el sitio
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center">
                      <div 
                        className={`relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 transition-colors ease-in-out duration-200 focus:outline-none ${
                          formData.activo 
                            ? 'bg-blue-600 border-blue-600' 
                            : 'bg-gray-200 border-gray-200'
                        }`}
                      >
                        <span 
                          className={`inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition ease-in-out duration-200 ${
                            formData.activo ? 'translate-x-5' : 'translate-x-0'
                          }`} 
                        />
                        <input
                          id="activo"
                          name="activo"
                          type="checkbox"
                          checked={formData.activo}
                          onChange={handleChange}
                          className="absolute opacity-0 h-0 w-0"
                        />
                      </div>
                    </div>
                  </div>
                  
                  {/* Promoción */}
                  <div className="flex items-center justify-between p-3 bg-gradient-to-r from-yellow-50 to-yellow-100 rounded-lg transition-all hover:shadow-sm">
                    <div className="flex items-center">
                      <div className="h-9 w-9 rounded-full bg-yellow-100 flex items-center justify-center">
                        <FiStar className={`h-5 w-5 ${formData.es_promocion ? 'text-yellow-600' : 'text-gray-400'}`} />
                      </div>
                      <div className="ml-3">
                        <label htmlFor="es_promocion" className="block text-sm font-medium text-gray-700">
                          Promoción destacada
                        </label>
                        <span className="text-xs text-gray-500">
                          Destaca esta imagen en la sección de promociones
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center">
                      <div 
                        className={`relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 transition-colors ease-in-out duration-200 focus:outline-none ${
                          formData.es_promocion 
                            ? 'bg-yellow-500 border-yellow-500' 
                            : 'bg-gray-200 border-gray-200'
                        }`}
                      >
                        <span 
                          className={`inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition ease-in-out duration-200 ${
                            formData.es_promocion ? 'translate-x-5' : 'translate-x-0'
                          }`} 
                        />
                        <input
                          id="es_promocion"
                          name="es_promocion"
                          type="checkbox"
                          checked={formData.es_promocion}
                          onChange={handleChange}
                          className="absolute opacity-0 h-0 w-0"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Botones de acción */}
        <div className="sticky bottom-0 bg-white pt-3 pb-1 border-t border-gray-200 mt-6 -mx-6 px-6">
          <div className="flex flex-col sm:flex-row-reverse sm:justify-between sm:space-x-3 sm:space-x-reverse space-y-3 sm:space-y-0">
            <button
              type="submit"
              className="w-full sm:w-auto inline-flex justify-center items-center px-6 py-2.5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200 transform hover:scale-[1.02]"
            >
              {editingItem ? 'Actualizar imagen' : 'Guardar imagen'}
            </button>
            <button
              type="button"
              onClick={onClose}
              className="w-full sm:w-auto inline-flex justify-center items-center px-6 py-2.5 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-300 transition-all duration-200"
            >
              Cancelar
            </button>
          </div>
        </div>
      </form>
    </Modal>
  );
};

export default GaleriaModal;\n\n
=== ./galeria/pages/GaleriaTable.jsx ===
import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';
import { FiEdit, FiTrash2, FiEye, FiImage, FiArrowUp, FiArrowDown, FiLink, FiCopy, FiCheck, FiAlertCircle, FiX, FiMenu } from 'react-icons/fi';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import * as galeriaService from '@shared/services/galeriaService';
import { AdvancedImage } from '@cloudinary/react';
import { Cloudinary } from '@cloudinary/url-gen';
import { fill } from '@cloudinary/url-gen/actions/resize';
import { autoGravity } from '@cloudinary/url-gen/qualifiers/gravity';
import { auto } from '@cloudinary/url-gen/qualifiers/quality';
import { format } from '@cloudinary/url-gen/actions/delivery';
import { auto as autoFormat } from '@cloudinary/url-gen/qualifiers/format';
import { contrast } from '@cloudinary/url-gen/actions/adjust';

const GaleriaTable = forwardRef(({ onEdit, onNewClick }, ref) => {
  const [imagenes, setImagenes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [previewImage, setPreviewImage] = useState(null);
  const [cloudinaryImages, setCloudinaryImages] = useState({});
  const [imageErrors, setImageErrors] = useState({});
  const [isMobile, setIsMobile] = useState(false);
  const cloudinaryRef = useRef(null);
  const tooltipTimeout = useRef(null);
  
  // Exponer el método loadImagenes a través de la referencia
  useImperativeHandle(ref, () => ({
    loadImagenes
  }));

  // Detectar si es dispositivo móvil
  useEffect(() => {
    const checkIfMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkIfMobile();
    window.addEventListener('resize', checkIfMobile);
    
    return () => {
      window.removeEventListener('resize', checkIfMobile);
    };
  }, []);

  // Inicializar Cloudinary
  useEffect(() => {
    const cloudName = import.meta.env.VITE_CLOUDINARY_CLOUD_NAME || 'dswklswqw';
    cloudinaryRef.current = new Cloudinary({
      cloud: { cloudName }
    });
  }, []);

  // Cargar las imágenes al montar el componente
  useEffect(() => {
    loadImagenes();
  }, []);

  // Procesar las imágenes de Cloudinary
  useEffect(() => {
    if (!cloudinaryRef.current || imagenes.length === 0) return;
    
    const newCloudinaryImages = {};
    const newImageErrors = {};
    
    imagenes.forEach(imagen => {
      try {
        if (!imagen.imagen_url) {
          newImageErrors[imagen.id] = "URL de imagen no disponible";
          return;
        }
        
        const cldImg = getCloudinaryImage(imagen.imagen_url);
        if (cldImg) {
          newCloudinaryImages[imagen.id] = cldImg;
        } else {
          newImageErrors[imagen.id] = "Error al procesar la imagen";
        }
      } catch (err) {
        console.error(`Error procesando imagen ${imagen.id}:`, err);
        newImageErrors[imagen.id] = "Error al procesar la imagen";
      }
    });
    
    setCloudinaryImages(newCloudinaryImages);
    setImageErrors(newImageErrors);
  }, [imagenes]);
  
  // Función para procesar URLs de Cloudinary
  const getCloudinaryImage = (publicId) => {
    if (!publicId || typeof publicId !== 'string' || !cloudinaryRef.current) {
      return null;
    }
    
    try {
      // Si es una URL completa, extraemos el ID y la versión
      if (publicId.includes('cloudinary.com')) {
        // Para URLs de Cloudinary, procesamos correctamente
        const url = new URL(publicId);
        const pathSegments = url.pathname.split('/');
        
        // Buscar si hay una versión (v1234567)
        let versionIndex = -1;
        let idIndex = -1;
        
        for (let i = 0; i < pathSegments.length; i++) {
          if (pathSegments[i].startsWith('v') && /^v\d+$/.test(pathSegments[i])) {
            versionIndex = i;
            idIndex = i + 1;
            break;
          }
        }
        
        // Si encontramos versión e ID
        if (versionIndex >= 0 && idIndex < pathSegments.length) {
          const version = pathSegments[versionIndex];
          let imageId = pathSegments[idIndex];
          
          // Quitar extensión si existe
          if (imageId.includes('.')) {
            imageId = imageId.substring(0, imageId.lastIndexOf('.'));
          }
          
          // Configurar imagen con Cloudinary SDK
          return cloudinaryRef.current.image(imageId)
            .format(autoFormat())
            .quality(auto())
            .resize(
              fill()
                .gravity(autoGravity())
                .width(150)
                .height(100)
            )
            .adjust(contrast(0))
            .setVersion(version.substring(1)); // Quitar la "v" inicial
        }
      }
      
      // Si el ID ya es simple, usarlo directamente
      return cloudinaryRef.current.image(publicId)
        .format(autoFormat())
        .quality(auto())
        .resize(
          fill()
            .gravity(autoGravity())
            .width(150)
            .height(100)
        )
        .adjust(contrast(0));
    } catch (error) {
      console.error('Error al procesar URL de Cloudinary:', error);
      return null;
    }
  };
  
  // Mostrar vista previa ampliada
  const handleImageHover = (imagen) => {
    if (isMobile) return; // No mostrar vista previa en móvil
    
    if (tooltipTimeout.current) {
      clearTimeout(tooltipTimeout.current);
    }
    tooltipTimeout.current = setTimeout(() => {
      setPreviewImage(imagen);
    }, 300);
  };
  
  // Ocultar vista previa
  const handleImageLeave = () => {
    if (tooltipTimeout.current) {
      clearTimeout(tooltipTimeout.current);
    }
    tooltipTimeout.current = setTimeout(() => {
      setPreviewImage(null);
    }, 300);
  };
  
  // Copiar URL al portapapeles
  const copyImageUrl = (url) => {
    navigator.clipboard.writeText(url)
      .then(() => {
        // Mostrar notificación temporal
        const notification = document.createElement('div');
        notification.className = 'fixed top-16 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50';
        notification.textContent = 'URL copiada al portapapeles';
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.remove();
        }, 2000);
      })
      .catch(err => {
        console.error('Error al copiar URL:', err);
      });
  };

  // Función para cargar las imágenes
  const loadImagenes = async () => {
    try {
      setLoading(true);
      console.log('Cargando imágenes...');
      const data = await galeriaService.getImagenesCarouselAdmin();
      console.log('Imágenes recibidas:', data);
      if (data && Array.isArray(data)) {
        // Ordenar por el campo orden
        const sortedData = data.sort((a, b) => a.orden - b.orden);
        console.log('Imágenes ordenadas:', sortedData);
        setImagenes(sortedData);
        setError(null);
      } else {
        console.error('Datos recibidos no son un array:', data);
        setImagenes([]);
        setError('Formato de datos incorrecto. Por favor, contacte al administrador.');
      }
    } catch (err) {
      console.error('Error al cargar las imágenes:', err);
      setError('Error al cargar las imágenes. Por favor, intenta de nuevo.');
      setImagenes([]);
    } finally {
      setLoading(false);
    }
  };

  // Manejar la eliminación de una imagen
  const handleDelete = async (id) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar esta imagen? Esta acción eliminará la imagen permanentemente de Cloudinary y no se podrá recuperar.')) {
      try {
        await galeriaService.purgeImagenCarousel(id);
        // Recargar las imágenes
        loadImagenes();
      } catch (err) {
        console.error('Error al eliminar la imagen:', err);
        setError('Error al eliminar la imagen. Por favor, intenta de nuevo.');
      }
    }
  };

  // Manejar cambios en el orden de las imágenes
  const handleOrderChange = async (id, direction) => {
    try {
      const currentIndex = imagenes.findIndex(img => img.id === id);
      if (
        (direction === 'up' && currentIndex === 0) || 
        (direction === 'down' && currentIndex === imagenes.length - 1)
      ) {
        return; // No hacer nada si ya está en el extremo
      }

      // Crear una copia de las imágenes
      const newImagenes = [...imagenes];
      const swapIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;
      
      // Intercambiar posiciones
      [newImagenes[currentIndex], newImagenes[swapIndex]] = 
      [newImagenes[swapIndex], newImagenes[currentIndex]];
      
      // Actualizar órdenes
      const updateData = newImagenes.map((img, index) => ({
        id: img.id,
        orden: index
      }));
      
      // Actualizar en el servidor
      await galeriaService.updateImagenesOrden(updateData);
      
      // Actualizar estado local
      setImagenes(newImagenes);
    } catch (err) {
      console.error('Error al cambiar el orden:', err);
      setError('Error al cambiar el orden. Por favor, intenta de nuevo.');
    }
  };

  // Manejar el arrastre y soltar para reordenar
  const handleDragEnd = async (result) => {
    if (!result.destination) return; // Si no hay destino, no hacer nada
    
    try {
      const items = Array.from(imagenes);
      const [reorderedItem] = items.splice(result.source.index, 1);
      items.splice(result.destination.index, 0, reorderedItem);
      
      // Actualizar órdenes
      const updateData = items.map((img, index) => ({
        id: img.id,
        orden: index
      }));
      
      // Actualizar en el servidor
      await galeriaService.updateImagenesOrden(updateData);
      
      // Actualizar estado local
      setImagenes(items);
    } catch (err) {
      console.error('Error al reordenar mediante drag and drop:', err);
      setError('Error al reordenar. Por favor, intenta de nuevo.');
    }
  };

  // Columnas de la tabla
  const columns = [
    {
      header: 'Orden',
      accessor: 'orden',
      cell: ({ row }) => (
        <div className="flex gap-1">
          <button 
            onClick={() => handleOrderChange(row.id, 'up')}
            className="p-1 text-blue-500 hover:text-blue-700"
            title="Mover arriba"
          >
            <FiArrowUp />
          </button>
          <button 
            onClick={() => handleOrderChange(row.id, 'down')}
            className="p-1 text-blue-500 hover:text-blue-700"
            title="Mover abajo"
          >
            <FiArrowDown />
          </button>
          <span className="ml-2">{row.orden + 1}</span>
        </div>
      )
    },
    {
      header: 'Imagen',
      accessor: 'imagen_url',
      cell: ({ value, row }) => (
        <div 
          className="relative group"
          onMouseEnter={() => handleImageHover(row)}
          onMouseLeave={handleImageLeave}
        >
          <div className="flex items-center justify-center h-[100px] w-[150px] bg-gray-100 rounded overflow-hidden border border-gray-200">
            {value && cloudinaryImages[row.id] ? (
              <AdvancedImage 
                cldImg={cloudinaryImages[row.id]}
                className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                alt={row.descripcion || 'Imagen de galería'}
              />
            ) : imageErrors[row.id] ? (
              <div className="flex flex-col items-center justify-center text-red-500 p-2 text-center">
                <FiAlertCircle size={24} className="mb-1" />
                <span className="text-xs">Error de imagen</span>
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center text-gray-400 p-2">
                <FiImage size={24} className="mb-1" />
                <span className="text-xs">Sin imagen</span>
              </div>
            )}
          </div>
          
          {/* Acciones rápidas para la imagen */}
          <div className="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity bg-black/50 rounded">
            <div className="flex gap-1">
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  window.open(value, '_blank');
                }}
                className="p-1 bg-white/90 rounded-full text-blue-600 hover:bg-white"
                title="Ver imagen completa"
              >
                <FiEye size={16} />
              </button>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  copyImageUrl(value);
                }}
                className="p-1 bg-white/90 rounded-full text-green-600 hover:bg-white"
                title="Copiar URL"
              >
                <FiCopy size={16} />
              </button>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  onEdit(row);
                }}
                className="p-1 bg-white/90 rounded-full text-purple-600 hover:bg-white"
                title="Editar imagen"
              >
                <FiEdit size={16} />
              </button>
            </div>
          </div>
        </div>
      )
    },
    {
      header: 'Descripción',
      accessor: 'descripcion',
      cell: ({ value, row }) => (
        <div className="max-w-xs">
          <div className="font-medium text-gray-800 mb-1 truncate">
            {value || <span className="text-gray-400 italic">Sin descripción</span>}
          </div>
          <div className="text-xs text-gray-500 flex items-center flex-wrap">
            {row.es_promocion && (
              <span className="inline-flex items-center px-2 py-1 mr-2 mb-1 rounded-full text-xs bg-yellow-100 text-yellow-800">
                <FiCheck className="mr-1" /> Promoción
              </span>
            )}
            <span className="text-xs text-gray-500">ID: {row.cloudinary_id || 'N/A'}</span>
          </div>
        </div>
      )
    },
    {
      header: 'Estado',
      accessor: 'activo',
      cell: ({ value }) => (
        <div className="flex flex-col items-start">
          <span className={`px-2 py-1 rounded-full text-xs ${
            value 
              ? 'bg-green-100 text-green-800 border border-green-200' 
              : 'bg-red-100 text-red-800 border border-red-200'
          }`}>
            {value ? 'Activo' : 'Inactivo'}
          </span>
        </div>
      )
    },
    {
      header: 'Acciones',
      accessor: 'actions',
      cell: ({ row }) => (
        <div className="flex space-x-3">
          <button
            onClick={() => onEdit(row)}
            className="p-1 text-blue-500 hover:text-blue-700"
            title="Editar"
          >
            <FiEdit />
          </button>
          <button
            onClick={() => handleDelete(row.id)}
            className="p-1 text-red-500 hover:text-red-700"
            title="Eliminar"
          >
            <FiTrash2 />
          </button>
          <a
            href={row.imagen_url}
            target="_blank"
            rel="noopener noreferrer"
            className="p-1 text-gray-500 hover:text-gray-700"
            title="Ver imagen"
          >
            <FiEye />
          </a>
          <button
            onClick={() => copyImageUrl(row.imagen_url)}
            className="p-1 text-green-500 hover:text-green-700"
            title="Copiar URL"
          >
            <FiCopy />
          </button>
        </div>
      )
    }
  ];

  // Renderizar tarjeta para vista móvil
  const renderMobileCard = (imagen, index) => (
    <Draggable 
      key={imagen.id.toString()} 
      draggableId={imagen.id.toString()} 
      index={index}
    >
      {(provided) => (
        <div
          ref={provided.innerRef}
          {...provided.draggableProps}
          {...provided.dragHandleProps}
          className="bg-white rounded-lg shadow-sm border border-gray-200 mb-4 overflow-hidden"
        >
          <div className="flex flex-col sm:flex-row">
            {/* Imagen y orden */}
            <div className="relative w-full sm:w-1/3">
              <div className="flex items-center justify-center h-[180px] bg-gray-100 overflow-hidden">
                {imagen.imagen_url && cloudinaryImages[imagen.id] ? (
                  <AdvancedImage 
                    cldImg={cloudinaryImages[imagen.id]}
                    className="w-full h-full object-cover"
                    alt={imagen.descripcion || 'Imagen de galería'}
                  />
                ) : imageErrors[imagen.id] ? (
                  <div className="flex flex-col items-center justify-center text-red-500 p-2 text-center">
                    <FiAlertCircle size={36} className="mb-1" />
                    <span className="text-sm">Error de imagen</span>
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center text-gray-400 p-2">
                    <FiImage size={36} className="mb-1" />
                    <span className="text-sm">Sin imagen</span>
                  </div>
                )}
                
                {/* Orden */}
                <div className="absolute top-2 left-2 bg-white/90 rounded-full px-2 py-1 text-xs font-bold shadow-sm">
                  #{imagen.orden + 1}
                </div>
              </div>
            </div>
            
            {/* Información */}
            <div className="p-4 flex-1">
              <div className="flex justify-between items-start mb-2">
                <div>
                  <h3 className="font-medium text-gray-800 mb-1">
                    {imagen.descripcion || <span className="text-gray-400 italic">Sin descripción</span>}
                  </h3>
                  <div className="flex flex-wrap gap-2 mb-2">
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      imagen.activo 
                        ? 'bg-green-100 text-green-800 border border-green-200' 
                        : 'bg-red-100 text-red-800 border border-red-200'
                    }`}>
                      {imagen.activo ? 'Activo' : 'Inactivo'}
                    </span>
                    
                    {imagen.es_promocion && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-yellow-100 text-yellow-800">
                        <FiCheck className="mr-1" /> Promoción
                      </span>
                    )}
                  </div>
                  <p className="text-xs text-gray-500 mb-3">ID: {imagen.cloudinary_id || 'N/A'}</p>
                </div>
              </div>
              
              {/* Controles de orden */}
              <div className="flex items-center mb-3 border-t border-b border-gray-100 py-2">
                <span className="text-xs text-gray-500 mr-2">Cambiar orden:</span>
                <button 
                  onClick={() => handleOrderChange(imagen.id, 'up')}
                  className="p-1 text-blue-500 hover:text-blue-700 mr-1"
                  title="Mover arriba"
                  disabled={imagen.orden === 0}
                >
                  <FiArrowUp />
                </button>
                <button 
                  onClick={() => handleOrderChange(imagen.id, 'down')}
                  className="p-1 text-blue-500 hover:text-blue-700"
                  title="Mover abajo"
                  disabled={imagen.orden === imagenes.length - 1}
                >
                  <FiArrowDown />
                </button>
              </div>
              
              {/* Acciones */}
              <div className="flex justify-between">
                <div className="flex space-x-2">
                  <button
                    onClick={() => onEdit(imagen)}
                    className="px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 flex items-center"
                  >
                    <FiEdit className="mr-1" /> Editar
                  </button>
                  <button
                    onClick={() => handleDelete(imagen.id)}
                    className="px-3 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700 flex items-center"
                  >
                    <FiTrash2 className="mr-1" /> Eliminar
                  </button>
                </div>
                <div className="flex space-x-2">
                  <a
                    href={imagen.imagen_url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="px-3 py-1 text-xs bg-gray-600 text-white rounded hover:bg-gray-700 flex items-center"
                  >
                    <FiEye className="mr-1" /> Ver
                  </a>
                  <button
                    onClick={() => copyImageUrl(imagen.imagen_url)}
                    className="px-3 py-1 text-xs bg-green-600 text-white rounded hover:bg-green-700 flex items-center"
                  >
                    <FiCopy className="mr-1" /> Copiar URL
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </Draggable>
  );

  if (loading) {
    return (
      <div className="flex flex-col justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
        <p className="mt-4 text-gray-600">Cargando imágenes de la galería...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 rounded-md bg-red-50 text-red-800 border border-red-200">
        <p>{error}</p>
        <button 
          onClick={loadImagenes}
          className="mt-2 text-sm text-red-800 underline hover:text-red-900"
        >
          Reintentar
        </button>
      </div>
    );
  }

  return (
    <div>
      <div className="flex justify-between mb-4">
        <h2 className="text-xl font-semibold">Galería de Imágenes</h2>
      </div>
      
      {/* Vista previa ampliada al hacer hover (solo para desktop) */}
      {previewImage && !isMobile && (
        <div 
          className="fixed z-50 shadow-xl rounded-lg overflow-hidden border-2 border-white"
          style={{ 
            top: '50%', 
            left: '50%', 
            transform: 'translate(-50%, -50%)',
            maxWidth: '90vw',
            maxHeight: '90vh'
          }}
          onMouseLeave={handleImageLeave}
        >
          {previewImage.imagen_url && cloudinaryImages[previewImage.id] && (
            <AdvancedImage 
              cldImg={cloudinaryRef.current.image(previewImage.imagen_url)
                .format(autoFormat())
                .quality(auto())
                .resize(fill().gravity(autoGravity()).width(800).height(600))}
              className="max-w-full max-h-full object-contain"
              alt={previewImage.descripcion || 'Vista previa'}
            />
          )}
        </div>
      )}
      
      {/* Mensaje cuando no hay imágenes */}
      {imagenes.length === 0 ? (
        <div className="text-center py-12 bg-gray-50 rounded-lg border border-dashed border-gray-300 mt-4">
          <FiImage size={48} className="mx-auto text-gray-400 mb-3" />
          <p className="text-gray-500 mb-2">No hay imágenes disponibles en la galería</p>
          <button
            onClick={onNewClick}
            className="px-4 py-2 mt-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition duration-200 text-sm"
          >
            Agregar primera imagen
          </button>
        </div>
      ) : (
        <>
          {/* Vista de tarjetas para móvil usando Drag and Drop */}
          {isMobile ? (
            <DragDropContext onDragEnd={handleDragEnd}>
              <Droppable droppableId="imagenes-galeria">
                {(provided) => (
                  <div
                    {...provided.droppableProps}
                    ref={provided.innerRef}
                    className="space-y-4"
                  >
                    {imagenes.map((imagen, index) => (
                      renderMobileCard(imagen, index)
                    ))}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
            </DragDropContext>
          ) : (
            /* Vista de tabla para escritorio */
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    {columns.map((column, index) => (
                      <th 
                        key={index}
                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                      >
                        {column.header}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {imagenes.map((imagen) => (
                    <tr key={imagen.id} className="hover:bg-gray-50">
                      {columns.map((column, index) => (
                        <td key={index} className="px-6 py-4 whitespace-nowrap">
                          {column.cell({ 
                            value: imagen[column.accessor], 
                            row: imagen 
                          })}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </>
      )}
    </div>
  );
});

export default GaleriaTable;
\n\n
=== ./galeria/pages/index.js ===
// Exportar todos los componentes de galeria/pages
\n\n
=== ./galeria/services/galeriaService.js ===
import axios from 'axios';
import { axiosInstance } from '@/components/axiosConfig';

// Servicio para la gestión del carrusel de imágenes en el Home
const API_PATH = '/galeria-home';

// Obtener todas las imágenes activas (para uso público)
export const getImagenesCarousel = async () => {
  try {
    const response = await axiosInstance.get(`${API_PATH}`);
    return response.data;
  } catch (error) {
    console.error('Error al obtener imágenes del carrusel:', error);
    throw error;
  }
};

// Obtener todas las promociones activas (para uso público)
export const getPromocionesCarousel = async () => {
  try {
    const response = await axiosInstance.get(`${API_PATH}/promociones`);
    return response.data;
  } catch (error) {
    console.error('Error al obtener promociones del mes:', error);
    throw error;
  }
};

// Obtener todas las imágenes (activas e inactivas) para administración
export const getImagenesCarouselAdmin = async () => {
  try {
    const response = await axiosInstance.get(`${API_PATH}/admin`);
    return response.data;
  } catch (error) {
    console.error('Error al obtener imágenes del carrusel (admin):', error);
    throw error;
  }
};

// Obtener una imagen específica por ID
export const getImagenCarouselById = async (id) => {
  try {
    const response = await axiosInstance.get(`${API_PATH}/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error al obtener la imagen con ID ${id}:`, error);
    throw error;
  }
};

// Crear una nueva imagen para el carrusel
export const createImagenCarousel = async (imagenData) => {
  try {
    const response = await axiosInstance.post(`${API_PATH}`, imagenData);
    return response.data;
  } catch (error) {
    console.error('Error al crear la imagen del carrusel:', error);
    throw error;
  }
};

// Actualizar una imagen existente
export const updateImagenCarousel = async (id, imagenData) => {
  try {
    const response = await axiosInstance.put(`${API_PATH}/${id}`, imagenData);
    return response.data;
  } catch (error) {
    console.error(`Error al actualizar la imagen con ID ${id}:`, error);
    throw error;
  }
};

// Actualizar el orden de múltiples imágenes
export const updateImagenesOrden = async (ordenData) => {
  try {
    const response = await axiosInstance.put(`${API_PATH}/orden/actualizar`, ordenData);
    return response.data;
  } catch (error) {
    console.error('Error al actualizar el orden de las imágenes:', error);
    throw error;
  }
};

// Desactivar una imagen (eliminación lógica)
export const deleteImagenCarousel = async (id) => {
  try {
    const response = await axiosInstance.delete(`${API_PATH}/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error al desactivar la imagen con ID ${id}:`, error);
    throw error;
  }
};

// Eliminar permanentemente una imagen
export const purgeImagenCarousel = async (id) => {
  try {
    const response = await axiosInstance.delete(`${API_PATH}/purge/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error al eliminar permanentemente la imagen con ID ${id}:`, error);
    throw error;
  }
};

// Función auxiliar para subir una imagen a Cloudinary
export const uploadImageToCloudinary = async (file) => {
  const formData = new FormData();
  formData.append('file', file);
  formData.append('upload_preset', import.meta.env.VITE_CLOUDINARY_UPLOAD_PRESET || 'ml_default');
  
  try {
    // Asegurar que el cloud name esté en minúsculas para evitar problemas de sensibilidad a mayúsculas/minúsculas
    const cloudName = (import.meta.env.VITE_CLOUDINARY_CLOUD_NAME || 'tramboory').toLowerCase();
    const response = await axios.post(
      `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`,
      formData
    );
    return {
      url: response.data.secure_url,
      cloudinary_id: response.data.public_id
    };
  } catch (error) {
    console.error('Error al subir imagen a Cloudinary:', error);
    throw error;
  }
};

// Función para subir archivos (PDF, XML, etc.) a Cloudinary
export const uploadFileToCloudinary = async (file) => {
  const formData = new FormData();
  formData.append('file', file);
  formData.append('upload_preset', import.meta.env.VITE_CLOUDINARY_UPLOAD_PRESET || 'ml_default');
  
  try {
    // Asegurar que el cloud name esté en minúsculas para evitar problemas
    const cloudName = (import.meta.env.VITE_CLOUDINARY_CLOUD_NAME || 'tramboory').toLowerCase();
    
    // Determina si es un archivo PDF o XML para usar el endpoint correcto
    const resourceType = file.type.includes('pdf') || file.type.includes('xml') ? 'raw' : 'auto';
    
    const response = await axios.post(
      `https://api.cloudinary.com/v1_1/${cloudName}/${resourceType}/upload`,
      formData
    );
    
    return {
      url: response.data.secure_url,
      cloudinary_id: response.data.public_id
    };
  } catch (error) {
    console.error('Error al subir archivo a Cloudinary:', error);
    throw error;
  }
};

// Función para subir múltiples imágenes a Cloudinary
export const uploadMultipleImagesToCloudinary = async (files) => {
  try {
    // Realizar las subidas en paralelo
    const uploadPromises = files.map(file => uploadImageToCloudinary(file));
    return await Promise.all(uploadPromises);
  } catch (error) {
    console.error('Error al subir múltiples imágenes a Cloudinary:', error);
    throw error;
  }
};

export default {
  getImagenesCarousel,
  getPromocionesCarousel,
  getImagenesCarouselAdmin,
  getImagenCarouselById,
  createImagenCarousel,
  updateImagenCarousel,
  updateImagenesOrden,
  deleteImagenCarousel,
  purgeImagenCarousel,
  uploadImageToCloudinary,
  uploadMultipleImagesToCloudinary,
  uploadFileToCloudinary
};\n\n
=== ./galeria/services/index.js ===
// Exportar todos los componentes de galeria/services
\n\n
=== ./index.js ===
// Exportar dominios
\n\n
=== ./inventario/components/InventoryLoader.jsx ===
import React from 'react';
import { FiPackage } from 'react-icons/fi';

/**
 * Componente de carga para el módulo de inventario
 * Muestra una animación mientras se cargan datos
 */
const InventoryLoader = () => {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-indigo-50 to-purple-50">
      <div className="text-center">
        <div className="relative mb-4">
          <FiPackage className="text-indigo-500 w-16 h-16 mb-2 mx-auto" />
          <div className="absolute top-0 left-0 w-full h-full flex items-center justify-center">
            <div className="w-20 h-20 border-t-4 border-b-4 border-indigo-500 rounded-full animate-spin"></div>
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-700 mb-2">Cargando Sistema de Inventario</h2>
        <p className="text-gray-500">Por favor espere mientras preparamos todo...</p>
      </div>
    </div>
  );
};

export default InventoryLoader;\n\n
=== ./inventario/components/InventoryMenu.jsx ===
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  FiPackage, 
  FiHome, 
  FiArchive, 
  FiTruck, 
  FiBox, 
  FiRepeat, 
  FiSettings, 
  FiAlertTriangle,
  FiRefreshCw,
  FiMenu,
  FiX,
  FiChevronRight
} from 'react-icons/fi';

const InventoryMenu = ({ activeSection, setActiveSection }) => {
  // Inicialmente cerrado en móvil, abierto en desktop
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  
  // Detectar si estamos en desktop o móvil para configuración inicial
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 1024) { // lg breakpoint
        setIsMenuOpen(true);
      } else {
        setIsMenuOpen(false);
      }
    };
    
    // Configuración inicial
    handleResize();
    
    // Listener para cambios de tamaño
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const menuItems = [
    { id: 'dashboard', icon: FiHome, label: 'Dashboard' },
    { id: 'materias-primas', icon: FiPackage, label: 'Materias Primas' },
    { id: 'unidades-medida', icon: FiRepeat, label: 'Unidades de Medida' },
    { id: 'proveedores', icon: FiTruck, label: 'Proveedores' },
    { id: 'lotes', icon: FiBox, label: 'Lotes' },
    { id: 'movimientos', icon: FiRefreshCw, label: 'Movimientos' },
    { id: 'tipos-ajuste', icon: FiSettings, label: 'Tipos de Ajuste' },
    { id: 'conversiones', icon: FiRepeat, label: 'Conversiones' },
    { id: 'alertas', icon: FiAlertTriangle, label: 'Alertas' },
  ];

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  // Mini barra lateral para dispositivos móviles cuando el menú está cerrado
  const MiniNavbar = () => (
    <div className="fixed bottom-0 left-0 right-0 lg:hidden bg-indigo-700 text-white flex justify-around items-center py-2 px-1 z-10 shadow-lg">
      {menuItems.slice(0, 5).map((item) => (
        <button
          key={item.id}
          onClick={() => {
            setActiveSection(item.id);
          }}
          className={`flex flex-col items-center justify-center p-2 rounded-lg transition-colors duration-200 ${
            activeSection === item.id
              ? 'bg-indigo-600 text-white'
              : 'text-indigo-100'
          }`}
          aria-label={item.label}
        >
          <item.icon className="text-lg" />
          <span className="text-xs mt-1 hidden sm:block">{item.label.substring(0, 5)}</span>
        </button>
      ))}
      <button
        onClick={toggleMenu}
        className="flex flex-col items-center justify-center p-2 rounded-lg text-indigo-100"
        aria-label="Más opciones"
      >
        <FiChevronRight className="text-lg" />
        <span className="text-xs mt-1 hidden sm:block">Más</span>
      </button>
    </div>
  );

  return (
    <>
      {/* Botón de menú móvil */}
      <button
        className="lg:hidden fixed top-3 left-3 z-30 p-2 bg-indigo-600 text-white rounded-full shadow-lg flex items-center justify-center w-10 h-10"
        onClick={toggleMenu}
        aria-label={isMenuOpen ? "Cerrar menú" : "Abrir menú"}
      >
        {isMenuOpen ? <FiX size={20} /> : <FiMenu size={20} />}
      </button>

      {/* Menú lateral principal */}
      <AnimatePresence>
        {isMenuOpen && (
          <>
            <motion.aside
              initial={{ x: -280 }}
              animate={{ x: 0 }}
              exit={{ x: -280 }}
              transition={{ type: "spring", bounce: 0.1, duration: 0.4 }}
              className={`fixed lg:static z-20 h-[calc(100%-4rem)] lg:h-full bg-indigo-700 text-white w-[260px] lg:w-64 p-4 pt-16 lg:pt-6 shadow-lg overflow-y-auto flex flex-col`}
            >
              <div className="flex items-center mb-6 px-2">
                <FiArchive className="text-white mr-3 text-xl" />
                <h1 className="text-xl font-bold">Inventario</h1>
              </div>

              <nav className="flex-1">
                <ul className="space-y-1">
                  {menuItems.map((item) => (
                    <li key={item.id}>
                      <button
                        onClick={() => {
                          setActiveSection(item.id);
                          if (window.innerWidth < 1024) {
                            setIsMenuOpen(false);
                          }
                        }}
                        className={`w-full flex items-center p-3 rounded-lg transition-all duration-200 ${
                          activeSection === item.id
                            ? 'bg-indigo-500 text-white font-medium shadow-sm'
                            : 'text-indigo-100 hover:bg-indigo-600'
                        }`}
                      >
                        <item.icon className="mr-3 text-lg" />
                        <span>{item.label}</span>
                      </button>
                    </li>
                  ))}
                </ul>
              </nav>

              <div className="pt-4 mt-auto border-t border-indigo-600 hidden lg:block">
                <p className="px-3 text-xs text-indigo-300">Sistema de Inventario v1.0</p>
              </div>
            </motion.aside>

            {/* Overlay para cerrar el menú en móvil */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="lg:hidden fixed inset-0 bg-black bg-opacity-50 z-10"
              onClick={() => setIsMenuOpen(false)}
            />
          </>
        )}
      </AnimatePresence>

      {/* Barra inferior de navegación rápida en móvil */}
      {!isMenuOpen && <MiniNavbar />}
    </>
  );
};

export default InventoryMenu;\n\n
=== ./inventario/components/InventorySidebar.jsx ===
import { useState, useEffect, useRef } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { toast } from 'react-toastify';
import {
  FiHome,
  FiBox,
  FiTruck,
  FiActivity,
  FiAlertTriangle,
  FiSettings,
  FiLogOut,
  FiChevronLeft,
  FiDatabase,
  FiPackage,
  FiRepeat,
  FiMenu,
  FiUser,
  FiSearch,
  FiBell,
  FiHelpCircle,
  FiSun,
  FiMoon
} from 'react-icons/fi';
import { useTheme } from '@shared/context/ThemeContext';
import ThemeToggle from '@shared/components/ThemeToggle';
import Logo from '@shared/src/img/logo.webp';
import DatabaseConnectionStatus from '@shared/components/DatabaseConnectionStatus';

// Componente para cada item de navegación
const NavItem = ({ icon: Icon, label, path, active, isCollapsed, hasBadge }) => {
  return (
    <Link
      to={path}
      className="relative group flex items-center p-3 my-1 rounded-lg transition-all duration-300"
      style={active 
        ? { background: 'var(--accent-color)', color: '#ffffff', boxShadow: '0 4px 6px -1px var(--shadow-color)' } 
        : { 
            color: 'var(--text-secondary)',
            ':hover': {
              backgroundColor: 'var(--component-hover)',
              color: 'var(--accent-color)'
            } 
          }
      }
    >
      {/* Indicador lateral para item activo */}
      {active && (
        <motion.div 
          className="absolute -left-1 top-1/2 -translate-y-1/2 w-1 h-10 rounded-full"
          style={{ backgroundColor: 'var(--accent-color)' }}
          layoutId="activeIndicator"
          transition={{ type: 'spring', stiffness: 300, damping: 30 }}
        />
      )}
      
      <div className="relative flex items-center">
        <Icon size={20} className={active ? 'drop-shadow-md' : ''} />
        
        {/* Efecto de ping para alertas */}
        {hasBadge && (
          <span className="absolute -top-1 -right-1 flex h-2 w-2">
            <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
            <span className="relative inline-flex rounded-full h-2 w-2 bg-red-500"></span>
          </span>
        )}
      </div>
      
      <AnimatePresence>
        {!isCollapsed && (
          <motion.span 
            initial={{ opacity: 0, x: -10 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -10 }}
            transition={{ duration: 0.2 }}
            className="ml-3 font-medium"
          >
            {label}
          </motion.span>
        )}
      </AnimatePresence>
    </Link>
  );
};

const InventorySidebar = ({ isCollapsed, setIsCollapsed }) => {
  const location = useLocation();
  const navigate = useNavigate();
  const sidebarRef = useRef(null);
  const timeoutRef = useRef(null);
  // const { user, logout } = useAuth(); // Uncomment when using real auth
  const { theme, toggleTheme } = useTheme(); // Hook para acceder al tema
  const isDark = theme === 'dark';
  
  // Estado para la animación inicial
  const [hasAnimated, setHasAnimated] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);
  
  // Efecto para la animación inicial
  useEffect(() => {
    if (!hasAnimated) {
      setTimeout(() => setHasAnimated(true), 300);
    }
  }, [hasAnimated]);
  
  // Función de logout temporal para pruebas
  const logout = () => {
    // Uncomment for real logout functionality
    // try {
    //   await logoutUser();
    //   navigate('/signin');
    //   toast.success('Sesión cerrada exitosamente');
    // } catch (error) {
    //   toast.error('Error al cerrar sesión');
    // }
    console.log('Logout clicked');
    toast.success('Sesión cerrada exitosamente');
    navigate('/signin');
  };

  // Función para manejar el mouseEnter
  const handleMouseEnter = () => {
    if (isCollapsed) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = setTimeout(() => {
        setIsCollapsed(false);
      }, 300); // Pequeño delay para evitar expansiones accidentales
    }
  };

  // Función para manejar el mouseLeave
  const handleMouseLeave = () => {
    clearTimeout(timeoutRef.current);
    timeoutRef.current = setTimeout(() => {
      setIsCollapsed(true);
    }, 500); // Delay para dar tiempo al usuario si quiere volver
  };
  
  // Definir los elementos de navegación
  const mainNavItems = [
    { 
      icon: FiHome, 
      label: 'Dashboard', 
      path: '/inventory',
      active: location.pathname === '/inventory'
    },
    { 
      icon: FiBox, 
      label: 'Materias Primas', 
      path: '/inventory/materias-primas',
      active: location.pathname.includes('/materias-primas')
    },
    { 
      icon: FiPackage, 
      label: 'Lotes', 
      path: '/inventory/lotes',
      active: location.pathname.includes('/lotes')
    },
    { 
      icon: FiActivity, 
      label: 'Movimientos', 
      path: '/inventory/movimientos',
      active: location.pathname.includes('/movimientos')
    },
    { 
      icon: FiAlertTriangle, 
      label: 'Alertas', 
      path: '/inventory/alertas',
      active: location.pathname.includes('/alertas'),
      hasBadge: true
    }
  ];

  const secondaryNavItems = [
    { 
      icon: FiTruck, 
      label: 'Proveedores', 
      path: '/inventory/proveedores',
      active: location.pathname.includes('/proveedores')
    },
    { 
      icon: FiRepeat, 
      label: 'Unidades', 
      path: '/inventory/unidades-medida',
      active: location.pathname.includes('/unidades-medida')
    },
    { 
      icon: FiRepeat, 
      label: 'Conversiones', 
      path: '/inventory/conversiones',
      active: location.pathname.includes('/conversiones')
    },
    { 
      icon: FiSettings, 
      label: 'Tipos de Ajuste', 
      path: '/inventory/tipos-ajuste',
      active: location.pathname.includes('/tipos-ajuste')
    }
  ];

  // Animaciones para la barra lateral
  const sidebarVariants = {
    expanded: { width: '240px' },
    collapsed: { width: '72px' }
  };

  return (
    <motion.div 
      ref={sidebarRef}
      className="h-screen flex flex-col shadow-lg z-30 fixed left-0 top-0 overflow-hidden"
      style={{ 
        backgroundColor: 'var(--sidebar-bg)',
        color: 'var(--sidebar-text)',
        borderRight: '1px solid var(--sidebar-border)'
      }}
      initial={isCollapsed ? "collapsed" : "expanded"}
      animate={isCollapsed ? "collapsed" : "expanded"}
      variants={sidebarVariants}
      transition={{ duration: 0.3, ease: [0.4, 0, 0.2, 1] }}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      {/* Cabecera de la barra lateral */}
      <div className="sticky top-0 z-10" style={{ backgroundColor: 'var(--sidebar-bg)' }}>
        <div className={`px-4 py-3 flex ${isCollapsed ? 'justify-center' : 'justify-between'}`}
          style={{ 
            borderBottom: '1px solid var(--sidebar-border)',
            backgroundColor: 'var(--sidebar-bg)'
          }}>
          <Link to="/inventory" className="flex items-center">
            <img src={Logo} alt="Logo" className="h-10 w-auto" />
            
            <AnimatePresence>
              {!isCollapsed && (
                <motion.span 
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: -10 }}
                  transition={{ duration: 0.3 }}
                  className="ml-2 font-bold text-lg"
                  style={{ color: 'var(--text-primary)' }}
                >
                  Inventario
                </motion.span>
              )}
            </AnimatePresence>
          </Link>
          
          {!isCollapsed && (
            <button 
              onClick={() => setIsCollapsed(true)}
              className="p-1.5 rounded-full"
              style={{ 
                color: 'var(--text-secondary)',
                ':hover': { backgroundColor: 'var(--component-hover)' } 
              }}
            >
              <FiChevronLeft size={18} />
            </button>
          )}
        </div>

        {/* Barra de búsqueda */}
        <div className={`px-3 py-2 ${isCollapsed ? 'hidden' : 'block'}`} 
          style={{ borderBottom: '1px solid var(--sidebar-border)' }}
        >
          <div className="relative">
            <input
              type="text"
              placeholder="Buscar..."
              className="w-full pl-8 pr-3 py-1.5 text-sm rounded-lg focus:outline-none focus:ring-1"
              style={{ 
                backgroundColor: 'var(--input-bg)', 
                color: 'var(--input-text)', 
                borderColor: 'var(--input-border)',
                ":focus": { 
                  borderColor: 'var(--color-accent-primary)',
                  ringColor: 'var(--color-accent-primary)' 
                }
              }}
            />
            <FiSearch className="absolute left-2.5 top-2.5" style={{ color: 'var(--icon-color)' }} size={16} />
          </div>
        </div>

        {/* User profile section (Movido desde TopBar) */}
        <div className={`px-3 py-2 ${isCollapsed ? 'justify-center' : 'flex items-center'}`}
          style={{ borderBottom: '1px solid var(--sidebar-border)' }}
        >
          {isCollapsed ? (
            <div className="flex justify-center py-2">
              <div className="w-8 h-8 rounded-full flex items-center justify-center" 
                style={{ 
                  backgroundColor: 'var(--color-accent-secondary)', 
                  color: 'var(--accent-text)' 
                }}>
                <FiUser size={16} />
              </div>
            </div>
          ) : (
            <div className="flex items-center justify-between w-full">
              <div className="flex items-center">
                <div className="w-8 h-8 rounded-full flex items-center justify-center" 
                  style={{ 
                    backgroundColor: 'var(--color-accent-secondary)', 
                    color: 'var(--accent-text)' 
                  }}>
                  <FiUser size={16} />
                </div>
                <div className="ml-2">
                  <p className="text-sm font-medium" style={{ color: 'var(--text-primary)' }}>Admin User</p>
                  <p className="text-xs" style={{ color: 'var(--text-secondary)' }}>admin@example.com</p>
                </div>
              </div>
              <div className="relative">
                <button 
                  className="p-1.5 rounded-full relative"
                  style={{ 
                    color: 'var(--icon-color)',
                    ':hover': { backgroundColor: 'var(--component-hover)' } 
                  }}
                  onClick={() => setShowNotifications(!showNotifications)}
                >
                  <FiBell size={18} />
                  <span className="absolute top-0 right-0 h-2 w-2 bg-red-500 rounded-full"></span>
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Elementos de navegación principal */}
      <div className="flex-1 overflow-y-auto py-3 px-2">
        <div className="mb-6">
          {!isCollapsed && (
            <h3 className="px-3 my-2 text-xs font-semibold uppercase" style={{ color: 'var(--text-secondary)' }}>Principal</h3>
          )}
          
          {mainNavItems.map((item, index) => (
            <NavItem 
              key={item.path}
              icon={item.icon} 
              label={item.label} 
              path={item.path} 
              active={item.active}
              isCollapsed={isCollapsed}
              hasBadge={item.hasBadge}
            />
          ))}
        </div>
        
        {/* Navegación secundaria */}
        <div className="mb-6">
          {!isCollapsed && (
            <h3 className="px-3 my-2 text-xs font-semibold uppercase" style={{ color: 'var(--text-secondary)' }}>Configuración</h3>
          )}
          
          {secondaryNavItems.map((item, index) => (
            <NavItem 
              key={item.path}
              icon={item.icon} 
              label={item.label} 
              path={item.path} 
              active={item.active}
              isCollapsed={isCollapsed}
            />
          ))}
        </div>
      </div>
      
      {/* Pie de la barra lateral */}
      <div className="mt-auto pt-2 pb-4 px-2" style={{ 
        borderTop: '1px solid var(--sidebar-border)',
        backgroundColor: 'var(--sidebar-footer-bg)'
      }}>
        {/* Estado de conexión a la base de datos */}
        <div className="mb-2 px-1">
          {isCollapsed ? (
            <div className="flex justify-center">
              <FiDatabase size={18} style={{ color: 'var(--alert-success-text)' }} title="Conexión a base de datos: Activa" />
            </div>
          ) : (
            <DatabaseConnectionStatus />
          )}
        </div>
        
        <div className="flex flex-col gap-1">
          {/* Botón de alternancia de tema */}
          {!isCollapsed ? (
            <ThemeToggle className="flex items-center p-2 rounded-lg" style={{ 
              color: 'var(--text-secondary)',
              ':hover': { 
                backgroundColor: 'var(--component-hover)', 
                color: 'var(--accent-color)' 
              }
            }} />
          ) : (
            <div className="flex justify-center">
              <button
                onClick={toggleTheme}
                className="p-2 rounded-lg"
                style={{ color: isDark ? 'var(--theme-toggle-light)' : 'var(--theme-toggle-dark)' }}
              >
                {isDark ? <FiSun size={20} /> : <FiMoon size={20} />}
              </button>
            </div>
          )}
          
          {!isCollapsed && (
            <Link to="/help" className="flex items-center p-2 rounded-lg" style={{ 
              color: 'var(--text-secondary)',
              ':hover': { 
                backgroundColor: 'var(--component-hover)', 
                color: 'var(--accent-color)' 
              }
            }}>
              <FiHelpCircle size={20} />
              <span className="ml-3">Ayuda</span>
            </Link>
          )}
          
          <button
            onClick={logout}
            className="flex items-center p-2 rounded-lg"
            style={{ 
              color: 'var(--text-secondary)',
              ':hover': { 
                backgroundColor: 'var(--component-hover)', 
                color: 'var(--accent-color)' 
              }
            }}
          >
            <FiLogOut size={20} />
            {!isCollapsed && <span className="ml-3">Cerrar Sesión</span>}
          </button>
        </div>
      </div>
      
      {/* Panel de notificaciones (expandible) */}
      <AnimatePresence>
        {showNotifications && !isCollapsed && (
          <motion.div 
            className="absolute top-20 right-3 rounded-lg shadow-lg border w-72 z-50"
            style={{ 
              backgroundColor: 'var(--card-bg)', 
              borderColor: 'var(--card-border)' 
            }}
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
          >
            <div className="p-3" style={{ 
              borderBottom: '1px solid var(--card-border)' 
            }}>
              <h3 className="font-medium" style={{ color: 'var(--text-primary)' }}>Notificaciones</h3>
            </div>
            <div className="max-h-80 overflow-y-auto p-2">
              <div className="flex items-start p-2 rounded-lg cursor-pointer transition-colors duration-200"
                style={{ 
                  ':hover': { backgroundColor: 'var(--component-hover)' } 
                }}>
                <div className="p-1.5 bg-amber-100 text-amber-600 rounded-full">
                  <FiAlertTriangle size={16} />
                </div>
                <div className="ml-2">
                  <p className="text-sm font-medium" style={{ color: 'var(--text-primary)' }}>Stock bajo</p>
                  <p className="text-xs" style={{ color: 'var(--text-secondary)' }}>Azúcar: por debajo del mínimo</p>
                  <p className="text-xs mt-1" style={{ color: 'var(--text-tertiary)' }}>Hace 10 minutos</p>
                </div>
              </div>
              <div className="flex items-start p-2 rounded-lg cursor-pointer transition-colors duration-200"
                style={{ 
                  ':hover': { backgroundColor: 'var(--component-hover)' } 
                }}>
                <div className="p-1.5 bg-red-100 text-red-600 rounded-full">
                  <FiAlertTriangle size={16} />
                </div>
                <div className="ml-2">
                  <p className="text-sm font-medium" style={{ color: 'var(--text-primary)' }}>Alerta de caducidad</p>
                  <p className="text-xs" style={{ color: 'var(--text-secondary)' }}>Lote L0023 caducará en 3 días</p>
                  <p className="text-xs mt-1" style={{ color: 'var(--text-tertiary)' }}>Hace 35 minutos</p>
                </div>
              </div>
            </div>
            <div className="p-2" style={{ borderTop: '1px solid var(--card-border)' }}>
              <button 
                className="w-full text-center text-xs font-medium p-1 rounded transition-colors duration-200"
                style={{ 
                  color: 'var(--accent-color)',
                  ':hover': { 
                    backgroundColor: 'var(--component-hover)' 
                  }
                }}
              >
                Ver todas las notificaciones
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
      
      {/* Mobile menu button */}
      {isCollapsed && (
        <button
          className="lg:hidden fixed bottom-4 right-4 z-30 p-3 rounded-full shadow-lg"
          style={{ 
            backgroundColor: 'var(--accent-color)', 
            color: 'var(--accent-text)' 
          }}
          onClick={() => setIsCollapsed(false)}
        >
          <FiMenu size={20} />
        </button>
      )}
    </motion.div>
  );
};

export default InventorySidebar;\n\n
=== ./inventario/components/InventorySidebarLayout.jsx ===
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useTheme } from '@shared/context/ThemeContext';
import InventorySidebar from './InventorySidebar';
import { Breadcrumb } from '../ui'; // Import from ui components
const InventorySidebarLayout = ({ children }) => {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [breadcrumbItems, setBreadcrumbItems] = useState([]);
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  // Detectar si es un dispositivo móvil
  useEffect(() => {
    const checkIfMobile = () => {
      const mobile = window.innerWidth < 1024;
      setIsMobile(mobile);
      setIsCollapsed(mobile);
    };

    checkIfMobile();
    window.addEventListener('resize', checkIfMobile);
    
    return () => {
      window.removeEventListener('resize', checkIfMobile);
    };
  }, []);

  // Variantes para la animación del contenido principal
  const mainContentVariants = {
    expanded: { marginLeft: '240px' },
    collapsed: { marginLeft: '72px' },
    mobile: { marginLeft: '0px' }
  };

  // Handle navigation for breadcrumbs
  const handleNavigate = (path) => {
    console.log('Navigate to:', path);
    // Implementation of navigation logic
  };

  return (
    <div className="flex h-screen" style={{ backgroundColor: 'var(--crm-bg)' }}>
      {/* Barra lateral */}
      <InventorySidebar 
        isCollapsed={isCollapsed} 
        setIsCollapsed={setIsCollapsed} 
      />
      
      {/* Contenido principal */}
      <motion.main 
        className="flex-1 overflow-auto"
        style={{ 
          backgroundColor: 'var(--crm-bg)',
          color: 'var(--crm-text)'
        }}
        initial={isMobile ? "mobile" : (isCollapsed ? "collapsed" : "expanded")}
        animate={isMobile ? "mobile" : (isCollapsed ? "collapsed" : "expanded")}
        variants={mainContentVariants}
        transition={{ duration: 0.3, ease: "easeInOut" }}
      >
        {/* Contenedor centrado para el contenido */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 md:px-8 py-6">
          {/* Breadcrumb */}
          <Breadcrumb 
            items={breadcrumbItems} 
            onNavigate={handleNavigate} 
          />
          
          {/* Page Content */}
          {children}
        </div>
      </motion.main>
    </div>
  );
};

export default InventorySidebarLayout;\n\n
=== ./inventario/components/dashboard/AlertList.jsx ===
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { FiChevronRight, FiClock } from 'react-icons/fi';
import FadeInUp from './FadeInUp';
import { BG_COLORS, TEXT_COLORS } from './dashboardConstants';

/**
 * Componente para mostrar listas de alertas o notificaciones con diseño moderno
 * 
 * @param {Object} props
 * @param {string} props.title - Título de la lista de alertas
 * @param {Array} props.items - Array de elementos a mostrar
 * @param {string} props.emptyMessage - Mensaje a mostrar cuando no hay elementos
 * @param {Function} props.icon - Componente de icono a mostrar
 * @param {string} props.color - Color de las alertas (primary, success, warning, danger, purple, pink)
 * @param {string} props.viewAllLink - Enlace para ver todos los elementos
 * @param {number} props.delay - Retraso de la animación
 * @param {Function} props.onItemClick - Función a ejecutar al hacer clic en un elemento
 */
const AlertList = ({ 
  title, 
  items = [], 
  emptyMessage, 
  icon: Icon, 
  color = 'danger', 
  viewAllLink, 
  delay = 0,
  onItemClick
}) => {
  // Mapear el nombre del color a las clases correspondientes
  const bgColor = BG_COLORS[color] || BG_COLORS.danger;
  const textColor = TEXT_COLORS[color] || TEXT_COLORS.danger;

  return (
    <FadeInUp delay={delay} className="h-full">
      <div className="bg-white dark:bg-[#1e293b] rounded-xl shadow-sm p-5 h-full border border-gray-100 dark:border-[#334155]">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
            <div className={`p-1.5 rounded-lg ${bgColor}`}>
              <Icon size={16} className={textColor} />
            </div>
            <h3 className="text-base font-semibold ml-2 dark:text-white">{title}</h3>
          </div>
          
          {items.length > 0 && viewAllLink && (
            <Link 
              to={viewAllLink} 
              className="text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300 text-xs font-medium flex items-center px-2 py-1 rounded-full hover:bg-indigo-50 dark:hover:bg-indigo-900/40 transition-colors"
            >
              Ver todos
              <FiChevronRight size={14} className="ml-1" />
            </Link>
          )}
        </div>
        
        {items.length === 0 ? (
          <div className="flex flex-col items-center justify-center py-8 text-gray-400 dark:text-gray-500">
            <div className="p-4 rounded-full bg-gray-50 dark:bg-gray-800 mb-3">
              <Icon size={24} className="opacity-50" />
            </div>
            <p className="text-sm">{emptyMessage}</p>
          </div>
        ) : (
          <div className="space-y-3">
            {items.slice(0, 4).map((item, index) => (
              <motion.div 
                key={item.id || index} 
                className={`border border-gray-100 dark:border-[#334155] rounded-lg p-3 hover:bg-gray-50 dark:hover:bg-[#263449] transition-colors ${onItemClick ? 'cursor-pointer' : ''}`}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: delay + index * 0.1 }}
                onClick={() => onItemClick && onItemClick(item)}
                whileHover={{ scale: 1.01 }}
                whileTap={{ scale: 0.99 }}
              >
                <div className="flex items-start justify-between">
                  <div className="flex items-start">
                    <div className={`p-1.5 rounded-lg ${bgColor} flex-shrink-0 mt-0.5 mr-2`}>
                      <Icon size={14} className={textColor} />
                    </div>
                    <div>
                      <h4 className="font-medium text-sm dark:text-white">{item.nombre || item.mensaje}</h4>
                      {item.materiaPrima && (
                        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">{item.materiaPrima.nombre}</p>
                      )}
                      {item.descripcion && (
                        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">{item.descripcion}</p>
                      )}
                      {item.fecha_creacion && (
                        <p className="text-xs text-gray-400 dark:text-gray-500 mt-1 flex items-center">
                          <FiClock size={12} className="mr-1" />
                          {new Date(item.fecha_creacion).toLocaleDateString()}
                        </p>
                      )}
                    </div>
                  </div>
                  <div>
                    {item.stock_actual !== undefined && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-rose-50 text-rose-700 dark:bg-rose-900/40 dark:text-rose-300 border border-rose-100 dark:border-rose-900">
                        {item.stock_actual} / {item.stock_minimo}
                      </span>
                    )}
                    {item.fecha_caducidad && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-amber-50 text-amber-700 dark:bg-amber-900/40 dark:text-amber-300 border border-amber-100 dark:border-amber-900">
                        <FiClock size={12} className="mr-1" />
                        {new Date(item.fecha_caducidad).toLocaleDateString()}
                      </span>
                    )}
                    {item.nivel && (
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        item.nivel === 'crítico' ? 'bg-rose-50 text-rose-700 dark:bg-rose-900/40 dark:text-rose-300 border border-rose-100 dark:border-rose-900' :
                        item.nivel === 'advertencia' ? 'bg-amber-50 text-amber-700 dark:bg-amber-900/40 dark:text-amber-300 border border-amber-100 dark:border-amber-900' :
                        'bg-blue-50 text-blue-700 dark:bg-blue-900/40 dark:text-blue-300 border border-blue-100 dark:border-blue-900'
                      }`}>
                        {item.nivel}
                      </span>
                    )}
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        )}
      </div>
    </FadeInUp>
  );
};

export default AlertList;\n\n
=== ./inventario/components/dashboard/ChartCard.jsx ===
import { useState } from 'react';
import { motion } from 'framer-motion';
import { FiMaximize2, FiEye, FiDownload, FiMoreVertical } from 'react-icons/fi';
import FadeInUp from './FadeInUp';
import { BG_COLORS, TEXT_COLORS } from './dashboardConstants';

/**
 * Componente contenedor para gráficos con diseño moderno
 * 
 * @param {Object} props
 * @param {string} props.title - Título del gráfico
 * @param {Function} props.icon - Componente de icono a mostrar
 * @param {string} props.color - Color del gráfico (primary, success, warning, danger, purple, pink)
 * @param {React.ReactNode} props.children - Contenido del gráfico (generalmente un componente de recharts)
 * @param {number} props.delay - Retraso de la animación
 * @param {React.ReactNode} props.actionButtons - Botones de acción personalizados
 * @param {string} props.className - Clases CSS adicionales
 */
const ChartCard = ({ 
  title, 
  icon: Icon, 
  color = 'primary', 
  children, 
  delay = 0, 
  actionButtons,
  className = ""
}) => {
  const [showActions, setShowActions] = useState(false);
  
  // Mapear el nombre del color a las clases correspondientes
  const bgColor = BG_COLORS[color] || BG_COLORS.primary;
  const textColor = TEXT_COLORS[color] || TEXT_COLORS.primary;

  return (
    <FadeInUp delay={delay} className={`h-full ${className}`}>
      <div className="bg-white dark:bg-[#1e293b] p-5 rounded-xl shadow-sm h-full border border-gray-100 dark:border-[#334155] relative overflow-hidden">
        {/* Elemento decorativo */}
        <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-bl from-gray-50 dark:from-gray-800 to-transparent rounded-bl-full opacity-80"></div>
        
        <div className="flex items-center justify-between mb-4 relative z-10">
          <div className="flex items-center">
            <div className={`p-1.5 rounded-lg ${bgColor} mr-2`}>
              <Icon className={textColor} size={18} />
            </div>
            <h3 className="text-lg font-semibold dark:text-white">{title}</h3>
          </div>
          
          <div className="flex space-x-1">
            {actionButtons}
            
            <div className="relative">
              <button
                className="text-gray-400 hover:text-gray-600 dark:text-gray-400 dark:hover:text-gray-300 p-1.5 rounded-full hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                onClick={() => setShowActions(!showActions)}
              >
                <FiMoreVertical size={16} />
              </button>
              
              {/* Menú de acciones */}
              {showActions && (
                <motion.div
                  className="absolute right-0 mt-1 bg-white dark:bg-[#263449] shadow-lg rounded-lg py-1 z-20 min-w-[120px] border border-gray-100 dark:border-[#334155]"
                  initial={{ opacity: 0, y: -5 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -5 }}
                >
                  <button className="w-full text-left px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-[#334155] flex items-center">
                    <FiMaximize2 className="mr-2" size={14} />
                    Ampliar
                  </button>
                  <button className="w-full text-left px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-[#334155] flex items-center">
                    <FiDownload className="mr-2" size={14} />
                    Exportar
                  </button>
                  <button className="w-full text-left px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-[#334155] flex items-center">
                    <FiEye className="mr-2" size={14} />
                    Ver detalles
                  </button>
                </motion.div>
              )}
            </div>
          </div>
        </div>
        
        <div className="h-[220px] sm:h-[250px] md:h-[280px] relative z-10">
          {children}
        </div>
        
        {/* Borde inferior decorativo */}
        <div className={`absolute bottom-0 left-0 right-0 h-1 ${bgColor} opacity-30`}></div>
      </div>
    </FadeInUp>
  );
};

export default ChartCard;\n\n
=== ./inventario/components/dashboard/DashboardLoader.jsx ===
import { motion } from 'framer-motion';

// Mapa de colores hexadecimales para reemplazar las clases de Tailwind
const COLOR_MAP = {
  indigo: {
    300: '#a5b4fc',
    500: '#6366f1',
    600: '#4f46e5'
  },
  purple: {
    300: '#d8b4fe',
    500: '#a855f7',
    600: '#9333ea',
    800: '#6b21a8'
  },
  blue: {
    300: '#93c5fd',
    500: '#3b82f6',
    600: '#2563eb'
  },
  green: {
    300: '#86efac',
    500: '#22c55e',
    600: '#16a34a'
  },
  red: {
    300: '#fca5a5',
    500: '#ef4444',
    600: '#dc2626'
  }
};

/**
 * Componente de carga animado para el dashboard
 * 
 * @param {Object} props
 * @param {string} props.text - Texto a mostrar (por defecto: "Cargando dashboard...")
 * @param {string} props.className - Clases CSS adicionales
 * @param {string} props.primaryColor - Color primario de la animación (por defecto: "indigo")
 * @param {string} props.secondaryColor - Color secundario de la animación (por defecto: "indigo")
 */
const DashboardLoader = ({ 
  text = "Cargando dashboard...", 
  className = "",
  primaryColor = "indigo",
  secondaryColor = "indigo"
}) => {
  // Obtener el color del texto de manera segura
  const textColor = COLOR_MAP[primaryColor]?.[600] || COLOR_MAP.indigo[600];
  
  return (
    <div className={`flex flex-col justify-center items-center h-[70vh] ${className}`}>
      <LoaderAnimation 
        primaryColor={primaryColor} 
        secondaryColor={secondaryColor} 
      />
      <p className="font-medium text-sm animate-pulse mt-4" style={{ color: textColor }}>
        {text}
      </p>
    </div>
  );
};

/**
 * Animación circular personalizada
 */
const LoaderAnimation = ({ primaryColor = "indigo", secondaryColor = "indigo" }) => {
  // Obtener colores seguros, con fallback a indigo si no existen
  const primaryDark = COLOR_MAP[primaryColor]?.[600] || COLOR_MAP.indigo[600];
  const primaryMid = COLOR_MAP[primaryColor]?.[500] || COLOR_MAP.indigo[500];
  const secondaryLight = COLOR_MAP[secondaryColor]?.[300] || COLOR_MAP.indigo[300];
  
  const circleVariants = {
    initial: { opacity: 0, scale: 0 },
    animate: { opacity: 1, scale: 1, transition: { duration: 0.5 } }
  };

  const spinTransition = {
    duration: 1.5,
    ease: "easeInOut",
    repeat: Infinity
  };

  return (
    <div className="relative">
      <motion.div
        initial="initial"
        animate="animate"
        variants={circleVariants}
        className="relative"
      >
        {/* Círculo exterior (girando en sentido horario) */}
        <motion.div 
          className="h-16 w-16 rounded-full"
          style={{
            borderTopWidth: '4px',
            borderBottomWidth: '4px',
            borderTopColor: primaryDark,
            borderBottomColor: primaryDark,
            borderTopStyle: 'solid',
            borderBottomStyle: 'solid'
          }}
          animate={{ rotate: 360 }}
          transition={spinTransition}
        />
        
        {/* Círculo interior (girando en sentido antihorario) */}
        <motion.div 
          className="absolute top-0 left-0 h-16 w-16 rounded-full"
          style={{
            borderRightWidth: '4px',
            borderLeftWidth: '4px',
            borderRightColor: secondaryLight,
            borderLeftColor: secondaryLight,
            borderRightStyle: 'solid',
            borderLeftStyle: 'solid'
          }}
          animate={{ rotate: -360 }}
          transition={{ ...spinTransition, duration: 2 }}
        />
        
        {/* Punto central pulsante */}
        <motion.div 
          className="absolute top-1/2 left-1/2 w-4 h-4 -ml-2 -mt-2 rounded-full"
          style={{
            backgroundColor: primaryMid
          }}
          animate={{ 
            scale: [1, 1.3, 1],
            opacity: [0.7, 1, 0.7]
          }}
          transition={{
            duration: 1.5,
            ease: "easeInOut",
            repeat: Infinity
          }}
        />
      </motion.div>
      
      {/* Sombra pulsante */}
      <motion.div 
        className="absolute top-full left-1/2 w-10 h-1 -ml-5 mt-3 bg-gray-200 rounded-full"
        animate={{ 
          opacity: [0.3, 0.5, 0.3],
          scale: [0.8, 1, 0.8]
        }}
        transition={{
          duration: 1.5,
          ease: "easeInOut",
          repeat: Infinity
        }}
      />
    </div>
  );
};

export default DashboardLoader;\n\n
=== ./inventario/components/dashboard/FadeInUp.jsx ===
import { motion } from 'framer-motion';

/**
 * Componente de animación que hace aparecer elementos con un efecto de subida
 * 
 * @param {Object} props
 * @param {React.ReactNode} props.children - Elementos a animar
 * @param {number} props.delay - Retraso de la animación en segundos
 * @param {string} props.className - Clases CSS adicionales
 * @param {number} props.duration - Duración de la animación en segundos
 */
const FadeInUp = ({ children, delay = 0, className = "", duration = 0.4 }) => (
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration, delay, ease: "easeOut" }}
    className={className}
  >
    {children}
  </motion.div>
);

export default FadeInUp;\n\n
=== ./inventario/components/dashboard/QuickAccess.jsx ===
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import FadeInUp from './FadeInUp';
import { BORDER_COLORS, BG_COLORS, TEXT_COLORS } from './dashboardConstants';

/**
 * Componente para accesos rápidos a las principales acciones del sistema
 * 
 * @param {Object} props
 * @param {Function} props.icon - Componente de icono a mostrar
 * @param {string} props.title - Título del acceso rápido
 * @param {string} props.path - Ruta de navegación
 * @param {string} props.color - Color del acceso rápido (primary, success, warning, danger, purple, pink) 
 * @param {number} props.delay - Retraso de la animación
 * @param {string} props.description - Descripción opcional (solo se muestra en pantallas mayores)
 */
const QuickAccess = ({ 
  icon: Icon, 
  title, 
  path, 
  color = 'primary', 
  delay = 0,
  description
}) => {
  // Mapear el nombre del color a las clases correspondientes
  const borderColor = BORDER_COLORS[color] || BORDER_COLORS.primary;
  const bgColor = BG_COLORS[color] || BG_COLORS.primary;
  const textColor = TEXT_COLORS[color] || TEXT_COLORS.primary;

  return (
    <FadeInUp delay={delay} className="h-full">
      <Link 
        to={path} 
        className={`flex flex-col items-center p-4 bg-white rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 h-full group relative overflow-hidden`}
      >
        {/* Borde superior decorativo */}
        <div className={`absolute top-0 left-0 right-0 h-1 ${borderColor.replace('border-', 'bg-')}`}></div>
        
        <div className={`p-3 rounded-full ${bgColor} mb-2 group-hover:scale-110 transition-transform duration-300`}>
          <Icon className={textColor} size={20} />
        </div>
        
        <span className="font-medium text-sm text-center">{title}</span>
        
        {description && (
          <p className="text-xs text-gray-500 mt-1 text-center hidden sm:block">{description}</p>
        )}
        
        {/* Efecto de hover */}
        <motion.div 
          className={`absolute bottom-0 left-0 right-0 h-0.5 ${borderColor.replace('border-', 'bg-')}`}
          initial={{ scaleX: 0 }}
          whileHover={{ scaleX: 1 }}
          transition={{ duration: 0.3 }}
        />
        
        {/* Fondo decorativo en hover */}
        <div className={`absolute inset-0 ${bgColor} opacity-0 group-hover:opacity-5 transition-opacity duration-300`}></div>
      </Link>
    </FadeInUp>
  );
};

export default QuickAccess;\n\n
=== ./inventario/components/dashboard/RefreshButton.jsx ===
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FiRefreshCw } from 'react-icons/fi';

/**
 * Botón flotante para refrescar los datos del dashboard
 * 
 * @param {Object} props
 * @param {Function} props.onRefresh - Función a ejecutar al hacer clic
 * @param {boolean} props.isRefreshing - Estado de carga durante el refresco
 * @param {boolean} props.disabled - Deshabilitar el botón
 * @param {string} props.className - Clases CSS adicionales
 * @param {string} props.tooltipText - Texto del tooltip (por defecto: "Actualizar datos")
 * @param {string} props.position - Posición del botón (por defecto: "bottom-right")
 */
const RefreshButton = ({ 
  onRefresh, 
  isRefreshing = false, 
  disabled = false, 
  className = "",
  tooltipText = "Actualizar datos",
  position = "bottom-right"
}) => {
  const [showTooltip, setShowTooltip] = useState(false);

  // Determinar clases de posición
  const positionClasses = {
    "bottom-right": "right-4 bottom-20 lg:bottom-4",
    "bottom-left": "left-4 bottom-20 lg:bottom-4",
    "top-right": "right-4 top-20 lg:top-4",
    "top-left": "left-4 top-20 lg:top-4"
  };

  const positionClass = positionClasses[position] || positionClasses["bottom-right"];

  return (
    <motion.button 
      onClick={onRefresh}
      disabled={isRefreshing || disabled}
      className={`fixed ${positionClass} z-10 w-12 h-12 bg-white shadow-lg rounded-full 
        flex items-center justify-center text-indigo-600 hover:bg-indigo-50 
        transition-colors border border-indigo-100 ${className}
        ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}
      whileTap={{ scale: 0.9 }}
      whileHover={{ 
        scale: 1.1, 
        boxShadow: "0 10px 25px -5px rgba(99, 102, 241, 0.3), 0 10px 10px -5px rgba(99, 102, 241, 0.2)"
      }}
      onHoverStart={() => setShowTooltip(true)}
      onHoverEnd={() => setShowTooltip(false)}
      aria-label={tooltipText}
    >
      <FiRefreshCw 
        className={isRefreshing ? 'animate-spin' : ''} 
        size={20} 
      />
      
      {/* Tooltip animado */}
      <AnimatePresence>
        {showTooltip && !disabled && (
          <motion.span 
            className={`absolute ${
              position.includes('left') ? 'left-full ml-2' : 'right-full mr-2'
            } px-2 py-1 bg-gray-800 text-white text-xs rounded 
            pointer-events-none whitespace-nowrap`}
            initial={{ opacity: 0, x: position.includes('left') ? -10 : 10 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: position.includes('left') ? -10 : 10 }}
            transition={{ duration: 0.2 }}
          >
            {tooltipText}
          </motion.span>
        )}
      </AnimatePresence>

      {/* Indicador de refresco animado */}
      {isRefreshing && (
        <motion.div 
          className="absolute inset-0 rounded-full border-2 border-indigo-300"
          animate={{ 
            scale: [1, 1.1, 1],
            opacity: [1, 0.7, 1]
          }}
          transition={{ 
            duration: 1.5, 
            repeat: Infinity,
            ease: "easeInOut" 
          }}
        />
      )}
    </motion.button>
  );
};

export default RefreshButton;\n\n
=== ./inventario/components/dashboard/StatCard.jsx ===
import { motion } from 'framer-motion';
import { FiArrowUp, FiArrowDown } from 'react-icons/fi';
import FadeInUp from './FadeInUp';
import { BORDER_COLORS, BG_COLORS, TEXT_COLORS } from './dashboardConstants';

/**
 * Componente de tarjeta de estadísticas con diseño moderno y animaciones
 * 
 * @param {Object} props
 * @param {Function} props.icon - Componente de icono a mostrar
 * @param {string} props.title - Título de la estadística
 * @param {string|number} props.value - Valor de la estadística
 * @param {string} props.color - Color de la tarjeta (primary, success, warning, danger, purple, pink)
 * @param {string} props.trend - Tendencia (up o down)
 * @param {number} props.percent - Porcentaje de la tendencia
 * @param {number} props.delay - Retraso de la animación
 */
const StatCard = ({ 
  icon: Icon, 
  title, 
  value, 
  color = 'primary',
  trend, 
  percent, 
  delay = 0 
}) => {
  // Mapear el nombre del color a las clases correspondientes
  const borderColor = BORDER_COLORS[color] || BORDER_COLORS.primary;
  const bgColor = BG_COLORS[color] || BG_COLORS.primary;
  const textColor = TEXT_COLORS[color] || TEXT_COLORS.primary;

  // Clases para la tendencia
  const trendColor = trend === 'up'
    ? 'text-emerald-500 bg-emerald-50 dark:text-emerald-300 dark:bg-emerald-900/40'
    : 'text-rose-500 bg-rose-50 dark:text-rose-300 dark:bg-rose-900/40';
  
  return (
    <FadeInUp delay={delay} className="h-full">
      <motion.div
        className={`bg-white dark:bg-[#1e293b] rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 p-4 h-full border-l-4 ${borderColor} overflow-hidden relative group`}
        whileHover={{ scale: 1.02, transition: { duration: 0.2 } }}
      >
        {/* Elemento decorativo de fondo */}
        <div className={`absolute -right-6 -top-6 w-20 h-20 rounded-full ${bgColor} opacity-30 group-hover:opacity-70 transition-opacity`}></div>
        
        <div className="flex items-center justify-between z-10 relative">
          <div className="flex items-center">
            <div className={`p-2.5 mr-3 rounded-lg ${bgColor} group-hover:shadow-sm transition-all`}>
              <Icon className={textColor} size={18} />
            </div>
            <div>
              <h3 className="text-gray-500 dark:text-gray-400 text-xs font-medium">{title}</h3>
              <p className="text-xl font-bold mt-0.5 dark:text-white">{value}</p>
            </div>
          </div>
          
          {trend && (
            <motion.div 
              className={`flex items-center ${trendColor} px-2 py-1 rounded-full`}
              whileTap={{ scale: 0.95 }}
            >
              {trend === 'up' ? <FiArrowUp size={14} /> : <FiArrowDown size={14} />}
              <span className="text-xs font-medium ml-1">{percent}%</span>
            </motion.div>
          )}
        </div>
        
        {/* Indicador de tendencia en la parte inferior */}
        {trend && (
          <div className="w-full h-1 mt-3 bg-gray-100 dark:bg-gray-700 rounded-full overflow-hidden">
            <motion.div 
              className={trend === 'up' ? 'bg-emerald-500' : 'bg-rose-500'} 
              initial={{ width: 0 }}
              animate={{ width: `${Math.min(percent * 2, 100)}%` }}
              transition={{ duration: 1, delay: delay + 0.3 }}
            />
          </div>
        )}
      </motion.div>
    </FadeInUp>
  );
};

export default StatCard;\n\n
=== ./inventario/components/dashboard/TabNav.jsx ===
import { motion } from 'framer-motion';
import { 
  FiBarChart2, 
  FiPlus, 
  FiPieChart, 
  FiAlertTriangle,
  FiSettings,
  FiSliders,
  FiTrendingUp
} from 'react-icons/fi';

/**
 * Componente de navegación por pestañas para el dashboard con diseño centrado vertical
 * 
 * @param {Object} props
 * @param {string} props.activeTab - Pestaña activa actualmente
 * @param {Function} props.setActiveTab - Función para cambiar de pestaña
 * @param {Array} props.customTabs - Pestañas personalizadas (opcional)
 */
const TabNav = ({ activeTab, setActiveTab, customTabs }) => {
  // Pestañas predeterminadas
  const defaultTabs = [
    { id: 'resumen', icon: FiBarChart2, label: 'Resumen' },
    { id: 'acciones', icon: FiPlus, label: 'Acciones Rápidas' },
    { id: 'graficos', icon: FiPieChart, label: 'Gráficos' },
    { id: 'proyecciones', icon: FiTrendingUp, label: 'Proyecciones' },
    { id: 'alertas', icon: FiAlertTriangle, label: 'Alertas' }
  ];

  // Usar pestañas personalizadas o las predeterminadas
  const tabs = customTabs || defaultTabs;

  // Variantes para animación de contenedor
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.1
      }
    }
  };

  // Variantes para animación de elemento
  const itemVariants = {
    hidden: { opacity: 0, y: 10 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <motion.div 
      initial="hidden"
      animate="visible"
      variants={containerVariants}
      className="mb-6 mt-2"
    >
      <div className="flex justify-center items-center flex-wrap gap-4">
        {tabs.map((tab) => (
          <TabButton
            key={tab.id}
            isActive={activeTab === tab.id}
            onClick={() => setActiveTab(tab.id)}
            icon={tab.icon}
            label={tab.label}
            variants={itemVariants}
          />
        ))}
      </div>
    </motion.div>
  );
};

/**
 * Botón de pestaña individual con animaciones y diseño vertical centrado
 */
const TabButton = ({ isActive, onClick, icon: Icon, label, variants }) => {
  // Gradientes para el botón activo
  const activeGradient = "bg-gradient-to-br from-indigo-500 to-blue-600 dark:from-indigo-600 dark:to-indigo-800";
  const hoverGradient = "bg-gradient-to-br from-gray-100 to-gray-200 hover:from-gray-200 hover:to-gray-300 dark:from-[#1e293b] dark:to-[#263449] dark:hover:from-[#263449] dark:hover:to-[#334155]";
  
  return (
    <motion.div
      variants={variants}
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      className="relative"
    >
      <motion.button
        onClick={onClick}
        className={`relative flex flex-col items-center justify-center w-20 h-20 rounded-xl ${
          isActive
            ? `${activeGradient} text-white shadow-lg`
            : `${hoverGradient} text-gray-700 dark:text-gray-200 shadow-sm`
        } transition-all duration-300 overflow-hidden group`}
      >
        {/* Efecto de brillo para hover */}
        <div className={`absolute inset-0 w-full h-full bg-white opacity-0 group-hover:opacity-10 transition-opacity duration-300 ${isActive ? 'hidden' : ''}`}></div>
        
        {/* Efecto de borde brillante para botón activo */}
        {isActive && (
          <div className="absolute inset-0 bg-gradient-to-br from-indigo-300 to-blue-300 opacity-20 animate-pulse"></div>
        )}

        {/* Contenido del botón */}
        <div className="flex flex-col items-center justify-center p-2 relative z-10">
          <motion.div 
            animate={isActive ? { scale: [1, 1.2, 1] } : {}}
            transition={{ duration: 0.5 }}
            className="flex items-center justify-center mb-2"
          >
            <Icon className={`${isActive ? 'text-white' : 'text-gray-700 dark:text-gray-200'}`} size={24} />
          </motion.div>
          <p className={`text-xs font-medium text-center leading-tight ${isActive ? 'text-white' : 'text-gray-700 dark:text-gray-200'}`}>
            {label}
          </p>
        </div>
      </motion.button>
      
      {/* Indicador de posición activa */}
      {isActive && (
        <motion.div
          layoutId="activeTabIndicator"
          className="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-10 h-1 bg-white rounded-full shadow-lg"
          initial={false}
          transition={{
            type: "spring",
            stiffness: 500,
            damping: 30
          }}
        />
      )}
    </motion.div>
  );
};

export default TabNav;\n\n
=== ./inventario/components/dashboard/dashboardConstants.js ===
/**
 * Archivo de constantes para el dashboard de inventario
 * Centraliza colores, gradientes y otros valores compartidos
 */

// Paleta de colores para gráficos y elementos visuales
export const COLORS = {
  primary: '#6366F1', // Indigo
  success: '#10B981', // Emerald
  warning: '#F59E0B', // Amber
  danger: '#EF4444',  // Red
  info: '#3B82F6',    // Blue
  purple: '#8B5CF6',  // Violet
  pink: '#EC4899',    // Pink
};

// Array de colores para gráficos
export const CHART_COLORS = [
  COLORS.primary,
  COLORS.success, 
  COLORS.warning,
  COLORS.pink,
  COLORS.purple
];

// Gradientes para gráficos
export const CHART_GRADIENTS = {
  entrada: ['rgba(99, 102, 241, 0.8)', 'rgba(99, 102, 241, 0.1)'],
  salida: ['rgba(16, 185, 129, 0.8)', 'rgba(16, 185, 129, 0.1)'],
  warning: ['rgba(245, 158, 11, 0.8)', 'rgba(245, 158, 11, 0.1)'],
  danger: ['rgba(239, 68, 68, 0.8)', 'rgba(239, 68, 68, 0.1)'],
};

// Colores de borde para tarjetas
export const BORDER_COLORS = {
  primary: 'border-indigo-500',
  success: 'border-emerald-500',
  warning: 'border-amber-500',
  danger: 'border-rose-500',
  purple: 'border-violet-500',
  pink: 'border-pink-500',
};

// Mapeo de colores para fondos
export const BG_COLORS = {
  primary: 'bg-indigo-50 dark:bg-indigo-900/40',
  success: 'bg-emerald-50 dark:bg-emerald-900/40',
  warning: 'bg-amber-50 dark:bg-amber-900/40',
  danger: 'bg-rose-50 dark:bg-rose-900/40',
  purple: 'bg-violet-50 dark:bg-violet-900/40',
  pink: 'bg-pink-50 dark:bg-pink-900/40',
};

// Mapeo de colores para texto
export const TEXT_COLORS = {
  primary: 'text-indigo-500 dark:text-indigo-300',
  success: 'text-emerald-500 dark:text-emerald-300',
  warning: 'text-amber-500 dark:text-amber-300',
  danger: 'text-rose-500 dark:text-rose-300',
  purple: 'text-violet-500 dark:text-violet-300',
  pink: 'text-pink-500 dark:text-pink-300',
};\n\n
=== ./inventario/components/dashboard/index.js ===
// Archivo índice para exportar todos los componentes del dashboard
export { default as StatCard } from './StatCard';
export { default as QuickAccess } from './QuickAccess';
export { default as ChartCard } from './ChartCard';
export { default as AlertList } from './AlertList';
export { default as TabNav } from './TabNav';
export { default as RefreshButton } from './RefreshButton';
export { default as DashboardLoader } from './DashboardLoader';
export { default as FadeInUp } from './FadeInUp';

// Tabs
export { default as ResumenTab } from './tabs/ResumenTab';
export { default as AccionesTab } from './tabs/AccionesTab';
export { default as GraficosTab } from './tabs/GraficosTab';
export { default as AlertasTab } from './tabs/AlertasTab';

// Constants & Utils
export { COLORS, CHART_GRADIENTS } from './dashboardConstants';\n\n
=== ./inventario/components/dashboard/tabs/AccionesTab.jsx ===
import { useState } from 'react';
import { QuickAccess, FadeInUp } from '../';
import { 
  FiShoppingBag, 
  FiBox, 
  FiTrendingUp, 
  FiTruck, 
  FiDollarSign, 
  FiPieChart,
  FiPackage,
  FiTool,
  FiActivity,
  FiClipboard,
  FiFileText,
  FiGrid,
  FiHelpCircle,
  FiSettings
} from 'react-icons/fi';

/**
 * Componente para la pestaña de Acciones Rápidas
 * 
 * @param {Object} props
 * @param {string} props.className - Clases CSS adicionales
 */
const AccionesTab = ({ className = "" }) => {
  const [activeGuideTab, setActiveGuideTab] = useState('productos');

  // Acciones principales
  const quickAccesses = [
    {
      icon: FiShoppingBag,
      title: "Nueva Materia Prima",
      path: "/inventory/materias-primas/new",
      color: "primary",
      description: "Registra un nuevo insumo o material"
    },
    {
      icon: FiBox,
      title: "Nuevo Lote",
      path: "/inventory/lotes/new",
      color: "success", 
      description: "Registra un nuevo lote de productos"
    },
    {
      icon: FiTrendingUp,
      title: "Registrar Movimiento",
      path: "/inventory/movimientos/new",
      color: "purple", 
      description: "Entrada o salida de inventario"
    },
    {
      icon: FiTruck,
      title: "Nuevo Proveedor",
      path: "/inventory/proveedores/new",
      color: "warning",
      description: "Agrega un proveedor al sistema"
    },
    {
      icon: FiDollarSign,
      title: "Ajustar Precios",
      path: "/inventory/precios",
      color: "pink",
      description: "Actualiza precios de materiales"
    },
    {
      icon: FiPieChart,
      title: "Ver Reportes",
      path: "/inventory/reports",
      color: "danger",
      description: "Consulta reportes y estadísticas"
    }
  ];

  // Guías y recursos
  const guides = {
    productos: [
      {
        icon: FiPackage,
        title: "Guía de Registro de Productos",
        description: "Aprende a registrar nuevos productos y categorías en el sistema de inventario."
      },
      {
        icon: FiClipboard,
        title: "Gestión de Lotes",
        description: "Conoce cómo administrar lotes y fechas de caducidad de forma eficiente."
      }
    ],
    movimientos: [
      {
        icon: FiActivity,
        title: "Registro de Movimientos",
        description: "Guía para el registro correcto de entradas, salidas y ajustes de inventario."
      },
      {
        icon: FiTool,
        title: "Conversiones de Unidades",
        description: "Aprende a configurar y utilizar las conversiones entre unidades de medida."
      }
    ],
    reportes: [
      {
        icon: FiGrid,
        title: "Reportes Personalizados",
        description: "Crea y personaliza reportes según tus necesidades específicas."
      },
      {
        icon: FiFileText,
        title: "Exportación de Datos",
        description: "Exporta tus datos a diferentes formatos para su análisis externo."
      }
    ]
  };

  return (
    <div className={`space-y-5 ${className}`}>
      {/* Título y opciones de configuración */}
      <div className="flex items-center justify-between mb-3">
        <h2 className="text-lg font-semibold text-gray-800 flex items-center">
          <FiGrid className="mr-2 text-indigo-500" size={20} />
          Acciones Rápidas
        </h2>
        <button className="text-xs bg-gray-50 text-gray-600 hover:bg-gray-100 py-1.5 px-3 rounded-lg flex items-center font-medium transition-colors">
          <FiSettings className="mr-1.5" size={14} />
          Personalizar
        </button>
      </div>
      
      {/* Accesos rápidos principales */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
        {quickAccesses.map((access, index) => (
          <QuickAccess 
            key={access.path}
            icon={access.icon} 
            title={access.title} 
            path={access.path} 
            color={access.color} 
            delay={0.1 * index}
            description={access.description}
          />
        ))}
      </div>
      
      {/* Sección de guías y recursos */}
      <FadeInUp delay={0.4}>
        <div className="mt-6 bg-gradient-to-br from-indigo-50 to-blue-50 rounded-xl p-5 border border-indigo-100">
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-semibold text-indigo-800 flex items-center">
              <FiHelpCircle className="mr-2" size={18} />
              Guías y Recursos
            </h3>
            <div className="text-xs bg-white text-gray-600 rounded-lg border border-indigo-100 overflow-hidden flex">
              <button 
                onClick={() => setActiveGuideTab('productos')}
                className={`px-3 py-1.5 font-medium ${
                  activeGuideTab === 'productos' 
                    ? 'bg-indigo-600 text-white' 
                    : 'hover:bg-indigo-50'
                }`}
              >
                Productos
              </button>
              <button 
                onClick={() => setActiveGuideTab('movimientos')}
                className={`px-3 py-1.5 font-medium ${
                  activeGuideTab === 'movimientos' 
                    ? 'bg-indigo-600 text-white' 
                    : 'hover:bg-indigo-50'
                }`}
              >
                Movimientos
              </button>
              <button 
                onClick={() => setActiveGuideTab('reportes')}
                className={`px-3 py-1.5 font-medium ${
                  activeGuideTab === 'reportes' 
                    ? 'bg-indigo-600 text-white' 
                    : 'hover:bg-indigo-50'
                }`}
              >
                Reportes
              </button>
            </div>
          </div>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 mt-3">
            {guides[activeGuideTab].map((guide, index) => (
              <GuideCard
                key={index}
                icon={guide.icon}
                title={guide.title}
                description={guide.description}
              />
            ))}
          </div>
        </div>
      </FadeInUp>
    </div>
  );
};

// Componente para tarjetas de guía
const GuideCard = ({ icon: Icon, title, description }) => (
  <div className="bg-white rounded-lg p-4 border border-indigo-100 hover:shadow-md transition-all duration-300 group">
    <div className="flex items-center mb-2">
      <div className="p-2 rounded-lg bg-indigo-50 text-indigo-600 mr-3 group-hover:bg-indigo-600 group-hover:text-white transition-colors">
        <Icon size={16} />
      </div>
      <h4 className="font-semibold text-sm">{title}</h4>
    </div>
    <p className="text-xs text-gray-600">{description}</p>
    <div className="mt-3 flex justify-end">
      <button className="text-xs text-indigo-600 hover:underline font-medium flex items-center">
        Ver guía
        <svg className="w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </div>
);

export default AccionesTab;\n\n
=== ./inventario/components/dashboard/tabs/AlertasTab.jsx ===
import { useState } from 'react';
import { AlertList, FadeInUp } from '../';
import { 
  FiAlertTriangle, 
  FiBarChart2, 
  FiCalendar,
  FiFilter,
  FiCheckCircle,
  FiBell,
  FiClock,
  FiSettings
} from 'react-icons/fi';

/**
 * Componente para la pestaña de Alertas del Dashboard
 * 
 * @param {Object} props
 * @param {Array} props.lowStockItems - Elementos con bajo stock
 * @param {Array} props.expiringItems - Elementos próximos a caducar
 * @param {Array} props.alerts - Alertas del sistema
 */
const AlertasTab = ({
  lowStockItems = [],
  expiringItems = [],
  alerts = []
}) => {
  const [activeFilter, setActiveFilter] = useState('all');
  const [alertStatus, setAlertStatus] = useState('active');
  
  // Filtrar alertas por tipo y estado
  const filteredLowStock = lowStockItems.filter(item => {
    if (activeFilter !== 'all' && activeFilter !== 'lowstock') return false;
    return true;
  });

  const filteredExpiring = expiringItems.filter(item => {
    if (activeFilter !== 'all' && activeFilter !== 'expiring') return false;
    return true;
  });

  const filteredAlerts = alerts.filter(alert => {
    if (activeFilter !== 'all' && activeFilter !== 'system') return false;
    if (alertStatus === 'active' && alert.estado === 'resuelta') return false;
    return true;
  });

  return (
    <div className="space-y-5">
      {/* Banner informativo */}
      <FadeInUp>
        <div className="bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-xl p-4 mb-5">
          <div className="flex items-start sm:items-center flex-col sm:flex-row gap-3 sm:gap-4">
            <div className="p-3 rounded-full bg-amber-100 text-amber-600 flex-shrink-0">
              <FiAlertTriangle size={22} />
            </div>
            <div className="flex-1">
              <h3 className="text-base font-semibold text-amber-800">Centro de Alertas</h3>
              <p className="text-sm text-amber-700 mt-1">
                Aquí puedes ver y gestionar todas las alertas del sistema de inventario.
                Mantén bajo control tu inventario atendiendo las alertas prioritarias.
              </p>
            </div>
            <button className="bg-white text-amber-600 hover:bg-amber-50 transition-colors border border-amber-200 rounded-lg px-3 py-1.5 text-sm font-medium flex items-center shadow-sm whitespace-nowrap">
              <FiSettings size={14} className="mr-1.5" />
              Configurar
            </button>
          </div>
        </div>
      </FadeInUp>
      
      {/* Filtros */}
      <FadeInUp delay={0.1}>
        <div className="flex flex-wrap gap-2 mb-4">
          <div className="bg-white rounded-lg shadow-sm p-1 flex">
            <button
              onClick={() => setActiveFilter('all')}
              className={`text-xs px-3 py-1.5 rounded-lg font-medium transition-colors
                ${activeFilter === 'all' 
                  ? 'bg-indigo-600 text-white' 
                  : 'text-gray-600 hover:bg-indigo-50'}`}
            >
              <FiBell className="mr-1.5 inline-block" size={12} />
              Todas
            </button>
            <button
              onClick={() => setActiveFilter('lowstock')}
              className={`text-xs px-3 py-1.5 rounded-lg font-medium transition-colors
                ${activeFilter === 'lowstock' 
                  ? 'bg-rose-600 text-white' 
                  : 'text-gray-600 hover:bg-rose-50'}`}
            >
              <FiBarChart2 className="mr-1.5 inline-block" size={12} />
              Bajo Stock
            </button>
            <button
              onClick={() => setActiveFilter('expiring')}
              className={`text-xs px-3 py-1.5 rounded-lg font-medium transition-colors
                ${activeFilter === 'expiring' 
                  ? 'bg-amber-500 text-white' 
                  : 'text-gray-600 hover:bg-amber-50'}`}
            >
              <FiCalendar className="mr-1.5 inline-block" size={12} />
              Por Caducar
            </button>
            <button
              onClick={() => setActiveFilter('system')}
              className={`text-xs px-3 py-1.5 rounded-lg font-medium transition-colors
                ${activeFilter === 'system' 
                  ? 'bg-violet-600 text-white' 
                  : 'text-gray-600 hover:bg-violet-50'}`}
            >
              <FiAlertTriangle className="mr-1.5 inline-block" size={12} />
              Sistema
            </button>
          </div>
          
          <div className="bg-white rounded-lg shadow-sm p-1 flex ml-auto">
            <button
              onClick={() => setAlertStatus('active')}
              className={`text-xs px-3 py-1.5 rounded-lg font-medium transition-colors
                ${alertStatus === 'active' 
                  ? 'bg-indigo-600 text-white' 
                  : 'text-gray-600 hover:bg-gray-50'}`}
            >
              Activas
            </button>
            <button
              onClick={() => setAlertStatus('all')}
              className={`text-xs px-3 py-1.5 rounded-lg font-medium transition-colors
                ${alertStatus === 'all' 
                  ? 'bg-indigo-600 text-white' 
                  : 'text-gray-600 hover:bg-gray-50'}`}
            >
              Todas
            </button>
          </div>
        </div>
      </FadeInUp>
      
      {/* Alertas de bajo stock */}
      {(activeFilter === 'all' || activeFilter === 'lowstock') && (
        <AlertList
          title="Productos con Bajo Stock"
          items={filteredLowStock}
          emptyMessage="No hay elementos con bajo stock"
          icon={FiBarChart2}
          color="danger"
          viewAllLink="/inventory/bajostock"
          delay={0.2}
          onItemClick={(item) => console.log('Ver detalles:', item)}
        />
      )}
      
      {/* Elementos por caducar */}
      {(activeFilter === 'all' || activeFilter === 'expiring') && (
        <AlertList
          title="Productos Próximos a Caducar"
          items={filteredExpiring}
          emptyMessage="No hay elementos próximos a caducar"
          icon={FiCalendar}
          color="warning"
          viewAllLink="/inventory/caducidad"
          delay={0.3}
          onItemClick={(item) => console.log('Ver detalles:', item)}
        />
      )}
      
      {/* Alertas del sistema */}
      {(activeFilter === 'all' || activeFilter === 'system') && (
        <AlertList
          title="Alertas del Sistema"
          items={filteredAlerts}
          emptyMessage="No hay alertas activas en el sistema"
          icon={FiAlertTriangle}
          color="purple"
          viewAllLink="/inventory/alertas"
          delay={0.4}
          onItemClick={(item) => console.log('Ver detalles:', item)}
        />
      )}
      
      {/* Panel de información con métricas */}
      <FadeInUp delay={0.5}>
        <div className="bg-white rounded-lg shadow-sm p-5 mt-6">
          <h3 className="text-base font-semibold mb-4 text-gray-700 flex items-center">
            <FiCheckCircle className="mr-2 text-indigo-500" />
            Resumen de Estado
          </h3>
          
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <div className="bg-indigo-50 rounded-lg p-4 border border-indigo-100">
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-xs text-indigo-600 font-medium">Total Alertas</p>
                  <h4 className="text-2xl font-bold text-indigo-700 mt-1">
                    {lowStockItems.length + expiringItems.length + alerts.length}
                  </h4>
                </div>
                <div className="p-2 bg-indigo-100 text-indigo-600 rounded-lg">
                  <FiBell size={18} />
                </div>
              </div>
              <div className="flex items-center mt-4">
                <div className="h-1.5 flex-1 bg-indigo-200 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-indigo-600 rounded-full" 
                    style={{ 
                      width: `${(lowStockItems.length/(lowStockItems.length + expiringItems.length + alerts.length)*100) || 0}%` 
                    }}
                  />
                </div>
                <span className="text-xs font-medium text-indigo-600 ml-2">
                  {lowStockItems.length}
                </span>
              </div>
            </div>
            
            <div className="bg-rose-50 rounded-lg p-4 border border-rose-100">
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-xs text-rose-600 font-medium">Bajo Stock</p>
                  <h4 className="text-2xl font-bold text-rose-700 mt-1">
                    {lowStockItems.length}
                  </h4>
                </div>
                <div className="p-2 bg-rose-100 text-rose-600 rounded-lg">
                  <FiBarChart2 size={18} />
                </div>
              </div>
              <p className="text-xs text-rose-600 mt-3 flex items-center">
                <FiClock className="mr-1" size={12} />
                Última alerta: {lowStockItems.length > 0 ? 'Hace 2 horas' : 'N/A'}
              </p>
            </div>
            
            <div className="bg-amber-50 rounded-lg p-4 border border-amber-100">
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-xs text-amber-600 font-medium">Por Caducar</p>
                  <h4 className="text-2xl font-bold text-amber-700 mt-1">
                    {expiringItems.length}
                  </h4>
                </div>
                <div className="p-2 bg-amber-100 text-amber-600 rounded-lg">
                  <FiCalendar size={18} />
                </div>
              </div>
              <p className="text-xs text-amber-600 mt-3 flex items-center">
                <FiClock className="mr-1" size={12} />
                Próxima caducidad: {expiringItems.length > 0 ? '2 días' : 'N/A'}
              </p>
            </div>
          </div>
        </div>
      </FadeInUp>
    </div>
  );
};

export default AlertasTab;\n\n
=== ./inventario/components/dashboard/tabs/GraficosTab.jsx ===
import { useState } from 'react';
import { ChartCard, FadeInUp } from '../';
import { 
  FiBarChart2, 
  FiPieChart, 
  FiFilter, 
  FiRefreshCw,
  FiTrendingUp,
  FiCalendar,
  FiPackage,
  FiDownload,
  FiArrowUp,
  FiArrowDown
} from 'react-icons/fi';
import {
  AreaChart,
  Area,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend
} from 'recharts';
import { CHART_COLORS, CHART_GRADIENTS } from '../dashboardConstants';

/**
 * Componente para la pestaña de Gráficos
 * 
 * @param {Object} props
 * @param {Array} props.stockMovementData - Datos para el gráfico de movimientos
 * @param {Array} props.categoryDistribution - Datos para el gráfico de categorías
 * @param {string} props.timeRange - Rango de tiempo seleccionado
 * @param {Function} props.setTimeRange - Función para cambiar el rango de tiempo
 */
const GraficosTab = ({
  stockMovementData = [],
  categoryDistribution = [],
  timeRange = '7d',
  setTimeRange
}) => {
  const [activeFilters, setActiveFilters] = useState({
    category: 'all',
    view: 'monthly',
    chartType: 'area'
  });

  // Función para actualizar filtros
  const updateFilter = (key, value) => {
    setActiveFilters(prev => ({ ...prev, [key]: value }));
  };

  // Selector de rango de tiempo
  const TimeRangeSelector = ({ className = "" }) => (
    <div className={`flex bg-gray-50 rounded-lg p-1 ${className}`}>
      {[
        { id: '7d', label: '7 días' },
        { id: '30d', label: '30 días' },
        { id: 'mes', label: 'Este mes' },
        { id: 'año', label: 'Este año' }
      ].map(option => (
        <button
          key={option.id}
          onClick={() => setTimeRange && setTimeRange(option.id)}
          className={`text-xs py-1.5 px-2.5 rounded-md transition-colors flex-1 font-medium
            ${timeRange === option.id 
              ? 'bg-white shadow-sm text-indigo-600' 
              : 'text-gray-600 hover:bg-gray-100'}`}
        >
          {option.label}
        </button>
      ))}
    </div>
  );

  // Botones de tipo de gráfico
  const ChartTypeSelector = ({ className = "" }) => (
    <div className={`flex bg-gray-50 rounded-lg p-1 ${className}`}>
      {[
        { id: 'area', label: 'Área', icon: FiTrendingUp },
        { id: 'bar', label: 'Barras', icon: FiBarChart2 }
      ].map(option => {
        const Icon = option.icon;
        return (
          <button
            key={option.id}
            onClick={() => updateFilter('chartType', option.id)}
            className={`text-xs py-1.5 px-2.5 rounded-md transition-colors flex-1 font-medium flex items-center justify-center
              ${activeFilters.chartType === option.id 
                ? 'bg-white shadow-sm text-indigo-600' 
                : 'text-gray-600 hover:bg-gray-100'}`}
          >
            <Icon size={12} className="mr-1" />
            {option.label}
          </button>
        );
      })}
    </div>
  );

  return (
    <div className="space-y-5">
      {/* Panel de filtros */}
      <FadeInUp>
        <div className="bg-white p-4 rounded-xl shadow-sm mb-5">
          <h3 className="text-base font-semibold mb-3 flex items-center">
            <FiFilter className="mr-2 text-indigo-500" size={16} />
            Filtros para Gráficos
          </h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-3">
            <select 
              className="text-sm border border-gray-200 rounded-lg p-2 bg-gray-50"
              value={activeFilters.category}
              onChange={e => updateFilter('category', e.target.value)}
            >
              <option value="all">Todas las categorías</option>
              <option value="lacteos">Lácteos</option>
              <option value="frescos">Frescos</option>
              <option value="secos">Secos</option>
              <option value="bebidas">Bebidas</option>
            </select>
            
            <TimeRangeSelector />
            
            <ChartTypeSelector />
            
            <div className="flex space-x-2">
              <button className="text-sm bg-indigo-600 text-white py-2 px-3 rounded-lg flex items-center justify-center flex-1 hover:bg-indigo-700 transition-colors">
                <FiFilter className="mr-1.5" size={14} />
                Aplicar
              </button>
              <button className="text-sm bg-white text-gray-700 border border-gray-200 py-2 px-3 rounded-lg flex items-center justify-center hover:bg-gray-50 transition-colors">
                <FiRefreshCw className="mr-1.5" size={14} />
                Reset
              </button>
            </div>
          </div>
        </div>
      </FadeInUp>

      {/* Gráficos */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-5">
        {/* Gráfico de Movimientos */}
        <ChartCard 
          title="Movimiento de Inventario" 
          icon={FiBarChart2} 
          color="primary"
          delay={0.1}
          actionButtons={
            <button className="text-gray-400 hover:text-gray-600 p-1.5 rounded-full hover:bg-gray-50 transition-colors">
              <FiDownload size={16} />
            </button>
          }
        >
          <ResponsiveContainer width="100%" height="100%">
            {activeFilters.chartType === 'area' ? (
              <AreaChart
                data={stockMovementData}
                margin={{ top: 10, right: 10, left: 0, bottom: 10 }}
              >
                <defs>
                  <linearGradient id="colorEntradas" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor={CHART_GRADIENTS.entrada[0]} />
                    <stop offset="95%" stopColor={CHART_GRADIENTS.entrada[1]} />
                  </linearGradient>
                  <linearGradient id="colorSalidas" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor={CHART_GRADIENTS.salida[0]} />
                    <stop offset="95%" stopColor={CHART_GRADIENTS.salida[1]} />
                  </linearGradient>
                </defs>
                <CartesianGrid strokeDasharray="3 3" vertical={false} opacity={0.2} />
                <XAxis 
                  dataKey="name" 
                  axisLine={false} 
                  tickLine={false} 
                  tick={{ fontSize: 12, fill: '#64748b' }}
                />
                <YAxis 
                  axisLine={false} 
                  tickLine={false} 
                  tick={{ fontSize: 12, fill: '#64748b' }}
                  width={35}
                />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: 'white', 
                    borderRadius: '8px', 
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)', 
                    border: '1px solid #e2e8f0',
                    fontSize: '12px',
                    padding: '8px 12px'
                  }} 
                />
                <Legend 
                  iconSize={10} 
                  wrapperStyle={{ fontSize: '12px', paddingTop: '15px' }}
                  formatter={(value) => <span style={{ color: '#64748b' }}>{value}</span>}
                />
                <Area 
                  type="monotone" 
                  dataKey="entradas" 
                  stroke="#6366F1" 
                  fillOpacity={1} 
                  fill="url(#colorEntradas)" 
                  activeDot={{ r: 6, strokeWidth: 1, stroke: '#fff' }}
                  strokeWidth={2} 
                />
                <Area 
                  type="monotone" 
                  dataKey="salidas" 
                  stroke="#10B981" 
                  fillOpacity={1} 
                  fill="url(#colorSalidas)"
                  activeDot={{ r: 6, strokeWidth: 1, stroke: '#fff' }}
                  strokeWidth={2}
                />
              </AreaChart>
            ) : (
              <BarChart
                data={stockMovementData}
                margin={{ top: 10, right: 10, left: 0, bottom: 10 }}
              >
                <CartesianGrid strokeDasharray="3 3" vertical={false} opacity={0.2} />
                <XAxis 
                  dataKey="name" 
                  axisLine={false} 
                  tickLine={false} 
                  tick={{ fontSize: 12, fill: '#64748b' }}
                />
                <YAxis 
                  axisLine={false} 
                  tickLine={false} 
                  tick={{ fontSize: 12, fill: '#64748b' }}
                  width={35}
                />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: 'white', 
                    borderRadius: '8px', 
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)', 
                    border: '1px solid #e2e8f0',
                    fontSize: '12px',
                    padding: '8px 12px'
                  }}
                />
                <Legend 
                  iconSize={10} 
                  wrapperStyle={{ fontSize: '12px', paddingTop: '15px' }}
                  formatter={(value) => <span style={{ color: '#64748b' }}>{value}</span>}
                />
                <Bar 
                  dataKey="entradas" 
                  fill="#6366F1" 
                  radius={[4, 4, 0, 0]}
                  barSize={16}
                  name="Entradas"
                />
                <Bar 
                  dataKey="salidas" 
                  fill="#10B981" 
                  radius={[4, 4, 0, 0]}
                  barSize={16}
                  name="Salidas"
                />
              </BarChart>
            )}
          </ResponsiveContainer>
        </ChartCard>

        {/* Gráfico de Distribución */}
        <ChartCard 
          title="Distribución por Categoría" 
          icon={FiPieChart} 
          color="purple"
          delay={0.2}
          actionButtons={
            <button className="text-gray-400 hover:text-gray-600 p-1.5 rounded-full hover:bg-gray-50 transition-colors">
              <FiDownload size={16} />
            </button>
          }
        >
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={categoryDistribution}
                cx="50%"
                cy="50%"
                labelLine={false}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
              >
                {categoryDistribution.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />
                ))}
              </Pie>
              <Tooltip 
                formatter={(value) => [`${value} unidades`, 'Cantidad']}
                contentStyle={{ 
                  backgroundColor: 'white', 
                  borderRadius: '8px', 
                  boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)', 
                  border: '1px solid #e2e8f0',
                  fontSize: '12px',
                  padding: '8px 12px'
                }} 
              />
              <Legend 
                layout="horizontal" 
                verticalAlign="bottom" 
                align="center" 
                iconSize={8}
                wrapperStyle={{ fontSize: '12px', paddingTop: '10px' }}
              />
            </PieChart>
          </ResponsiveContainer>
        </ChartCard>
      </div>

      {/* Sección de métricas adicionales */}
      <FadeInUp delay={0.3}>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mt-3">
          <MetricCard 
            title="Rotación de Inventario" 
            value="3.2x" 
            trend="up" 
            description="Trimestre actual"
            icon={FiRefreshCw}
            color="primary"
          />
          <MetricCard 
            title="Días de Inventario" 
            value="24.5" 
            trend="down" 
            description="Promedio mensual"
            icon={FiCalendar}
            color="success"
          />
          <MetricCard 
            title="Utilización" 
            value="86%" 
            trend="up" 
            description="Capacidad actual"
            icon={FiPackage}
            color="warning"
          />
        </div>
      </FadeInUp>
    </div>
  );
};

// Componente para métricas con tendencia
const MetricCard = ({ title, value, trend, description, icon: Icon, color = "primary" }) => {
  const colorClasses = {
    primary: "border-indigo-500 bg-indigo-50 text-indigo-500",
    success: "border-emerald-500 bg-emerald-50 text-emerald-500",
    warning: "border-amber-500 bg-amber-50 text-amber-500",
    danger: "border-rose-500 bg-rose-50 text-rose-500",
    purple: "border-violet-500 bg-violet-50 text-violet-500"
  };

  const borderColor = colorClasses[color]?.split(' ')[0] || colorClasses.primary.split(' ')[0];
  const bgColor = colorClasses[color]?.split(' ')[1] || colorClasses.primary.split(' ')[1];
  const textColor = colorClasses[color]?.split(' ')[2] || colorClasses.primary.split(' ')[2];

  return (
    <div className={`bg-white rounded-lg p-4 shadow-sm border-l-4 ${borderColor} hover:shadow-md transition-all duration-300 relative overflow-hidden`}>
      <div className="flex justify-between items-start">
        <div>
          <p className="text-gray-500 text-xs font-medium">{title}</p>
          <h3 className="text-2xl font-bold mt-1">{value}</h3>
          <p className="text-gray-400 text-xs mt-1">{description}</p>
        </div>
        <div className={`p-2.5 rounded-lg ${bgColor}`}>
          <Icon className={textColor} size={20} />
        </div>
      </div>

      {trend && (
        <div className={`absolute bottom-3 right-3 flex items-center ${
          trend === 'up' ? 'text-emerald-500' : 'text-rose-500'
        }`}>
          {trend === 'up' ? (
            <FiArrowUp size={12} className="mr-1" />
          ) : (
            <FiArrowDown size={12} className="mr-1" />
          )}
          <span className="text-xs font-medium">
            {trend === 'up' ? '+' : '-'}7.2%
          </span>
        </div>
      )}
    </div>
  );
};

export default GraficosTab;\n\n
=== ./inventario/components/dashboard/tabs/ProyeccionesTab.jsx ===
import React, { useState, useEffect } from 'react';
import axios from '@shared/utils/axiosConfig';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { format, addDays } from 'date-fns';
import { es } from 'date-fns/locale';

// Componentes compartidos
import StatCard from '../StatCard';
import ChartCard from '../ChartCard';
import RefreshButton from '../RefreshButton';
import FadeInUp from '../FadeInUp';

// Constantes y utilidades
const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658'];

const ProyeccionesTab = () => {
  // Estados
  const [proyecciones, setProyecciones] = useState([]);
  const [alertasCaducidad, setAlertasCaducidad] = useState([]);
  const [reabastecimiento, setReabastecimiento] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [detalleMateriaPrima, setDetalleMateriaPrima] = useState(null);
  const [showDetalleModal, setShowDetalleModal] = useState(false);
  
  // Estado para filtros
  const [filtro, setFiltro] = useState({
    fechaInicio: format(new Date(), 'yyyy-MM-dd'),
    fechaFin: format(addDays(new Date(), 30), 'yyyy-MM-dd'), // 30 días por defecto
    materiaPrimaId: ''
  });
  
  // Efecto para cargar datos al montar o cambiar filtros
  useEffect(() => {
    cargarProyecciones();
  }, [filtro]);
  
  // Función para cargar proyecciones
  const cargarProyecciones = async () => {
    setLoading(true);
    try {
      // Obtener proyecciones generales
      const responseProyecciones = await axios.get('/api/inventory/proyecciones', {
        params: {
          fecha_inicio: filtro.fechaInicio,
          fecha_fin: filtro.fechaFin,
          id_materia_prima: filtro.materiaPrimaId || undefined
        }
      });
      
      // Obtener alertas de caducidad
      const responseAlertas = await axios.get('/api/inventory/proyecciones/caducidad', {
        params: {
          dias_alerta: 30
        }
      });
      
      // Obtener informe de reabastecimiento
      const responseReabastecimiento = await axios.get('/api/inventory/proyecciones/reabastecimiento', {
        params: {
          dias_proyeccion: 30,
          umbral_dias: 7
        }
      });
      
      setProyecciones(responseProyecciones.data.proyecciones || []);
      setAlertasCaducidad(responseAlertas.data.alertas_caducidad || []);
      setReabastecimiento(responseReabastecimiento.data.necesidades_reabastecimiento || []);
      setLoading(false);
    } catch (error) {
      console.error('Error al cargar proyecciones:', error);
      setError('Error al cargar las proyecciones de inventario');
      setLoading(false);
    }
  };
  
  // Función para cargar detalle de una materia prima específica
  const cargarDetalleMateriaPrima = async (id) => {
    try {
      setLoading(true);
      const response = await axios.get(`/api/inventory/proyecciones/materia-prima/${id}`, {
        params: {
          dias: 30
        }
      });
      
      setDetalleMateriaPrima(response.data.proyeccion);
      setShowDetalleModal(true);
      setLoading(false);
    } catch (error) {
      console.error('Error al cargar detalle de materia prima:', error);
      setError('Error al cargar el detalle de la materia prima');
      setLoading(false);
    }
  };
  
  // Función para manejar cambios en filtros
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFiltro(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // Función para formatear fecha
  const formatDate = (dateString) => {
    try {
      return format(new Date(dateString), 'dd/MM/yyyy', { locale: es });
    } catch (e) {
      return 'Fecha inválida';
    }
  };
  
  // Preparar datos para gráficos
  const materialesEnRiesgo = proyecciones.filter(p => p.alerta_stock || p.cantidad_por_caducar > 0);
  const datosCaducidad = alertasCaducidad.slice(0, 5).map(a => ({
    name: a.nombre,
    value: a.lotes.reduce((total, lote) => total + lote.cantidad, 0)
  }));
  
  // Preparar datos para gráfico de proyección
  const datosProyeccion = proyecciones.map(p => ({
    name: p.nombre.length > 15 ? p.nombre.substring(0, 15) + '...' : p.nombre,
    stockActual: p.stock_actual,
    proyeccion: p.proyeccion_stock,
    stockMinimo: p.stock_minimo
  }));
  
  // Modal para detalle de materia prima
  const DetalleModal = () => (
    <div className={`fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 ${showDetalleModal ? 'block' : 'hidden'}`}>
      <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl p-6 max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-xl font-bold text-gray-800">
            Detalle de proyección: {detalleMateriaPrima?.nombre}
          </h3>
          <button onClick={() => setShowDetalleModal(false)} className="text-gray-500 hover:text-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        {detalleMateriaPrima && (
          <div className="space-y-6">
            {/* Información general */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-blue-50 rounded-lg p-4">
                <p className="text-sm text-blue-500">Stock Actual</p>
                <p className="text-xl font-bold">
                  {detalleMateriaPrima.stock_actual} {detalleMateriaPrima.abreviacion_um}
                </p>
              </div>
              <div className="bg-amber-50 rounded-lg p-4">
                <p className="text-sm text-amber-500">Consumo Diario</p>
                <p className="text-xl font-bold">
                  {detalleMateriaPrima.consumo_promedio_diario.toFixed(2)} {detalleMateriaPrima.abreviacion_um}
                </p>
              </div>
              <div className={`${detalleMateriaPrima.dias_hasta_nivel_critico <= 7 ? 'bg-red-50' : 'bg-green-50'} rounded-lg p-4`}>
                <p className={`text-sm ${detalleMateriaPrima.dias_hasta_nivel_critico <= 7 ? 'text-red-500' : 'text-green-500'}`}>
                  Días hasta nivel crítico
                </p>
                <p className="text-xl font-bold">
                  {detalleMateriaPrima.dias_hasta_nivel_critico === null 
                    ? 'N/A' 
                    : detalleMateriaPrima.dias_hasta_nivel_critico}
                </p>
              </div>
            </div>
            
            {/* Gráfico de proyección diaria */}
            <div className="bg-white rounded-lg shadow p-4">
              <h4 className="text-lg font-medium mb-4">Proyección de Stock (30 días)</h4>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={detalleMateriaPrima.proyeccion_diaria}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis 
                    dataKey="fecha" 
                    tickFormatter={(value) => {
                      const date = new Date(value);
                      return format(date, 'dd/MM');
                    }}
                    interval={5}
                  />
                  <YAxis />
                  <Tooltip 
                    formatter={(value) => [`${value} ${detalleMateriaPrima.abreviacion_um}`, '']}
                    labelFormatter={(value) => `Fecha: ${formatDate(value)}`}
                  />
                  <Legend />
                  <Line 
                    type="monotone" 
                    dataKey="stock_proyectado" 
                    name="Stock Proyectado" 
                    stroke="#2563eb" 
                    strokeWidth={2}
                    dot={{ r: 1 }}
                    activeDot={{ r: 5 }}
                  />
                  <Line 
                    type="monotone" 
                    dataKey="caducidad" 
                    name="Caducidad" 
                    stroke="#ef4444" 
                    strokeWidth={1}
                    strokeDasharray="5 5"
                  />
                  {/* Línea horizontal para stock mínimo */}
                  <Line 
                    type="monotone" 
                    dataKey={() => detalleMateriaPrima.stock_minimo} 
                    name="Stock Mínimo" 
                    stroke="#f59e0b" 
                    strokeWidth={2}
                    strokeDasharray="3 3"
                    dot={false}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
            
            {/* Tabla de lotes */}
            {detalleMateriaPrima.lotes && detalleMateriaPrima.lotes.length > 0 && (
              <div className="bg-white rounded-lg shadow overflow-hidden">
                <h4 className="text-lg font-medium p-4 bg-gray-50 border-b">Lotes Disponibles</h4>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Código</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cantidad</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Caducidad</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Días Restantes</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {detalleMateriaPrima.lotes.map((lote) => (
                        <tr key={lote.id}>
                          <td className="px-6 py-4 whitespace-nowrap">{lote.codigo}</td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            {lote.cantidad} {detalleMateriaPrima.abreviacion_um}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            {formatDate(lote.fecha_caducidad)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span 
                              className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                lote.dias_para_caducidad <= 7 
                                  ? 'bg-red-100 text-red-800' 
                                  : lote.dias_para_caducidad <= 30 
                                  ? 'bg-yellow-100 text-yellow-800' 
                                  : 'bg-green-100 text-green-800'
                              }`}
                            >
                              {lote.dias_para_caducidad}
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
  
  // Renderizado condicional para carga y error
  if (loading && proyecciones.length === 0) {
    return (
      <div className="flex justify-center items-center min-h-96">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }
  
  if (error && proyecciones.length === 0) {
    return (
      <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded shadow text-red-700">
        <p className="font-bold">Error</p>
        <p>{error}</p>
        <button 
          onClick={cargarProyecciones}
          className="mt-2 px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600"
        >
          Reintentar
        </button>
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">Proyecciones de Inventario</h2>
        <RefreshButton onClick={cargarProyecciones} loading={loading} />
      </div>
      
      {/* Filtros */}
      <div className="bg-white rounded-lg shadow p-4 flex flex-wrap gap-4 items-end">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Fecha Inicio</label>
          <input
            type="date"
            name="fechaInicio"
            value={filtro.fechaInicio}
            onChange={handleFilterChange}
            className="border rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Fecha Fin</label>
          <input
            type="date"
            name="fechaFin"
            value={filtro.fechaFin}
            onChange={handleFilterChange}
            className="border rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500"
          />
        </div>
        <button
          onClick={cargarProyecciones}
          className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700"
          disabled={loading}
        >
          {loading ? 'Cargando...' : 'Aplicar Filtros'}
        </button>
      </div>
      
      {/* Tarjetas de resumen */}
      <FadeInUp delay={0.1}>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <StatCard
            title="Materiales en Riesgo"
            value={materialesEnRiesgo.length}
            icon="warning"
            color="amber"
          />
          <StatCard
            title="Próximos a Caducar"
            value={alertasCaducidad.reduce((total, mp) => 
              total + mp.lotes.filter(l => l.dias_restantes <= 30).length, 0)}
            icon="calendar"
            color="red"
          />
          <StatCard
            title="Necesitan Reabastecimiento"
            value={reabastecimiento.length}
            icon="shopping-cart"
            color="blue"
          />
        </div>
      </FadeInUp>
      
      {/* Sección de gráficos */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        {/* Gráfico de proyección de stock */}
        <FadeInUp delay={0.2}>
          <ChartCard title="Proyección de Stock">
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={datosProyeccion.slice(0, 10)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="stockActual" name="Stock Actual" fill="#8884d8" />
                <Bar dataKey="proyeccion" name="Proyección" fill="#82ca9d" />
                <Bar dataKey="stockMinimo" name="Stock Mínimo" fill="#ffc658" />
              </BarChart>
            </ResponsiveContainer>
          </ChartCard>
        </FadeInUp>
        
        {/* Gráfico de caducidad */}
        <FadeInUp delay={0.3}>
          <ChartCard title="Materiales por Caducar">
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={datosCaducidad}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  nameKey="name"
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                >
                  {datosCaducidad.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip formatter={(value) => [`${value} unidades`, 'Cantidad']} />
              </PieChart>
            </ResponsiveContainer>
          </ChartCard>
        </FadeInUp>
      </div>
      
      {/* Lista de materiales */}
      <FadeInUp delay={0.4}>
        <div className="bg-white rounded-lg shadow overflow-hidden">
          <h3 className="p-4 bg-gray-50 border-b text-lg font-medium">Materiales con Proyección</h3>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Material</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock Actual</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Proyección</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Caducidad</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {proyecciones.map((item) => (
                  <tr key={item.id}>
                    <td className="px-6 py-4 whitespace-nowrap">{item.nombre}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {item.stock_actual} {item.abreviacion_um}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {item.proyeccion_stock} {item.abreviacion_um}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {item.cantidad_por_caducar > 0 ? (
                        <span className="text-red-600 font-medium">
                          {item.cantidad_por_caducar} {item.abreviacion_um}
                        </span>
                      ) : (
                        <span className="text-green-600">Sin caducidad próxima</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {item.alerta_stock ? (
                        <span className="px-2 py-1 text-xs rounded-full bg-red-100 text-red-800">
                          Alerta Stock
                        </span>
                      ) : (
                        <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                          Normal
                        </span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <button
                        onClick={() => cargarDetalleMateriaPrima(item.id)}
                        className="text-indigo-600 hover:text-indigo-900 px-2 py-1 text-sm"
                      >
                        Ver Detalle
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </FadeInUp>
      
      {/* Modal para detalle */}
      {showDetalleModal && detalleMateriaPrima && <DetalleModal />}
    </div>
  );
};

export default ProyeccionesTab;\n\n
=== ./inventario/components/dashboard/tabs/ResumenTab.jsx ===
import { StatCard, AlertList, ChartCard } from '../';
import {
  FiBox,
  FiTruck,
  FiActivity,
  FiAlertTriangle,
  FiBarChart2,
  FiCalendar
} from 'react-icons/fi';
import {
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend
} from 'recharts';
import { CHART_GRADIENTS } from '../dashboardConstants';

/**
 * Componente para la pestaña de Resumen del Dashboard
 * 
 * @param {Object} props
 * @param {Object} props.stats - Estadísticas a mostrar
 * @param {Array} props.lowStockItems - Elementos con bajo stock
 * @param {Array} props.expiringItems - Elementos próximos a caducar
 * @param {string} props.timeRange - Rango de tiempo seleccionado
 * @param {Function} props.setTimeRange - Función para cambiar el rango de tiempo
 * @param {Array} props.stockMovementData - Datos para el gráfico de movimientos
 */
const ResumenTab = ({
  stats = {
    totalItems: 0,
    totalProviders: 0,
    movementsToday: 0,
    activeAlerts: 0
  },
  lowStockItems = [],
  expiringItems = [],
  timeRange = '7d',
  setTimeRange,
  stockMovementData = []
}) => {
  // Selector de rango de tiempo para el gráfico
  const TimeRangeSelector = ({ className = "" }) => (
    <div className={`flex bg-gray-50 rounded-lg p-1 ${className}`}>
      {[
        { id: '7d', label: '7 días' },
        { id: '30d', label: '30 días' },
        { id: 'mes', label: 'Este mes' },
        { id: 'año', label: 'Este año' }
      ].map(option => (
        <button
          key={option.id}
          onClick={() => setTimeRange && setTimeRange(option.id)}
          className={`text-xs py-1.5 px-2.5 rounded-md transition-colors flex-1 font-medium
            ${timeRange === option.id 
              ? 'bg-white shadow-sm text-indigo-600' 
              : 'text-gray-600 hover:bg-gray-100'}`}
        >
          {option.label}
        </button>
      ))}
    </div>
  );

  return (
    <div className="space-y-5">
      {/* Tarjetas de estadísticas */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-5">
        <StatCard 
          icon={FiBox} 
          title="Materias Primas" 
          value={stats.totalItems} 
          color="primary"
          trend="up"
          percent="5.2"
          delay={0.1}
        />
        <StatCard 
          icon={FiTruck} 
          title="Proveedores" 
          value={stats.totalProviders} 
          color="success"
          delay={0.2}
        />
        <StatCard 
          icon={FiActivity} 
          title="Movimientos Hoy" 
          value={stats.movementsToday} 
          color="purple"
          trend="up"
          percent="12.3"
          delay={0.3}
        />
        <StatCard 
          icon={FiAlertTriangle} 
          title="Alertas Activas" 
          value={stats.activeAlerts} 
          color="warning"
          trend="down"
          percent="3.1"
          delay={0.4}
        />
      </div>

      {/* Gráfico resumen de movimientos */}
      <ChartCard 
        title="Movimiento de Inventario" 
        icon={FiBarChart2} 
        color="primary"
        delay={0.5}
        actionButtons={
          <TimeRangeSelector className="mr-2" />
        }
      >
        <ResponsiveContainer width="100%" height="100%">
          <AreaChart
            data={stockMovementData}
            margin={{ top: 10, right: 10, left: 0, bottom: 10 }}
          >
            <defs>
              <linearGradient id="colorEntradas" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor={CHART_GRADIENTS.entrada[0]} />
                <stop offset="95%" stopColor={CHART_GRADIENTS.entrada[1]} />
              </linearGradient>
              <linearGradient id="colorSalidas" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor={CHART_GRADIENTS.salida[0]} />
                <stop offset="95%" stopColor={CHART_GRADIENTS.salida[1]} />
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="3 3" vertical={false} opacity={0.2} />
            <XAxis 
              dataKey="name" 
              axisLine={false} 
              tickLine={false} 
              tick={{ fontSize: 12, fill: '#64748b' }}
            />
            <YAxis 
              axisLine={false} 
              tickLine={false} 
              tick={{ fontSize: 12, fill: '#64748b' }}
              width={35}
            />
            <Tooltip 
              contentStyle={{ 
                backgroundColor: 'white', 
                borderRadius: '8px', 
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)', 
                border: '1px solid #e2e8f0',
                fontSize: '12px',
                padding: '8px 12px'
              }} 
            />
            <Legend 
              iconSize={10} 
              wrapperStyle={{ fontSize: '12px', paddingTop: '15px' }}
              formatter={(value) => <span style={{ color: '#64748b' }}>{value}</span>}
            />
            <Area 
              type="monotone" 
              dataKey="entradas" 
              stroke="#6366F1" 
              fillOpacity={1} 
              fill="url(#colorEntradas)" 
              activeDot={{ r: 6, strokeWidth: 1, stroke: '#fff' }}
              strokeWidth={2} 
            />
            <Area 
              type="monotone" 
              dataKey="salidas" 
              stroke="#10B981" 
              fillOpacity={1} 
              fill="url(#colorSalidas)"
              activeDot={{ r: 6, strokeWidth: 1, stroke: '#fff' }}
              strokeWidth={2}
            />
          </AreaChart>
        </ResponsiveContainer>
      </ChartCard>

      {/* Listas de alertas y problemas */}
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-5">
        <AlertList
          title="Bajo Stock"
          items={lowStockItems}
          emptyMessage="No hay elementos con bajo stock"
          icon={FiBarChart2}
          color="danger"
          viewAllLink="/inventory/bajostock"
          delay={0.6}
        />
        
        <AlertList
          title="Próximos a Caducar"
          items={expiringItems}
          emptyMessage="No hay elementos próximos a caducar"
          icon={FiCalendar}
          color="warning"
          viewAllLink="/inventory/caducidad"
          delay={0.7}
        />
      </div>
    </div>
  );
};

export default ResumenTab;\n\n
=== ./inventario/components/index.js ===
// Exportar todos los componentes de inventario/components
\n\n
=== ./inventario/hooks/index.js ===
// Exportar todos los componentes de inventario/hooks
\n\n
=== ./inventario/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n
=== ./inventario/pages/Alertas.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiAlertTriangle, 
  FiEye, 
  FiEyeOff, 
  FiFilter, 
  FiX, 
  FiCheck, 
  FiCheckSquare, 
  FiInfo 
} from 'react-icons/fi';
import {
  getAllAlertas,
  getAlertaById,
  getAlertasPendientes,
  marcarComoLeida,
  marcarTodasComoLeidas,
  getAlertasPorTipo,
  getResumenAlertas
} from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const tipoBadgeColors = {
  'stock_bajo': 'red',
  'caducidad': 'amber',
  'vencimiento_proveedor': 'purple',
  'ajuste_requerido': 'blue'
};

const tiposAlerta = [
  { id: 'stock_bajo', label: 'Bajo Stock', icon: FiAlertTriangle },
  { id: 'caducidad', label: 'Caducidad', icon: FiAlertTriangle },
  { id: 'vencimiento_proveedor', label: 'Vencimiento', icon: FiAlertTriangle },
  { id: 'ajuste_requerido', label: 'Ajuste', icon: FiAlertTriangle }
];

const Alertas = () => {
  const [alertas, setAlertas] = useState([]);
  const [resumen, setResumen] = useState({});
  const [selectedAlerta, setSelectedAlerta] = useState(null);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [activeFilter, setActiveFilter] = useState('');
  const [showLeidas, setShowLeidas] = useState(false);
  const [refreshTrigger, setRefreshTrigger] = useState(0);

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      // Determinar qué endpoint usar según filtros
      let alertasData;
      if (activeFilter) {
        alertasData = await getAlertasPorTipo(activeFilter);
      } else if (!showLeidas) {
        alertasData = await getAlertasPendientes();
      } else {
        alertasData = await getAllAlertas({ leida: showLeidas ? undefined : 'false' });
      }
      
      // Obtener resumen para mostrar contadores
      const resumenData = await getResumenAlertas();
      
      setAlertas(alertasData);
      setResumen(resumenData);
    } catch (error) {
      console.error('Error al cargar alertas:', error);
      toast.error('Error al cargar las alertas');
    } finally {
      setLoading(false);
    }
  }, [activeFilter, showLeidas, refreshTrigger]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Obtener detalles de una alerta
  const handleViewDetails = async (alerta) => {
    try {
      setLoading(true);
      // Si la alerta no tiene todos los datos necesarios, obtenerlos
      if (!alerta.materiaPrima || !alerta.usuarioDestinatario) {
        const alertaDetalle = await getAlertaById(alerta.id);
        setSelectedAlerta(alertaDetalle);
      } else {
        setSelectedAlerta(alerta);
      }
      setIsDetailModalOpen(true);
    } catch (error) {
      console.error('Error al obtener detalles de la alerta:', error);
      toast.error('Error al obtener detalles de la alerta');
    } finally {
      setLoading(false);
    }
  };

  // Marcar alerta como leída
  const handleMarkAsRead = async (alerta, event) => {
    event.stopPropagation(); // Evitar que se abra el modal de detalles
    try {
      await marcarComoLeida(alerta.id);
      toast.success('Alerta marcada como leída');
      // Refrescar datos
      setRefreshTrigger(prev => prev + 1);
    } catch (error) {
      console.error('Error al marcar alerta como leída:', error);
      toast.error('Error al marcar la alerta como leída');
    }
  };

  // Marcar todas las alertas como leídas
  const handleMarkAllAsRead = async () => {
    try {
      await marcarTodasComoLeidas(activeFilter || undefined);
      toast.success('Todas las alertas han sido marcadas como leídas');
      // Refrescar datos
      setRefreshTrigger(prev => prev + 1);
    } catch (error) {
      console.error('Error al marcar todas las alertas como leídas:', error);
      toast.error('Error al marcar todas las alertas como leídas');
    }
  };

  // Formatear fecha
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('es-ES', { 
      day: '2-digit', 
      month: '2-digit', 
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Calcular tiempo transcurrido
  const getTimeAgo = (dateString) => {
    const now = new Date();
    const date = new Date(dateString);
    const diffMs = now - date;
    
    // Convertir a diferentes unidades de tiempo
    const diffSecs = Math.floor(diffMs / 1000);
    const diffMins = Math.floor(diffSecs / 60);
    const diffHours = Math.floor(diffMins / 60);
    const diffDays = Math.floor(diffHours / 24);
    
    if (diffDays > 0) {
      return `hace ${diffDays} día${diffDays !== 1 ? 's' : ''}`;
    } else if (diffHours > 0) {
      return `hace ${diffHours} hora${diffHours !== 1 ? 's' : ''}`;
    } else if (diffMins > 0) {
      return `hace ${diffMins} minuto${diffMins !== 1 ? 's' : ''}`;
    } else {
      return 'ahora mismo';
    }
  };

  if (loading && !alertas.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Alertas del Sistema</h1>
        <Button
          className="flex items-center gap-2"
          onClick={handleMarkAllAsRead}
          disabled={alertas.filter(a => !a.leida).length === 0}
        >
          <FiCheckSquare size={18} /> Marcar Todas como Leídas
        </Button>
      </div>

      {/* Resumen y filtros */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <div className="mb-4">
          <h2 className="text-lg font-medium text-gray-700 mb-2">Resumen de Alertas</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {tiposAlerta.map(tipo => {
              const tipoStats = resumen[tipo.id] || { total: 0, leidas: 0, no_leidas: 0 };
              return (
                <div 
                  key={tipo.id} 
                  className={`p-4 rounded-lg border ${
                    activeFilter === tipo.id 
                      ? `border-${tipoBadgeColors[tipo.id]}-500 bg-${tipoBadgeColors[tipo.id]}-50` 
                      : 'border-gray-200'
                  }`}
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <p className="text-sm text-gray-500">{tipo.label}</p>
                      <p className="text-xl font-semibold">{tipoStats.total || 0}</p>
                    </div>
                    <tipo.icon size={20} className={`text-${tipoBadgeColors[tipo.id]}-500`} />
                  </div>
                  <div className="flex justify-between mt-2 text-sm">
                    <span className="text-gray-500">No leídas: {tipoStats.no_leidas || 0}</span>
                    <span className="text-gray-500">Leídas: {tipoStats.leidas || 0}</span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
        
        <div className="flex flex-wrap gap-3">
          {/* Filtros por tipo */}
          {tiposAlerta.map(tipo => (
            <button
              key={tipo.id}
              className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
                activeFilter === tipo.id 
                  ? `bg-${tipoBadgeColors[tipo.id]}-100 text-${tipoBadgeColors[tipo.id]}-800 border border-${tipoBadgeColors[tipo.id]}-200` 
                  : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
              }`}
              onClick={() => setActiveFilter(activeFilter === tipo.id ? '' : tipo.id)}
            >
              <FiFilter size={16} />
              {tipo.label}
              {activeFilter === tipo.id && <FiX size={16} />}
            </button>
          ))}
          
          {/* Toggle para mostrar leídas/no leídas */}
          <button
            className={`flex items-center gap-1 px-3 py-2 rounded-lg ml-auto ${
              showLeidas 
                ? 'bg-green-100 text-green-800 border border-green-200' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setShowLeidas(!showLeidas)}
          >
            {showLeidas ? <FiEye size={16} /> : <FiEyeOff size={16} />}
            {showLeidas ? 'Mostrar Todas' : 'Solo No Leídas'}
          </button>
        </div>
      </div>

      {/* Lista de alertas */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Tipo</TableHead>
              <TableHead>Mensaje</TableHead>
              <TableHead>Fecha</TableHead>
              <TableHead>Estado</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {alertas.length === 0 ? (
              <TableRow>
                <TableCell colSpan={5} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiInfo size={40} className="mb-2 text-gray-300" />
                    <p>No hay alertas {!showLeidas ? "sin leer" : ""} {activeFilter ? `de tipo ${activeFilter}` : ""}</p>
                    {(activeFilter || !showLeidas) && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={() => {
                          setActiveFilter('');
                          setShowLeidas(true);
                        }}
                      >
                        Ver todas las alertas
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              alertas.map(alerta => (
                <TableRow 
                  key={alerta.id}
                  className={`cursor-pointer ${!alerta.leida ? 'bg-blue-50' : ''} hover:bg-gray-50`}
                  onClick={() => handleViewDetails(alerta)}
                >
                  <TableCell>
                    <Badge color={tipoBadgeColors[alerta.tipo_alerta] || 'gray'}>
                      {tiposAlerta.find(t => t.id === alerta.tipo_alerta)?.label || alerta.tipo_alerta}
                    </Badge>
                  </TableCell>
                  <TableCell className="max-w-xs truncate">
                    {alerta.mensaje}
                  </TableCell>
                  <TableCell>
                    <div className="flex flex-col">
                      <span>{formatDate(alerta.fecha_alerta)}</span>
                      <span className="text-xs text-gray-500">{getTimeAgo(alerta.fecha_alerta)}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    {alerta.leida ? (
                      <Badge color="green">Leída</Badge>
                    ) : (
                      <Badge color="blue">Sin leer</Badge>
                    )}
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <button
                        onClick={(e) => handleViewDetails(alerta)}
                        className="p-1 text-blue-600 hover:text-blue-800"
                        title="Ver detalles"
                      >
                        <FiInfo size={18} />
                      </button>
                      {!alerta.leida && (
                        <button
                          onClick={(e) => handleMarkAsRead(alerta, e)}
                          className="p-1 text-green-600 hover:text-green-800"
                          title="Marcar como leída"
                        >
                          <FiCheck size={18} />
                        </button>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de detalles */}
      {selectedAlerta && (
        <Modal
          isOpen={isDetailModalOpen}
          onClose={() => setIsDetailModalOpen(false)}
          title="Detalles de la Alerta"
          maxWidth="md"
        >
          <div className="space-y-4 py-2">
            <div className="flex justify-between items-start">
              <Badge 
                color={tipoBadgeColors[selectedAlerta.tipo_alerta] || 'gray'}
                className="text-sm px-3 py-1"
              >
                {tiposAlerta.find(t => t.id === selectedAlerta.tipo_alerta)?.label || selectedAlerta.tipo_alerta}
              </Badge>
              
              <div>
                {selectedAlerta.leida ? (
                  <span className="flex items-center text-sm text-green-600">
                    <FiCheck size={16} className="mr-1" /> 
                    Leída {selectedAlerta.fecha_lectura ? `el ${formatDate(selectedAlerta.fecha_lectura)}` : ''}
                  </span>
                ) : (
                  <span className="flex items-center text-sm text-blue-600">
                    <FiEye size={16} className="mr-1" /> Sin leer
                  </span>
                )}
              </div>
            </div>
            
            <div className="p-4 bg-gray-50 rounded-lg">
              <h3 className="font-medium text-gray-800 mb-1">Mensaje</h3>
              <p className="text-gray-700">{selectedAlerta.mensaje}</p>
            </div>
            
            {selectedAlerta.materiaPrima && (
              <div className="p-4 bg-gray-50 rounded-lg">
                <h3 className="font-medium text-gray-800 mb-1">Materia Prima Relacionada</h3>
                <p className="text-gray-700">{selectedAlerta.materiaPrima.nombre}</p>
              </div>
            )}
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h3 className="font-medium text-gray-800 mb-1">Fecha de Alerta</h3>
                <p className="text-gray-700">{formatDate(selectedAlerta.fecha_alerta)}</p>
                <p className="text-sm text-gray-500">{getTimeAgo(selectedAlerta.fecha_alerta)}</p>
              </div>
              
              {selectedAlerta.usuarioDestinatario && (
                <div>
                  <h3 className="font-medium text-gray-800 mb-1">Destinatario</h3>
                  <p className="text-gray-700">{selectedAlerta.usuarioDestinatario.nombre}</p>
                </div>
              )}
            </div>
            
            <div className="flex justify-end gap-3 pt-2 mt-4">
              {!selectedAlerta.leida && (
                <Button
                  onClick={async () => {
                    await handleMarkAsRead(selectedAlerta, { stopPropagation: () => {} });
                    setIsDetailModalOpen(false);
                  }}
                >
                  Marcar como Leída
                </Button>
              )}
              <Button
                variant="outline"
                onClick={() => setIsDetailModalOpen(false)}
              >
                Cerrar
              </Button>
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
};

export default Alertas;\n\n
=== ./inventario/pages/Conversiones.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiEdit2, 
  FiTrash2, 
  FiPlus, 
  FiArrowRight, 
  FiFilter, 
  FiX, 
  FiRefreshCw,
  FiAlertTriangle
} from 'react-icons/fi';
import { MdCalculate } from 'react-icons/md';
import {
  getAllConversiones,
  getConversionById,
  createConversion,
  updateConversion,
  deleteConversion,
  getAllUnits,
  getConversionesDisponibles,
  convertirCantidad
} from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const tipoBadgeColors = {
  masa: 'blue',
  volumen: 'green',
  unidad: 'purple',
  longitud: 'amber',
  area: 'indigo'
};

const Conversiones = () => {
  const [conversiones, setConversiones] = useState([]);
  const [unidadesMedida, setUnidadesMedida] = useState([]);
  const [unidadesFiltradas, setUnidadesFiltradas] = useState([]);
  const [selectedConversion, setSelectedConversion] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isCalculatorModalOpen, setIsCalculatorModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filtroTipo, setFiltroTipo] = useState('');
  const [formData, setFormData] = useState({
    id_unidad_origen: '',
    id_unidad_destino: '',
    factor_conversion: ''
  });
  const [calculatorData, setCalculatorData] = useState({
    cantidad: 1,
    id_unidad_origen: '',
    id_unidad_destino: '',
    resultado: null
  });

  const tiposUnidad = [
    { id: 'masa', label: 'Masa' },
    { id: 'volumen', label: 'Volumen' },
    { id: 'unidad', label: 'Unidad' },
    { id: 'longitud', label: 'Longitud' },
    { id: 'area', label: 'Área' }
  ];

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    setError(null);
    
    try {
      const promises = [getAllConversiones(), getAllUnits()];
      const results = await Promise.allSettled(promises);
      
      // Revisar resultado de conversiones
      if (results[0].status === 'fulfilled') {
        setConversiones(results[0].value);
      } else {
        console.error('Error al cargar conversiones:', results[0].reason);
        toast.error('Error al cargar las conversiones');
        setConversiones([]);
      }
      
      // Revisar resultado de unidades
      if (results[1].status === 'fulfilled') {
        const unitsData = results[1].value;
        setUnidadesMedida(unitsData);
        
        // Si hay un filtro activo, aplicarlo a las unidades
        if (filtroTipo) {
          setUnidadesFiltradas(unitsData.filter(unidad => unidad.tipo === filtroTipo));
        } else {
          setUnidadesFiltradas(unitsData);
        }
      } else {
        console.error('Error al cargar unidades de medida:', results[1].reason);
        toast.error('Error al cargar las unidades de medida');
        setUnidadesMedida([]);
        setUnidadesFiltradas([]);
      }
      
      // Si ambos fallan, mostrar error general
      if (results[0].status === 'rejected' && results[1].status === 'rejected') {
        setError('Error de conexión al servidor. Por favor, intente nuevamente más tarde.');
      }
    } catch (error) {
      console.error('Error general al cargar datos:', error);
      toast.error('Error de conexión con el servidor');
      setError('Error de conexión al servidor. Por favor, intente nuevamente más tarde.');
    } finally {
      setLoading(false);
    }
  }, [filtroTipo]);

  // Función para reintentar la carga de datos
  const handleRetry = () => {
    fetchData();
  };

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Filtrar conversiones
  const filteredConversiones = conversiones
    .filter(conversion => {
      // Filtro por tipo
      if (filtroTipo) {
        return (
          conversion.unidadOrigen?.tipo === filtroTipo && 
          conversion.unidadDestino?.tipo === filtroTipo
        );
      }
      return true;
    })
    .sort((a, b) => {
      // Ordenar por tipo y luego por nombres
      if (a.unidadOrigen?.tipo !== b.unidadOrigen?.tipo) {
        return a.unidadOrigen?.tipo.localeCompare(b.unidadOrigen?.tipo);
      }
      return a.unidadOrigen?.nombre.localeCompare(b.unidadOrigen?.nombre);
    });

  // Manejadores de eventos para el formulario
  const handleOpenModal = (conversion = null) => {
    if (conversion) {
      setSelectedConversion(conversion);
      setFormData({
        id_unidad_origen: conversion.id_unidad_origen,
        id_unidad_destino: conversion.id_unidad_destino,
        factor_conversion: conversion.factor_conversion
      });
    } else {
      setSelectedConversion(null);
      setFormData({
        id_unidad_origen: unidadesFiltradas.length > 0 ? unidadesFiltradas[0].id : '',
        id_unidad_destino: unidadesFiltradas.length > 1 ? unidadesFiltradas[1].id : '',
        factor_conversion: ''
      });
    }
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCalculatorChange = (e) => {
    const { name, value } = e.target;
    setCalculatorData(prev => ({
      ...prev,
      [name]: value,
      resultado: null // Resetear resultado al cambiar algún valor
    }));
  };

  const handleConvert = async () => {
    try {
      if (!calculatorData.cantidad || !calculatorData.id_unidad_origen || !calculatorData.id_unidad_destino) {
        toast.error('Todos los campos son requeridos para realizar la conversión');
        return;
      }

      const data = {
        cantidad: Number(calculatorData.cantidad),
        id_unidad_origen: Number(calculatorData.id_unidad_origen),
        id_unidad_destino: Number(calculatorData.id_unidad_destino)
      };

      const response = await convertirCantidad(data);
      setCalculatorData(prev => ({
        ...prev,
        resultado: response.cantidad_convertida
      }));

    } catch (error) {
      console.error('Error al convertir cantidad:', error);
      toast.error(error.response?.data?.error || 'Error al realizar la conversión');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Validar que no sean la misma unidad
      if (formData.id_unidad_origen === formData.id_unidad_destino) {
        toast.error('La unidad de origen y destino no pueden ser iguales');
        return;
      }

      // Validar tipo de unidades iguales
      const unidadOrigen = unidadesMedida.find(u => u.id === Number(formData.id_unidad_origen));
      const unidadDestino = unidadesMedida.find(u => u.id === Number(formData.id_unidad_destino));

      if (unidadOrigen.tipo !== unidadDestino.tipo) {
        toast.error('Las unidades deben ser del mismo tipo para poder convertir entre ellas');
        return;
      }

      // Convertir valores a números
      const conversionData = {
        id_unidad_origen: Number(formData.id_unidad_origen),
        id_unidad_destino: Number(formData.id_unidad_destino),
        factor_conversion: Number(formData.factor_conversion)
      };

      if (selectedConversion) {
        await updateConversion(
          selectedConversion.id_unidad_origen, 
          selectedConversion.id_unidad_destino, 
          conversionData
        );
        toast.success('Conversión actualizada correctamente');
      } else {
        await createConversion(conversionData);
        toast.success('Conversión creada correctamente');
      }
      
      setIsModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al guardar conversión:', error);
      
      if (error.response?.data?.error) {
        toast.error(error.response.data.error);
      } else {
        toast.error('Error al guardar la conversión');
      }
    }
  };

  const handleOpenDeleteModal = (conversion) => {
    setSelectedConversion(conversion);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    try {
      await deleteConversion(
        selectedConversion.id_unidad_origen, 
        selectedConversion.id_unidad_destino
      );
      toast.success('Conversión eliminada correctamente');
      setIsDeleteModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al eliminar conversión:', error);
      toast.error(error.response?.data?.error || 'Error al eliminar la conversión');
    }
  };

  const handleFilterByTipo = (tipo) => {
    if (filtroTipo === tipo) {
      setFiltroTipo('');
      setUnidadesFiltradas(unidadesMedida);
    } else {
      setFiltroTipo(tipo);
      setUnidadesFiltradas(unidadesMedida.filter(unidad => unidad.tipo === tipo));
    }
  };

  const handleOpenCalculator = () => {
    setCalculatorData({
      cantidad: 1,
      id_unidad_origen: unidadesMedida.length > 0 ? unidadesMedida[0].id : '',
      id_unidad_destino: unidadesMedida.length > 1 ? unidadesMedida[1].id : '',
      resultado: null
    });
    setIsCalculatorModalOpen(true);
  };

  if (loading && !conversiones.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">
          Conversiones entre Unidades
        </h1>
        <div className="flex gap-2">
          <Button
            variant="outline"
            className="flex items-center gap-2"
            onClick={handleOpenCalculator}
          >
            <MdCalculate size={18} /> Calculadora
          </Button>
          <Button
            className="flex items-center gap-2"
            onClick={() => handleOpenModal()}
          >
            <FiPlus size={18} /> Agregar Conversión
          </Button>
        </div>
      </div>

      {/* Filtros */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <h2 className="text-sm font-medium text-gray-700 mb-3">Filtrar por tipo de unidad:</h2>
        <div className="flex flex-wrap gap-2">
          {tiposUnidad.map(tipo => (
            <button
              key={tipo.id}
              className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
                filtroTipo === tipo.id 
                  ? `bg-${tipoBadgeColors[tipo.id]}-100 text-${tipoBadgeColors[tipo.id]}-800 border border-${tipoBadgeColors[tipo.id]}-200` 
                  : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
              }`}
              onClick={() => handleFilterByTipo(tipo.id)}
            >
              <FiFilter size={16} />
              {tipo.label}
              {filtroTipo === tipo.id && <FiX size={16} />}
            </button>
          ))}
        </div>
      </div>

      {/* Tabla de conversiones */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Tipo</TableHead>
              <TableHead>Unidad Origen</TableHead>
              <TableHead></TableHead>
              <TableHead>Unidad Destino</TableHead>
              <TableHead>Factor de Conversión</TableHead>
              <TableHead>Equivalencia</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredConversiones.length === 0 ? (
              <TableRow>
                <TableCell colSpan={7} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiRefreshCw size={40} className="mb-2 text-gray-300" />
                    <p>No se encontraron conversiones</p>
                    {filtroTipo && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={() => setFiltroTipo('')}
                      >
                        Ver todas las conversiones
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredConversiones.map(conversion => (
                <TableRow key={`${conversion.id_unidad_origen}-${conversion.id_unidad_destino}`}>
                  <TableCell>
                    <Badge color={tipoBadgeColors[conversion.unidadOrigen?.tipo || 'gray']}>
                      {conversion.unidadOrigen?.tipo?.charAt(0).toUpperCase() + conversion.unidadOrigen?.tipo?.slice(1) || 'N/A'}
                    </Badge>
                  </TableCell>
                  <TableCell className="font-medium">
                    {conversion.unidadOrigen?.nombre || 'N/A'} 
                    <span className="text-gray-500 ml-1">({conversion.unidadOrigen?.abreviatura || 'N/A'})</span>
                  </TableCell>
                  <TableCell className="text-center">
                    <FiArrowRight className="inline-block text-gray-400" />
                  </TableCell>
                  <TableCell className="font-medium">
                    {conversion.unidadDestino?.nombre || 'N/A'} 
                    <span className="text-gray-500 ml-1">({conversion.unidadDestino?.abreviatura || 'N/A'})</span>
                  </TableCell>
                  <TableCell className="font-mono">
                    {parseFloat(conversion.factor_conversion).toFixed(6)}
                  </TableCell>
                  <TableCell>
                    <span className="text-gray-600">
                      1 {conversion.unidadOrigen?.abreviatura} = {parseFloat(conversion.factor_conversion).toFixed(3)} {conversion.unidadDestino?.abreviatura}
                    </span>
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleOpenModal(conversion)}
                        className="p-1 text-blue-600 hover:text-blue-800"
                        title="Editar"
                      >
                        <FiEdit2 size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenDeleteModal(conversion)}
                        className="p-1 text-red-600 hover:text-red-800"
                        title="Eliminar"
                      >
                        <FiTrash2 size={18} />
                      </button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creación/edición */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={selectedConversion ? 'Editar Conversión' : 'Nueva Conversión'}
        maxWidth="md"
      >
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Unidad de Origen <span className="text-red-500">*</span>
                </label>
                <select
                  name="id_unidad_origen"
                  required
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.id_unidad_origen}
                  onChange={handleChange}
                  disabled={selectedConversion !== null}
                >
                  <option value="">Seleccionar unidad origen</option>
                  {unidadesFiltradas.map(unidad => (
                    <option key={unidad.id} value={unidad.id}>
                      {unidad.nombre} ({unidad.abreviatura}) - {unidad.tipo}
                    </option>
                  ))}
                </select>
                {selectedConversion && (
                  <p className="mt-1 text-xs text-amber-500">
                    <FiRefreshCw className="inline mr-1" />
                    Las unidades no se pueden cambiar, solo el factor de conversión
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Unidad de Destino <span className="text-red-500">*</span>
                </label>
                <select
                  name="id_unidad_destino"
                  required
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.id_unidad_destino}
                  onChange={handleChange}
                  disabled={selectedConversion !== null}
                >
                  <option value="">Seleccionar unidad destino</option>
                  {unidadesFiltradas
                    .filter(unidad => unidad.id !== Number(formData.id_unidad_origen))
                    .map(unidad => (
                      <option key={unidad.id} value={unidad.id}>
                        {unidad.nombre} ({unidad.abreviatura}) - {unidad.tipo}
                      </option>
                    ))
                  }
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Factor de Conversión <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                name="factor_conversion"
                min="0.000001"
                step="any"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.factor_conversion}
                onChange={handleChange}
                placeholder="Ej: 1000 para convertir de kg a g"
              />
              {formData.id_unidad_origen && formData.id_unidad_destino && (
                <p className="mt-2 text-sm text-gray-600">
                  Esto significa que 1 {unidadesMedida.find(u => u.id === Number(formData.id_unidad_origen))?.abreviatura || 'unidad'} 
                  {' = '} 
                  {formData.factor_conversion || 'X'} {unidadesMedida.find(u => u.id === Number(formData.id_unidad_destino))?.abreviatura || 'unidades'}
                </p>
              )}
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
            >
              Cancelar
            </Button>
            <Button type="submit">
              {selectedConversion ? 'Actualizar' : 'Crear'}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de calculadora */}
      <Modal
        isOpen={isCalculatorModalOpen}
        onClose={() => setIsCalculatorModalOpen(false)}
        title="Calculadora de Conversiones"
        maxWidth="md"
      >
        <div className="space-y-6 py-2">
          <p className="text-gray-600">
            Utilice esta herramienta para convertir cantidades entre diferentes unidades de medida.
          </p>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Cantidad
              </label>
              <input
                type="number"
                name="cantidad"
                min="0.000001"
                step="any"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={calculatorData.cantidad}
                onChange={handleCalculatorChange}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                De
              </label>
              <select
                name="id_unidad_origen"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={calculatorData.id_unidad_origen}
                onChange={handleCalculatorChange}
              >
                <option value="">Seleccionar unidad</option>
                {unidadesMedida.map(unidad => (
                  <option key={unidad.id} value={unidad.id}>
                    {unidad.nombre} ({unidad.abreviatura}) - {unidad.tipo}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                A
              </label>
              <select
                name="id_unidad_destino"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={calculatorData.id_unidad_destino}
                onChange={handleCalculatorChange}
              >
                <option value="">Seleccionar unidad</option>
                {unidadesMedida.map(unidad => (
                  <option key={unidad.id} value={unidad.id}>
                    {unidad.nombre} ({unidad.abreviatura}) - {unidad.tipo}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div className="flex justify-center mt-4">
            <Button
              onClick={handleConvert}
              className="px-6"
            >
              <MdCalculate className="mr-2" /> Convertir
            </Button>
          </div>

          {calculatorData.resultado !== null && (
            <div className="mt-6 p-4 bg-gray-50 rounded-lg text-center">
              <p className="text-gray-600 mb-2">Resultado:</p>
              <div className="flex items-center justify-center space-x-4">
                <div className="text-gray-800 font-medium">
                  {calculatorData.cantidad} {unidadesMedida.find(u => u.id === Number(calculatorData.id_unidad_origen))?.abreviatura}
                </div>
                <FiArrowRight className="text-gray-400" />
                <div className="text-xl font-bold text-indigo-600">
                  {calculatorData.resultado} {unidadesMedida.find(u => u.id === Number(calculatorData.id_unidad_destino))?.abreviatura}
                </div>
              </div>
            </div>
          )}

          <div className="flex justify-end gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setIsCalculatorModalOpen(false)}
            >
              Cerrar
            </Button>
          </div>
        </div>
      </Modal>

      {/* Modal de confirmación de eliminación */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="Confirmar Eliminación"
        maxWidth="sm"
      >
        <div className="py-4">
          <p className="text-gray-600">
            ¿Estás seguro de que deseas eliminar la conversión entre <span className="font-semibold">{selectedConversion?.unidadOrigen?.nombre}</span> y <span className="font-semibold">{selectedConversion?.unidadDestino?.nombre}</span>?
          </p>
          <p className="text-gray-500 text-sm mt-2">
            También se eliminará la conversión inversa automáticamente.
          </p>
        </div>
        
        <div className="flex justify-end gap-3 pt-2">
          <Button
            variant="outline"
            onClick={() => setIsDeleteModalOpen(false)}
          >
            Cancelar
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
          >
            Eliminar
          </Button>
        </div>
      </Modal>
    </div>
  );
};

export default Conversiones;\n\n
=== ./inventario/pages/InventoryDashboard.jsx ===
import { useState, useEffect, useRef, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiClock
} from 'react-icons/fi';
// Asegurando que todas las importaciones usen el alias @ para resolver correctamente en Docker
import { getInventoryStats, getLowStockItems, getActiveAlerts, getProximosACaducar, getMovementStats } from '@domains/inventario/services/inventoryService';

// Importar componentes modulares del dashboard
import {
  TabNav,
  RefreshButton,
  DashboardLoader,
  FadeInUp,
  ResumenTab,
  AccionesTab,
  GraficosTab,
  AlertasTab
} from '@domains/inventario/components/dashboard';

// Importar tab de proyecciones
import ProyeccionesTab from '@domains/inventario/components/dashboard/tabs/ProyeccionesTab';

/**
 * Dashboard principal de inventario con enfoque mobile-first y diseño modular
 */
const InventoryDashboard = () => {
  // Estados para datos del dashboard
  const [stats, setStats] = useState({
    totalItems: 0,
    totalProviders: 0,
    movementsToday: 0,
    activeAlerts: 0
  });
  const [lowStockItems, setLowStockItems] = useState([]);
  const [expiringItems, setExpiringItems] = useState([]);
  const [alerts, setAlerts] = useState([]);
  const [movementStats, setMovementStats] = useState([]);
  const [error, setError] = useState(null);
  
  // Estados de UI
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('resumen');
  const [refreshing, setRefreshing] = useState(false);
  const [timeRange, setTimeRange] = useState('7d');
  
  // Referencia para el contenedor principal para scroll al tope al cambiar de tab
  const mainContentRef = useRef(null);

  // Efecto para actualizar los datos al cargar el componente
  useEffect(() => {
    fetchDashboardData();
  }, []);

  // Efecto para hacer scroll al tope cuando se cambia de tab
  useEffect(() => {
    if (mainContentRef.current) {
      mainContentRef.current.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    }
  }, [activeTab]);

  // Función para obtener datos del dashboard
  const fetchDashboardData = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const promises = [
        getInventoryStats(),
        getLowStockItems(),
        getProximosACaducar(7),
        getActiveAlerts(),
        getMovementStats()
      ];
      const results = await Promise.allSettled(promises);
      // stats
      if (results[0].status === 'fulfilled') setStats(results[0].value);
      else {
        console.error('Error stats:', results[0].reason);
        toast.error('Error al obtener estadísticas');
        setStats({ totalItems: 0, totalProviders: 0, movementsToday: 0, activeAlerts: 0 });
      }
      // low stock
      if (results[1].status === 'fulfilled') setLowStockItems(results[1].value);
      else {
        console.error('Error bajo stock:', results[1].reason);
        toast.error('Error al obtener stock bajo');
        setLowStockItems([]);
      }
      // expiring
      if (results[2].status === 'fulfilled') setExpiringItems(results[2].value);
      else {
        console.error('Error proximos caducar:', results[2].reason);
        toast.error('Error al obtener caducidad');
        setExpiringItems([]);
      }
      // alerts
      if (results[3].status === 'fulfilled') setAlerts(results[3].value);
      else {
        console.error('Error alertas:', results[3].reason);
        toast.error('Error al obtener alertas');
        setAlerts([]);
      }
      // movement stats
      if (results[4].status === 'fulfilled') setMovementStats(results[4].value);
      else {
        console.error('Error stats movimientos:', results[4].reason);
        toast.error('Error al obtener estadísticas de movimiento');
        setMovementStats([]);
      }
      // if all failed
      if (results.every(r => r.status === 'rejected')) {
        setError('No se pudo cargar datos del servidor.');
      }
    } catch (err) {
      console.error('Error general dashboard:', err);
      toast.error('Error de conexión con el servidor');
      setError('Error de conexión con el servidor. Intente nuevamente.');
    } finally {
      setLoading(false);
    }
  }, []);

  // Función para refrescar datos
  const handleRefresh = async () => {
    setRefreshing(true);
    await fetchDashboardData();
    setTimeout(() => setRefreshing(false), 800); // Dar tiempo para la animación
  };

  const handleRetry = () => fetchDashboardData();

  // Mostrar loader durante la carga inicial
  if (loading) {
    return <DashboardLoader />;
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center h-full p-6">
        <p className="text-red-600 dark:text-red-400 mb-4">{error}</p>
        <button
          onClick={handleRetry}
          className="px-4 py-2 bg-indigo-600 dark:bg-indigo-500 text-white rounded hover:bg-indigo-700 dark:hover:bg-indigo-600"
        >Reintentar</button>
      </div>
    );
  }

  return (
    <div
      ref={mainContentRef}
      className="pb-20 lg:pb-6 overflow-auto h-full"
    >
      {/* Cabecera con título y fecha de actualización */}
      <FadeInUp>
        <div className="bg-white dark:bg-[#1e293b] rounded-xl shadow-sm p-5 mb-5 border border-gray-100 dark:border-[#334155] text-center">
          <div className="flex flex-col items-center gap-4 mb-5">
            <div>
              <h1 className="text-xl sm:text-2xl font-bold text-gray-800 dark:text-white flex items-center justify-center">
                Dashboard de Inventario
                <span className="ml-2 px-2 py-0.5 bg-indigo-50 dark:bg-indigo-900/70 text-indigo-600 dark:text-indigo-300 text-xs rounded-md font-normal">v1.0</span>
              </h1>
              <p className="text-gray-500 dark:text-gray-400 text-sm mt-1 flex items-center justify-center">
                <FiClock className="mr-1.5" size={14} />
                Última actualización: {new Date().toLocaleTimeString()}
              </p>
            </div>
          </div>
          
          {/* Navegación por pestañas centrada */}
          <div className="flex justify-center">
            <TabNav
              activeTab={activeTab}
              setActiveTab={setActiveTab}
            />
          </div>
        </div>
      </FadeInUp>

      {/* Contenido según la pestaña activa */}
      {activeTab === 'resumen' && (
        <ResumenTab 
          stats={stats}
          lowStockItems={lowStockItems}
          expiringItems={expiringItems}
          timeRange={timeRange}
          setTimeRange={setTimeRange}
          // movement stats para gráficas en lugar de mock
          stockMovementData={movementStats}
        />
      )}

      {activeTab === 'acciones' && (
        <AccionesTab />
      )}

      {activeTab === 'graficos' && (
        <GraficosTab 
          stockMovementData={movementStats}
          timeRange={timeRange}
          setTimeRange={setTimeRange}
        />
      )}

      {activeTab === 'proyecciones' && (
        <ProyeccionesTab />
      )}

      {activeTab === 'alertas' && (
        <AlertasTab 
          lowStockItems={lowStockItems}
          expiringItems={expiringItems}
          alerts={alerts}
        />
      )}

      {/* Botón de refresco flotante */}
      <div className="fixed bottom-6 right-6 z-10">
        <RefreshButton
          onRefresh={handleRefresh}
          isRefreshing={refreshing}
          disabled={loading}
        />
      </div>
    </div>
  );
};

export default InventoryDashboard;\n\n
=== ./inventario/pages/Lotes.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiEdit2, 
  FiTrash2, 
  FiPlus, 
  FiSearch, 
  FiBox, 
  FiFilter, 
  FiX, 
  FiInfo,
  FiCalendar,
  FiPackage,
  FiAlertCircle,
  FiDollarSign
} from 'react-icons/fi';
import {
  getAllLots,
  getLotById,
  createLot,
  updateLot,
  deleteLot,
  getLotsByMateriaPrima,
  getAllItems
} from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const Lotes = () => {
  const [lotes, setLotes] = useState([]);
  const [materiasPrimas, setMateriasPrimas] = useState([]);
  const [selectedLote, setSelectedLote] = useState(null);
  const [selectedMateriaPrima, setSelectedMateriaPrima] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    porCaducar: false,
    sinExistencias: false
  });
  const [formData, setFormData] = useState({
    id_materia_prima: '',
    codigo_lote: '',
    fecha_produccion: '',
    fecha_caducidad: '',
    cantidad_inicial: '',
    costo_unitario: ''
  });

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      const [lotesData, itemsData] = await Promise.all([
        getAllLots(),
        getAllItems()
      ]);
      
      setLotes(lotesData);
      setMateriasPrimas(itemsData);
    } catch (error) {
      console.error('Error al cargar lotes:', error);
      toast.error('Error al cargar los lotes');
    } finally {
      setLoading(false);
    }
  }, []);

  // Cargar lotes de una materia prima específica
  const fetchLotesByMateriaPrima = useCallback(async (idMateriaPrima, incluirSinStock = false) => {
    setLoading(true);
    try {
      const lotesData = await getLotsByMateriaPrima(idMateriaPrima, { incluir_sin_stock: incluirSinStock });
      setLotes(lotesData);
      
      // Establecer la materia prima seleccionada
      const materiaPrima = materiasPrimas.find(mp => mp.id === idMateriaPrima);
      setSelectedMateriaPrima(materiaPrima);
    } catch (error) {
      console.error('Error al cargar lotes por materia prima:', error);
      toast.error('Error al cargar los lotes por materia prima');
    } finally {
      setLoading(false);
    }
  }, [materiasPrimas]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Filtrar lotes
  const filteredLotes = lotes
    .filter(lote => {
      // Filtro de búsqueda
      if (searchTerm && 
          !lote.codigo_lote.toLowerCase().includes(searchTerm.toLowerCase()) &&
          !lote.materiaPrima?.nombre.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      // Filtro por caducidad próxima
      if (filters.porCaducar && lote.fecha_caducidad) {
        const fechaCaducidad = new Date(lote.fecha_caducidad);
        const hoy = new Date();
        const diasRestantes = Math.ceil((fechaCaducidad - hoy) / (1000 * 60 * 60 * 24));
        
        if (diasRestantes > 7) {
          return false;
        }
      }
      
      // Filtro por sin existencias
      if (filters.sinExistencias && parseFloat(lote.cantidad_actual) > 0) {
        return false;
      }
      
      return true;
    })
    .sort((a, b) => {
      // Ordenar por fecha de caducidad ascendente (primero los que caducan antes)
      if (a.fecha_caducidad && b.fecha_caducidad) {
        return new Date(a.fecha_caducidad) - new Date(b.fecha_caducidad);
      }
      
      // Si alguno no tiene fecha de caducidad, ordenar por código de lote
      return a.codigo_lote.localeCompare(b.codigo_lote);
    });

  // Manejadores de eventos para el formulario
  const handleOpenModal = (lote = null) => {
    if (lote) {
      setSelectedLote(lote);
      setFormData({
        id_materia_prima: lote.id_materia_prima,
        codigo_lote: lote.codigo_lote,
        fecha_produccion: lote.fecha_produccion ? new Date(lote.fecha_produccion).toISOString().split('T')[0] : '',
        fecha_caducidad: lote.fecha_caducidad ? new Date(lote.fecha_caducidad).toISOString().split('T')[0] : '',
        cantidad_inicial: lote.cantidad_inicial,
        costo_unitario: lote.costo_unitario
      });
    } else {
      setSelectedLote(null);
      setFormData({
        id_materia_prima: selectedMateriaPrima?.id || '',
        codigo_lote: '',
        fecha_produccion: '',
        fecha_caducidad: '',
        cantidad_inicial: '',
        costo_unitario: ''
      });
    }
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Convertir valores a números donde sea necesario
      const loteData = {
        ...formData,
        id_materia_prima: Number(formData.id_materia_prima),
        cantidad_inicial: Number(formData.cantidad_inicial),
        costo_unitario: Number(formData.costo_unitario),
      };

      if (selectedLote) {
        await updateLot(selectedLote.id, loteData);
        toast.success('Lote actualizado correctamente');
      } else {
        await createLot(loteData);
        toast.success('Lote creado correctamente');
      }
      
      setIsModalOpen(false);
      // Si hay una materia prima seleccionada, recargar solo sus lotes
      if (selectedMateriaPrima) {
        fetchLotesByMateriaPrima(selectedMateriaPrima.id, true);
      } else {
        fetchData();
      }
    } catch (error) {
      console.error('Error al guardar lote:', error);
      toast.error(error.response?.data?.error || 'Error al guardar el lote');
    }
  };

  const handleViewDetails = async (lote) => {
    try {
      setLoading(true);
      const loteDetalle = await getLotById(lote.id);
      setSelectedLote(loteDetalle);
      setIsDetailModalOpen(true);
    } catch (error) {
      console.error('Error al obtener detalles del lote:', error);
      toast.error('Error al obtener detalles del lote');
    } finally {
      setLoading(false);
    }
  };

  const handleOpenDeleteModal = (lote) => {
    setSelectedLote(lote);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    try {
      await deleteLot(selectedLote.id);
      toast.success('Lote eliminado correctamente');
      setIsDeleteModalOpen(false);
      
      if (selectedMateriaPrima) {
        fetchLotesByMateriaPrima(selectedMateriaPrima.id, true);
      } else {
        fetchData();
      }
    } catch (error) {
      console.error('Error al eliminar lote:', error);
      
      // Manejar error cuando el lote tiene existencias
      if (error.response?.status === 409) {
        toast.error('No se puede eliminar un lote que aún tiene existencias');
      } else {
        toast.error(error.response?.data?.error || 'Error al eliminar el lote');
      }
    }
  };

  // Formatear fecha
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString('es-ES');
  };

  // Calcular estado de caducidad
  const getCaducidadStatus = (fechaCaducidad) => {
    if (!fechaCaducidad) return { status: 'notSet', label: 'No establecida', color: 'gray' };
    
    const hoy = new Date();
    const fecha = new Date(fechaCaducidad);
    const diasRestantes = Math.ceil((fecha - hoy) / (1000 * 60 * 60 * 24));
    
    if (diasRestantes < 0) {
      return { status: 'expired', label: 'Caducado', color: 'red' };
    } else if (diasRestantes <= 7) {
      return { status: 'warning', label: `${diasRestantes} días`, color: 'amber' };
    } else if (diasRestantes <= 30) {
      return { status: 'soon', label: `${diasRestantes} días`, color: 'yellow' };
    } else {
      return { status: 'ok', label: formatDate(fechaCaducidad), color: 'green' };
    }
  };

  // Limpiar filtro de materia prima
  const clearMateriaFilter = () => {
    setSelectedMateriaPrima(null);
    fetchData();
  };

  if (loading && !lotes.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-800">
            {selectedMateriaPrima 
              ? `Lotes de ${selectedMateriaPrima.nombre}`
              : 'Lotes'
            }
          </h1>
          {selectedMateriaPrima && (
            <button 
              className="text-indigo-600 hover:text-indigo-800 text-sm flex items-center mt-1"
              onClick={clearMateriaFilter}
            >
              <FiX className="mr-1" /> Quitar filtro
            </button>
          )}
        </div>
        <Button
          className="flex items-center gap-2"
          onClick={() => handleOpenModal()}
        >
          <FiPlus size={18} /> Agregar Lote
        </Button>
      </div>

      {/* Filtros y búsqueda */}
      <div className="bg-white p-4 rounded-lg shadow-sm flex flex-col sm:flex-row gap-4 justify-between">
        <div className="relative flex-1">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="text-gray-400" />
          </div>
          <input
            type="text"
            className="pl-10 pr-4 py-2 w-full border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Buscar por código o materia prima..."
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="flex flex-wrap gap-2">
          <button
            className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
              filters.porCaducar 
                ? 'bg-amber-100 text-amber-800 border border-amber-200' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setFilters(prev => ({ ...prev, porCaducar: !prev.porCaducar }))}
          >
            <FiFilter size={16} />
            Por Caducar (7 días)
            {filters.porCaducar && <FiX size={16} className="ml-1" />}
          </button>
          
          <button
            className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
              filters.sinExistencias 
                ? 'bg-red-100 text-red-800 border border-red-200' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setFilters(prev => ({ ...prev, sinExistencias: !prev.sinExistencias }))}
          >
            <FiFilter size={16} />
            Sin Existencias
            {filters.sinExistencias && <FiX size={16} className="ml-1" />}
          </button>
        </div>
      </div>

      {/* Tabla de lotes */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Código</TableHead>
              <TableHead>Materia Prima</TableHead>
              <TableHead>Fecha Producción</TableHead>
              <TableHead>Fecha Caducidad</TableHead>
              <TableHead>Cantidad Inicial</TableHead>
              <TableHead>Existencias</TableHead>
              <TableHead>Costo Unitario</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredLotes.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiBox size={40} className="mb-2 text-gray-300" />
                    <p>
                      {selectedMateriaPrima
                        ? `No se encontraron lotes para ${selectedMateriaPrima.nombre}`
                        : 'No se encontraron lotes'
                      }
                    </p>
                    {(searchTerm || filters.porCaducar || filters.sinExistencias) && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={() => {
                          setSearchTerm('');
                          setFilters({ porCaducar: false, sinExistencias: false });
                        }}
                      >
                        Limpiar filtros
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredLotes.map(lote => {
                const caducidadStatus = getCaducidadStatus(lote.fecha_caducidad);
                return (
                  <TableRow key={lote.id}>
                    <TableCell className="font-medium">{lote.codigo_lote}</TableCell>
                    <TableCell>
                      <button 
                        className="text-indigo-600 hover:underline"
                        onClick={() => fetchLotesByMateriaPrima(lote.id_materia_prima, true)}
                      >
                        {lote.materiaPrima?.nombre || 'N/A'}
                      </button>
                    </TableCell>
                    <TableCell>{formatDate(lote.fecha_produccion)}</TableCell>
                    <TableCell>
                      <Badge color={caducidadStatus.color}>
                        {caducidadStatus.label}
                      </Badge>
                    </TableCell>
                    <TableCell>{lote.cantidad_inicial}</TableCell>
                    <TableCell>
                      <span className={parseFloat(lote.cantidad_actual) === 0 ? 'text-red-500 font-medium' : ''}>
                        {lote.cantidad_actual}
                        {parseFloat(lote.cantidad_actual) === 0 && ' (Agotado)'}
                      </span>
                    </TableCell>
                    <TableCell>${parseFloat(lote.costo_unitario).toFixed(2)}</TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <button
                          onClick={() => handleViewDetails(lote)}
                          className="p-1 text-indigo-600 hover:text-indigo-800"
                          title="Ver detalles"
                        >
                          <FiInfo size={18} />
                        </button>
                        <button
                          onClick={() => handleOpenModal(lote)}
                          className="p-1 text-blue-600 hover:text-blue-800"
                          title="Editar"
                        >
                          <FiEdit2 size={18} />
                        </button>
                        <button
                          onClick={() => handleOpenDeleteModal(lote)}
                          className="p-1 text-red-600 hover:text-red-800"
                          title="Eliminar"
                          disabled={parseFloat(lote.cantidad_actual) > 0}
                        >
                          <FiTrash2 size={18} className={parseFloat(lote.cantidad_actual) > 0 ? 'opacity-40 cursor-not-allowed' : ''} />
                        </button>
                      </div>
                    </TableCell>
                  </TableRow>
                );
              })
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creación/edición */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={selectedLote ? `Editar Lote: ${selectedLote.codigo_lote}` : 'Nuevo Lote'}
      >
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Materia Prima <span className="text-red-500">*</span>
              </label>
              <select
                name="id_materia_prima"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.id_materia_prima}
                onChange={handleChange}
                disabled={selectedLote !== null}
              >
                <option value="">Seleccionar materia prima</option>
                {materiasPrimas.map(mp => (
                  <option key={mp.id} value={mp.id}>
                    {mp.nombre}
                  </option>
                ))}
              </select>
              {selectedLote && (
                <p className="mt-1 text-xs text-amber-500">
                  <FiAlertCircle className="inline mr-1" />
                  La materia prima no se puede cambiar una vez creado el lote
                </p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Código de Lote <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                name="codigo_lote"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.codigo_lote}
                onChange={handleChange}
                placeholder="Ej: L20250326-001"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Fecha de Producción
                </label>
                <input
                  type="date"
                  name="fecha_produccion"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.fecha_produccion}
                  onChange={handleChange}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Fecha de Caducidad
                </label>
                <input
                  type="date"
                  name="fecha_caducidad"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.fecha_caducidad}
                  onChange={handleChange}
                  min={formData.fecha_produccion || undefined}
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Cantidad Inicial <span className="text-red-500">*</span>
                </label>
                <input
                  type="number"
                  name="cantidad_inicial"
                  min="0"
                  step="0.01"
                  required
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.cantidad_inicial}
                  onChange={handleChange}
                  disabled={selectedLote !== null}
                />
                {selectedLote && (
                  <p className="mt-1 text-xs text-amber-500">
                    <FiAlertCircle className="inline mr-1" />
                    La cantidad inicial no se puede modificar una vez creado el lote
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Costo Unitario <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-gray-500">$</span>
                  </div>
                  <input
                    type="number"
                    name="costo_unitario"
                    min="0"
                    step="0.01"
                    required
                    className="pl-7 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                    value={formData.costo_unitario}
                    onChange={handleChange}
                  />
                </div>
              </div>
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
            >
              Cancelar
            </Button>
            <Button type="submit">
              {selectedLote ? 'Actualizar' : 'Crear'}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de detalles */}
      <Modal
        isOpen={isDetailModalOpen}
        onClose={() => setIsDetailModalOpen(false)}
        title={`Lote: ${selectedLote?.codigo_lote}`}
        maxWidth="md"
      >
        {selectedLote && (
          <div className="space-y-6 py-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Información del lote */}
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiBox className="mr-2" /> Información del Lote
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                    <div>
                      <p className="text-sm text-gray-500">Código</p>
                      <p className="font-medium">{selectedLote.codigo_lote}</p>
                    </div>
                    
                    <div>
                      <p className="text-sm text-gray-500">Materia Prima</p>
                      <p className="font-medium">{selectedLote.materiaPrima?.nombre}</p>
                    </div>
                    
                    <div className="flex justify-between">
                      <div>
                        <p className="text-sm text-gray-500">Cantidad Inicial</p>
                        <p>{selectedLote.cantidad_inicial}</p>
                      </div>
                      
                      <div>
                        <p className="text-sm text-gray-500">Cantidad Actual</p>
                        <p className={parseFloat(selectedLote.cantidad_actual) === 0 ? 'text-red-500 font-medium' : ''}>
                          {selectedLote.cantidad_actual}
                          {parseFloat(selectedLote.cantidad_actual) === 0 && ' (Agotado)'}
                        </p>
                      </div>
                    </div>
                    
                    <div>
                      <p className="text-sm text-gray-500">Costo Unitario</p>
                      <p>${parseFloat(selectedLote.costo_unitario).toFixed(2)}</p>
                    </div>
                  </div>
                </div>
                
                {/* Fechas */}
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiCalendar className="mr-2" /> Fechas
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                    {selectedLote.fecha_produccion && (
                      <div>
                        <p className="text-sm text-gray-500">Fecha de Producción</p>
                        <p>{formatDate(selectedLote.fecha_produccion)}</p>
                      </div>
                    )}
                    
                    {selectedLote.fecha_caducidad && (
                      <div>
                        <p className="text-sm text-gray-500">Fecha de Caducidad</p>
                        <div className="flex items-center">
                          <Badge color={getCaducidadStatus(selectedLote.fecha_caducidad).color} className="mr-2">
                            {getCaducidadStatus(selectedLote.fecha_caducidad).label}
                          </Badge>
                          <span>{formatDate(selectedLote.fecha_caducidad)}</span>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              {/* Movimientos recientes */}
              <div>
                <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                  <FiPackage className="mr-2" /> Movimientos Recientes
                </h3>
                
                {selectedLote.movimientos && selectedLote.movimientos.length > 0 ? (
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <ul className="divide-y divide-gray-200">
                      {selectedLote.movimientos.map(movimiento => (
                        <li key={movimiento.id} className="py-3">
                          <div className="flex justify-between">
                            <div>
                              <Badge 
                                color={movimiento.tipo_movimiento === 'entrada' ? 'green' : 'red'}
                                className="mb-1"
                              >
                                {movimiento.tipo_movimiento === 'entrada' ? 'Entrada' : 'Salida'}
                              </Badge>
                              <p className="text-sm">{movimiento.descripcion}</p>
                            </div>
                            <div className="text-right">
                              <p className="font-medium">{movimiento.cantidad} {selectedLote.materiaPrima?.unidadMedida?.abreviatura}</p>
                              <p className="text-xs text-gray-500">{new Date(movimiento.fecha).toLocaleString()}</p>
                            </div>
                          </div>
                        </li>
                      ))}
                    </ul>
                  </div>
                ) : (
                  <div className="bg-gray-50 p-4 rounded-lg text-center text-gray-500">
                    No hay movimientos recientes para este lote
                  </div>
                )}
              </div>
            </div>
            
            <div className="flex justify-end gap-3 pt-4">
              {parseFloat(selectedLote.cantidad_actual) === 0 && (
                <Button
                  variant="danger"
                  onClick={() => {
                    setIsDetailModalOpen(false);
                    handleOpenDeleteModal(selectedLote);
                  }}
                >
                  Eliminar
                </Button>
              )}
              <Button
                variant="outline"
                onClick={() => {
                  setIsDetailModalOpen(false);
                  handleOpenModal(selectedLote);
                }}
              >
                Editar
              </Button>
              <Button
                variant="outline"
                onClick={() => setIsDetailModalOpen(false)}
              >
                Cerrar
              </Button>
            </div>
          </div>
        )}
      </Modal>

      {/* Modal de confirmación de eliminación */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="Confirmar Eliminación"
        maxWidth="sm"
      >
        <div className="py-4">
          <p className="text-gray-600">
            ¿Estás seguro de que deseas eliminar el lote <span className="font-semibold">{selectedLote?.codigo_lote}</span>?
          </p>
          {parseFloat(selectedLote?.cantidad_actual) > 0 && (
            <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-md text-red-700">
              <p className="flex items-center font-medium">
                <FiAlertCircle className="mr-2" /> Este lote no puede ser eliminado
              </p>
              <p className="text-sm mt-1">
                El lote aún tiene {selectedLote?.cantidad_actual} unidades en existencia.
                Debe consumir todo el stock antes de poder eliminarlo.
              </p>
            </div>
          )}
        </div>
        
        <div className="flex justify-end gap-3 pt-2">
          <Button
            variant="outline"
            onClick={() => setIsDeleteModalOpen(false)}
          >
            Cancelar
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
            disabled={parseFloat(selectedLote?.cantidad_actual) > 0}
          >
            Eliminar
          </Button>
        </div>
      </Modal>
    </div>
  );
};

export default Lotes;\n\n
=== ./inventario/pages/MateriasPrimas.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiEdit2, 
  FiTrash2, 
  FiPlus, 
  FiSearch, 
  FiPackage, 
  FiFilter, 
  FiX, 
  FiBox, 
  FiAlertTriangle, 
  FiChevronDown, 
  FiDollarSign,
  FiInfo,
  FiCalendar,
  FiShield
} from 'react-icons/fi';
import {
  getAllItems,
  getItemById,
  createItem,
  updateItem,
  deleteItem,
  getAllUnits
} from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const MateriasPrimas = () => {
  const [items, setItems] = useState([]);
  const [unidadesMedida, setUnidadesMedida] = useState([]);
  const [selectedItem, setSelectedItem] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    bajoStock: false,
    sinStock: false
  });
  const [formData, setFormData] = useState({
    nombre: '',
    descripcion: '',
    stock_actual: 0,
    stock_minimo: 0,
    id_unidad_medida: '',
    costo_unitario: 0
  });

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      const [itemsData, unitsData] = await Promise.all([
        getAllItems(),
        getAllUnits()
      ]);
      setItems(itemsData);
      setUnidadesMedida(unitsData);
    } catch (error) {
      console.error('Error al cargar datos:', error);
      toast.error('Error al cargar los datos de materias primas');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Filtrar items
  const filteredItems = items
    .filter(item => {
      // Filtro de búsqueda
      if (searchTerm && !item.nombre.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      // Filtro de bajo stock
      if (filters.bajoStock && item.stock_actual > item.stock_minimo) {
        return false;
      }
      
      // Filtro de sin stock
      if (filters.sinStock && item.stock_actual > 0) {
        return false;
      }
      
      return true;
    })
    .sort((a, b) => a.nombre.localeCompare(b.nombre));

  // Manejadores de eventos para el formulario
  const handleOpenModal = (item = null) => {
    if (item) {
      setSelectedItem(item);
      setFormData({
        nombre: item.nombre,
        descripcion: item.descripcion || '',
        stock_actual: item.stock_actual,
        stock_minimo: item.stock_minimo,
        id_unidad_medida: item.id_unidad_medida,
        costo_unitario: item.costo_unitario
      });
    } else {
      setSelectedItem(null);
      setFormData({
        nombre: '',
        descripcion: '',
        stock_actual: 0,
        stock_minimo: 0,
        id_unidad_medida: unidadesMedida.length > 0 ? unidadesMedida[0].id : '',
        costo_unitario: 0
      });
    }
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Convertir valores numéricos
      const itemData = {
        ...formData,
        stock_actual: Number(formData.stock_actual),
        stock_minimo: Number(formData.stock_minimo),
        costo_unitario: Number(formData.costo_unitario),
        id_unidad_medida: Number(formData.id_unidad_medida)
      };

      if (selectedItem) {
        await updateItem(selectedItem.id, itemData);
        toast.success('Materia prima actualizada correctamente');
      } else {
        await createItem(itemData);
        toast.success('Materia prima creada correctamente');
      }
      
      setIsModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al guardar materia prima:', error);
      toast.error(error.response?.data?.error || 'Error al guardar la materia prima');
    }
  };

  const handleOpenDeleteModal = (item) => {
    setSelectedItem(item);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    try {
      await deleteItem(selectedItem.id);
      toast.success('Materia prima eliminada correctamente');
      setIsDeleteModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al eliminar materia prima:', error);
      toast.error(error.response?.data?.error || 'Error al eliminar la materia prima');
    }
  };

  // Renderizar el estado del stock
  const renderStockStatus = (item) => {
    if (item.stock_actual <= 0) {
      return <Badge color="red">Sin Stock</Badge>;
    } else if (item.stock_actual <= item.stock_minimo) {
      return <Badge color="amber">Bajo Stock</Badge>;
    } else {
      return <Badge color="green">Stock Óptimo</Badge>;
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Materias Primas</h1>
        <Button
          className="flex items-center gap-2"
          onClick={() => handleOpenModal()}
        >
          <FiPlus size={18} /> Agregar Materia Prima
        </Button>
      </div>

      {/* Filtros y búsqueda */}
      <div className="bg-white p-4 rounded-lg shadow-sm flex flex-col sm:flex-row gap-4 justify-between">
        <div className="relative flex-1">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="text-gray-400" />
          </div>
          <input
            type="text"
            className="pl-10 pr-4 py-2 w-full border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Buscar por nombre..."
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="flex flex-wrap gap-2">
          <button
            className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
              filters.bajoStock 
                ? 'bg-amber-100 text-amber-800 border border-amber-200' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setFilters(prev => ({ ...prev, bajoStock: !prev.bajoStock }))}
          >
            <FiFilter size={16} />
            Bajo Stock
            {filters.bajoStock && <FiX size={16} />}
          </button>
          
          <button
            className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
              filters.sinStock 
                ? 'bg-red-100 text-red-800 border border-red-200' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setFilters(prev => ({ ...prev, sinStock: !prev.sinStock }))}
          >
            <FiFilter size={16} />
            Sin Stock
            {filters.sinStock && <FiX size={16} />}
          </button>
        </div>
      </div>

      {/* Tabla de materias primas */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Nombre</TableHead>
              <TableHead>Descripción</TableHead>
              <TableHead>Stock Actual</TableHead>
              <TableHead>Stock Mínimo</TableHead>
              <TableHead>Unidad de Medida</TableHead>
              <TableHead>Costo Unitario</TableHead>
              <TableHead>Estado</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredItems.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiPackage size={40} className="mb-2 text-gray-300" />
                    <p>No se encontraron materias primas</p>
                    {(searchTerm || filters.bajoStock || filters.sinStock) && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={() => {
                          setSearchTerm('');
                          setFilters({ bajoStock: false, sinStock: false });
                        }}
                      >
                        Limpiar filtros
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredItems.map(item => (
                <TableRow key={item.id}>
                  <TableCell className="font-medium">{item.nombre}</TableCell>
                  <TableCell className="max-w-xs truncate">
                    {item.descripcion || <span className="text-gray-400 italic">Sin descripción</span>}
                  </TableCell>
                  <TableCell>
                    {item.stock_actual} {item.unidadMedida?.abreviatura}
                  </TableCell>
                  <TableCell>
                    {item.stock_minimo} {item.unidadMedida?.abreviatura}
                  </TableCell>
                  <TableCell>
                    {item.unidadMedida?.nombre || "N/A"}
                  </TableCell>
                  <TableCell>
                    ${parseFloat(item.costo_unitario).toFixed(2)}
                  </TableCell>
                  <TableCell>
                    {renderStockStatus(item)}
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleOpenModal(item)}
                        className="p-1 text-blue-600 hover:text-blue-800"
                        title="Editar"
                      >
                        <FiEdit2 size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenDeleteModal(item)}
                        className="p-1 text-red-600 hover:text-red-800"
                        title="Eliminar"
                      >
                        <FiTrash2 size={18} />
                      </button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creación/edición */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={selectedItem ? `Editar: ${selectedItem.nombre}` : 'Nueva Materia Prima'}
      >
        <form onSubmit={handleSubmit} className="grid grid-cols-1 gap-6">
          {/* Sección de información general */}
          <div className="grid grid-cols-1 gap-5">
            {/* Nombre */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Nombre
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiPackage className="text-gray-400" size={16} />
                </div>
                <input
                  type="text"
                  name="nombre"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.nombre}
                  onChange={handleChange}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                  placeholder="Nombre de la materia prima"
                />
              </div>
            </div>

            {/* Descripción */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Descripción
              </label>
              <div className="relative">
                <div className="absolute top-3 left-3 flex items-start pointer-events-none">
                  <FiEdit2 className="text-gray-400" size={16} />
                </div>
                <textarea
                  name="descripcion"
                  rows="3"
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.descripcion}
                  onChange={handleChange}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                  placeholder="Descripción detallada del producto"
                />
              </div>
            </div>
          </div>

          {/* Sección de inventario - Grid responsive */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
            {/* Stock Actual */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Stock Actual
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiBox className="text-gray-400" size={16} />
                </div>
                <input
                  type="number"
                  name="stock_actual"
                  min="0"
                  step="0.01"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.stock_actual}
                  onChange={handleChange}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                  placeholder="0.00"
                />
              </div>
            </div>

            {/* Stock Mínimo */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Stock Mínimo
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiAlertTriangle className="text-gray-400" size={16} />
                </div>
                <input
                  type="number"
                  name="stock_minimo"
                  min="0"
                  step="0.01"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.stock_minimo}
                  onChange={handleChange}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                  placeholder="0.00"
                />
              </div>
            </div>

            {/* Unidad de Medida */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Unidad de Medida
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiFilter className="text-gray-400" size={16} />
                </div>
                <select
                  name="id_unidad_medida"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500 appearance-none"
                  value={formData.id_unidad_medida}
                  onChange={handleChange}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                >
                  <option value="">Seleccionar unidad</option>
                  {unidadesMedida.map(unidad => (
                    <option key={unidad.id} value={unidad.id}>
                      {unidad.nombre} ({unidad.abreviatura})
                    </option>
                  ))}
                </select>
                <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                  <FiChevronDown className="text-gray-400" size={16} />
                </div>
              </div>
            </div>

            {/* Costo Unitario */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Costo Unitario
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiDollarSign className="text-gray-400" size={16} />
                </div>
                <input
                  type="number"
                  name="costo_unitario"
                  min="0"
                  step="0.01"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.costo_unitario}
                  onChange={handleChange}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                  placeholder="0.00"
                />
              </div>
            </div>
          </div>

          {/* Botones de acción */}
          <div className="flex justify-end gap-3 pt-4 mt-2">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
              className="flex items-center gap-2"
            >
              <FiX size={16} /> Cancelar
            </Button>
            <Button type="submit" className="flex items-center gap-2">
              {selectedItem ? <FiEdit2 size={16} /> : <FiPlus size={16} />}
              {selectedItem ? 'Actualizar' : 'Crear'}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de confirmación de eliminación */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="Confirmar Eliminación"
        maxWidth="sm"
      >
        <div className="py-4">
          <p className="text-gray-600">
            ¿Estás seguro de que deseas eliminar la materia prima <span className="font-semibold">{selectedItem?.nombre}</span>?
          </p>
          <p className="text-gray-500 text-sm mt-2">
            Esta acción no se puede deshacer y podría afectar a registros relacionados.
          </p>
        </div>
        
        <div className="flex justify-end gap-3 pt-2">
          <Button
            variant="outline"
            onClick={() => setIsDeleteModalOpen(false)}
          >
            Cancelar
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
          >
            Eliminar
          </Button>
        </div>
      </Modal>
    </div>
  );
};

export default MateriasPrimas;\n\n
=== ./inventario/pages/Movimientos.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiPlus, 
  FiSearch, 
  FiFilter, 
  FiX, 
  FiInfo, 
  FiArrowUp, 
  FiArrowDown, 
  FiBox, 
  FiCalendar,
  FiPackage,
  FiTruck,
  FiSettings
} from 'react-icons/fi';
import {
  getAllMovements,
  getMovementById,
  createMovement,
  getAllItems,
  getAllLots,
  getAllProviders,
  getAllAdjustmentTypes,
  getMovimientosByMateriaPrima,
  getMovimientosByLote
}  from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const Movimientos = () => {
  const [movimientos, setMovimientos] = useState([]);
  const [materiasPrimas, setMateriasPrimas] = useState([]);
  const [lotes, setLotes] = useState([]);
  const [proveedores, setProveedores] = useState([]);
  const [tiposAjuste, setTiposAjuste] = useState([]);
  const [lotesFiltrados, setLotesFiltrados] = useState([]);
  const [selectedMovimiento, setSelectedMovimiento] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    tipoMovimiento: '',
    fechaInicio: '',
    fechaFin: ''
  });
  const [formData, setFormData] = useState({
    id_materia_prima: '',
    id_lote: '',
    id_proveedor: '',
    id_tipo_ajuste: '',
    tipo_movimiento: 'entrada',
    cantidad: '',
    descripcion: ''
  });
  const [filtroActivo, setFiltroActivo] = useState({
    tipo: '', // 'materiaPrima' o 'lote'
    id: null
  });

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      // Determinar qué endpoint usar según filtros activos
      let movimientosData;
      
      if (filtroActivo.tipo === 'materiaPrima' && filtroActivo.id) {
        movimientosData = await getMovimientosByMateriaPrima(filtroActivo.id);
      } else if (filtroActivo.tipo === 'lote' && filtroActivo.id) {
        movimientosData = await getMovimientosByLote(filtroActivo.id);
      } else {
        // Construir parámetros de consulta para filtros
        const params = {};
        if (filters.tipoMovimiento) params.tipo = filters.tipoMovimiento;
        if (filters.fechaInicio) params.fechaInicio = filters.fechaInicio;
        if (filters.fechaFin) params.fechaFin = filters.fechaFin;
        
        movimientosData = await getAllMovements(params);
      }
      
      // Cargar datos auxiliares
      const [itemsData, lotesData, proveedoresData, tiposAjusteData] = await Promise.all([
        getAllItems(),
        getAllLots(),
        getAllProviders(),
        getAllAdjustmentTypes()
      ]);
      
      setMovimientos(movimientosData);
      setMateriasPrimas(itemsData);
      setLotes(lotesData);
      setProveedores(proveedoresData);
      setTiposAjuste(tiposAjusteData);
    } catch (error) {
      console.error('Error al cargar movimientos:', error);
      toast.error('Error al cargar los movimientos de inventario');
    } finally {
      setLoading(false);
    }
  }, [filtroActivo, filters]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Filtrar movimientos
  const filteredMovimientos = movimientos
    .filter(movimiento => {
      // Filtro de búsqueda en descripción o materia prima
      if (searchTerm && 
          !movimiento.descripcion?.toLowerCase().includes(searchTerm.toLowerCase()) &&
          !movimiento.materiaPrima?.nombre?.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      return true;
    })
    .sort((a, b) => new Date(b.fecha) - new Date(a.fecha)); // Ordenar por fecha descendente

  // Manejadores de eventos para el formulario
  const handleOpenModal = () => {
    setSelectedMovimiento(null);
    setFormData({
      id_materia_prima: '',
      id_lote: '',
      id_proveedor: '',
      id_tipo_ajuste: '',
      tipo_movimiento: 'entrada',
      cantidad: '',
      descripcion: ''
    });
    setLotesFiltrados([]);
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    // Si cambió la materia prima, filtrar los lotes disponibles
    if (name === 'id_materia_prima' && value) {
      const lotesDeLaMateria = lotes.filter(
        lote => lote.id_materia_prima === Number(value)
      );
      setLotesFiltrados(lotesDeLaMateria);
      
      // Resetear el lote seleccionado
      setFormData(prev => ({
        ...prev,
        id_lote: ''
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Convertir valores a números donde sea necesario
      const movimientoData = {
        ...formData,
        id_materia_prima: Number(formData.id_materia_prima),
        id_lote: formData.id_lote ? Number(formData.id_lote) : null,
        id_proveedor: formData.id_proveedor ? Number(formData.id_proveedor) : null,
        id_tipo_ajuste: formData.id_tipo_ajuste ? Number(formData.id_tipo_ajuste) : null,
        cantidad: Number(formData.cantidad)
      };

      await createMovement(movimientoData);
      toast.success('Movimiento registrado correctamente');
      
      setIsModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al crear movimiento:', error);
      
      // Manejar errores específicos
      if (error.response?.data?.error) {
        toast.error(error.response.data.error);
      } else if (error.response?.status === 400 && error.response?.data?.details) {
        toast.error(`Error: ${error.response.data.details}`);
      } else {
        toast.error('Error al registrar el movimiento');
      }
    }
  };

  const handleViewDetails = async (movimiento) => {
    try {
      setLoading(true);
      const movimientoDetalle = await getMovementById(movimiento.id);
      setSelectedMovimiento(movimientoDetalle);
      setIsDetailModalOpen(true);
    } catch (error) {
      console.error('Error al obtener detalles del movimiento:', error);
      toast.error('Error al obtener detalles del movimiento');
    } finally {
      setLoading(false);
    }
  };

  // Formatear fecha
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleString('es-ES');
  };

  // Aplicar filtros
  const handleApplyFilters = () => {
    fetchData();
  };

  // Resetear filtros
  const handleResetFilters = () => {
    setFilters({
      tipoMovimiento: '',
      fechaInicio: '',
      fechaFin: ''
    });
    setSearchTerm('');
    setFiltroActivo({
      tipo: '',
      id: null
    });
    fetchData();
  };

  // Filtrar por materia prima
  const handleFilterByMateriaPrima = (idMateriaPrima) => {
    setFiltroActivo({
      tipo: 'materiaPrima',
      id: idMateriaPrima
    });
  };

  // Filtrar por lote
  const handleFilterByLote = (idLote) => {
    setFiltroActivo({
      tipo: 'lote',
      id: idLote
    });
  };

  // Obtener nombre de la materia prima o lote activo
  const getFilterLabel = () => {
    if (filtroActivo.tipo === 'materiaPrima') {
      const materiaPrima = materiasPrimas.find(mp => mp.id === filtroActivo.id);
      return materiaPrima ? `Movimientos de ${materiaPrima.nombre}` : 'Movimientos';
    } else if (filtroActivo.tipo === 'lote') {
      const lote = lotes.find(l => l.id === filtroActivo.id);
      return lote ? `Movimientos del Lote ${lote.codigo_lote}` : 'Movimientos';
    }
    return 'Movimientos de Inventario';
  };

  if (loading && !movimientos.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-800">
            {getFilterLabel()}
          </h1>
          {filtroActivo.tipo && (
            <button 
              className="text-indigo-600 hover:text-indigo-800 text-sm flex items-center mt-1"
              onClick={handleResetFilters}
            >
              <FiX className="mr-1" /> Quitar filtro
            </button>
          )}
        </div>
        <Button
          className="flex items-center gap-2"
          onClick={handleOpenModal}
        >
          <FiPlus size={18} /> Registrar Movimiento
        </Button>
      </div>

      {/* Filtros y búsqueda */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <div className="flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-4 mb-4">
          <div className="relative flex-1">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="text-gray-400" />
            </div>
            <input
              type="text"
              className="pl-10 pr-4 py-2 w-full border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Buscar en descripción o materia prima..."
              value={searchTerm}
              onChange={e => setSearchTerm(e.target.value)}
            />
          </div>
          
          <select
            className="py-2 px-3 border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
            value={filters.tipoMovimiento}
            onChange={e => setFilters(prev => ({ ...prev, tipoMovimiento: e.target.value }))}
          >
            <option value="">Todos los tipos</option>
            <option value="entrada">Entradas</option>
            <option value="salida">Salidas</option>
          </select>
        </div>

        <div className="flex flex-col md:flex-row md:items-end space-y-4 md:space-y-0 md:space-x-4">
          <div>
            <label className="block text-sm text-gray-700 mb-1">Desde</label>
            <input
              type="date"
              className="py-2 px-3 border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
              value={filters.fechaInicio}
              onChange={e => setFilters(prev => ({ ...prev, fechaInicio: e.target.value }))}
            />
          </div>
          
          <div>
            <label className="block text-sm text-gray-700 mb-1">Hasta</label>
            <input
              type="date"
              className="py-2 px-3 border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
              value={filters.fechaFin}
              onChange={e => setFilters(prev => ({ ...prev, fechaFin: e.target.value }))}
            />
          </div>
          
          <div className="flex space-x-2">
            <Button 
              onClick={handleApplyFilters}
              className="flex items-center"
            >
              <FiFilter className="mr-1" size={16} /> Aplicar Filtros
            </Button>
            
            <Button 
              variant="outline"
              onClick={handleResetFilters}
              className="flex items-center"
            >
              <FiX className="mr-1" size={16} /> Resetear
            </Button>
          </div>
        </div>
      </div>

      {/* Tabla de movimientos */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Fecha</TableHead>
              <TableHead>Tipo</TableHead>
              <TableHead>Materia Prima</TableHead>
              <TableHead>Lote</TableHead>
              <TableHead>Cantidad</TableHead>
              <TableHead>Descripción</TableHead>
              <TableHead>Ajuste/Proveedor</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredMovimientos.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiBox size={40} className="mb-2 text-gray-300" />
                    <p>No se encontraron movimientos</p>
                    {(searchTerm || filters.tipoMovimiento || filters.fechaInicio || filters.fechaFin) && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={handleResetFilters}
                      >
                        Limpiar filtros
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredMovimientos.map(movimiento => (
                <TableRow 
                  key={movimiento.id}
                  className="cursor-pointer hover:bg-gray-50"
                  onClick={() => handleViewDetails(movimiento)}
                >
                  <TableCell>
                    <div className="flex flex-col">
                      <span className="font-medium">{formatDate(movimiento.fecha).split(' ')[0]}</span>
                      <span className="text-xs text-gray-500">{formatDate(movimiento.fecha).split(' ')[1]}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge 
                      color={movimiento.tipo_movimiento === 'entrada' ? 'green' : 'red'}
                      className="flex items-center"
                    >
                      {movimiento.tipo_movimiento === 'entrada' ? (
                        <><FiArrowDown className="mr-1" size={14} /> Entrada</>
                      ) : (
                        <><FiArrowUp className="mr-1" size={14} /> Salida</>
                      )}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <button 
                      className="text-indigo-600 hover:underline"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleFilterByMateriaPrima(movimiento.id_materia_prima);
                      }}
                    >
                      {movimiento.materiaPrima?.nombre || 'N/A'}
                    </button>
                  </TableCell>
                  <TableCell>
                    {movimiento.lote ? (
                      <button 
                        className="text-indigo-600 hover:underline"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleFilterByLote(movimiento.id_lote);
                        }}
                      >
                        {movimiento.lote.codigo_lote}
                      </button>
                    ) : (
                      <span className="text-gray-400 italic">Sin lote</span>
                    )}
                  </TableCell>
                  <TableCell className="font-medium">
                    {movimiento.cantidad}
                  </TableCell>
                  <TableCell className="max-w-xs truncate">
                    {movimiento.descripcion || <span className="text-gray-400 italic">Sin descripción</span>}
                  </TableCell>
                  <TableCell>
                    {movimiento.tipoAjuste ? (
                      <span className="text-purple-600">{movimiento.tipoAjuste.nombre}</span>
                    ) : movimiento.proveedor ? (
                      <span className="text-blue-600">{movimiento.proveedor.nombre}</span>
                    ) : (
                      <span className="text-gray-400 italic">-</span>
                    )}
                  </TableCell>
                  <TableCell>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleViewDetails(movimiento);
                      }}
                      className="p-1 text-indigo-600 hover:text-indigo-800"
                      title="Ver detalles"
                    >
                      <FiInfo size={18} />
                    </button>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creación de movimiento */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title="Registrar Movimiento de Inventario"
      >
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tipo de Movimiento <span className="text-red-500">*</span>
              </label>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="tipo_movimiento"
                    value="entrada"
                    checked={formData.tipo_movimiento === 'entrada'}
                    onChange={handleChange}
                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500"
                  />
                  <span className="ml-2 text-gray-700">Entrada</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="tipo_movimiento"
                    value="salida"
                    checked={formData.tipo_movimiento === 'salida'}
                    onChange={handleChange}
                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500"
                  />
                  <span className="ml-2 text-gray-700">Salida</span>
                </label>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Materia Prima <span className="text-red-500">*</span>
              </label>
              <select
                name="id_materia_prima"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.id_materia_prima}
                onChange={handleChange}
              >
                <option value="">Seleccionar materia prima</option>
                {materiasPrimas.map(mp => (
                  <option key={mp.id} value={mp.id}>
                    {mp.nombre} ({mp.unidadMedida?.abreviatura || 'N/A'})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Lote
              </label>
              <select
                name="id_lote"
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.id_lote}
                onChange={handleChange}
                disabled={!formData.id_materia_prima}
              >
                <option value="">Seleccionar lote</option>
                {lotesFiltrados.map(lote => (
                  <option key={lote.id} value={lote.id}>
                    {lote.codigo_lote} - Disponible: {lote.cantidad_actual}
                  </option>
                ))}
              </select>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Cantidad <span className="text-red-500">*</span>
                </label>
                <input
                  type="number"
                  name="cantidad"
                  min="0.01"
                  step="0.01"
                  required
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.cantidad}
                  onChange={handleChange}
                />
              </div>

              {formData.tipo_movimiento === 'entrada' ? (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Proveedor
                  </label>
                  <select
                    name="id_proveedor"
                    className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                    value={formData.id_proveedor}
                    onChange={handleChange}
                  >
                    <option value="">Seleccionar proveedor</option>
                    {proveedores.map(proveedor => (
                      <option key={proveedor.id} value={proveedor.id}>
                        {proveedor.nombre}
                      </option>
                    ))}
                  </select>
                </div>
              ) : (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Tipo de Ajuste
                  </label>
                  <select
                    name="id_tipo_ajuste"
                    className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                    value={formData.id_tipo_ajuste}
                    onChange={handleChange}
                  >
                    <option value="">Seleccionar tipo de ajuste</option>
                    {tiposAjuste.map(tipo => (
                      <option key={tipo.id} value={tipo.id}>
                        {tipo.nombre}
                      </option>
                    ))}
                  </select>
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Descripción <span className="text-red-500">*</span>
              </label>
              <textarea
                name="descripcion"
                rows="3"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.descripcion}
                onChange={handleChange}
                placeholder="Detalles del movimiento..."
              />
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
            >
              Cancelar
            </Button>
            <Button type="submit">
              Registrar Movimiento
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de detalles */}
      <Modal
        isOpen={isDetailModalOpen}
        onClose={() => setIsDetailModalOpen(false)}
        title="Detalles del Movimiento"
        maxWidth="md"
      >
        {selectedMovimiento && (
          <div className="space-y-6 py-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Información general */}
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiBox className="mr-2" /> Información General
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                    <div className="flex justify-between">
                      <div>
                        <p className="text-sm text-gray-500">Tipo de Movimiento</p>
                        <Badge 
                          color={selectedMovimiento.tipo_movimiento === 'entrada' ? 'green' : 'red'}
                          className="mt-1"
                        >
                          {selectedMovimiento.tipo_movimiento === 'entrada' ? (
                            <span className="flex items-center"><FiArrowDown className="mr-1" /> Entrada</span>
                          ) : (
                            <span className="flex items-center"><FiArrowUp className="mr-1" /> Salida</span>
                          )}
                        </Badge>
                      </div>
                      
                      <div>
                        <p className="text-sm text-gray-500">Fecha y Hora</p>
                        <p className="font-medium">{formatDate(selectedMovimiento.fecha)}</p>
                      </div>
                    </div>
                    
                    <div>
                      <p className="text-sm text-gray-500">Materia Prima</p>
                      <p className="font-medium flex items-center">
                        <FiPackage className="mr-1 text-indigo-500" size={14} />
                        {selectedMovimiento.materiaPrima?.nombre || 'N/A'}
                      </p>
                    </div>
                    
                    {selectedMovimiento.lote && (
                      <div>
                        <p className="text-sm text-gray-500">Lote</p>
                        <p className="font-medium">{selectedMovimiento.lote.codigo_lote}</p>
                      </div>
                    )}
                    
                    <div>
                      <p className="text-sm text-gray-500">Cantidad</p>
                      <p className="font-medium">{selectedMovimiento.cantidad}</p>
                    </div>
                  </div>
                </div>
                
                {/* Detalles específicos */}
                {selectedMovimiento.tipo_movimiento === 'entrada' && selectedMovimiento.proveedor && (
                  <div>
                    <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                      <FiTruck className="mr-2" /> Proveedor
                    </h3>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <p className="font-medium flex items-center">
                        {selectedMovimiento.proveedor.nombre}
                      </p>
                    </div>
                  </div>
                )}
                
                {selectedMovimiento.tipo_movimiento === 'salida' && selectedMovimiento.tipoAjuste && (
                  <div>
                    <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                      <FiSettings className="mr-2" /> Tipo de Ajuste
                    </h3>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <p className="font-medium">{selectedMovimiento.tipoAjuste.nombre}</p>
                      {selectedMovimiento.tipoAjuste.requiere_autorizacion && (
                        <Badge color="purple" className="mt-1">Requiere autorización</Badge>
                      )}
                      {selectedMovimiento.tipoAjuste.afecta_costos && (
                        <Badge color="blue" className="mt-1 ml-2">Afecta costos</Badge>
                      )}
                    </div>
                  </div>
                )}
              </div>
              
              {/* Descripción y usuario */}
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiInfo className="mr-2" /> Descripción
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <p className="whitespace-pre-line">{selectedMovimiento.descripcion}</p>
                  </div>
                </div>
                
                {selectedMovimiento.usuario && (
                  <div>
                    <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                      <FiUser className="mr-2" /> Registrado por
                    </h3>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <p>{selectedMovimiento.usuario.nombre}</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            <div className="flex justify-end gap-3 pt-4">
              <Button
                variant="outline"
                onClick={() => setIsDetailModalOpen(false)}
              >
                Cerrar
              </Button>
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
};

const FiUser = ({ className, size }) => {
  return (
    <svg
      stroke="currentColor"
      fill="none"
      strokeWidth="2"
      viewBox="0 0 24 24"
      strokeLinecap="round"
      strokeLinejoin="round"
      height={size || "1em"}
      width={size || "1em"}
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
      <circle cx="12" cy="7" r="4"></circle>
    </svg>
  );
};

export default Movimientos;\n\n
=== ./inventario/pages/Proveedores.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiEdit2, 
  FiTrash2, 
  FiPlus, 
  FiSearch, 
  FiTruck, 
  FiInfo, 
  FiPhone, 
  FiMail, 
  FiUser,
  FiMapPin,
  FiClock,
  FiDollarSign
} from 'react-icons/fi';
import {
  getAllProviders,
  getProviderById,
  createProvider,
  updateProvider,
  deleteProvider,
  searchProviders
} from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';

const Proveedores = () => {
  const [providers, setProviders] = useState([]);
  const [selectedProvider, setSelectedProvider] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [formData, setFormData] = useState({
    nombre: '',
    razon_social: '',
    rfc: '',
    telefono: '',
    email: '',
    direccion: '',
    productos_servicios: '',
    condiciones_pago: '',
    tiempo_entrega_promedio: '',
    notas: ''
  });

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      let providersData;
      
      // Si hay término de búsqueda, usar la búsqueda específica
      if (searchTerm.trim()) {
        providersData = await searchProviders(searchTerm);
      } else {
        providersData = await getAllProviders();
      }
      
      setProviders(providersData);
    } catch (error) {
      console.error('Error al cargar proveedores:', error);
      toast.error('Error al cargar los proveedores');
    } finally {
      setLoading(false);
    }
  }, [searchTerm]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Manejadores de eventos para el formulario
  const handleOpenModal = (provider = null) => {
    if (provider) {
      setSelectedProvider(provider);
      setFormData({
        nombre: provider.nombre || '',
        razon_social: provider.razon_social || '',
        rfc: provider.rfc || '',
        telefono: provider.telefono || '',
        email: provider.email || '',
        direccion: provider.direccion || '',
        productos_servicios: provider.productos_servicios || '',
        condiciones_pago: provider.condiciones_pago || '',
        tiempo_entrega_promedio: provider.tiempo_entrega_promedio || '',
        notas: provider.notas || ''
      });
    } else {
      setSelectedProvider(null);
      setFormData({
        nombre: '',
        razon_social: '',
        rfc: '',
        telefono: '',
        email: '',
        direccion: '',
        productos_servicios: '',
        condiciones_pago: '',
        tiempo_entrega_promedio: '',
        notas: ''
      });
    }
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Convertir tiempo de entrega a número si no está vacío
      const providerData = {
        ...formData,
        tiempo_entrega_promedio: formData.tiempo_entrega_promedio 
          ? Number(formData.tiempo_entrega_promedio) 
          : null
      };

      if (selectedProvider) {
        await updateProvider(selectedProvider.id, providerData);
        toast.success('Proveedor actualizado correctamente');
      } else {
        await createProvider(providerData);
        toast.success('Proveedor creado correctamente');
      }
      
      setIsModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al guardar proveedor:', error);
      
      // Manejar errores específicos
      if (error.response?.data?.error) {
        toast.error(error.response.data.error);
      } else {
        toast.error('Error al guardar el proveedor');
      }
    }
  };

  const handleViewDetails = async (provider) => {
    try {
      setLoading(true);
      // Si el proveedor ya tiene todos los datos, usarlo directamente
      // sino, obtener detalles completos
      const fullProvider = await getProviderById(provider.id);
      setSelectedProvider(fullProvider);
      setIsDetailModalOpen(true);
    } catch (error) {
      console.error('Error al obtener detalles del proveedor:', error);
      toast.error('Error al obtener detalles del proveedor');
    } finally {
      setLoading(false);
    }
  };

  const handleOpenDeleteModal = (provider) => {
    setSelectedProvider(provider);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    try {
      await deleteProvider(selectedProvider.id);
      toast.success('Proveedor eliminado correctamente');
      setIsDeleteModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al eliminar proveedor:', error);
      
      // Manejar error específico cuando hay órdenes activas
      if (error.response?.status === 409) {
        toast.error('No se puede eliminar el proveedor porque tiene órdenes de compra activas');
      } else {
        toast.error(error.response?.data?.error || 'Error al eliminar el proveedor');
      }
    }
  };

  // Búsqueda con retraso para evitar demasiadas peticiones
  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };

  if (loading && !providers.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Proveedores</h1>
        <Button
          className="flex items-center gap-2"
          onClick={() => handleOpenModal()}
        >
          <FiPlus size={18} /> Agregar Proveedor
        </Button>
      </div>

      {/* Búsqueda */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="text-gray-400" />
          </div>
          <input
            type="text"
            className="pl-10 pr-4 py-2 w-full border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Buscar por nombre, razón social o productos/servicios..."
            value={searchTerm}
            onChange={handleSearch}
          />
        </div>
      </div>

      {/* Tabla de proveedores */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Nombre</TableHead>
              <TableHead>Razón Social</TableHead>
              <TableHead>Contacto</TableHead>
              <TableHead>Productos/Servicios</TableHead>
              <TableHead>Tiempo de Entrega</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {providers.length === 0 ? (
              <TableRow>
                <TableCell colSpan={6} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiTruck size={40} className="mb-2 text-gray-300" />
                    <p>No se encontraron proveedores</p>
                    {searchTerm && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={() => setSearchTerm('')}
                      >
                        Limpiar búsqueda
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              providers.map(provider => (
                <TableRow key={provider.id}>
                  <TableCell className="font-medium">{provider.nombre}</TableCell>
                  <TableCell>
                    {provider.razon_social || <span className="text-gray-400 italic">No especificada</span>}
                  </TableCell>
                  <TableCell>
                    <div className="flex flex-col space-y-1">
                      {provider.telefono && (
                        <div className="flex items-center text-sm">
                          <FiPhone className="mr-1 text-gray-500" size={14} />
                          <span>{provider.telefono}</span>
                        </div>
                      )}
                      {provider.email && (
                        <div className="flex items-center text-sm">
                          <FiMail className="mr-1 text-gray-500" size={14} />
                          <span>{provider.email}</span>
                        </div>
                      )}
                    </div>
                  </TableCell>
                  <TableCell className="max-w-xs truncate">
                    {provider.productos_servicios}
                  </TableCell>
                  <TableCell>
                    {provider.tiempo_entrega_promedio 
                      ? `${provider.tiempo_entrega_promedio} días`
                      : <span className="text-gray-400 italic">No especificado</span>
                    }
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleViewDetails(provider)}
                        className="p-1 text-indigo-600 hover:text-indigo-800"
                        title="Ver detalles"
                      >
                        <FiInfo size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenModal(provider)}
                        className="p-1 text-blue-600 hover:text-blue-800"
                        title="Editar"
                      >
                        <FiEdit2 size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenDeleteModal(provider)}
                        className="p-1 text-red-600 hover:text-red-800"
                        title="Eliminar"
                      >
                        <FiTrash2 size={18} />
                      </button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creación/edición */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={selectedProvider ? `Editar: ${selectedProvider.nombre}` : 'Nuevo Proveedor'}
      >
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nombre <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="nombre"
                  required
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.nombre}
                  onChange={handleChange}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Razón Social
                </label>
                <input
                  type="text"
                  name="razon_social"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.razon_social}
                  onChange={handleChange}
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  RFC
                </label>
                <input
                  type="text"
                  name="rfc"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.rfc}
                  onChange={handleChange}
                  placeholder="Ej: XAXX010101000"
                  maxLength={13}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Teléfono
                </label>
                <input
                  type="tel"
                  name="telefono"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.telefono}
                  onChange={handleChange}
                  placeholder="Ej: (123) 456-7890"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <input
                type="email"
                name="email"
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.email}
                onChange={handleChange}
                placeholder="correo@ejemplo.com"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Dirección
              </label>
              <textarea
                name="direccion"
                rows="2"
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.direccion}
                onChange={handleChange}
                placeholder="Dirección completa"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Productos/Servicios <span className="text-red-500">*</span>
              </label>
              <textarea
                name="productos_servicios"
                rows="3"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.productos_servicios}
                onChange={handleChange}
                placeholder="Descripción de productos o servicios que ofrece"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Condiciones de Pago
                </label>
                <textarea
                  name="condiciones_pago"
                  rows="2"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.condiciones_pago}
                  onChange={handleChange}
                  placeholder="Ej: 30 días, prepago, etc."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Tiempo de Entrega Promedio (días)
                </label>
                <input
                  type="number"
                  name="tiempo_entrega_promedio"
                  min="1"
                  className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.tiempo_entrega_promedio}
                  onChange={handleChange}
                  placeholder="Ej: 5"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Notas Adicionales
              </label>
              <textarea
                name="notas"
                rows="3"
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.notas}
                onChange={handleChange}
                placeholder="Información adicional sobre el proveedor"
              />
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
            >
              Cancelar
            </Button>
            <Button type="submit">
              {selectedProvider ? 'Actualizar' : 'Crear'}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de detalles */}
      <Modal
        isOpen={isDetailModalOpen}
        onClose={() => setIsDetailModalOpen(false)}
        title={`Proveedor: ${selectedProvider?.nombre}`}
        maxWidth="lg"
      >
        {selectedProvider && (
          <div className="space-y-6 py-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Información general */}
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiUser className="mr-2" /> Información General
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                    <div>
                      <p className="text-sm text-gray-500">Nombre</p>
                      <p className="font-medium">{selectedProvider.nombre}</p>
                    </div>
                    
                    {selectedProvider.razon_social && (
                      <div>
                        <p className="text-sm text-gray-500">Razón Social</p>
                        <p>{selectedProvider.razon_social}</p>
                      </div>
                    )}
                    
                    {selectedProvider.rfc && (
                      <div>
                        <p className="text-sm text-gray-500">RFC</p>
                        <p className="font-mono">{selectedProvider.rfc}</p>
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Contacto */}
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiPhone className="mr-2" /> Contacto
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                    {selectedProvider.telefono && (
                      <div>
                        <p className="text-sm text-gray-500">Teléfono</p>
                        <p>{selectedProvider.telefono}</p>
                      </div>
                    )}
                    
                    {selectedProvider.email && (
                      <div>
                        <p className="text-sm text-gray-500">Email</p>
                        <p className="text-blue-600">{selectedProvider.email}</p>
                      </div>
                    )}
                    
                    {selectedProvider.direccion && (
                      <div>
                        <p className="text-sm text-gray-500">Dirección</p>
                        <p>{selectedProvider.direccion}</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              {/* Productos y condiciones */}
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiTruck className="mr-2" /> Productos / Servicios
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <p className="whitespace-pre-line">{selectedProvider.productos_servicios}</p>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                    <FiClock className="mr-2" /> Condiciones
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                    {selectedProvider.tiempo_entrega_promedio && (
                      <div>
                        <p className="text-sm text-gray-500">Tiempo de entrega promedio</p>
                        <p>{selectedProvider.tiempo_entrega_promedio} días</p>
                      </div>
                    )}
                    
                    {selectedProvider.condiciones_pago && (
                      <div>
                        <p className="text-sm text-gray-500">Condiciones de pago</p>
                        <p>{selectedProvider.condiciones_pago}</p>
                      </div>
                    )}
                  </div>
                </div>
                
                {selectedProvider.notas && (
                  <div>
                    <h3 className="text-lg font-medium text-gray-800 flex items-center mb-2">
                      <FiInfo className="mr-2" /> Notas Adicionales
                    </h3>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <p className="whitespace-pre-line">{selectedProvider.notas}</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            <div className="flex justify-end gap-3 pt-4">
              <Button
                variant="outline"
                onClick={() => handleOpenModal(selectedProvider)}
              >
                Editar
              </Button>
              <Button
                variant="outline"
                onClick={() => setIsDetailModalOpen(false)}
              >
                Cerrar
              </Button>
            </div>
          </div>
        )}
      </Modal>

      {/* Modal de confirmación de eliminación */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="Confirmar Eliminación"
        maxWidth="sm"
      >
        <div className="py-4">
          <p className="text-gray-600">
            ¿Estás seguro de que deseas eliminar el proveedor <span className="font-semibold">{selectedProvider?.nombre}</span>?
          </p>
          <p className="text-gray-500 text-sm mt-2">
            No se podrá eliminar si tiene órdenes de compra activas asociadas.
          </p>
        </div>
        
        <div className="flex justify-end gap-3 pt-2">
          <Button
            variant="outline"
            onClick={() => setIsDeleteModalOpen(false)}
          >
            Cancelar
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
          >
            Eliminar
          </Button>
        </div>
      </Modal>
    </div>
  );
};

export default Proveedores;\n\n
=== ./inventario/pages/TiposAjuste.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { 
  FiEdit2, 
  FiTrash2, 
  FiPlus, 
  FiSearch, 
  FiSettings, 
  FiDollarSign, 
  FiShield, 
  FiInfo
} from 'react-icons/fi';
import {
  getAllAdjustmentTypes,
  createAdjustmentType,
  updateAdjustmentType,
  deleteAdjustmentType,
  getTiposAjusteAutorizacion,
  getTiposAjusteCostos
} from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const TiposAjuste = () => {
  const [tiposAjuste, setTiposAjuste] = useState([]);
  const [selectedTipo, setSelectedTipo] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filtros, setFiltros] = useState({
    requiereAutorizacion: false,
    afectaCostos: false
  });
  const [formData, setFormData] = useState({
    nombre: '',
    descripcion: '',
    afecta_costos: false,
    requiere_autorizacion: false
  });

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      let tiposData;
      
      // Aplicar filtros si es necesario
      if (filtros.requiereAutorizacion) {
        tiposData = await getTiposAjusteAutorizacion();
      } else if (filtros.afectaCostos) {
        tiposData = await getTiposAjusteCostos();
      } else {
        tiposData = await getAllAdjustmentTypes();
      }
      
      setTiposAjuste(tiposData);
    } catch (error) {
      console.error('Error al cargar tipos de ajuste:', error);
      toast.error('Error al cargar los tipos de ajuste');
    } finally {
      setLoading(false);
    }
  }, [filtros.requiereAutorizacion, filtros.afectaCostos]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Filtrar tipos
  const filteredTipos = tiposAjuste
    .filter(tipo => {
      // Filtro de búsqueda
      if (searchTerm && 
          !tipo.nombre.toLowerCase().includes(searchTerm.toLowerCase()) &&
          !tipo.descripcion?.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      return true;
    })
    .sort((a, b) => a.nombre.localeCompare(b.nombre));

  // Manejadores de eventos para el formulario
  const handleOpenModal = (tipo = null) => {
    if (tipo) {
      setSelectedTipo(tipo);
      setFormData({
        nombre: tipo.nombre,
        descripcion: tipo.descripcion || '',
        afecta_costos: tipo.afecta_costos,
        requiere_autorizacion: tipo.requiere_autorizacion
      });
    } else {
      setSelectedTipo(null);
      setFormData({
        nombre: '',
        descripcion: '',
        afecta_costos: false,
        requiere_autorizacion: false
      });
    }
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (selectedTipo) {
        await updateAdjustmentType(selectedTipo.id, formData);
        toast.success('Tipo de ajuste actualizado correctamente');
      } else {
        await createAdjustmentType(formData);
        toast.success('Tipo de ajuste creado correctamente');
      }
      
      setIsModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al guardar tipo de ajuste:', error);
      
      if (error.response?.data?.error) {
        toast.error(error.response.data.error);
      } else {
        toast.error('Error al guardar el tipo de ajuste');
      }
    }
  };

  const handleViewDetails = (tipo) => {
    setSelectedTipo(tipo);
    setIsDetailModalOpen(true);
  };

  const handleOpenDeleteModal = (tipo) => {
    setSelectedTipo(tipo);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    try {
      await deleteAdjustmentType(selectedTipo.id);
      toast.success('Tipo de ajuste eliminado correctamente');
      setIsDeleteModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al eliminar tipo de ajuste:', error);
      
      if (error.response?.status === 409) {
        toast.error('No se puede eliminar el tipo de ajuste porque tiene movimientos asociados');
      } else {
        toast.error(error.response?.data?.error || 'Error al eliminar el tipo de ajuste');
      }
    }
  };

  // Filtrado
  const toggleFiltroAutorizacion = () => {
    setFiltros(prev => ({
      ...prev,
      requiereAutorizacion: !prev.requiereAutorizacion,
      afectaCostos: false // Desactivar el otro filtro
    }));
  };

  const toggleFiltroCostos = () => {
    setFiltros(prev => ({
      ...prev,
      afectaCostos: !prev.afectaCostos,
      requiereAutorizacion: false // Desactivar el otro filtro
    }));
  };

  const resetFiltros = () => {
    setFiltros({
      requiereAutorizacion: false,
      afectaCostos: false
    });
    setSearchTerm('');
  };

  if (loading && !tiposAjuste.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Tipos de Ajuste</h1>
        <Button
          className="flex items-center gap-2"
          onClick={() => handleOpenModal()}
        >
          <FiPlus size={18} /> Agregar Tipo
        </Button>
      </div>

      {/* Filtros y búsqueda */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <div className="flex flex-col sm:flex-row gap-4 items-center mb-4">
          <div className="relative flex-1">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="text-gray-400" />
            </div>
            <input
              type="text"
              className="pl-10 pr-4 py-2 w-full border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Buscar por nombre o descripción..."
              value={searchTerm}
              onChange={e => setSearchTerm(e.target.value)}
            />
          </div>
          
          <div className="flex flex-wrap gap-2">
            <button
              className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
                filtros.requiereAutorizacion 
                  ? 'bg-purple-100 text-purple-800 border border-purple-200' 
                  : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
              }`}
              onClick={toggleFiltroAutorizacion}
            >
              <FiShield size={16} />
              Requiere Autorización
              {filtros.requiereAutorizacion && <FiX size={16} className="ml-1" />}
            </button>
            
            <button
              className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
                filtros.afectaCostos 
                  ? 'bg-blue-100 text-blue-800 border border-blue-200' 
                  : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
              }`}
              onClick={toggleFiltroCostos}
            >
              <FiDollarSign size={16} />
              Afecta Costos
              {filtros.afectaCostos && <FiX size={16} className="ml-1" />}
            </button>
            
            {(searchTerm || filtros.requiereAutorizacion || filtros.afectaCostos) && (
              <button
                className="flex items-center gap-1 px-3 py-2 rounded-lg bg-gray-100 hover:bg-gray-200 text-gray-700"
                onClick={resetFiltros}
              >
                <FiX size={16} />
                Limpiar Filtros
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Tabla de tipos de ajuste */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Nombre</TableHead>
              <TableHead>Descripción</TableHead>
              <TableHead>Autorizaciones</TableHead>
              <TableHead>Afectación</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredTipos.length === 0 ? (
              <TableRow>
                <TableCell colSpan={5} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <FiSettings size={40} className="mb-2 text-gray-300" />
                    <p>No se encontraron tipos de ajuste</p>
                    {(searchTerm || filtros.requiereAutorizacion || filtros.afectaCostos) && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={resetFiltros}
                      >
                        Limpiar filtros
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredTipos.map(tipo => (
                <TableRow key={tipo.id}>
                  <TableCell className="font-medium">{tipo.nombre}</TableCell>
                  <TableCell className="max-w-xs truncate">
                    {tipo.descripcion || <span className="text-gray-400 italic">Sin descripción</span>}
                  </TableCell>
                  <TableCell>
                    {tipo.requiere_autorizacion ? (
                      <Badge color="purple">Requiere autorización</Badge>
                    ) : (
                      <span className="text-gray-500">No necesita</span>
                    )}
                  </TableCell>
                  <TableCell>
                    {tipo.afecta_costos ? (
                      <Badge color="blue">Afecta costos</Badge>
                    ) : (
                      <span className="text-gray-500">No afecta</span>
                    )}
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleViewDetails(tipo)}
                        className="p-1 text-indigo-600 hover:text-indigo-800"
                        title="Ver detalles"
                      >
                        <FiInfo size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenModal(tipo)}
                        className="p-1 text-blue-600 hover:text-blue-800"
                        title="Editar"
                      >
                        <FiEdit2 size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenDeleteModal(tipo)}
                        className="p-1 text-red-600 hover:text-red-800"
                        title="Eliminar"
                      >
                        <FiTrash2 size={18} />
                      </button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creación/edición */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={selectedTipo ? `Editar Tipo: ${selectedTipo.nombre}` : 'Nuevo Tipo de Ajuste'}
        maxWidth="md"
      >
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Nombre <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                name="nombre"
                required
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.nombre}
                onChange={handleChange}
                placeholder="Ej: Merma por caducidad"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Descripción
              </label>
              <textarea
                name="descripcion"
                rows="3"
                className="w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                value={formData.descripcion}
                onChange={handleChange}
                placeholder="Descripción detallada del tipo de ajuste..."
              />
            </div>

            <div className="space-y-2">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="afecta_costos"
                  name="afecta_costos"
                  checked={formData.afecta_costos}
                  onChange={handleChange}
                  className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                />
                <label htmlFor="afecta_costos" className="ml-2 block text-sm text-gray-700">
                  Afecta costos
                </label>
              </div>
              <p className="text-xs text-gray-500 ml-6">
                Si está activado, este tipo de ajuste modificará el costo promedio de los productos.
              </p>
            </div>

            <div className="space-y-2">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="requiere_autorizacion"
                  name="requiere_autorizacion"
                  checked={formData.requiere_autorizacion}
                  onChange={handleChange}
                  className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                />
                <label htmlFor="requiere_autorizacion" className="ml-2 block text-sm text-gray-700">
                  Requiere autorización
                </label>
              </div>
              <p className="text-xs text-gray-500 ml-6">
                Si está activado, solo los administradores podrán realizar ajustes de este tipo.
              </p>
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
            >
              Cancelar
            </Button>
            <Button type="submit">
              {selectedTipo ? 'Actualizar' : 'Crear'}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de detalles */}
      <Modal
        isOpen={isDetailModalOpen}
        onClose={() => setIsDetailModalOpen(false)}
        title={`Tipo de Ajuste: ${selectedTipo?.nombre}`}
        maxWidth="md"
      >
        {selectedTipo && (
          <div className="space-y-6 py-2">
            <div className="space-y-4">
              <div>
                <h3 className="text-lg font-medium text-gray-800 mb-2">Información General</h3>
                <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                  <div>
                    <p className="text-sm text-gray-500">Nombre</p>
                    <p className="font-medium">{selectedTipo.nombre}</p>
                  </div>
                  
                  {selectedTipo.descripcion && (
                    <div>
                      <p className="text-sm text-gray-500">Descripción</p>
                      <p className="whitespace-pre-line">{selectedTipo.descripcion}</p>
                    </div>
                  )}
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-medium text-gray-800 mb-2">Configuración</h3>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <FiDollarSign className={`mr-2 ${selectedTipo.afecta_costos ? 'text-blue-500' : 'text-gray-400'}`} />
                        <span>Afecta costos</span>
                      </div>
                      <div>
                        {selectedTipo.afecta_costos ? (
                          <Badge color="blue">Activado</Badge>
                        ) : (
                          <Badge color="gray">Desactivado</Badge>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <FiShield className={`mr-2 ${selectedTipo.requiere_autorizacion ? 'text-purple-500' : 'text-gray-400'}`} />
                        <span>Requiere autorización</span>
                      </div>
                      <div>
                        {selectedTipo.requiere_autorizacion ? (
                          <Badge color="purple">Activado</Badge>
                        ) : (
                          <Badge color="gray">Desactivado</Badge>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex justify-end gap-3 pt-4">
              <Button
                variant="outline"
                onClick={() => handleOpenModal(selectedTipo)}
              >
                Editar
              </Button>
              <Button
                variant="outline"
                onClick={() => setIsDetailModalOpen(false)}
              >
                Cerrar
              </Button>
            </div>
          </div>
        )}
      </Modal>

      {/* Modal de confirmación de eliminación */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="Confirmar Eliminación"
        maxWidth="sm"
      >
        <div className="py-4">
          <p className="text-gray-600">
            ¿Estás seguro de que deseas eliminar el tipo de ajuste <span className="font-semibold">{selectedTipo?.nombre}</span>?
          </p>
          <p className="text-gray-500 text-sm mt-2">
            No se podrá eliminar si tiene movimientos asociados.
          </p>
        </div>
        
        <div className="flex justify-end gap-3 pt-2">
          <Button
            variant="outline"
            onClick={() => setIsDeleteModalOpen(false)}
          >
            Cancelar
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
          >
            Eliminar
          </Button>
        </div>
      </Modal>
    </div>
  );
};

// FiX component para mantener consistencia con los otros íconos
const FiX = ({ size, className }) => {
  return (
    <svg
      stroke="currentColor"
      fill="none"
      strokeWidth="2"
      viewBox="0 0 24 24"
      strokeLinecap="round"
      strokeLinejoin="round"
      height={size || "1em"}
      width={size || "1em"}
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <line x1="18" y1="6" x2="6" y2="18"></line>
      <line x1="6" y1="6" x2="18" y2="18"></line>
    </svg>
  );
};

export default TiposAjuste;\n\n
=== ./inventario/pages/UnidadesMedida.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import { FiEdit2, FiTrash2, FiPlus, FiSearch, FiFilter, FiX } from 'react-icons/fi';
import { getAllUnits, getUnitById, createUnit, updateUnit, deleteUnit } from '@domains/inventario/services/inventoryService';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@shared/components/Table';
import { Button } from '@shared/components/Button';
import Modal from '@shared/components/Modal';
import { Badge } from '@shared/components/Badge';

const tipoBadgeColors = {
  masa: 'blue',
  volumen: 'green',
  unidad: 'purple',
  longitud: 'amber',
  area: 'indigo'
};

const UnidadesMedida = () => {
  const [units, setUnits] = useState([]);
  const [selectedUnit, setSelectedUnit] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [activeFilter, setActiveFilter] = useState('');
  const [formData, setFormData] = useState({
    nombre: '',
    abreviatura: '',
    tipo: 'masa'
  });

  const tiposUnidad = [
    { id: 'masa', label: 'Masa' },
    { id: 'volumen', label: 'Volumen' },
    { id: 'unidad', label: 'Unidad' },
    { id: 'longitud', label: 'Longitud' },
    { id: 'area', label: 'Área' }
  ];

  // Cargar datos
  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      const unitsData = await getAllUnits();
      setUnits(unitsData);
    } catch (error) {
      console.error('Error al cargar unidades de medida:', error);
      toast.error('Error al cargar las unidades de medida');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Filtrar unidades
  const filteredUnits = units
    .filter(unit => {
      // Filtro de búsqueda
      if (searchTerm && !unit.nombre.toLowerCase().includes(searchTerm.toLowerCase()) && 
          !unit.abreviatura.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      // Filtro por tipo
      if (activeFilter && unit.tipo !== activeFilter) {
        return false;
      }
      
      return true;
    })
    .sort((a, b) => a.nombre.localeCompare(b.nombre));

  // Manejadores de eventos para el formulario
  const handleOpenModal = (unit = null) => {
    if (unit) {
      setSelectedUnit(unit);
      setFormData({
        nombre: unit.nombre,
        abreviatura: unit.abreviatura,
        tipo: unit.tipo
      });
    } else {
      setSelectedUnit(null);
      setFormData({
        nombre: '',
        abreviatura: '',
        tipo: 'masa'
      });
    }
    setIsModalOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (selectedUnit) {
        await updateUnit(selectedUnit.id, formData);
        toast.success('Unidad de medida actualizada correctamente');
      } else {
        await createUnit(formData);
        toast.success('Unidad de medida creada correctamente');
      }
      
      setIsModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al guardar unidad de medida:', error);
      toast.error(error.response?.data?.error || 'Error al guardar la unidad de medida');
    }
  };

  const handleOpenDeleteModal = (unit) => {
    setSelectedUnit(unit);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    try {
      await deleteUnit(selectedUnit.id);
      toast.success('Unidad de medida eliminada correctamente');
      setIsDeleteModalOpen(false);
      fetchData();
    } catch (error) {
      console.error('Error al eliminar unidad de medida:', error);
      
      // Manejar el caso específico de error cuando la unidad está en uso
      if (error.response?.data?.error?.includes('tiene conversiones asociadas') || 
          error.response?.status === 409) {
        toast.error('No se puede eliminar la unidad porque está siendo utilizada en conversiones o productos');
      } else {
        toast.error(error.response?.data?.error || 'Error al eliminar la unidad de medida');
      }
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Unidades de Medida</h1>
        <Button
          className="flex items-center gap-2"
          onClick={() => handleOpenModal()}
        >
          <FiPlus size={18} /> Agregar Unidad
        </Button>
      </div>

      {/* Filtros y búsqueda */}
      <div className="bg-white p-4 rounded-lg shadow-sm flex flex-col sm:flex-row gap-4 justify-between">
        <div className="relative flex-1">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="text-gray-400" />
          </div>
          <input
            type="text"
            className="pl-10 pr-4 py-2 w-full border rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Buscar por nombre o abreviatura..."
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="flex flex-wrap gap-2">
          {tiposUnidad.map(tipo => (
            <button
              key={tipo.id}
              className={`flex items-center gap-1 px-3 py-2 rounded-lg ${
                activeFilter === tipo.id 
                  ? `bg-${tipoBadgeColors[tipo.id]}-100 text-${tipoBadgeColors[tipo.id]}-800 border border-${tipoBadgeColors[tipo.id]}-200` 
                  : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
              }`}
              onClick={() => setActiveFilter(activeFilter === tipo.id ? '' : tipo.id)}
            >
              <FiFilter size={16} />
              {tipo.label}
              {activeFilter === tipo.id && <FiX size={16} />}
            </button>
          ))}
        </div>
      </div>

      {/* Tabla de unidades de medida */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Nombre</TableHead>
              <TableHead>Abreviatura</TableHead>
              <TableHead>Tipo</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredUnits.length === 0 ? (
              <TableRow>
                <TableCell colSpan={4} className="text-center py-8 text-gray-500">
                  <div className="flex flex-col items-center">
                    <div className="mb-2 text-gray-300 text-4xl">⚖️</div>
                    <p>No se encontraron unidades de medida</p>
                    {(searchTerm || activeFilter) && (
                      <button 
                        className="mt-2 text-indigo-600 hover:text-indigo-800"
                        onClick={() => {
                          setSearchTerm('');
                          setActiveFilter('');
                        }}
                      >
                        Limpiar filtros
                      </button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredUnits.map(unit => (
                <TableRow key={unit.id}>
                  <TableCell className="font-medium">{unit.nombre}</TableCell>
                  <TableCell className="font-mono">{unit.abreviatura}</TableCell>
                  <TableCell>
                    <Badge color={tipoBadgeColors[unit.tipo] || 'gray'}>
                      {unit.tipo.charAt(0).toUpperCase() + unit.tipo.slice(1)}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleOpenModal(unit)}
                        className="p-1 text-blue-600 hover:text-blue-800"
                        title="Editar"
                      >
                        <FiEdit2 size={18} />
                      </button>
                      <button
                        onClick={() => handleOpenDeleteModal(unit)}
                        className="p-1 text-red-600 hover:text-red-800"
                        title="Eliminar"
                      >
                        <FiTrash2 size={18} />
                      </button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modal de creación/edición */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={selectedUnit ? `Editar: ${selectedUnit.nombre}` : 'Nueva Unidad de Medida'}
        maxWidth="md"
      >
        <form onSubmit={handleSubmit} className="grid grid-cols-1 gap-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Nombre */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Nombre
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiEdit2 className="text-gray-400" size={16} />
                </div>
                <input
                  type="text"
                  name="nombre"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.nombre}
                  onChange={handleChange}
                  placeholder="Ej: Kilogramo"
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                />
              </div>
            </div>

            {/* Abreviatura */}
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
                Abreviatura
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <span className="text-gray-400 font-mono text-sm font-bold">Aa</span>
                </div>
                <input
                  type="text"
                  name="abreviatura"
                  required
                  className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  value={formData.abreviatura}
                  onChange={handleChange}
                  placeholder="Ej: kg"
                  maxLength={10}
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--input-text)', 
                    borderColor: 'var(--input-border)'
                  }}
                />
              </div>
              <p className="mt-1 text-sm" style={{ color: 'var(--text-tertiary)' }}>
                Máximo 10 caracteres. Se recomienda usar abreviaturas estándar.
              </p>
            </div>
          </div>

          {/* Tipo de Unidad - Ocupa una fila completa */}
          <div>
            <label className="block text-sm font-medium mb-1" style={{ color: 'var(--text-secondary)' }}>
              Tipo de Unidad
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FiFilter className="text-gray-400" size={16} />
              </div>
              <select
                name="tipo"
                required
                className="pl-10 w-full px-3 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500 appearance-none"
                value={formData.tipo}
                onChange={handleChange}
                style={{ 
                  backgroundColor: 'var(--input-bg)', 
                  color: 'var(--input-text)', 
                  borderColor: 'var(--input-border)'
                }}
              >
                {tiposUnidad.map(tipo => (
                  <option key={tipo.id} value={tipo.id}>
                    {tipo.label}
                  </option>
                ))}
              </select>
              <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <FiChevronDown className="text-gray-400" size={16} />
              </div>
            </div>
            <p className="mt-1 text-sm" style={{ color: 'var(--text-tertiary)' }}>
              Las conversiones solo pueden realizarse entre unidades del mismo tipo.
            </p>
          </div>

          {/* Botones de acción */}
          <div className="flex justify-end gap-3 pt-4 mt-2">
            <Button
              variant="outline"
              onClick={() => setIsModalOpen(false)}
              type="button"
              className="flex items-center gap-2"
            >
              <FiX size={16} /> Cancelar
            </Button>
            <Button type="submit" className="flex items-center gap-2">
              {selectedUnit ? <FiEdit2 size={16} /> : <FiPlus size={16} />}
              {selectedUnit ? 'Actualizar' : 'Crear'}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal de confirmación de eliminación */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="Confirmar Eliminación"
        maxWidth="sm"
      >
        <div className="py-4">
          <p className="text-gray-600">
            ¿Estás seguro de que deseas eliminar la unidad de medida <span className="font-semibold">{selectedUnit?.nombre}</span>?
          </p>
          <p className="text-gray-500 text-sm mt-2">
            No se podrá eliminar si está siendo utilizada en materias primas o conversiones.
          </p>
        </div>
        
        <div className="flex justify-end gap-3 pt-2">
          <Button
            variant="outline"
            onClick={() => setIsDeleteModalOpen(false)}
          >
            Cancelar
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
          >
            Eliminar
          </Button>
        </div>
      </Modal>
    </div>
  );
};

export default UnidadesMedida;\n\n
=== ./inventario/pages/index.js ===
// Exportar todos los componentes de inventario/pages
\n\n
=== ./inventario/pages/index.jsx ===
import { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { toast } from 'react-toastify';
import { useAuth } from '@domains/hooks/useAuth';
import InventorySidebarLayout from '@domains/inventario/components/InventorySidebarLayout';
import InventoryLoader from '@domains/inventario/components/InventoryLoader';
import InventoryDashboard from './InventoryDashboard';
import MateriasPrimas from './MateriasPrimas';
import UnidadesMedida from './UnidadesMedida';
import Proveedores from './Proveedores';
import Lotes from './Lotes';
import Movimientos from './Movimientos';
import TiposAjuste from './TiposAjuste';
import Conversiones from './Conversiones';
import Alertas from './Alertas';

const InventoryIndex = () => {
  const { user } = useAuth();
  const [activeSection, setActiveSection] = useState('dashboard');
  const [loading, setLoading] = useState(false); // Set to true for initial loading animation
  const navigate = useNavigate();
  const location = useLocation();
  
  // Sincronizar el estado activeSection con la ruta actual
  useEffect(() => {
    const path = location.pathname;
    if (path === '/inventory') {
      setActiveSection('dashboard');
    } else if (path.includes('materias-primas')) {
      setActiveSection('materias-primas');
    } else if (path.includes('unidades-medida')) {
      setActiveSection('unidades-medida');
    } else if (path.includes('proveedores')) {
      setActiveSection('proveedores');
    } else if (path.includes('lotes')) {
      setActiveSection('lotes');
    } else if (path.includes('movimientos')) {
      setActiveSection('movimientos');
    } else if (path.includes('tipos-ajuste')) {
      setActiveSection('tipos-ajuste');
    } else if (path.includes('conversiones')) {
      setActiveSection('conversiones');
    } else if (path.includes('alertas')) {
      setActiveSection('alertas');
    }
  }, [location.pathname]);
  
  // Mostrar mensaje de advertencia si el usuario no tiene permisos adecuados
  useEffect(() => {
    if (user && user.tipo_usuario !== 'admin' && user.tipo_usuario !== 'inventario') {
      toast.warning('Acceso limitado: No tienes todos los permisos para el sistema de inventario');
    }
  }, [user]);

  // Renderizar el contenido basado en la sección activa
  const renderContent = () => {
    if (loading) {
      return <InventoryLoader />;
    }
    
    switch (activeSection) {
      case 'dashboard':
        return <InventoryDashboard />;
      case 'materias-primas':
        return <MateriasPrimas />;
      case 'unidades-medida':
        return <UnidadesMedida />;
      case 'proveedores':
        return <Proveedores />;
      case 'lotes':
        return <Lotes />;
      case 'movimientos':
        return <Movimientos />;
      case 'tipos-ajuste':
        return <TiposAjuste />;
      case 'conversiones':
        return <Conversiones />;
      case 'alertas':
        return <Alertas />;
      default:
        return <InventoryDashboard />;
    }
  };

  return (
    <InventorySidebarLayout>
      {renderContent()}
    </InventorySidebarLayout>
  );
};

export default InventoryIndex;\n\n
=== ./inventario/services/index.js ===
// Exportar todos los componentes de inventario/services
\n\n
=== ./inventario/services/inventoryService.js ===
import axios from 'axios';
import { toast } from 'react-toastify';
import { getAuthToken } from '@/utils/authUtils';

// Configuración base para axios
const apiClient = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:3001/api',
  headers: {
    'Content-Type': 'application/json',
  },
  // Añadir timeout para evitar esperas infinitas
  timeout: 15000, // 15 segundos
});

// Interceptor para añadir el token de autenticación a todas las peticiones
apiClient.interceptors.request.use(
  (config) => {
    const token = getAuthToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Función para determinar si un error es de conexión
const isConnectionError = (error) => {
  return (
    error.code === 'ECONNABORTED' || // Timeout
    error.message.includes('Network Error') || // Error de red
    !error.response || // Sin respuesta
    error.response.status === 503 || // Servicio no disponible
    error.response.status === 504 // Gateway timeout
  );
};

// Interceptor para manejar errores generales
apiClient.interceptors.response.use(
  (response) => response,
  async (error) => {
    // Si el error es de autenticación (401), podríamos redirigir a login
    if (error.response && error.response.status === 401) {
      toast.error('Sesión expirada. Por favor, inicie sesión de nuevo.');
      // window.location.href = '/login';
      return Promise.reject(error);
    }
    
    // Manejo específico para errores de conexión a la base de datos
    if (error.response && error.response.status === 503) {
      toast.error('Servicio de base de datos no disponible. Reintentando conexión...', {
        autoClose: 5000, // Mostrar por más tiempo
        toastId: 'db-error', // Prevenir duplicados
      });
      
      // Esperar 2 segundos antes de reintentar
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Reintentar la solicitud
      return apiClient.request(error.config);
    }
    
    // Manejo de errores de conexión
    if (isConnectionError(error) && error.config && !error.config.__isRetry) {
      // Marcar como reintento para evitar bucles infinitos
      error.config.__isRetry = true;
      
      // No mostrar toast para cada reintento para evitar saturar la interfaz
      console.log('Problema de conexión detectado. Reintentando...');
      
      // Esperar 3 segundos antes de reintentar
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Reintentar la solicitud
      return apiClient.request(error.config);
    }
    
    // Control de toasts de error para reducir la cantidad mostrada
    // y usar toastId para prevenir duplicados
    const errorMessage =
      error.response?.data?.error ||
      error.response?.data?.message ||
      (isConnectionError(error) ? 'Error de conexión con el servidor' : 'Error al comunicarse con el servidor');
    
    if (!error.config?.suppressErrorToast) {
      // Usando toastId basado en la URL y el tipo de error para evitar duplicados
      const toastId = `error-${error.config?.url?.split('/').pop() || 'general'}`;
      toast.error(errorMessage, {
        toastId,
        autoClose: 3000,
      });
    }
    
    return Promise.reject(error);
  }
);

// Función para reintentar una operación con un número máximo de intentos y datos de fallback
const retryOperation = async (operation, maxRetries = 2, delay = 2000, fallbackData = null) => {
  let lastError;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      lastError = error;
      
      // Si no es un error de conexión o es el último intento, no reintentar
      if (!isConnectionError(error) || attempt === maxRetries) {
        // Si es el último intento y tenemos datos de fallback, regresarlos
        if (attempt === maxRetries && fallbackData !== null) {
          console.warn('Usando datos de fallback para', operation.name || 'operación desconocida');
          return fallbackData;
        }
        throw error;
      }
      
      console.log(`Intento ${attempt} fallido, reintentando en ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      
      // Aumentar el delay para el próximo intento (backoff exponencial)
      delay = Math.min(delay * 1.5, 10000); // Máximo 10 segundos
    }
  }
  
  // Si tenemos datos de fallback y llegamos aquí, usarlos
  if (fallbackData !== null) {
    console.warn('Usando datos de fallback después de agotar intentos');
    return fallbackData;
  }
  
  throw lastError;
};

// Funciones auxiliares para simplificar las llamadas API con reintentos
const get = (url, fallbackData = []) => 
  retryOperation(
    () => apiClient.get(url).then(response => response.data),
    2, // Máximo 2 reintentos
    2000, // Delay inicial
    fallbackData // Datos de fallback
  );
const post = (url, data) => retryOperation(() => apiClient.post(url, data).then(response => response.data));
const put = (url, data) => retryOperation(() => apiClient.put(url, data).then(response => response.data));
const del = (url) => retryOperation(() => apiClient.delete(url).then(response => response.data));

// ==================== SERVICIOS PARA DASHBOARD ====================

/**
 * Obtiene estadísticas generales para el dashboard
 */
export const getInventoryStats = async () => {
  try {
    // Intentamos obtener datos reales, pero proporcionamos fallbacks para cada llamada
    let materiasPrimas = [];
    let proveedores = [];
    let movimientos = [];
    let alertas = [];
    
    try {
      materiasPrimas = await get('/inventory/materias-primas', []);
    } catch (error) {
      console.warn('Error al obtener materias primas, usando datos fallback:', error);
      materiasPrimas = [];
    }
    
    try {
      proveedores = await get('/inventory/proveedores', []);
    } catch (error) {
      console.warn('Error al obtener proveedores, usando datos fallback:', error);
      proveedores = [];
    }
    
    try {
      movimientos = await get('/inventory/movimientos', []);
    } catch (error) {
      console.warn('Error al obtener movimientos, usando datos fallback:', error);
      movimientos = [];
    }
    
    try {
      alertas = await get('/inventory/alertas?leida=false', []);
    } catch (error) {
      console.warn('Error al obtener alertas, usando datos fallback:', error);
      alertas = [];
    }
    
    // Filtramos movimientos de hoy
    const hoy = new Date().toISOString().split('T')[0];
    const movimientosHoy = movimientos.filter(m => 
      m?.fecha?.startsWith?.(hoy) || false
    ).length;
    
    return {
      totalItems: materiasPrimas.length,
      totalProviders: proveedores.length,
      movementsToday: movimientosHoy,
      activeAlerts: alertas.filter(a => !a?.leida || false).length
    };
  } catch (error) {
    console.error('Error al obtener estadísticas de inventario:', error);
    // Retornamos datos fallback básicos en caso de error
    return {
      totalItems: 0,
      totalProviders: 0,
      movementsToday: 0,
      activeAlerts: 0,
      isUsingFallbackData: true
    };
  }
};

/**
 * Obtiene elementos con stock bajo
 */
export const getLowStockItems = async () => {
  try {
    return await get('/inventory/materias-primas/bajo-stock', []);
  } catch (error) {
    console.error('Error al obtener elementos con bajo stock:', error);
    // Retornar arreglo vacío en lugar de lanzar excepción
    return [];
  }
};

/**
 * Obtiene alertas activas del sistema
 */
export const getActiveAlerts = async () => {
  try {
    return await get('/inventory/alertas?leida=false', []);
  } catch (error) {
    console.error('Error al obtener alertas activas:', error);
    // Retornar arreglo vacío en lugar de lanzar excepción
    return [];
  }
};

// ==================== MATERIAS PRIMAS ====================

/**
 * Obtiene todas las materias primas
 */
export const getAllItems = async () => {
  try {
    return await get('/inventory/materias-primas');
  } catch (error) {
    console.error('Error al obtener materias primas:', error);
    throw error;
  }
};

/**
 * Obtiene una materia prima por ID
 */
export const getItemById = async (id) => {
  try {
    return await get(`/inventory/materias-primas/${id}`);
  } catch (error) {
    console.error(`Error al obtener materia prima con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Crea una nueva materia prima
 */
export const createItem = async (itemData) => {
  try {
    return await post('/inventory/materias-primas', itemData);
  } catch (error) {
    console.error('Error al crear materia prima:', error);
    throw error;
  }
};

/**
 * Actualiza una materia prima existente
 */
export const updateItem = async (id, itemData) => {
  try {
    return await put(`/inventory/materias-primas/${id}`, itemData);
  } catch (error) {
    console.error(`Error al actualizar materia prima con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Elimina una materia prima
 */
export const deleteItem = async (id) => {
  try {
    return await del(`/inventory/materias-primas/${id}`);
  } catch (error) {
    console.error(`Error al eliminar materia prima con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene elementos próximos a caducar
 * @param {number} dias - Días límite para considerar próximo a caducar
 */
export const getProximosACaducar = async (dias = 7) => {
  try {
    return await get(`/inventory/materias-primas/proximos-caducar?dias=${dias}`, []);
  } catch (error) {
    console.error('Error al obtener elementos próximos a caducar:', error);
    // Retornar arreglo vacío en lugar de lanzar excepción
    return [];
  }
};

/**
 * Obtiene los movimientos de una materia prima
 */
export const getMovimientosByItem = async (id, params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/materias-primas/${id}/movimientos${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error(`Error al obtener movimientos de materia prima ${id}:`, error);
    throw error;
  }
};

// ==================== UNIDADES DE MEDIDA ====================

/**
 * Obtiene todas las unidades de medida
 */
export const getAllUnits = async () => {
  try {
    return await get('/inventory/unidades-medida');
  } catch (error) {
    console.error('Error al obtener unidades de medida:', error);
    throw error;
  }
};

/**
 * Obtiene una unidad de medida por ID
 */
export const getUnitById = async (id) => {
  try {
    return await get(`/inventory/unidades-medida/${id}`);
  } catch (error) {
    console.error(`Error al obtener unidad de medida con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Crea una nueva unidad de medida
 */
export const createUnit = async (unitData) => {
  try {
    return await post('/inventory/unidades-medida', unitData);
  } catch (error) {
    console.error('Error al crear unidad de medida:', error);
    throw error;
  }
};

/**
 * Actualiza una unidad de medida existente
 */
export const updateUnit = async (id, unitData) => {
  try {
    return await put(`/inventory/unidades-medida/${id}`, unitData);
  } catch (error) {
    console.error(`Error al actualizar unidad de medida con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Elimina una unidad de medida
 */
export const deleteUnit = async (id) => {
  try {
    return await del(`/inventory/unidades-medida/${id}`);
  } catch (error) {
    console.error(`Error al eliminar unidad de medida con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene unidades de medida por tipo
 */
export const getUnitsByType = async (tipo) => {
  try {
    return await get(`/inventory/unidades-medida/tipo/${tipo}`);
  } catch (error) {
    console.error(`Error al obtener unidades de medida de tipo ${tipo}:`, error);
    throw error;
  }
};

// ==================== CONVERSIONES DE MEDIDA ====================

/**
 * Obtiene todas las conversiones de medida
 */
export const getAllConversiones = async () => {
  try {
    return await get('/inventory/conversiones');
  } catch (error) {
    console.error('Error al obtener conversiones:', error);
    throw error;
  }
};

/**
 * Obtiene una conversión por ID de unidades
 */
export const getConversionById = async (idOrigen, idDestino) => {
  try {
    return await get(`/inventory/conversiones/${idOrigen}/${idDestino}`);
  } catch (error) {
    console.error(`Error al obtener conversión entre unidades ${idOrigen} y ${idDestino}:`, error);
    throw error;
  }
};

/**
 * Crea una nueva conversión
 */
export const createConversion = async (conversionData) => {
  try {
    return await post('/inventory/conversiones', conversionData);
  } catch (error) {
    console.error('Error al crear conversión:', error);
    throw error;
  }
};

/**
 * Actualiza una conversión existente
 */
export const updateConversion = async (idOrigen, idDestino, conversionData) => {
  try {
    return await put(`/inventory/conversiones/${idOrigen}/${idDestino}`, conversionData);
  } catch (error) {
    console.error(`Error al actualizar conversión entre unidades ${idOrigen} y ${idDestino}:`, error);
    throw error;
  }
};

/**
 * Elimina una conversión
 */
export const deleteConversion = async (idOrigen, idDestino) => {
  try {
    return await del(`/inventory/conversiones/${idOrigen}/${idDestino}`);
  } catch (error) {
    console.error(`Error al eliminar conversión entre unidades ${idOrigen} y ${idDestino}:`, error);
    throw error;
  }
};

/**
 * Obtiene conversiones disponibles para una unidad
 */
export const getConversionesDisponibles = async (idUnidad) => {
  try {
    return await get(`/inventory/conversiones/unidad/${idUnidad}`);
  } catch (error) {
    console.error(`Error al obtener conversiones disponibles para unidad ${idUnidad}:`, error);
    throw error;
  }
};

/**
 * Convierte una cantidad entre unidades
 */
export const convertirCantidad = async (conversionData) => {
  try {
    return await post('/inventory/conversiones/convertir', conversionData);
  } catch (error) {
    console.error('Error al convertir cantidad:', error);
    throw error;
  }
};

// ==================== LOTES ====================

/**
 * Obtiene todos los lotes
 */
export const getAllLots = async () => {
  try {
    return await get('/inventory/lotes');
  } catch (error) {
    console.error('Error al obtener lotes:', error);
    throw error;
  }
};

/**
 * Obtiene un lote por ID
 */
export const getLotById = async (id) => {
  try {
    return await get(`/inventory/lotes/${id}`);
  } catch (error) {
    console.error(`Error al obtener lote con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Crea un nuevo lote
 */
export const createLot = async (lotData) => {
  try {
    return await post('/inventory/lotes', lotData);
  } catch (error) {
    console.error('Error al crear lote:', error);
    throw error;
  }
};

/**
 * Actualiza un lote existente
 */
export const updateLot = async (id, lotData) => {
  try {
    return await put(`/inventory/lotes/${id}`, lotData);
  } catch (error) {
    console.error(`Error al actualizar lote con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Elimina un lote
 */
export const deleteLot = async (id) => {
  try {
    return await del(`/inventory/lotes/${id}`);
  } catch (error) {
    console.error(`Error al eliminar lote con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene lotes por materia prima
 */
export const getLotsByMateriaPrima = async (idMateriaPrima, params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/lotes/materia-prima/${idMateriaPrima}${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error(`Error al obtener lotes de materia prima ${idMateriaPrima}:`, error);
    throw error;
  }
};

/**
 * Obtiene lotes próximos a caducar
 */
export const getLotesProximosACaducar = async (dias = 7) => {
  try {
    return await get(`/inventory/lotes/proximos-caducar?dias=${dias}`, []);
  } catch (error) {
    console.error('Error al obtener lotes próximos a caducar:', error);
    // Retornar arreglo vacío en lugar de lanzar excepción
    return [];
  }
};

// ==================== MOVIMIENTOS DE INVENTARIO ====================

/**
 * Obtiene todos los movimientos
 */
export const getAllMovements = async (params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/movimientos${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error('Error al obtener movimientos:', error);
    throw error;
  }
};

/**
 * Obtiene un movimiento por ID
 */
export const getMovementById = async (id) => {
  try {
    return await get(`/inventory/movimientos/${id}`);
  } catch (error) {
    console.error(`Error al obtener movimiento con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Crea un nuevo movimiento
 */
export const createMovement = async (movementData) => {
  try {
    return await post('/inventory/movimientos', movementData);
  } catch (error) {
    console.error('Error al crear movimiento:', error);
    throw error;
  }
};

/**
 * Actualiza un movimiento existente (no suele ser común)
 */
export const updateMovement = async (id, movementData) => {
  try {
    return await put(`/inventory/movimientos/${id}`, movementData);
  } catch (error) {
    console.error(`Error al actualizar movimiento con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Elimina un movimiento (no suele ser común)
 */
export const deleteMovement = async (id) => {
  try {
    return await del(`/inventory/movimientos/${id}`);
  } catch (error) {
    console.error(`Error al eliminar movimiento con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene movimientos por materia prima
 */
export const getMovimientosByMateriaPrima = async (idMateriaPrima, params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/movimientos/materia-prima/${idMateriaPrima}${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error(`Error al obtener movimientos de materia prima ${idMateriaPrima}:`, error);
    throw error;
  }
};

/**
 * Obtiene movimientos por lote
 */
export const getMovimientosByLote = async (idLote, params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/movimientos/lote/${idLote}${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error(`Error al obtener movimientos de lote ${idLote}:`, error);
    throw error;
  }
};

/**
 * Obtiene estadísticas de movimientos de inventario (entradas y salidas) por periodo
 */
export const getMovementStats = async () => {
  try {
    return await get('/inventory/movimientos/estadisticas/consumo', {
      // Datos fallback para estadísticas de movimientos
      entradas: [],
      salidas: [],
      periodos: []
    });
  } catch (error) {
    console.error('Error al obtener estadísticas de movimiento:', error);
    // Retornar datos fallback para que la UI pueda mostrar algo
    return {
      entradas: [],
      salidas: [],
      periodos: [],
      isUsingFallbackData: true
    };
  }
};

// ==================== PROVEEDORES ====================

/**
 * Obtiene todos los proveedores
 */
export const getAllProviders = async () => {
  try {
    return await get('/inventory/proveedores');
  } catch (error) {
    console.error('Error al obtener proveedores:', error);
    throw error;
  }
};

/**
 * Obtiene un proveedor por ID
 */
export const getProviderById = async (id) => {
  try {
    return await get(`/inventory/proveedores/${id}`);
  } catch (error) {
    console.error(`Error al obtener proveedor con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Crea un nuevo proveedor
 */
export const createProvider = async (providerData) => {
  try {
    return await post('/inventory/proveedores', providerData);
  } catch (error) {
    console.error('Error al crear proveedor:', error);
    throw error;
  }
};

/**
 * Actualiza un proveedor existente
 */
export const updateProvider = async (id, providerData) => {
  try {
    return await put(`/inventory/proveedores/${id}`, providerData);
  } catch (error) {
    console.error(`Error al actualizar proveedor con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Elimina un proveedor
 */
export const deleteProvider = async (id) => {
  try {
    return await del(`/inventory/proveedores/${id}`);
  } catch (error) {
    console.error(`Error al eliminar proveedor con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Busca proveedores por término
 */
export const searchProviders = async (termino) => {
  try {
    return await get(`/inventory/proveedores/buscar?termino=${termino}`);
  } catch (error) {
    console.error(`Error al buscar proveedores con término "${termino}":`, error);
    throw error;
  }
};

/**
 * Obtiene órdenes de compra por proveedor
 */
export const getOrdenesCompraByProveedor = async (idProveedor, params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/proveedores/${idProveedor}/ordenes${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error(`Error al obtener órdenes de compra de proveedor ${idProveedor}:`, error);
    throw error;
  }
};

// ==================== TIPOS DE AJUSTE ====================

/**
 * Obtiene todos los tipos de ajuste
 */
export const getAllAdjustmentTypes = async () => {
  try {
    return await get('/inventory/tipos-ajuste');
  } catch (error) {
    console.error('Error al obtener tipos de ajuste:', error);
    throw error;
  }
};

/**
 * Obtiene un tipo de ajuste por ID
 */
export const getAdjustmentTypeById = async (id) => {
  try {
    return await get(`/inventory/tipos-ajuste/${id}`);
  } catch (error) {
    console.error(`Error al obtener tipo de ajuste con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Crea un nuevo tipo de ajuste
 */
export const createAdjustmentType = async (typeData) => {
  try {
    return await post('/inventory/tipos-ajuste', typeData);
  } catch (error) {
    console.error('Error al crear tipo de ajuste:', error);
    throw error;
  }
};

/**
 * Actualiza un tipo de ajuste existente
 */
export const updateAdjustmentType = async (id, typeData) => {
  try {
    return await put(`/inventory/tipos-ajuste/${id}`, typeData);
  } catch (error) {
    console.error(`Error al actualizar tipo de ajuste con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Elimina un tipo de ajuste
 */
export const deleteAdjustmentType = async (id) => {
  try {
    return await del(`/inventory/tipos-ajuste/${id}`);
  } catch (error) {
    console.error(`Error al eliminar tipo de ajuste con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene tipos de ajuste que requieren autorización
 */
export const getTiposAjusteAutorizacion = async () => {
  try {
    return await get('/inventory/tipos-ajuste/autorizacion');
  } catch (error) {
    console.error('Error al obtener tipos de ajuste que requieren autorización:', error);
    throw error;
  }
};

/**
 * Obtiene tipos de ajuste que afectan costos
 */
export const getTiposAjusteCostos = async () => {
  try {
    return await get('/inventory/tipos-ajuste/costos');
  } catch (error) {
    console.error('Error al obtener tipos de ajuste que afectan costos:', error);
    throw error;
  }
};

// ==================== ALERTAS DE INVENTARIO ====================

/**
 * Obtiene todas las alertas
 */
export const getAllAlertas = async (params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/alertas${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error('Error al obtener alertas:', error);
    throw error;
  }
};

/**
 * Obtiene una alerta por ID
 */
export const getAlertaById = async (id) => {
  try {
    return await get(`/inventory/alertas/${id}`);
  } catch (error) {
    console.error(`Error al obtener alerta con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene alertas pendientes
 */
export const getAlertasPendientes = async () => {
  try {
    return await get('/inventory/alertas/pendientes');
  } catch (error) {
    console.error('Error al obtener alertas pendientes:', error);
    throw error;
  }
};

/**
 * Marca una alerta como leída
 */
export const marcarComoLeida = async (id) => {
  try {
    return await put(`/inventory/alertas/${id}/leer`, {});
  } catch (error) {
    console.error(`Error al marcar alerta ${id} como leída:`, error);
    throw error;
  }
};

/**
 * Marca todas las alertas como leídas
 */
export const marcarTodasComoLeidas = async (tipo = undefined) => {
  try {
    const url = tipo 
      ? `/inventory/alertas/leer-todas?tipo=${tipo}` 
      : '/inventory/alertas/leer-todas';
    return await put(url, {});
  } catch (error) {
    console.error('Error al marcar todas las alertas como leídas:', error);
    throw error;
  }
};

/**
 * Obtiene alertas por tipo
 */
export const getAlertasPorTipo = async (tipo, params = {}) => {
  try {
    const queryParams = new URLSearchParams(params).toString();
    const url = `/inventory/alertas/tipo/${tipo}${queryParams ? `?${queryParams}` : ''}`;
    return await get(url);
  } catch (error) {
    console.error(`Error al obtener alertas de tipo ${tipo}:`, error);
    throw error;
  }
};

/**
 * Obtiene resumen de alertas
 */
export const getResumenAlertas = async () => {
  try {
    return await get('/inventory/alertas/resumen');
  } catch (error) {
    console.error('Error al obtener resumen de alertas:', error);
    throw error;
  }
};

export default {
  // Dashboard
  getInventoryStats,
  getLowStockItems,
  getActiveAlerts,
  
  // Materias Primas
  getAllItems,
  getItemById,
  createItem,
  updateItem,
  deleteItem,
  getProximosACaducar,
  getMovimientosByItem,
  
  // Unidades de Medida
  getAllUnits,
  getUnitById,
  createUnit,
  updateUnit,
  deleteUnit,
  getUnitsByType,
  
  // Conversiones
  getAllConversiones,
  getConversionById,
  createConversion,
  updateConversion,
  deleteConversion,
  getConversionesDisponibles,
  convertirCantidad,
  
  // Lotes
  getAllLots,
  getLotById,
  createLot,
  updateLot,
  deleteLot,
  getLotsByMateriaPrima,
  getLotesProximosACaducar,
  
  // Movimientos
  getAllMovements,
  getMovementById,
  createMovement,
  updateMovement,
  deleteMovement,
  getMovimientosByMateriaPrima,
  getMovimientosByLote,
  getMovementStats,
  
  // Proveedores
  getAllProviders,
  getProviderById,
  createProvider,
  updateProvider,
  deleteProvider,
  searchProviders,
  getOrdenesCompraByProveedor,
  
  // Tipos de Ajuste
  getAllAdjustmentTypes,
  getAdjustmentTypeById,
  createAdjustmentType,
  updateAdjustmentType,
  deleteAdjustmentType,
  getTiposAjusteAutorizacion,
  getTiposAjusteCostos,
  
  // Alertas
  getAllAlertas,
  getAlertaById,
  getAlertasPendientes,
  marcarComoLeida,
  marcarTodasComoLeidas,
  getAlertasPorTipo,
  getResumenAlertas,
  getMovementStats
};\n\n
=== ./public/components/decorative/AnimatedBalloons.jsx ===
import React from 'react'
import { motion } from 'framer-motion'

/**
 * Componente que genera globos animados para reforzar la temática infantil
 * con movimientos flotantes y colores vibrantes
 */
const AnimatedBalloons = () => {
  const balloons = Array.from({ length: 8 }, (_, i) => ({
    id: i,
    size: Math.random() * 30 + 20,
    x: Math.random() * 100,
    color: [
      'from-red-400 to-red-600',
      'from-blue-400 to-blue-600',
      'from-yellow-400 to-yellow-600',
      'from-green-400 to-green-600',
      'from-pink-400 to-pink-600',
      'from-purple-400 to-purple-600',
    ][Math.floor(Math.random() * 6)],
    duration: Math.random() * 20 + 30,
    delay: Math.random() * 15
  }));

  return (
    <div className="fixed inset-0 z-0 pointer-events-none overflow-hidden">
      {balloons.map((balloon) => (
        <motion.div
          key={balloon.id}
          className={`absolute bg-gradient-to-b ${balloon.color}`}
          style={{
            width: balloon.size,
            height: balloon.size * 1.2,
            left: `${balloon.x}%`,
            bottom: '-10%',
            borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%',
          }}
          animate={{
            y: [0, -window.innerHeight * 1.2],
            rotate: [0, 10, -10, 5, 0],
            opacity: [0.7, 0.8, 0.7, 0]
          }}
          transition={{
            duration: balloon.duration,
            repeat: Infinity,
            delay: balloon.delay,
            ease: "linear"
          }}
        >
          <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-full w-0.5 h-16 bg-white/30" />
        </motion.div>
      ))}
    </div>
  );
};

export default AnimatedBalloons;\n\n
=== ./public/components/decorative/BackgroundVideoComponent.jsx ===
import React, { useEffect } from 'react';
import { FiPause, FiPlay } from 'react-icons/fi';
import { motion } from 'framer-motion';
import BackgroundVideo from '@shared/assets/video/background.webm';

const BackgroundVideoComponent = ({ videoRef, isVideoPlaying, toggleVideo }) => {
  useEffect(() => {
    if (!videoRef.current) return;
    
    const videoElement = videoRef.current;
    
    const handlePlay = () => console.log("Video started playing via event");
    const handlePause = () => console.log("Video paused via event");
    const handleError = (e) => console.error("Video error:", e);
    
    videoElement.addEventListener('play', handlePlay);
    videoElement.addEventListener('pause', handlePause);
    videoElement.addEventListener('error', handleError);
    
    const playVideo = async () => {
      try {
        await videoElement.play();
        console.log("Video forzado a reproducir en montaje");
      } catch (error) {
        console.error("Error al forzar reproducción inicial:", error);
      }
    };
    
    playVideo();
    
    return () => {
      videoElement.removeEventListener('play', handlePlay);
      videoElement.removeEventListener('pause', handlePause);
      videoElement.removeEventListener('error', handleError);
    };
  }, [videoRef]);

  const handleControlClick = (e) => {
    e.preventDefault();
    e.stopPropagation();
    console.log("Video control button clicked directly");
    
    try {
      toggleVideo(e);
    } catch (error) {
      console.error("Error en handleControlClick:", error);
      
      if (videoRef.current) {
        if (isVideoPlaying) {
          videoRef.current.pause();
        } else {
          videoRef.current.play().catch(err => 
            console.error("Error reproduciendo video directamente:", err)
          );
        }
      }
    }
    
    return false;
  };

  return (
    <>
      {/* Video container */}
      <div className="fixed inset-0 w-full h-full z-0 overflow-hidden">
        <div className="absolute inset-0 flex items-center justify-center w-full h-full">
          <video
            ref={videoRef}
            autoPlay
            loop
            muted
            playsInline
            className="absolute w-full h-full object-cover"
          >
            <source src={BackgroundVideo} type="video/webm" />
            Tu navegador no soporta videos HTML5.
          </video>
        </div>
        
        {/* Overlay para mejorar contraste */}
        <div className="absolute inset-0 bg-gradient-to-b from-purple-950/70 via-purple-900/60 to-indigo-950/70 backdrop-blur-[2px]"></div>
      </div>
      
      {/* Botón de control */}
      <div className="fixed bottom-6 right-6 z-[9999]" style={{ pointerEvents: 'auto' }}>
        <motion.button
          onClick={handleControlClick}
          whileHover={{ 
            scale: 1.15,
            boxShadow: "0 0 25px rgba(250, 204, 21, 0.6)"
          }}
          whileTap={{ scale: 0.95 }}
          initial={{ opacity: 0, y: 20 }}
          animate={{ 
            opacity: 1, 
            y: 0,
            transition: { type: "spring", stiffness: 400, damping: 10 }
          }}
          className="w-12 h-12 md:w-16 md:h-16 rounded-full bg-yellow-400 text-purple-900 flex items-center justify-center
                    shadow-lg shadow-purple-900/50 border-2 border-yellow-300
                    hover:bg-yellow-300 active:bg-yellow-500
                    focus:outline-none focus:ring-4 focus:ring-yellow-300/50"
          aria-label={isVideoPlaying ? "Pausar video de fondo" : "Reproducir video de fondo"}
          style={{ 
            cursor: 'pointer', 
            WebkitTapHighlightColor: 'transparent',
            touchAction: 'manipulation'
          }}
        >
          {isVideoPlaying ? (
            <FiPause className="text-xl md:text-3xl" />
          ) : (
            <FiPlay className="text-xl md:text-3xl" />
          )}
          
          {/* Efecto de pulso */}
          <motion.div
            className="absolute -inset-2 md:-inset-3 rounded-full bg-yellow-400/20 z-[-1]"
            animate={{ 
              scale: [1, 1.2, 1],
              opacity: [0.3, 0.6, 0.3]
            }}
            transition={{ 
              repeat: Infinity,
              duration: 2,
              ease: "easeInOut"
            }}
          />
        </motion.button>
      </div>
    </>
  );
};

export default BackgroundVideoComponent;\n\n
=== ./public/components/decorative/ParticlesBackground.jsx ===
import React from 'react'
import { motion } from 'framer-motion'

/**
 * Componente que genera un fondo de partículas animadas
 * para efectos decorativos en la página de inicio
 */
const ParticlesBackground = () => {
  const particles = Array.from({ length: 30 }, (_, i) => ({
    id: i,
    size: Math.random() * 8 + 2,
    x: Math.random() * 100,
    y: Math.random() * 100,
    duration: Math.random() * 20 + 10,
    delay: Math.random() * 10
  }));

  return (
    <div className="fixed inset-0 z-0 pointer-events-none overflow-hidden">
      {particles.map((particle) => (
        <motion.div
          key={particle.id}
          className="absolute rounded-full bg-white/10"
          style={{
            width: particle.size,
            height: particle.size,
            left: `${particle.x}%`,
            top: `${particle.y}%`,
          }}
          animate={{
            y: [0, -100, 0],
            opacity: [0, 0.4, 0],
            scale: [0, 1, 0.5]
          }}
          transition={{
            duration: particle.duration,
            repeat: Infinity,
            delay: particle.delay,
            ease: "easeInOut"
          }}
        />
      ))}
    </div>
  );
};

export default ParticlesBackground;\n\n
=== ./public/components/index.js ===
// Exportar todos los componentes de public/components
// Exporta las secciones
export * from './sections';
// Exporta los componentes decorativos
export * from './decorative';
// Exporta los componentes UI
export * from './ui';\n\n
=== ./public/components/sections/ContactSection.jsx ===
import React from 'react'
import { FiPhoneCall, FiMail, FiMapPin, FiClock } from 'react-icons/fi'

/**
 * Componente que muestra la información de contacto
 * con estilo mejorado y elementos interactivos
 */
const ContactInfo = () => {
  return (
    <div className="space-y-4">
      {/* Teléfono */}
      <div className="flex items-center gap-3 group">
        <div className="p-3 bg-indigo-900/50 rounded-lg group-hover:bg-indigo-800/60 transition-colors duration-300">
          <FiPhoneCall className="text-xl text-yellow-400" />
        </div>
        <div>
          <h4 className="text-sm text-gray-300">Teléfono</h4>
          <a 
            href="tel:+523332300243" 
            className="text-white hover:text-yellow-300 transition-colors duration-300"
          >
            +52 (33) 3230 0243
          </a>
        </div>
      </div>
      
      {/* Email */}
      <div className="flex items-center gap-3 group">
        <div className="p-3 bg-indigo-900/50 rounded-lg group-hover:bg-indigo-800/60 transition-colors duration-300">
          <FiMail className="text-xl text-green-400" />
        </div>
        <div>
          <h4 className="text-sm text-gray-300">Email</h4>
          <a 
            href="mailto:contacto@tramboory.com" 
            className="text-white hover:text-green-300 transition-colors duration-300"
          >
            contacto@tramboory.com
          </a>
        </div>
      </div>
      
      {/* Dirección */}
      <div className="flex items-center gap-3 group">
        <div className="p-3 bg-indigo-900/50 rounded-lg group-hover:bg-indigo-800/60 transition-colors duration-300">
          <FiMapPin className="text-xl text-blue-400" />
        </div>
        <div>
          <h4 className="text-sm text-gray-300">Dirección</h4>
          <a 
            href="https://maps.google.com/?q=Tramboory,Zapopan,Jalisco" 
            target="_blank"
            rel="noopener noreferrer"
            className="text-white hover:text-blue-300 transition-colors duration-300"
          >
            Zapopan, Jalisco
          </a>
        </div>
      </div>
      
      {/* Horario */}
      <div className="flex items-center gap-3 group">
        <div className="p-3 bg-indigo-900/50 rounded-lg group-hover:bg-indigo-800/60 transition-colors duration-300">
          <FiClock className="text-xl text-purple-400" />
        </div>
        <div>
          <h4 className="text-sm text-gray-300">Horario</h4>
          <p className="text-white">Lun - Dom: 10:00 - 20:00</p>
        </div>
      </div>
    </div>
  );
};

export default ContactInfo;\n\n
=== ./public/components/sections/FeaturesSection.jsx ===
import React, { useRef } from 'react'
import { motion, useScroll, useTransform } from 'framer-motion'
import { 
  FiCheckCircle, 
  FiGift, 
  FiHeart, 
  FiStar, 
  FiUsers, 
  FiMusic,
  FiAward
} from 'react-icons/fi'
import FeatureCard from '../ui/FeatureCard'

/**
 * Sección mejorada que muestra las características destacadas
 * con efectos visuales sofisticados y animaciones avanzadas
 */
const FeaturesSection = () => {
  // Referencias para efectos de scroll
  const sectionRef = useRef(null);
  const { scrollYProgress } = useScroll({
    target: sectionRef,
    offset: ["start end", "end start"]
  });
  
  // Efectos de parallax basados en scroll
  const opacity = useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [0.8, 1, 1, 0.8]);
  const scale = useTransform(scrollYProgress, [0, 0.5, 1], [0.98, 1, 0.98]);
  
  // Variantes para animaciones secuenciales
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.2
      }
    }
  };
  
  // Características destacadas
  const features = [
    {
      icon: FiCheckCircle,
      title: 'Diversión Garantizada',
      description: 'Cada momento está lleno de risas y alegría',
      color: 'green'
    },
    {
      icon: FiGift,
      title: 'Paquetes Flexibles',
      description: 'Adaptados a tus necesidades y presupuesto',
      color: 'yellow'
    },
    {
      icon: FiHeart,
      title: 'Atención Personalizada',
      description: 'Cuidamos cada detalle de tu evento',
      color: 'pink'
    },
    {
      icon: FiStar,
      title: 'Experiencia Premium',
      description: 'Instalaciones y servicio de primera',
      color: 'blue'
    },
    {
      icon: FiUsers,
      title: 'Personal Profesional',
      description: 'Equipo experto y dedicado',
      color: 'purple'
    },
    {
      icon: FiMusic,
      title: 'Ambiente Festivo',
      description: 'Música y animación garantizada',
      color: 'red'
    }
  ];

  return (
    <motion.section
      ref={sectionRef}
      id="features"
      style={{ opacity, scale }}
      className="relative py-28 bg-gradient-to-b from-purple-900/90 via-indigo-950/90 to-purple-900/90 
        scroll-mt-20 overflow-hidden"
    >
      {/* Elementos decorativos mejorados */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {/* Gradientes de fondo */}
        <div className="absolute top-0 left-0 w-full h-32 bg-gradient-to-b from-purple-950/90 to-transparent backdrop-blur-sm"></div>
        <div className="absolute -top-20 -left-20 w-[28rem] h-[28rem] bg-gradient-to-r from-indigo-500/10 to-transparent rounded-full blur-[60px]"></div>
        <div className="absolute -bottom-40 -right-40 w-[30rem] h-[30rem] bg-gradient-to-t from-indigo-500/10 to-transparent rounded-full blur-[70px]"></div>
        
        {/* Círculos decorativos animados */}
        <motion.div 
          animate={{ 
            rotate: [0, 180],
            scale: [1, 1.05, 1],
            opacity: [0.05, 0.08, 0.05] 
          }}
          transition={{ 
            duration: 20, 
            repeat: Infinity,
            ease: "linear" 
          }}
          className="absolute top-1/3 left-1/4 w-[36rem] h-[36rem] border border-blue-500/5 rounded-full"
        ></motion.div>
        
        <motion.div 
          animate={{ 
            rotate: [180, 0],
            scale: [1, 1.03, 1],
            opacity: [0.03, 0.06, 0.03] 
          }}
          transition={{ 
            duration: 25, 
            repeat: Infinity,
            ease: "linear" 
          }}
          className="absolute bottom-1/4 right-1/3 w-[32rem] h-[32rem] border border-purple-500/5 rounded-full"
        ></motion.div>
        
        {/* Elementos decorativos aleatorios */}
        {[...Array(12)].map((_, index) => (
          <motion.div 
            key={`particle-${index}`}
            initial={{ opacity: 0.1 }}
            animate={{ 
              opacity: [0.1, 0.3, 0.1],
              scale: [1, 1.2, 1]
            }}
            transition={{ 
              duration: 2 + index % 3,
              repeat: Infinity,
              delay: index * 0.3,
              ease: "easeInOut"
            }}
            className="absolute rounded-full"
            style={{ 
              width: `${Math.random() * 3 + 1}px`,
              height: `${Math.random() * 3 + 1}px`,
              top: `${5 + Math.random() * 90}%`, 
              left: `${5 + Math.random() * 90}%`,
              backgroundColor: index % 3 === 0 ? 'rgba(147, 197, 253, 0.3)' : // blue
                             index % 3 === 1 ? 'rgba(196, 181, 253, 0.3)' : // purple
                             'rgba(252, 211, 77, 0.3)', // yellow
              filter: "blur(1px)"
            }}
          />
        ))}
      </div>
      
      <div className="container mx-auto px-6 relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true, margin: "-100px" }}
          transition={{ duration: 0.8 }}
          className="text-center mb-20"
        >
          {/* Badge mejorado - Ahora posicionado correctamente */}
          <div className="flex justify-center mb-3">
            <div className="inline-flex items-center gap-2 bg-gradient-to-r from-blue-500/10 via-purple-500/10 to-blue-500/10 
              backdrop-blur-sm px-5 py-2 rounded-full border border-blue-500/30">
              <FiAward className="text-blue-300" />
              <span className="text-[0.96em] font-medium text-blue-300 uppercase tracking-wider">
                Por Qué Elegirnos
              </span>
            </div>
          </div>
          
          {/* Título mejorado */}
          <h2 className="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6 font-funhouse relative inline-block">
            La Experiencia Tramboory
            <motion.span 
              className="absolute -bottom-2 left-0 w-full h-1 bg-gradient-to-r from-blue-300/0 via-blue-300/70 to-blue-300/0"
              animate={{ 
                scaleX: [0, 1, 1, 0],
                x: ["-100%", "0%", "0%", "100%"]
              }}
              transition={{ 
                duration: 4, 
                repeat: Infinity,
                ease: "easeInOut" 
              }}
            />
          </h2>
          
          {/* Descripción mejorada */}
          <motion.p 
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.3, duration: 0.8 }}
            className="text-xl text-gray-200 max-w-2xl mx-auto leading-relaxed"
          >
            Descubre por qué somos la mejor opción para tu celebración
            <FiStar className="inline ml-2 text-sm text-blue-300" />
          </motion.p>
        </motion.div>

        {/* Grid con efecto de brillo */}
        <div className="relative">
          {/* Efectos de iluminación */}
          <div className="absolute -inset-10 bg-gradient-to-tr from-blue-500/5 via-purple-500/0 to-purple-500/5 rounded-3xl blur-3xl -z-10"></div>
          
          {/* Grid de tarjetas */}
          <motion.div
            variants={containerVariants}
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, margin: "-50px" }}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto"
          >
          {features.map((feature, index) => (
            <FeatureCard key={index} feature={feature} index={index} />
          ))}
          </motion.div>
        </div>
      </div>
    </motion.section>
  );
};

export default FeaturesSection;\n\n
=== ./public/components/sections/FooterSection.jsx ===
import React, { useRef } from 'react'
import { Link } from 'react-router-dom'
import { motion, useScroll, useTransform } from 'framer-motion'
import { FiHeart, FiStar } from 'react-icons/fi'
import Logo from '@shared/assets/img/logo.webp'

/**
 * Sección de pie de página mejorada con efectos visuales sofisticados,
 * logo, derechos reservados y enlaces
 */
const FooterSection = () => {
  const currentYear = new Date().getFullYear();
  
  // Referencias para efectos de scroll
  const footerRef = useRef(null);
  const { scrollYProgress } = useScroll({
    target: footerRef,
    offset: ["start end", "end end"]
  });
  
  // Efectos de parallax basados en scroll
  const opacity = useTransform(scrollYProgress, [0, 0.7], [0.7, 1]);
  
  // Enlaces para el footer
  const footerLinks = [
    { to: "/appointments", label: "Reservaciones" },
    { to: "/about", label: "Acerca de" },
    { to: "/appointments", label: "Paquetes" }
  ];
  
  return (
    <motion.footer 
      ref={footerRef}
      style={{ opacity }}
      className="relative py-16 bg-gradient-to-b from-indigo-950/90 to-black/95 overflow-hidden"
    >
      {/* Borde superior decorativo */}
      <div className="absolute top-0 left-0 right-0 h-[1px] bg-gradient-to-r from-transparent via-indigo-500/30 to-transparent"></div>
      
      {/* Elementos decorativos */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {/* Gradientes decorativos */}
        <div className="absolute -top-20 -left-20 w-60 h-60 bg-gradient-to-r from-indigo-500/5 to-transparent rounded-full blur-3xl"></div>
        <div className="absolute -bottom-40 -right-40 w-80 h-80 bg-gradient-to-t from-purple-500/5 to-transparent rounded-full blur-3xl"></div>
        
        {/* Pequeñas partículas decorativas */}
        {[...Array(8)].map((_, index) => (
          <motion.div 
            key={`particle-${index}`}
            initial={{ opacity: 0.1 }}
            animate={{ 
              opacity: [0.1, 0.3, 0.1],
              y: [0, -10, 0]
            }}
            transition={{ 
              duration: 3 + index % 5,
              repeat: Infinity,
              delay: index * 0.5,
              ease: "easeInOut"
            }}
            className="absolute rounded-full"
            style={{ 
              width: `${Math.random() * 2 + 1}px`,
              height: `${Math.random() * 2 + 1}px`,
              bottom: `${20 + Math.random() * 60}%`, 
              left: `${10 + Math.random() * 80}%`,
              backgroundColor: 'rgba(165, 180, 252, 0.3)', // indigo
              filter: "blur(1px)"
            }}
          />
        ))}
        
        {/* Pequeñas estrellas decorativas */}
        {[...Array(2)].map((_, index) => (
          <motion.div
            key={`star-${index}`}
            initial={{ opacity: 0 }}
            animate={{ 
              opacity: [0.1, 0.2, 0.1],
              rotate: [0, 10, -10, 0]
            }}
            transition={{ 
              duration: 4,
              repeat: Infinity,
              delay: index * 2
            }}
            className="absolute text-indigo-300/10"
            style={{
              fontSize: `${12 + index * 2}px`,
              bottom: `${20 + index * 30}%`,
              left: `${20 + index * 60}%`,
            }}
          >
            <FiStar />
          </motion.div>
        ))}
      </div>
      
      <div className="container mx-auto px-6 relative z-10">
        <div className="flex flex-col md:flex-row justify-between items-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="mb-10 md:mb-0 relative"
          >
            {/* Efecto de brillo sutil al logo */}
            <div className="absolute -inset-3 bg-gradient-to-r from-indigo-500/10 to-transparent rounded-full blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            
            <Link to="/" className="flex items-center space-x-4 group relative">
              <div className="relative overflow-hidden rounded-full p-1">
                <div className="absolute inset-0 bg-gradient-to-r from-indigo-500/20 via-purple-500/20 to-indigo-500/20 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                <motion.div
                  whileHover={{ scale: 1.05, rotate: 5 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <img src={Logo} alt="Tramboory" className="h-16 w-auto relative z-10" />
                </motion.div>
              </div>
              
              <div className="text-left hidden sm:block">
                <motion.p 
                  className="text-white font-bold text-xl font-funhouse"
                  whileHover={{ scale: 1.05 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  Tramboory
                </motion.p>
                <p className="text-indigo-300/90 text-sm">
                  Momentos inolvidables 
                  <FiHeart className="inline-block ml-1 text-xs text-pink-400/70" />
                </p>
              </div>
            </Link>
          </motion.div>
          
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="text-center md:text-right"
          >
            <p className="text-indigo-200/80 text-sm">
              © {currentYear} Tramboory. Todos los derechos
              reservados.
            </p>
            
            <div className="mt-4 flex justify-center md:justify-end space-x-6">
              {footerLinks.map((link, index) => (
                <motion.div
                  key={index}
                  whileHover={{ y: -3 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <Link 
                    to={link.to} 
                    className="relative px-2 py-1 text-indigo-300/90 hover:text-white transition-colors duration-300 group"
                  >
                    {/* Línea decorativa que aparece en hover */}
                    <span className="absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-indigo-400/0 via-indigo-400/70 to-indigo-400/0 group-hover:w-full transition-all duration-300"></span>
                    {link.label}
                  </Link>
                </motion.div>
              ))}
            </div>
          </motion.div>
        </div>
      </div>
    </motion.footer>
  );
};

export default FooterSection;\n\n
=== ./public/components/sections/GallerySection.jsx ===
import React, { useRef } from 'react'
import { motion, useScroll, useTransform } from 'framer-motion'
import { FiInstagram, FiImage, FiHeart, FiCamera } from 'react-icons/fi'
import CloudinaryCarousel from '@shared/components/cloudinary/CloudinaryCarousel'

/**
 * Sección de galería mejorada que muestra imágenes del carousel
 * con efectos visuales sofisticados y estética refinada
 */
const GallerySection = ({ carouselImages }) => {
  // Referencias para efectos de scroll
  const sectionRef = useRef(null);
  const { scrollYProgress } = useScroll({
    target: sectionRef,
    offset: ["start end", "end start"]
  });
  
  // Efectos de parallax basados en scroll
  const opacity = useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [0.8, 1, 1, 0.8]);
  const scale = useTransform(scrollYProgress, [0, 0.5, 1], [0.98, 1, 0.98]);
  const yParallax = useTransform(scrollYProgress, [0, 1], [0, -30]);
  
  return (
    <motion.section
      ref={sectionRef}
      id="gallery"
      style={{ opacity, scale }}
      className="relative py-28 bg-gradient-to-b from-purple-900/90 via-indigo-950/90 to-purple-900/90 
        scroll-mt-20 overflow-hidden"
    >
      {/* Elementos decorativos mejorados */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {/* Gradientes de fondo mejorados */}
        <div className="absolute top-0 left-0 w-full h-32 bg-gradient-to-b from-purple-950/90 to-transparent backdrop-blur-sm"></div>
        <div className="absolute bottom-0 left-0 w-full h-32 bg-gradient-to-t from-purple-950/90 to-transparent backdrop-blur-sm"></div>
        
        {/* Círculos y formas decorativas */}
        <div className="absolute -top-20 -right-20 w-[28rem] h-[28rem] bg-gradient-to-b from-pink-500/10 to-transparent rounded-full blur-[60px]"></div>
        <div className="absolute -bottom-40 -left-40 w-[30rem] h-[30rem] bg-gradient-to-t from-purple-500/10 to-transparent rounded-full blur-[70px]"></div>
        
        {/* Elementos circulares animados */}
        <motion.div 
          animate={{ 
            rotate: [0, 360],
            opacity: [0.03, 0.06, 0.03] 
          }}
          transition={{ 
            duration: 40, 
            repeat: Infinity,
            ease: "linear" 
          }}
          className="absolute top-1/3 right-1/4 w-[35rem] h-[35rem] border border-pink-500/5 rounded-full"
        ></motion.div>
        
        {/* Pequeñas partículas flotantes */}
        {[...Array(15)].map((_, index) => (
          <motion.div 
            key={`floating-${index}`}
            initial={{ opacity: 0.1 }}
            animate={{ 
              y: [0, -10, 0],
              opacity: [0.1, 0.3, 0.1],
              scale: [1, 1.2, 1]
            }}
            transition={{ 
              duration: 3 + index % 5,
              repeat: Infinity,
              delay: index * 0.4,
              ease: "easeInOut"
            }}
            className="absolute rounded-full"
            style={{ 
              width: `${Math.random() * 3 + 1}px`,
              height: `${Math.random() * 3 + 1}px`,
              top: `${5 + Math.random() * 90}%`, 
              left: `${5 + Math.random() * 90}%`,
              backgroundColor: index % 3 === 0 ? 'rgba(244, 114, 182, 0.3)' : // pink
                               index % 3 === 1 ? 'rgba(196, 181, 253, 0.3)' : // purple
                               'rgba(255, 255, 255, 0.3)', // white
              filter: "blur(1px)"
            }}
          />
        ))}
        
        {/* Pequeños iconos decorativos */}
        {[FiCamera, FiHeart].map((Icon, index) => (
          <motion.div
            key={`icon-${index}`}
            initial={{ opacity: 0 }}
            animate={{ 
              opacity: [0.1, 0.2, 0.1],
              rotate: [0, 10, -10, 0]
            }}
            transition={{ 
              duration: 4,
              repeat: Infinity,
              delay: index * 2
            }}
            className="absolute text-pink-300/20"
            style={{
              fontSize: `${index === 0 ? 30 : 24}px`,
              top: `${index === 0 ? 15 : 70}%`,
              left: `${index === 0 ? 80 : 15}%`,
            }}
          >
            <Icon />
          </motion.div>
        ))}
      </div>
      
      <div className="container mx-auto px-6 relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true, margin: "-100px" }}
          transition={{ duration: 0.8 }}
          className="text-center mb-20"
        >
          {/* Badge mejorado - Ahora posicionado correctamente */}
          <div className="flex justify-center mb-3">
            <div className="inline-flex items-center gap-2 bg-gradient-to-r from-pink-500/10 via-purple-500/10 to-pink-500/10 
              backdrop-blur-sm px-5 py-2 rounded-full border border-pink-500/30">
              <FiImage className="text-pink-300" />
              <span className="text-[0.96em] font-medium text-pink-300 uppercase tracking-wider">
                Momentos Especiales
              </span>
            </div>
          </div>
          
          {/* Título mejorado */}
          <h2 className="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6 font-funhouse relative inline-block">
            Nuestra Galería
            <motion.span 
              className="absolute -bottom-2 left-0 w-full h-1 bg-gradient-to-r from-pink-300/0 via-pink-300/70 to-pink-300/0"
              animate={{ 
                scaleX: [0, 1, 1, 0],
                x: ["-100%", "0%", "0%", "100%"]
              }}
              transition={{ 
                duration: 4, 
                repeat: Infinity,
                ease: "easeInOut" 
              }}
            />
          </h2>
          
          {/* Descripción mejorada */}
          <motion.p 
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.3, duration: 0.8 }}
            className="text-xl text-gray-200 max-w-2xl mx-auto leading-relaxed"
          >
            Momentos inolvidables capturados en Tramboory. ¡Descubre la diversión que te espera!
          </motion.p>
        </motion.div>

        {/* Carrusel mejorado con efectos visuales */}
        <motion.div
          style={{ y: yParallax }}
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
          viewport={{ once: true }}
          className="relative mb-16"
        >
          {/* Marco decorativo alrededor del carrusel */}
          <div className="absolute -inset-1.5 bg-gradient-to-tr from-pink-500/10 via-purple-500/5 to-pink-500/10 rounded-2xl blur-sm"></div>
          <div className="absolute -inset-0.5 bg-gradient-to-tr from-pink-500/20 via-transparent to-pink-500/20 rounded-2xl"></div>
          
          {/* Decoraciones en las esquinas */}
          <div className="absolute -top-1.5 -left-1.5 w-8 h-8 border-t-2 border-l-2 border-pink-400/30 rounded-tl-lg z-20"></div>
          <div className="absolute -top-1.5 -right-1.5 w-8 h-8 border-t-2 border-r-2 border-pink-400/30 rounded-tr-lg z-20"></div>
          <div className="absolute -bottom-1.5 -left-1.5 w-8 h-8 border-b-2 border-l-2 border-pink-400/30 rounded-bl-lg z-20"></div>
          <div className="absolute -bottom-1.5 -right-1.5 w-8 h-8 border-b-2 border-r-2 border-pink-400/30 rounded-br-lg z-20"></div>
          
          <div className="rounded-2xl overflow-hidden shadow-2xl shadow-purple-900/20 border border-pink-500/20 backdrop-blur-sm relative">
            {/* Capa de overlay para efecto de hover */}
            <div className="absolute inset-0 bg-gradient-to-b from-pink-600/5 via-transparent to-pink-600/5 z-10 opacity-0 
              group-hover:opacity-100 transition-opacity duration-500"></div>
            
            {/* Carrusel con imágenes */}
            <CloudinaryCarousel 
              height="520px"
              autoPlaySpeed={2500}
              imageWidth={1.6}
              images={carouselImages}
            />
          </div>
        </motion.div>

        {/* Botón de Instagram mejorado */}
        <div className="flex justify-center">
          <motion.div
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="relative group"
          >
            {/* Efecto de brillo en hover */}
            <span className="absolute -inset-1 bg-gradient-to-r from-pink-500/30 to-purple-500/30 rounded-xl blur-md 
              opacity-0 group-hover:opacity-100 transition-opacity duration-300"></span>
            
            <motion.a
              href="https://www.instagram.com/tramboory/"
              target="_blank"
              rel="noopener noreferrer"
              className="relative flex items-center px-8 py-4 bg-gradient-to-r from-pink-500/20 to-purple-500/20 
                text-white rounded-xl font-bold text-lg border border-pink-500/30 
                group-hover:border-pink-400/50 backdrop-blur-md
                transition-all duration-300 shadow-lg"
            >
              <FiInstagram className="mr-3 text-pink-400 text-xl group-hover:text-pink-300 transition-colors duration-300" />
              <span className="group-hover:text-pink-200 transition-colors duration-300">Ver más en Instagram</span>
            </motion.a>
          </motion.div>
        </div>
      </div>
    </motion.section>
  );
};

export default GallerySection;\n\n
=== ./public/components/sections/HeroSection.jsx ===
﻿
import React, { useEffect, useRef } from 'react'
import { Link } from 'react-router-dom'
import { motion, useAnimation, useScroll, useTransform } from 'framer-motion'
import { FiCalendar, FiGift, FiStar } from 'react-icons/fi'
import ScrollIndicator from '@shared/components/ScrollIndicator'

/**
 * SecciÃ³n hero principal con mensaje de bienvenida, tÃ­tulo y CTA
 * Mejorada con efectos visuales avanzados
 */
const HeroSection = ({ sectionRefs }) => {
  const controls = useAnimation();
  const { scrollY } = useScroll();
  const decorRef = useRef(null);
  
  // Efecto parallax avanzado basado en scroll
  const yParallax = useTransform(scrollY, [0, 500], [0, -80]);
  const opacityParallax = useTransform(scrollY, [0, 300], [1, 0]);
  
  useEffect(() => {
    // Animar la apariciÃ³n secuencial de los elementos decorativos
    controls.start((i) => ({
      opacity: 1,
      scale: 1,
      transition: { delay: 0.3 * i, duration: 1.2, ease: "easeOut" }
    }));
  }, [controls]);

  return (
    <section
      ref={sectionRefs.hero}
      className="relative min-h-screen flex items-center justify-center overflow-hidden"
    >
      {/* Elementos decorativos mejorados del hero */}
      <div ref={decorRef} className="absolute inset-0 overflow-hidden pointer-events-none">
        {/* Gradientes circulares con animaciÃ³n */}
        <motion.div 
          initial={{ opacity: 0, scale: 0.8 }}
          animate={controls}
          custom={0}
          className="absolute -top-40 -right-40 w-[24rem] h-[24rem] bg-gradient-to-b from-purple-500/10 to-transparent rounded-full blur-[50px]"
        />
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={controls}
          custom={1}
          className="absolute top-1/3 left-10 w-32 h-32 bg-gradient-to-r from-yellow-400/10 to-transparent rounded-full blur-[30px]"
        />
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={controls}
          custom={2}
          className="absolute bottom-20 right-20 w-60 h-60 bg-gradient-to-t from-indigo-500/10 to-transparent rounded-full blur-[40px]"
        />
      </div>
      
      {/* Contenido principal con parallax efect */}
      <motion.div
        ref={sectionRefs.content}
        style={{ y: yParallax, opacity: opacityParallax }}
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 1 }}
        className="container mx-auto px-6 pt-24 pb-32 text-center hero-content relative z-10"
      >
        <div className="max-w-5xl mx-auto">
          {/* Badge mejorado */}
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="mb-8 inline-block"
          >
            <span className="group relative px-5 py-2 rounded-full text-sm font-medium 
              bg-gradient-to-r from-purple-500/20 via-indigo-500/20 to-purple-500/20 
              text-yellow-300 border border-purple-500/30 backdrop-blur-sm 
              hover:border-yellow-400/50 transition-all duration-300 inline-flex items-center gap-2">
              <FiStar className="text-yellow-300 animate-pulse" />
              <span>El mejor salÃ³n de fiestas infantiles en Zapopan</span>
              <motion.span 
                className="absolute inset-0 -z-10 bg-gradient-to-r from-yellow-400/0 via-yellow-400/10 to-yellow-400/0 rounded-full"
                animate={{ 
                  backgroundPosition: ['0% 50%', '100% 50%', '0% 50%']
                }}
                transition={{ 
                  duration: 5, 
                  repeat: Infinity,
                  ease: "linear" 
                }}
              />
            </span>
          </motion.div>
          
          {/* TÃ­tulo principal mejorado */}
          <motion.h1 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 1, delay: 0.3 }}
            className="text-6xl md:text-8xl lg:text-9xl font-bold text-white mb-8 font-funhouse leading-tight"
          >
            <span className="block relative">
              Celebra con{' '}
              <span className="relative inline-block">
                <span className="relative z-10 text-gradient bg-clip-text text-transparent
                  bg-gradient-to-r from-yellow-300 via-yellow-400 to-yellow-300 
                  transform hover:scale-105 transition-transform duration-500">
                  Tramboory
                </span>
                <motion.span 
                  className="absolute -inset-1 -z-10 bg-gradient-to-r from-yellow-400/0 via-yellow-400/20 to-yellow-400/0 rounded-2xl blur-xl"
                  animate={{ 
                    backgroundPosition: ['0% 50%', '100% 50%', '0% 50%']
                  }}
                  transition={{ 
                    duration: 8, 
                    repeat: Infinity,
                    ease: "linear" 
                  }}
                />
              </span>
            </span>
          </motion.h1>
          
          {/* SubtÃ­tulo mejorado */}
          <motion.p 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 1, delay: 0.5 }}
            className="text-lg md:text-xl text-gray-200 mb-14 max-w-3xl mx-auto leading-relaxed"
          >
            Tu salÃ³n de eventos infantiles en Zapopan con experiencias diseÃ±adas
            para crear recuerdos inolvidables en el cumpleaÃ±os de tus pequeÃ±os.
          </motion.p>
          
          {/* Botones CTA mejorados */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 1, delay: 0.7 }}
            className="flex justify-center w-full"
          >
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="relative group"
            >
              <span className="absolute -inset-1 bg-gradient-to-r from-yellow-400/80 to-yellow-500/80 rounded-xl blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-300"></span>
              <Link
                to="/appointments"
                className="relative px-10 py-5 bg-gradient-to-r from-yellow-400 to-yellow-500
                  text-purple-900 rounded-xl font-extrabold text-xl shadow-2xl
                  hover:shadow-yellow-400/40 hover:from-yellow-500 hover:to-yellow-600
                  transition-all duration-300 flex items-center group-hover:text-purple-950"
              >
                <FiCalendar className="mr-2" />
                <span>Reserva tu fiesta</span>
              </Link>
            </motion.div>
          </motion.div>
        </div>
      </motion.div>

      {/* Scroll Indicator mejorado */}
      <div className="absolute bottom-6 left-0 right-0 z-10 flex justify-center w-full">
        <ScrollIndicator targetId="services" />
      </div>
    </section>
  );
};

export default HeroSection;
\n\n
=== ./public/components/sections/PromotionsSection.jsx ===
import React, { useRef } from 'react'
import { Link } from 'react-router-dom'
import { motion, useScroll, useTransform } from 'framer-motion'
import { FiArrowRight, FiStar, FiGift } from 'react-icons/fi'
import CloudinaryCarousel from '@shared/components/cloudinary/CloudinaryCarousel'

/**
 * Sección de promociones del mes que se muestra condicionalmente
 * con efectos visuales mejorados para un aspecto ultra estético
 */
const PromotionsSection = ({ promocionesImages }) => {
  // Referencias para efectos de scroll
  const sectionRef = useRef(null);
  
  // Si no hay imágenes de promociones, no renderizar la sección
  if (!promocionesImages || promocionesImages.length === 0) {
    return null;
  }
  
  // Configurar efectos de scroll
  const { scrollYProgress } = useScroll({
    target: sectionRef,
    offset: ["start end", "end start"]
  });
  
  // Transformar valores basados en el scroll
  const opacity = useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [0, 1, 1, 0]);
  const scale = useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [0.95, 1, 1, 0.95]);

  // Variantes para animaciones secuenciales
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.2
      }
    }
  };
  
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { duration: 0.8, ease: "easeOut" }
    }
  };

  return (
    <motion.section
      ref={sectionRef}
      id="promociones"
      style={{ opacity, scale }}
      className="relative py-24 bg-gradient-to-br from-purple-800/90 via-indigo-900/90 to-purple-900/90 
        scroll-mt-20 backdrop-blur-md overflow-hidden"
    >
      {/* Mejora de los efectos de transición entre secciones */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-0 left-0 w-full h-32 bg-gradient-to-b from-purple-950/90 to-transparent backdrop-blur-sm"></div>
        <div className="absolute bottom-0 left-0 w-full h-32 bg-gradient-to-t from-purple-950/90 to-transparent backdrop-blur-sm"></div>
        
        {/* Elementos decorativos adicionales */}
        <motion.div 
          animate={{ 
            rotate: [0, 360],
            opacity: [0.1, 0.2, 0.1] 
          }}
          transition={{ 
            duration: 15, 
            repeat: Infinity,
            ease: "linear" 
          }}
          className="absolute -top-40 -left-40 w-80 h-80 border border-yellow-400/10 rounded-full"
        />
        <motion.div 
          animate={{ 
            rotate: [0, -360],
            opacity: [0.05, 0.1, 0.05] 
          }}
          transition={{ 
            duration: 20, 
            repeat: Infinity,
            ease: "linear" 
          }}
          className="absolute -bottom-60 -right-60 w-[32rem] h-[32rem] border border-purple-400/10 rounded-full"
        />
        
        {/* Estrellas decorativas */}
        {[...Array(6)].map((_, index) => (
          <motion.div 
            key={index}
            initial={{ opacity: 0.2 }}
            animate={{ 
              opacity: [0.2, 0.8, 0.2],
              scale: [1, 1.2, 1]
            }}
            transition={{ 
              duration: 2 + index,
              repeat: Infinity,
              delay: index * 0.5,
              ease: "easeInOut"
            }}
            className="absolute bg-yellow-300/20 rounded-full w-1 h-1"
            style={{ 
              top: `${15 + index * 12}%`, 
              left: `${5 + index * 15}%`,
              filter: "blur(1px)"
            }}
          />
        ))}
      </div>
      
      <motion.div 
        className="container mx-auto px-6 relative z-10"
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, margin: "-100px" }}
        variants={containerVariants}
      >
        <motion.div
          variants={itemVariants}
          className="text-center mb-14"
        >
          <div className="flex justify-center mb-2">
            <div className="inline-flex items-center gap-2 bg-gradient-to-r from-yellow-500/10 via-pink-500/10 to-yellow-500/10 
              backdrop-blur-sm px-5 py-2 rounded-full border border-yellow-500/30">
              <FiGift className="text-yellow-300 animate-pulse" />
              <span className="text-[0.98em] font-medium text-yellow-300 uppercase tracking-wide">
                Ofertas Especiales
              </span>
            </div>
          </div>
          
          <h2 className="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-5 font-funhouse relative inline-block">
            ¡Promociones del Mes!
            <motion.span 
              className="absolute -bottom-1 left-0 w-full h-1 bg-gradient-to-r from-yellow-300/0 via-yellow-300/70 to-yellow-300/0"
              animate={{ 
                scaleX: [0, 1, 1, 0],
                x: ["-100%", "0%", "0%", "100%"]
              }}
              transition={{ 
                duration: 4, 
                repeat: Infinity,
                ease: "easeInOut" 
              }}
            />
          </h2>
          
          <motion.p 
            className="text-xl text-yellow-200/90 max-w-2xl mx-auto"
            variants={itemVariants}
          >
            No te pierdas nuestras ofertas especiales por tiempo limitado
            <FiStar className="inline ml-2 text-sm text-yellow-300 animate-pulse" />
          </motion.p>
        </motion.div>

        <motion.div
          variants={itemVariants}
          className="mb-12 relative"
        >
          {/* Efecto decorativo en las esquinas del carrusel */}
          <div className="absolute -top-1 -left-1 w-12 h-12 border-t-2 border-l-2 border-yellow-400/30 rounded-tl-xl z-20"></div>
          <div className="absolute -top-1 -right-1 w-12 h-12 border-t-2 border-r-2 border-yellow-400/30 rounded-tr-xl z-20"></div>
          <div className="absolute -bottom-1 -left-1 w-12 h-12 border-b-2 border-l-2 border-yellow-400/30 rounded-bl-xl z-20"></div>
          <div className="absolute -bottom-1 -right-1 w-12 h-12 border-b-2 border-r-2 border-yellow-400/30 rounded-br-xl z-20"></div>
          
          {/* Carrusel con efectos mejorados */}
          <div className="rounded-2xl overflow-hidden shadow-[0_0_25px_rgba(147,51,234,0.3)] 
            backdrop-blur-lg border border-white/10 relative group">
            <div className="absolute inset-0 bg-gradient-to-b from-purple-600/10 via-transparent to-purple-600/10 z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            <CloudinaryCarousel 
              height="480px"
              autoPlaySpeed={3000}
              imageWidth={1.2}
              images={promocionesImages}
            />
          </div>
        </motion.div>

        <motion.div 
          variants={itemVariants}
          className="flex justify-center"
        >
          <motion.div
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="relative group"
          >
            {/* Efecto de brillo en hover */}
            <span className="absolute -inset-1 bg-gradient-to-r from-yellow-400/70 to-yellow-500/70 rounded-xl blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-300"></span>
            <Link
              to="/reservations"
              className="relative px-8 py-4 bg-gradient-to-r from-yellow-400 to-yellow-500
                text-purple-900 rounded-xl font-bold text-lg shadow-xl
                hover:shadow-yellow-400/50 hover:from-yellow-500 hover:to-yellow-600 
                transition-all duration-300 group flex items-center"
            >
              <span>¡Reserva Ahora!</span>
              <FiArrowRight className="ml-2 group-hover:translate-x-2 transition-transform duration-300" />
            </Link>
          </motion.div>
        </motion.div>
      </motion.div>
    </motion.section>
  );
};

export default PromotionsSection;\n\n
=== ./public/components/sections/ReservationStepsSection.jsx ===
import React, { useRef } from 'react'
import { motion, useScroll, useTransform } from 'framer-motion'
import { FiCalendar, FiPackage, FiCheck, FiZap, FiArrowRight } from 'react-icons/fi'

/**
 * Sección que muestra los pasos para realizar una reserva
 * con efectos visuales mejorados para una experiencia estética elevada
 */
const ReservationStepsSection = () => {
  // Referencia para efectos de scroll
  const sectionRef = useRef(null);
  const { scrollYProgress } = useScroll({
    target: sectionRef,
    offset: ["start end", "end start"]
  });
  
  // Efectos de parallax basados en scroll
  const opacity = useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [0.6, 1, 1, 0.6]);
  const scale = useTransform(scrollYProgress, [0, 0.5, 1], [0.98, 1, 0.98]);
  
  // Variantes para animaciones secuenciales
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.15,
        delayChildren: 0.3
      }
    }
  };
  
  const itemVariants = {
    hidden: { opacity: 0, y: 30 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { duration: 0.7, ease: "easeOut" }
    }
  };
  
  const reservationSteps = [
    {
      icon: FiCalendar,
      title: "Elige tu fecha",
      description: "Selecciona el día y la hora que mejor te funcionen para tu evento"
    },
    {
      icon: FiPackage,
      title: "Selecciona un paquete",
      description: "Escoge entre nuestras opciones diseñadas para diferentes necesidades"
    },
    {
      icon: FiCheck,
      title: "Personaliza tu experiencia",
      description: "Agrega servicios adicionales para hacer tu evento único"
    },
    {
      icon: FiZap,
      title: "¡Confirma y listo!",
      description: "Realiza tu pago y prepárate para disfrutar de un evento increíble"
    }
  ];

  return (
    <motion.section 
      ref={sectionRef}
      style={{ opacity, scale }}
      className="relative py-28 bg-gradient-to-b from-purple-900/90 via-indigo-900/90 to-purple-900/90 overflow-hidden"
    >
      {/* Elementos decorativos */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -left-40 w-80 h-80 bg-gradient-to-b from-indigo-500/5 to-transparent rounded-full blur-3xl"></div>
        <div className="absolute -bottom-60 -right-60 w-[32rem] h-[32rem] bg-gradient-to-t from-purple-500/5 to-transparent rounded-full blur-3xl"></div>
        
        {/* Líneas decorativas */}
        <motion.div 
          animate={{ 
            opacity: [0.05, 0.1, 0.05],
            rotate: [0, 180]
          }}
          transition={{ 
            duration: 15, 
            repeat: Infinity,
            ease: "linear" 
          }}
          className="absolute top-1/4 left-1/4 w-[40rem] h-[40rem] border border-indigo-500/5 rounded-full"
        ></motion.div>
        
        {/* Puntos decorativos */}
        {[...Array(8)].map((_, index) => (
          <motion.div 
            key={`dot-${index}`}
            initial={{ opacity: 0.2 }}
            animate={{ 
              opacity: [0.2, 0.5, 0.2],
              scale: [1, 1.1, 1]
            }}
            transition={{ 
              duration: 3 + index,
              repeat: Infinity,
              delay: index * 0.3,
              ease: "easeInOut"
            }}
            className="absolute bg-indigo-300/30 rounded-full w-1.5 h-1.5"
            style={{ 
              top: `${15 + index * 10}%`, 
              left: `${10 + index * 12}%`,
              filter: "blur(1px)"
            }}
          />
        ))}
      </div>
      
      <div className="container mx-auto px-6 relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true, margin: "-100px" }}
          transition={{ duration: 0.8 }}
          className="text-center mb-20"
        >
          <div className="flex justify-center mb-2">
            <div className="inline-flex items-center gap-2 bg-gradient-to-r from-indigo-500/10 via-indigo-600/10 to-indigo-500/10 
              backdrop-blur-sm px-5 py-2 rounded-full border border-indigo-500/30">
              <span className="text-[0.98em] font-medium text-indigo-300 uppercase tracking-wider">
                Proceso Simplificado
              </span>
            </div>
          </div>
          
          <h2 className="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6 font-funhouse relative inline-block">
            ¿Cómo Reservar?
            <motion.span 
              className="absolute -bottom-2 left-0 w-full h-1 bg-gradient-to-r from-indigo-300/0 via-indigo-300/70 to-indigo-300/0"
              animate={{ 
                scaleX: [0, 1, 1, 0],
                x: ["-100%", "0%", "0%", "100%"]
              }}
              transition={{ 
                duration: 4, 
                repeat: Infinity,
                ease: "easeInOut" 
              }}
            />
          </h2>
          
          <motion.p 
            className="text-xl text-indigo-200/90 max-w-2xl mx-auto leading-relaxed"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.2, duration: 0.8 }}
          >
            Solo 4 pasos sencillos te separan de tu evento perfecto
          </motion.p>
        </motion.div>

        <motion.div 
          variants={containerVariants}
          initial="hidden"
          whileInView="visible"
          viewport={{ once: true, margin: "-50px" }}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-6xl mx-auto relative"
        >
          {/* Línea conectora principal para desktop */}
          <div className="hidden lg:block absolute top-[4.5rem] left-[4.5rem] right-[4.5rem] h-0.5 bg-gradient-to-r from-indigo-500/10 via-indigo-500/30 to-indigo-500/10"></div>
          
          {reservationSteps.map((step, index) => (
            <motion.div
              key={index}
              variants={itemVariants}
              className="relative z-10"
            >
              {/* Tarjeta con glassmorphism y efectos hover */}
              <motion.div 
                whileHover={{ y: -5, boxShadow: "0 15px 30px -10px rgba(79, 70, 229, 0.15)" }}
                className="flex flex-col items-center text-center p-6 rounded-2xl 
                  bg-gradient-to-br from-indigo-700/10 to-indigo-900/30
                  backdrop-blur-md border border-indigo-500/20 
                  transition-all duration-300 h-full group"
              >
                {/* Icono con efecto de brillo */}
                <div className="relative">
                  <div className="absolute -inset-3 bg-indigo-500/20 rounded-full blur-xl opacity-0 group-hover:opacity-70 transition-opacity duration-500"></div>
                  <div className="flex items-center justify-center w-16 h-16 rounded-full 
                    bg-gradient-to-br from-indigo-500/30 to-indigo-700/30 
                    border border-indigo-500/40 mb-5 relative z-10
                    group-hover:border-indigo-400/50 transition-all duration-300"
                  >
                    <step.icon className="text-2xl text-yellow-300 group-hover:text-yellow-200" />
                  </div>
                </div>
                
                {/* Número del paso con diseño mejorado */}
                <div className="absolute -top-3 -left-3 w-8 h-8 rounded-full
                  bg-gradient-to-br from-yellow-400/30 to-yellow-600/30 
                  backdrop-blur-md border border-yellow-400/30
                  flex items-center justify-center z-20"
                >
                  <span className="text-yellow-300 text-sm font-bold">{index + 1}</span>
                </div>
                
                {/* Flecha entre pasos (visible en móvil y tablet) */}
                {index < reservationSteps.length - 1 && (
                  <div className="absolute -right-4 top-1/2 transform -translate-y-1/2 lg:hidden z-10">
                    <FiArrowRight className="text-indigo-400/60" />
                  </div>
                )}
                
                {/* Contenido del paso */}
                <h3 className="text-xl font-bold text-white mb-3 group-hover:text-indigo-200 transition-colors">
                  {step.title}
                </h3>
                <p className="text-indigo-200/90 leading-relaxed">
                  {step.description}
                </p>
              </motion.div>
              
              {/* Punto decorativo en la línea conectora (solo desktop) */}
              {index < reservationSteps.length && (
                <motion.div 
                  className="hidden lg:flex absolute top-[4.5rem] left-1/2 transform -translate-x-1/2 z-20
                    w-4 h-4 rounded-full bg-indigo-600/40 border border-indigo-400/60
                    items-center justify-center"
                  animate={{ 
                    scale: [1, 1.2, 1],
                    opacity: [0.7, 1, 0.7] 
                  }}
                  transition={{ 
                    duration: 2, 
                    repeat: Infinity,
                    delay: index * 0.3
                  }}
                >
                  <div className="w-1.5 h-1.5 rounded-full bg-yellow-300"></div>
                </motion.div>
              )}
            </motion.div>
          ))}
        </motion.div>
      </div>
    </motion.section>
  );
};

export default ReservationStepsSection;\n\n
=== ./public/components/sections/ServicesSection.jsx ===
import React, { useRef } from 'react'
import { motion, useScroll, useTransform } from 'framer-motion'
import { FiPackage, FiStar } from 'react-icons/fi'
import ServiceCard from '../ui/ServiceCard'

/**
 * Sección mejorada que muestra los paquetes de servicios disponibles
 * con efectos visuales sofisticados y animaciones avanzadas
 */
const ServicesSection = ({ services }) => {
  // Referencias para efectos de scroll
  const sectionRef = useRef(null);
  const { scrollYProgress } = useScroll({
    target: sectionRef,
    offset: ["start end", "end start"]
  });
  
  // Efectos de parallax basados en scroll
  const opacity = useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [0.7, 1, 1, 0.7]);
  const scale = useTransform(scrollYProgress, [0, 0.5, 1], [0.97, 1, 0.97]);
  
  // Variantes para animaciones secuenciales
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.15,
        delayChildren: 0.3
      }
    }
  };
  
  return (
    <motion.section
      ref={sectionRef}
      id="services"
      style={{ opacity, scale }}
      className="relative py-28 bg-gradient-to-b from-purple-900/90 via-indigo-950/90 to-purple-900/90
        backdrop-blur-lg scroll-mt-20 overflow-hidden"
    >
      {/* Elementos decorativos mejorados */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {/* Gradientes de fondo mejorados */}
        <div className="absolute -top-40 -right-40 w-[30rem] h-[30rem] bg-gradient-to-b from-yellow-500/10 to-transparent rounded-full blur-[80px]"></div>
        <div className="absolute -bottom-20 -left-20 w-[26rem] h-[26rem] bg-gradient-to-t from-purple-500/10 to-transparent rounded-full blur-[80px]"></div>
        
        {/* Círculos decorativos animados */}
        <motion.div 
          animate={{ 
            rotate: [0, 360],
            opacity: [0.05, 0.1, 0.05] 
          }}
          transition={{ 
            duration: 25, 
            repeat: Infinity,
            ease: "linear" 
          }}
          className="absolute top-1/4 right-1/4 w-[40rem] h-[40rem] border border-yellow-500/5 rounded-full"
        ></motion.div>
        
        <motion.div 
          animate={{ 
            rotate: [0, -360],
            opacity: [0.03, 0.08, 0.03] 
          }}
          transition={{ 
            duration: 30, 
            repeat: Infinity,
            ease: "linear" 
          }}
          className="absolute bottom-1/3 left-1/4 w-[35rem] h-[35rem] border border-purple-500/5 rounded-full"
        ></motion.div>
        
        {/* Puntos decorativos */}
        {[...Array(10)].map((_, index) => (
          <motion.div 
            key={`dot-${index}`}
            initial={{ opacity: 0.2 }}
            animate={{ 
              opacity: [0.2, 0.6, 0.2],
              scale: [1, 1.2, 1]
            }}
            transition={{ 
              duration: 3 + index % 4,
              repeat: Infinity,
              delay: index * 0.4,
              ease: "easeInOut"
            }}
            className={`absolute bg-${index % 2 === 0 ? 'yellow' : 'purple'}-300/20 rounded-full w-2 h-2`}
            style={{ 
              top: `${10 + index * 8}%`, 
              left: `${5 + index * 9}%`,
              filter: "blur(1px)"
            }}
          />
        ))}
      </div>
      
      <div className="container mx-auto px-6 relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true, margin: "-100px" }}
          transition={{ duration: 0.8 }}
          className="text-center mb-20"
        >
          {/* Badge mejorado - Ahora posicionado correctamente */}
          <div className="flex justify-center mb-3">
            <div className="inline-flex items-center gap-2 bg-gradient-to-r from-purple-500/10 via-indigo-500/10 to-purple-500/10 
              backdrop-blur-sm px-5 py-2 rounded-full border border-purple-500/30">
              <FiPackage className="text-purple-300" />
              <span className="text-[0.96em] font-medium text-purple-300 uppercase tracking-wider">
                Paquetes Disponibles
              </span>
            </div>
          </div>
          
          {/* Título mejorado */}
          <h2 className="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6 font-funhouse relative inline-block">
            Nuestros Paquetes
            <motion.span 
              className="absolute -bottom-2 left-0 w-full h-1 bg-gradient-to-r from-purple-300/0 via-purple-300/70 to-purple-300/0"
              animate={{ 
                scaleX: [0, 1, 1, 0],
                x: ["-100%", "0%", "0%", "100%"]
              }}
              transition={{ 
                duration: 4,  
                repeat: Infinity,
                ease: "easeInOut" 
              }}
            />
          </h2>
          
          {/* Descripción mejorada */}
          <motion.p 
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.3, duration: 0.8 }}
            className="text-xl text-gray-200 max-w-2xl mx-auto leading-relaxed"
          >
            Elige el paquete perfecto para tu celebración y déjanos hacer de tu evento algo inolvidable
            <FiStar className="inline ml-2 text-sm text-yellow-300" />
          </motion.p>
        </motion.div>

        {/* Contenedor de tarjetas con animación */}
        <motion.div
          variants={containerVariants}
          initial="hidden"
          whileInView="visible"
          viewport={{ once: true, margin: "-50px" }}
          className="grid grid-cols-1 lg:grid-cols-2 gap-12 max-w-7xl mx-auto relative"
        >
          {/* Efecto de brillo decorativo detrás de las tarjetas */}
          <div className="absolute -inset-10 bg-gradient-to-tr from-purple-500/5 via-indigo-500/0 to-yellow-500/5 rounded-3xl blur-3xl -z-10"></div>
          
          {/* Tarjetas de servicio */}
          {Object.entries(services).map(([key, service], index) => (
            <ServiceCard key={key} service={service} index={index} />
          ))}
        </motion.div>
      </div>
    </motion.section>
  );
};

export default ServicesSection;\n\n
=== ./public/components/ui/ContactInfo.jsx ===
import React from 'react'
import { motion } from 'framer-motion'
import { FiPhone, FiMail, FiMapPin } from 'react-icons/fi'

/**
 * Componente que muestra la información de contacto organizada
 * con animaciones de entrada
 */
const ContactInfo = () => {
  const contactItems = [
    {
      icon: FiPhone,
      title: "Teléfono",
      content: "+52 (33) 3230 0243"
    },
    {
      icon: FiMail,
      title: "Email",
      content: "contacto@tramboory.com"
    },
    {
      icon: FiMapPin,
      title: "Ubicación",
      content: [
        "P. Solares 1639",
        "Solares Residencial",
        "Zapopan, Jalisco, C.P. 45019"
      ]
    }
  ];

  return (
    <div className="flex flex-col space-y-8">
      {contactItems.map((item, index) => (
        <motion.div
          key={index}
          initial={{ opacity: 0, x: -20 }}
          whileInView={{ opacity: 1, x: 0 }}
          viewport={{ once: true }}
          transition={{ delay: index * 0.2 }}
          className="flex items-start space-x-4 p-4 rounded-xl hover:bg-white/5 transition-colors duration-300"
        >
          <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-purple-500/20 to-purple-700/20 flex items-center justify-center border border-purple-500/30">
            <item.icon className="text-yellow-400 text-xl" />
          </div>
          <div>
            <h3 className="text-white font-bold">{item.title}</h3>
            {Array.isArray(item.content) ? (
              item.content.map((line, i) => (
                <p key={i} className="text-gray-300">{line}</p>
              ))
            ) : item.title === "Teléfono" ? (
              <motion.a
                href={`https://wa.me/523332300243?text=Hola%2C%20me%20gustar%C3%ADa%20obtener%20m%C3%A1s%20informaci%C3%B3n%20sobre%20sus%20servicios%20para%20fiestas%20infantiles.`}
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-300 hover:text-green-400 transition-colors duration-300 flex items-center"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                transition={{ type: "spring", stiffness: 400, damping: 15 }}
              >
                {item.content}
              </motion.a>
            ) : (
              <p className="text-gray-300">{item.content}</p>
            )}
          </div>
        </motion.div>
      ))}
    </div>
  );
};

export default ContactInfo;\n\n
=== ./public/components/ui/FeatureCard.jsx ===
import React from 'react'
import { motion } from 'framer-motion'

/**
 * Componente para mostrar características destacadas con animaciones
 * y diferentes colores según el tipo de característica
 */
const FeatureCard = ({ feature, index }) => {
  const cardVariants = {
    hidden: { opacity: 0, y: 50 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        duration: 0.6,
        delay: index * 0.1
      }
    },
    hover: {
      y: -10,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 20
      }
    }
  };

  const gradients = {
    green: 'from-green-400 to-green-600',
    yellow: 'from-yellow-400 to-yellow-600',
    pink: 'from-pink-400 to-pink-600',
    blue: 'from-blue-400 to-blue-600',
    purple: 'from-purple-400 to-purple-600',
    red: 'from-red-400 to-red-600'
  };

  return (
    <motion.div
      variants={cardVariants}
      initial="hidden"
      whileInView="visible"
      whileHover="hover"
      viewport={{ once: true }}
      className="feature-card p-6 rounded-xl bg-gradient-to-br from-white/5 to-white/10 backdrop-blur-lg
        border border-white/10 hover:border-white/30 hover:shadow-xl 
        transition-all duration-300 overflow-hidden relative"
    >
      {/* Elemento decorativo */}
      <div className="absolute -right-8 -bottom-8 w-24 h-24 rounded-full bg-gradient-to-tr from-white/5 to-transparent"></div>
      
      <div
        className={`w-14 h-14 rounded-xl mb-6 flex items-center justify-center
        bg-gradient-to-r ${gradients[feature.color] || gradients.blue} shadow-lg`}
      >
        <feature.icon className="text-2xl text-white" />
      </div>
      <h3 className="text-2xl font-bold text-white mb-3 font-funhouse">{feature.title}</h3>
      <p className="text-gray-300 relative z-10">{feature.description}</p>
      
      <div className="absolute bottom-0 left-0 h-1 w-0 bg-gradient-to-r from-transparent via-white/20 to-transparent
        group-hover:w-full transition-all duration-700"></div>
    </motion.div>
  );
};

export default FeatureCard;\n\n
=== ./public/components/ui/ScrollIndicator.jsx ===
import React from 'react'
import { motion } from 'framer-motion'
import { FiArrowDown } from 'react-icons/fi'

/**
 * Componente que muestra un indicador animado para hacer scroll
 * hacia una sección específica
 */
const ScrollIndicator = ({ targetId }) => (
  <div className="w-full flex justify-center">
    <motion.div
      animate={{ y: [0, 10, 0] }}
      transition={{ duration: 1.5, repeat: Infinity }}
      className="flex flex-col items-center"
    >
      <span className="text-white/70 text-sm mb-2">Descubre más</span>
      <a
        href={`#${targetId}`}
        className="flex items-center justify-center w-10 h-10 rounded-full bg-white/10 backdrop-blur-sm
        border border-white/20 hover:bg-white/20 transition-all duration-300"
        aria-label="Scroll para descubrir más"
      >
        <FiArrowDown className="text-white" />
      </a>
    </motion.div>
  </div>
);

export default ScrollIndicator;\n\n
=== ./public/components/ui/ServiceCard.jsx ===
import React from 'react'
import { Link } from 'react-router-dom'
import { motion } from 'framer-motion'
import { FiArrowRight, FiStar } from 'react-icons/fi'

/**
 * Componente de tarjeta para mostrar información de servicios
 * con animaciones y estilos condicionales según si es recomendado
 */
const ServiceCard = ({ service, index }) => {
  const cardVariants = {
    hidden: { opacity: 0, y: 50 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        duration: 0.8,
        bounce: 0.3,
        delay: index * 0.2
      }
    },
    hover: {
      y: -10,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 20
      }
    }
  };

  const featureVariants = {
    hidden: { opacity: 0, x: -20 },
    visible: i => ({
      opacity: 1,
      x: 0,
      transition: {
        type: "spring",
        duration: 0.5,
        delay: i * 0.1
      }
    })
  };

  return (
    <motion.div
      variants={cardVariants}
      initial="hidden"
      whileInView="visible"
      whileHover="hover"
      viewport={{ once: true, margin: "-50px" }}
      className={`service-card relative p-8 rounded-2xl backdrop-blur-lg overflow-hidden
        transform-gpu will-change-transform shadow-xl
        transition-all duration-300
        ${
          service.recommended
            ? 'bg-gradient-to-br from-purple-900/80 to-purple-800/80 border-2 border-yellow-400/50'
            : 'bg-gradient-to-br from-indigo-900/50 to-indigo-800/50 border border-white/20'
        }`}
    >
      {/* Elementos decorativos */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none opacity-20">
        <div className={`absolute w-64 h-64 rounded-full bg-gradient-to-tr ${service.recommended ? 'from-yellow-400/30' : 'from-indigo-400/30'} to-transparent -top-32 -right-32`}></div>
        <div className={`absolute w-64 h-64 rounded-full bg-gradient-to-tr ${service.recommended ? 'from-yellow-400/20' : 'from-indigo-400/20'} to-transparent -bottom-32 -left-32`}></div>
      </div>
      
      {service.recommended && (
        <div className="absolute top-0 right-0 z-20">
          <div className="bg-gradient-to-r from-yellow-500 to-yellow-400 text-purple-900 
              py-1 px-3 font-semibold text-sm shadow-lg flex items-center justify-center
              rounded-bl-md">
            <FiStar className="mr-1.5" /> Recomendado
          </div>
        </div>
      )}

      <div className="mb-6 relative">
        <h3 className="text-2xl font-bold text-white mb-2 font-funhouse">{service.title}</h3>
        <p className="text-gray-300">{service.description}</p>
        <div className={`text-3xl font-bold mt-4 ${service.recommended ? 'text-yellow-400' : 'text-white'}`}>
          ${service.price}
          <span className="text-sm font-normal text-gray-400 ml-1">MXN</span>
        </div>
      </div>

      <div className="space-y-4 mb-8">
        {service.features.map((feature, idx) => (
          <motion.div
            key={idx}
            custom={idx}
            variants={featureVariants}
            className="flex items-start space-x-3"
          >
            <div className={`flex-shrink-0 w-8 h-8 rounded-lg flex items-center justify-center ${service.recommended ? 'bg-yellow-400/20' : 'bg-white/10'}`}>
              <feature.icon className={`w-4 h-4 ${service.recommended ? 'text-yellow-400' : 'text-white'}`} />
            </div>
            <div className="flex-1">
              <p className="font-medium text-white">{feature.title}</p>
              <p className="text-sm text-gray-300">{feature.description}</p>
            </div>
          </motion.div>
        ))}
      </div>

      <div className="flex flex-wrap gap-2 mb-8">
        {service.highlights.map((highlight, idx) => (
          <motion.span
            key={idx}
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: idx * 0.1 }}
            className={`px-3 py-1 rounded-full text-sm font-medium
              ${service.recommended 
                ? 'bg-yellow-400/20 text-yellow-300 border border-yellow-400/30' 
                : 'bg-white/10 text-white border border-white/20'}`}
          >
            {highlight}
          </motion.span>
        ))}
      </div>

      <Link to="/appointments">
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className={`w-full py-3 px-6 rounded-lg font-semibold flex items-center justify-center space-x-2
            transition-all duration-300 transform-gpu
            ${
              service.recommended
                ? 'bg-gradient-to-r from-yellow-300 to-yellow-500 text-purple-900 hover:shadow-yellow-400/20 hover:shadow-lg'
                : 'bg-gradient-to-r from-white/10 to-white/20 text-white hover:bg-white/20 hover:shadow-white/5 hover:shadow-lg'
            }`}
        >
          <span>Reservar Ahora</span>
          <FiArrowRight className="ml-2" />
        </motion.button>
      </Link>
    </motion.div>
  );
};

export default ServiceCard;\n\n
=== ./public/components/ui/SocialLinks.jsx ===
import React from 'react'
import { motion } from 'framer-motion'
import { FiInstagram } from 'react-icons/fi'

/**
 * Componente que muestra enlaces a redes sociales
 * con animaciones al interactuar
 */
const SocialLinks = () => {
  const socialLinks = [
    {
      url: "https://www.instagram.com/tramboory/",
      label: "Tramboory Mx"
    },
    {
      url: "https://www.instagram.com/oss.artchive/?__pwa=1",
      label: "Oss Artchive"
    }
  ];

  // Función para manejar el clic en los enlaces de Instagram
  const handleInstagramClick = (url) => {
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  return (
    <div className="mt-10">
      <h3 className="text-center md:text-left text-white text-xl mb-6 font-funhouse">
        Síguenos en redes sociales
      </h3>
      <div className="flex justify-center md:justify-start space-x-6">
        {socialLinks.map((link, index) => (
          <motion.a
            key={index}
            href={link.url}
            target="_blank"
            rel="noopener noreferrer"
            aria-label={link.label}
            onClick={(e) => {
              e.preventDefault();
              handleInstagramClick(link.url);
            }}
            whileHover={{ scale: 1.1, rotate: 5 }}
            whileTap={{ scale: 0.95 }}
            className="w-12 h-12 rounded-xl bg-gradient-to-br from-purple-600/20 to-pink-600/20 flex items-center justify-center
              hover:bg-white/20 transition-colors duration-300 border border-purple-500/30 shadow-lg
              cursor-pointer z-10 relative"
          >
            <FiInstagram className="text-yellow-400 text-xl" aria-hidden="true" />
          </motion.a>
        ))}
      </div>
    </div>
  );
};

export default SocialLinks;\n\n
=== ./public/components/ui/WhatsAppButton.jsx ===
import React from 'react'
import { motion } from 'framer-motion'
import { FiMessageCircle } from 'react-icons/fi'

/**
 * Botón para contacto directo vía WhatsApp
 * con animaciones de hover y tap
 */
const WhatsAppButton = () => {
  // Función para manejar el clic en el botón de WhatsApp
  const handleWhatsAppClick = (url) => {
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  const whatsappUrl = "https://wa.me/523332300243?text=Hola%2C%20me%20gustar%C3%ADa%20obtener%20m%C3%A1s%20informaci%C3%B3n%20sobre%20sus%20servicios%20para%20fiestas%20infantiles.";

  return (
    <div className="flex items-center relative z-30">
      <motion.button
        onClick={() => handleWhatsAppClick(whatsappUrl)}
        whileHover={{ scale: 1.1, rotate: 5 }}
        whileTap={{ scale: 0.95 }}
        className="inline-flex items-center justify-center space-x-2 py-3 px-6
          bg-gradient-to-r from-green-500 to-green-600 text-white rounded-xl font-bold
          hover:shadow-lg hover:shadow-green-500/20
          transition-all duration-300 border border-green-400/30 cursor-pointer
          relative z-50"
        aria-label="Contactar por WhatsApp"
      >
        <FiMessageCircle className="text-xl" />
        <span>Contactar por WhatsApp</span>
      </motion.button>
    </div>
  );
};

export default WhatsAppButton;\n\n
=== ./public/hooks/index.js ===
// Exportar todos los componentes de public/hooks
\n\n
=== ./public/index.js ===
export * from './components';
export * from './pages';
export * from './services';
export * from './hooks';
\n\n
=== ./public/pages/AboutTramboory.jsx ===
import React, { useState, useEffect, useRef } from 'react'
import { motion } from 'framer-motion'
import { 
  FiInfo, 
  FiUsers, 
  FiHeart, 
  FiSmile, 
  FiStar, 
  FiCalendar, 
  FiMapPin, 
  FiMessageCircle,
  FiCamera,
  FiArrowRight
} from 'react-icons/fi'
import CloudinaryCarousel from '@shared/components/cloudinary/CloudinaryCarousel'
import { getImagenesCarousel } from '@domains/galeria/services/galeriaService'
import NavbarPublic from '@shared/components/NavbarPublic'

// Componentes decorativos
import ParticlesBackground from './home-components/decorative/ParticlesBackground'
import AnimatedBalloons from './home-components/decorative/AnimatedBalloons'
import BackgroundVideoComponent from './home-components/decorative/BackgroundVideoComponent'

/**
 * Página Acerca de Tramboory - rediseñada para mantener consistencia con Home.jsx
 */
const AboutTramboory = () => {
  // Referencias para elementos que necesitan animación
  const videoRef = useRef(null);
  const [isVideoPlaying, setIsVideoPlaying] = useState(true);
  
  // Toggle para el video de fondo
  const toggleVideo = () => {
    if (videoRef.current) {
      if (isVideoPlaying) {
        videoRef.current.pause();
      } else {
        videoRef.current.play();
      }
      setIsVideoPlaying(!isVideoPlaying);
    }
  };
  const [carouselImages, setCarouselImages] = useState([])
  const [isLoadingImages, setIsLoadingImages] = useState(true)

  // Cargar imágenes del carrusel desde la API
  useEffect(() => {
    const loadImages = async () => {
      try {
        setIsLoadingImages(true)
        const imagenes = await getImagenesCarousel()
        
        // Ordenar por el campo orden y obtener solo las URLs de las imágenes activas
        const imageUrls = imagenes
          .filter(img => img.activo)
          .sort((a, b) => a.orden - b.orden)
          .map(img => img.imagen_url)
        
        // Si no hay imágenes en la base de datos, usar imágenes de ejemplo
        if (imageUrls.length === 0) {
          setCarouselImages([
            'samples/landscapes/nature-mountains',
            'samples/landscapes/beach-boat',
            'samples/landscapes/girl-urban-view',
            'samples/food/dessert',
            'samples/people/bicycle'
          ])
        } else {
          setCarouselImages(imageUrls)
        }
      } catch (error) {
        console.error('Error cargando imágenes del carrusel:', error)
        // En caso de error, usar imágenes de ejemplo
        setCarouselImages([
          'samples/landscapes/nature-mountains',
          'samples/landscapes/beach-boat',
          'samples/landscapes/girl-urban-view',
          'samples/landscapes/architecture-signs'
        ])
      } finally {
        setIsLoadingImages(false)
      }
    }
    
    loadImages()
  }, [])

  // Componente FeatureCard para destacar características de Tramboory
  const FeatureCard = ({ feature, index }) => {
    const cardVariants = {
      hidden: { opacity: 0, y: 50 },
      visible: {
        opacity: 1,
        y: 0,
        transition: {
          type: "spring",
          duration: 0.6,
          delay: index * 0.1
        }
      },
      hover: {
        y: -10,
        transition: {
          type: "spring",
          stiffness: 300,
          damping: 20
        }
      }
    }

    const gradients = {
      green: 'from-green-400 to-green-600',
      yellow: 'from-yellow-400 to-yellow-600',
      pink: 'from-pink-400 to-pink-600',
      blue: 'from-blue-400 to-blue-600',
      purple: 'from-purple-400 to-purple-600',
      red: 'from-red-400 to-red-600'
    }

    return (
      <motion.div
        variants={cardVariants}
        initial="hidden"
        whileInView="visible"
        whileHover="hover"
        viewport={{ once: true }}
        className="feature-card p-8 rounded-xl bg-white/10 backdrop-blur-lg
          border border-white/20 hover:border-white/40 hover:shadow-xl 
          transition-all duration-300"
      >
        <div
          className={`w-16 h-16 rounded-full mb-6 flex items-center justify-center
          bg-gradient-to-r ${gradients[feature.color] || gradients.blue}`}
        >
          <feature.icon className="text-2xl text-white" />
        </div>
        <h3 className="text-2xl font-bold text-white mb-4 font-funhouse">{feature.title}</h3>
        <p className="text-gray-300">{feature.description}</p>
      </motion.div>
    )
  }

  // Datos - Características principales de Tramboory
  const features = [
    {
      icon: FiHeart,
      title: 'Nuestro Corazón',
      description: 'En Tramboory creemos en crear momentos inolvidables para las familias, ofreciendo un espacio donde la diversión y la magia se encuentran.',
      color: 'pink'
    },
    {
      icon: FiUsers,
      title: 'Equipo Apasionado',
      description: 'Nuestro equipo está dedicado a hacer de cada evento una experiencia perfecta, cuidando hasta el más mínimo detalle.',
      color: 'purple'
    },
    {
      icon: FiStar,
      title: 'Experiencia Premium',
      description: 'Ofrecemos un servicio de primera calidad, con instalaciones modernas y seguras para que todos disfruten sin preocupaciones.',
      color: 'yellow'
    },
    {
      icon: FiCalendar,
      title: 'Historia y Trayectoria',
      description: 'Desde nuestra fundación, hemos sido parte de miles de celebraciones, creciendo y mejorando constantemente.',
      color: 'blue'
    },
    {
      icon: FiSmile,
      title: 'Diversión Garantizada',
      description: 'Diseñamos cada actividad y espacio para asegurar que todos los asistentes, grandes y pequeños, disfruten al máximo.',
      color: 'green'
    },
    {
      icon: FiMapPin,
      title: 'Ubicación Estratégica',
      description: 'Nos encontramos en una zona accesible de Zapopan, con estacionamiento y todas las facilidades para tu comodidad.',
      color: 'red'
    }
  ]

  // Datos de historia de Tramboory
  const historyMilestones = [
    {
      year: '2018',
      title: 'Nace una Idea',
      description: 'Tramboory surge como un sueño de crear un espacio único para celebraciones infantiles en Guadalajara.'
    },
    {
      year: '2019',
      title: 'Abrimos Nuestras Puertas',
      description: 'Inauguramos nuestras instalaciones en Zapopan, con una gran fiesta de apertura que marcó el inicio de nuestra historia.'
    },
    {
      year: '2020',
      title: 'Superando Desafíos',
      description: 'A pesar de los retos globales, nos reinventamos para seguir ofreciendo experiencias seguras y memorables.'
    },
    {
      year: '2021',
      title: 'Crecimiento y Expansión',
      description: 'Ampliamos nuestros servicios y mejoramos nuestras instalaciones para ofrecer más opciones a nuestros clientes.'
    },
    {
      year: '2022',
      title: 'Innovación Constante',
      description: 'Implementamos nuevas tecnologías y temas de decoración para mantenernos a la vanguardia.'
    },
    {
      year: '2023',
      title: 'Comunidad Tramboory',
      description: 'Celebramos haber sido parte de más de 1,000 eventos y construido una comunidad fiel de familias que confían en nosotros.'
    }
  ]

  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-br from-purple-950 to-indigo-950">
      {/* Elementos decorativos de fondo */}
      <ParticlesBackground />
      <AnimatedBalloons />
      
      {/* Video de Fondo */}
      <BackgroundVideoComponent
        videoRef={videoRef}
        isVideoPlaying={isVideoPlaying}
        toggleVideo={toggleVideo}
      />

      {/* Navbar público */}
      <NavbarPublic />
      
      {/* Sección Hero */}
      <section className="relative pt-32 pb-16 bg-gradient-to-b from-black/40 to-transparent">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="text-center mb-12"
          >
            <h1 className="text-5xl md:text-6xl font-bold text-white mb-6 font-funhouse">
              Conoce{' '}
              <span className="text-gradient bg-clip-text text-transparent bg-gradient-to-r from-yellow-300 to-pink-500">
                Tramboory
              </span>
            </h1>
            <p className="text-xl md:text-2xl text-gray-200 max-w-3xl mx-auto">
              Un espacio mágico donde los sueños se convierten en celebraciones inolvidables
            </p>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="mb-16"
          >
            <CloudinaryCarousel 
              height="500px"
              autoPlaySpeed={3000}
              imageWidth={1.8}
              images={carouselImages}
            />
          </motion.div>
        </div>
        
        {/* Decorative Elements */}
        <div className="absolute top-0 inset-x-0 h-64 bg-gradient-to-b from-black/50 to-transparent pointer-events-none" />
        <div className="absolute bottom-0 inset-x-0 h-64 bg-gradient-to-t from-purple-900/50 to-transparent pointer-events-none" />
      </section>

      {/* Sección Quiénes Somos */}
      <section className="relative py-20 bg-gradient-to-b from-purple-900/90 to-indigo-900/90">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-6 font-funhouse">
              ¿Quiénes Somos?
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              En Tramboory somos especialistas en crear momentos llenos de alegría y diversión para toda la familia
            </p>
          </motion.div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-5xl mx-auto">
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              whileInView={{ opacity: 1, x: 0 }}
              viewport={{ once: true }}
              className="bg-white/10 backdrop-blur-lg p-8 rounded-2xl border border-white/20"
            >
              <div className="flex items-center mb-6">
                <FiInfo className="text-3xl text-yellow-400 mr-4" />
                <h3 className="text-2xl font-bold text-white font-funhouse">Nuestra Misión</h3>
              </div>
              <p className="text-gray-300 mb-4">
                Crear experiencias mágicas y memorables para las familias, ofreciendo un espacio seguro y divertido donde los niños puedan celebrar momentos especiales y los adultos puedan disfrutar sin preocupaciones.
              </p>
              <p className="text-gray-300">
                Nos dedicamos a transformar cada evento en una celebración única, adaptada a los gustos y necesidades de cada cliente, con atención personalizada y servicio de excelencia.
              </p>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, x: 30 }}
              whileInView={{ opacity: 1, x: 0 }}
              viewport={{ once: true }}
              className="bg-white/10 backdrop-blur-lg p-8 rounded-2xl border border-white/20"
            >
              <div className="flex items-center mb-6">
                <FiStar className="text-3xl text-yellow-400 mr-4" />
                <h3 className="text-2xl font-bold text-white font-funhouse">Nuestra Visión</h3>
              </div>
              <p className="text-gray-300 mb-4">
                Ser reconocidos como el lugar preferido para celebraciones infantiles en Guadalajara, innovando constantemente en nuestros servicios y creando tendencias en el mercado.
              </p>
              <p className="text-gray-300">
                Buscamos expandir nuestra presencia y llevar la magia de Tramboory a más familias, manteniendo siempre nuestros valores de excelencia, creatividad y pasión por lo que hacemos.
              </p>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Sección Características */}
      <section className="relative py-20 bg-gradient-to-b from-indigo-900/90 to-purple-900/90">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-6 font-funhouse">
              ¿Por qué Tramboory?
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              Descubre lo que nos hace especiales y por qué tantas familias confían en nosotros
            </p>
          </motion.div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
            {features.map((feature, index) => (
              <FeatureCard key={index} feature={feature} index={index} />
            ))}
          </div>
        </div>
      </section>

      {/* Sección Historia */}
      <section className="relative py-20 bg-gradient-to-b from-purple-900/90 to-black/90">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-6 font-funhouse">
              Nuestra Historia
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              El camino que hemos recorrido para convertirnos en el espacio mágico que somos hoy
            </p>
          </motion.div>

          <div className="relative max-w-4xl mx-auto">
            {/* Línea de tiempo vertical */}
            <div className="absolute left-1/2 top-0 bottom-0 w-1 bg-gradient-to-b from-yellow-400 to-pink-500 transform -translate-x-1/2"></div>
            
            {historyMilestones.map((milestone, index) => (
              <motion.div 
                key={index}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true, margin: "-100px" }}
                transition={{ delay: index * 0.1 }}
                className={`relative mb-16 flex ${
                  index % 2 === 0 ? "flex-row" : "flex-row-reverse"
                }`}
              >
                {/* Círculo en la línea de tiempo */}
                <div className="absolute left-1/2 top-0 w-8 h-8 bg-gradient-to-r from-yellow-400 to-pink-500 rounded-full transform -translate-x-1/2 z-10 border-4 border-purple-900"></div>
                
                {/* Contenedor del contenido */}
                <div className={`w-5/12 ${index % 2 === 0 ? "pr-8 text-right" : "pl-8 text-left"}`}>
                  <div className="bg-white/10 backdrop-blur-lg p-6 rounded-xl border border-white/20 hover:border-white/40 transition-all duration-300 hover:shadow-xl">
                    <div className="inline-block px-4 py-2 bg-gradient-to-r from-yellow-400 to-pink-500 text-purple-900 font-bold rounded-full mb-4">
                      {milestone.year}
                    </div>
                    <h3 className="text-xl font-bold text-white mb-3 font-funhouse">{milestone.title}</h3>
                    <p className="text-gray-300">{milestone.description}</p>
                  </div>
                </div>
                
                {/* Espacio para el lado opuesto */}
                <div className="w-5/12"></div>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Sección CTA */}
      <section className="relative py-16 bg-gradient-to-b from-black/90 to-purple-900/90">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            whileInView={{ opacity: 1, scale: 1 }}
            viewport={{ once: true }}
            className="max-w-4xl mx-auto bg-gradient-to-r from-purple-800/80 to-indigo-800/80 p-10 rounded-2xl border border-white/10 text-center backdrop-blur-lg"
          >
            <h2 className="text-3xl md:text-4xl font-bold text-white mb-6 font-funhouse">
              ¡Vive la Experiencia Tramboory!
            </h2>
            <p className="text-xl text-gray-200 mb-10">
              Estamos listos para hacer de tu próxima celebración un momento inolvidable
            </p>
            <div className="flex flex-col sm:flex-row items-center justify-center gap-6">
              <motion.button
                onClick={() => {
                  window.open("https://wa.me/523332300243?text=Hola%2C%20me%20gustar%C3%ADa%20obtener%20m%C3%A1s%20informaci%C3%B3n%20sobre%20sus%20servicios%20para%20fiestas%20infantiles.", '_blank', 'noopener,noreferrer');
                }}
                whileHover={{ scale: 1.1, rotate: 5 }}
                whileTap={{ scale: 0.95 }}
                className="inline-flex items-center justify-center space-x-2 py-3 px-6
                  bg-green-500 text-white rounded-lg font-bold hover:bg-green-600
                  transition-colors duration-300 shadow-lg cursor-pointer"
                aria-label="Contactar por WhatsApp"
              >
                <FiMessageCircle className="text-xl" />
                <span>Contactar por WhatsApp</span>
              </motion.button>
              
              <motion.a
                href="/appointments"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="px-8 py-3 bg-gradient-to-r from-yellow-400 to-yellow-500
                  text-purple-900 rounded-lg font-bold text-lg shadow-xl
                  hover:from-yellow-500 hover:to-yellow-600 transition-all duration-300 flex items-center"
              >
                <span>Reservar Ahora</span>
                <FiArrowRight className="ml-2" />
              </motion.a>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Sección Galería al final */}
      <section className="relative py-20 bg-gradient-to-b from-purple-900/90 to-black/90">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-6 font-funhouse">
              Momentos Mágicos
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              Algunos recuerdos de las celebraciones especiales en nuestras instalaciones
            </p>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            viewport={{ once: true }}
            className="mb-16"
          >
            <CloudinaryCarousel 
              height="450px"
              autoPlaySpeed={2500}
              imageWidth={1.6}
              images={carouselImages}
            />
          </motion.div>

          <div className="flex justify-center">
            <motion.a
              href="https://www.instagram.com/tramboory/"
              target="_blank"
              rel="noopener noreferrer"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="flex items-center px-8 py-4 bg-white/10 backdrop-blur-sm text-white 
                rounded-full font-bold text-lg border-2 border-yellow-400/30 hover:bg-white/20
                transition-all duration-300"
            >
              <FiCamera className="mr-2" />
              Ver más en Instagram
            </motion.a>
          </div>
        </div>
        
        {/* Decorative Elements */}
        <div className="absolute top-0 inset-x-0 h-64 bg-gradient-to-b from-purple-900/20 to-transparent pointer-events-none" />
        <div className="absolute bottom-0 inset-x-0 h-64 bg-gradient-to-t from-black/20 to-transparent pointer-events-none" />
      </section>
    </div>
  )
}

export default AboutTramboory\n\n
=== ./public/pages/Appointment.jsx ===
import React, { useState, useEffect, useLayoutEffect, useRef } from 'react'
import { Link } from 'react-router-dom'
import { motion, AnimatePresence } from 'framer-motion'
import { gsap } from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'
import NavbarPublic from '@shared/components/NavbarPublic'
import {
  FiClock,
  FiImage,
  FiCoffee,
  FiMusic,
  FiUsers,
  FiArrowRight,
  FiCheck,
  FiX,
  FiPhone,
  FiMessageSquare,
  FiPlus,
  FiMinus,
  FiPlay,
  FiPause
} from 'react-icons/fi'

// Componentes decorativos
import ParticlesBackground from './home-components/decorative/ParticlesBackground'
import AnimatedBalloons from './home-components/decorative/AnimatedBalloons'
import BackgroundVideoComponent from './home-components/decorative/BackgroundVideoComponent'

gsap.registerPlugin(ScrollTrigger)

/**
 * Componente de tarjeta de servicio para mostrar los paquetes 
 * disponibles con animaciones y detalles expandibles
 */
const ServiceCard = ({
  title,
  description,
  items,
  price,
  recommended,
  type
}) => {
  const [expandedCategory, setExpandedCategory] = useState(null)
  const [isHovered, setIsHovered] = useState(false)

  const cardVariants = {
    hover: {
      scale: 1.02,
      y: -5,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 20
      }
    }
  }

  const categoryVariants = {
    collapsed: { height: 0, opacity: 0 },
    expanded: { height: 'auto', opacity: 1 }
  }

  return (
    <motion.div
      variants={cardVariants}
      whileHover='hover'
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
      className={`bg-white/10 backdrop-blur-lg rounded-2xl shadow-xl p-8 relative cursor-pointer
            ${
              recommended
                ? 'border-4 border-yellow-400'
                : 'border border-white/20'
            }
            transform transition-all duration-300`}
    >
      {recommended && (
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className='absolute -top-4 left-1/2 transform -translate-x-1/2'
        >
          <span className='bg-yellow-400 text-purple-900 px-6 py-2 rounded-full text-sm font-semibold shadow-lg'>
            Paquete Completo
          </span>
        </motion.div>
      )}

      {/* Efecto de brillo en hover */}
      <div
        className={`absolute inset-0 rounded-2xl transition-opacity duration-300 pointer-events-none
              ${isHovered ? 'opacity-100' : 'opacity-0'}
              bg-gradient-to-r from-transparent via-white/10 to-transparent
              animate-shine`}
      />

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className='mb-6'
      >
        <span
          className={`text-sm font-semibold ${
            type === 'normal' ? 'text-yellow-300' : 'text-purple-300'
          }`}
        >
          {type === 'normal' ? 'Todo Incluido' : 'Renta de Espacio'}
        </span>
        <h3 className='text-2xl font-bold text-white mt-2'>{title}</h3>
        <p className='text-gray-300 mt-2'>{description}</p>

        <div className='mt-4 text-3xl font-bold text-white'>
          ${price}
          <span className='text-base font-normal text-gray-400'>/evento</span>
        </div>
      </motion.div>

      <div className='space-y-4 mb-8'>
        {Object.entries(items).map(([category, categoryItems], index) => (
          <motion.div
            key={category}
            className='rounded-lg overflow-hidden'
            initial={false}
            animate={expandedCategory === category ? 'expanded' : 'collapsed'}
          >
            <motion.button
              onClick={() =>
                setExpandedCategory(
                  expandedCategory === category ? null : category
                )
              }
              className={`w-full text-left p-4 flex items-center justify-between
                    rounded-lg transition-colors duration-300
                    ${
                      expandedCategory === category
                        ? 'bg-purple-800/50 text-yellow-300'
                        : 'bg-purple-900/30 text-white hover:bg-purple-800/40'
                    }`}
            >
              <span className='font-semibold'>{category}</span>
              <motion.div
                animate={{ rotate: expandedCategory === category ? 180 : 0 }}
                transition={{ duration: 0.3 }}
              >
                {expandedCategory === category ? <FiMinus /> : <FiPlus />}
              </motion.div>
            </motion.button>

            <AnimatePresence>
              {expandedCategory === category && (
                <motion.div
                  initial='collapsed'
                  animate='expanded'
                  exit='collapsed'
                  variants={categoryVariants}
                  transition={{ duration: 0.3 }}
                  className='px-4 py-2 bg-purple-900/20 backdrop-blur-sm'
                >
                  {categoryItems.map((item, itemIndex) => (
                    <motion.div
                      key={itemIndex}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: itemIndex * 0.1 }}
                      className='flex items-start py-2'
                    >
                      {item.included ? (
                        <FiCheck className='text-green-400 mt-1 mr-3 flex-shrink-0 w-5 h-5' />
                      ) : (
                        <FiX className='text-red-400 mt-1 mr-3 flex-shrink-0 w-5 h-5' />
                      )}
                      <div>
                        <p
                          className={`font-medium ${
                            item.included ? 'text-white' : 'text-gray-400'
                          }`}
                        >
                          {item.title}
                        </p>
                        {item.description && (
                          <p
                            className={`text-sm ${
                              item.included ? 'text-gray-300' : 'text-gray-500'
                            }`}
                          >
                            {item.description}
                          </p>
                        )}
                      </div>
                    </motion.div>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        ))}
      </div>

      <motion.div className='space-y-4' whileHover={{ scale: 1.02 }}>
        <Link
          to='/signin'
          className={`block w-full py-3 px-6 text-center rounded-lg font-semibold 
                transition-all duration-300 transform hover:scale-105 hover:shadow-lg
                ${
                  type === 'normal'
                    ? 'bg-yellow-400 hover:bg-yellow-500 text-purple-900'
                    : 'bg-purple-600 hover:bg-purple-700 text-white'
                }`}
        >
          Reservar Ahora
          <FiArrowRight className='inline ml-2' />
        </Link>

        <button
          onClick={() => (window.location.href = 'tel:+523332300243')}
          className='w-full py-3 px-6 text-center rounded-lg font-semibold 
                border-2 border-white/20 text-white hover:bg-white/10 
                transition-all duration-300 transform hover:scale-105 hover:shadow-lg'
        >
          Llamar para Información
          <FiPhone className='inline ml-2' />
        </button>
      </motion.div>
    </motion.div>
  )
}

/**
 * Componente Appointment rediseñado para mantener consistencia con Home.jsx
 */
export default function Appointment () {
  // Referencias para elementos que necesitan animación
  const videoRef = useRef(null);
  const [isVideoPlaying, setIsVideoPlaying] = useState(true);
  
  // Efecto para inicializar el video de manera segura
  useEffect(() => {
    const initializeVideo = async () => {
      if (!videoRef.current) {
        console.warn("Video element not available on mount");
        return;
      }
      
      console.log("Initializing video element");
      
      try {
        // Forzar carga del video
        videoRef.current.load();
        
        // Verificar si el navegador permite autoplay
        const canAutoplay = await testAutoplayCapability();
        console.log("Autoplay capability:", canAutoplay);
        
        if (canAutoplay) {
          await videoRef.current.play();
          console.log("Video started playing automatically");
          setIsVideoPlaying(true);
        } else {
          console.log("Autoplay not supported - video paused");
          videoRef.current.pause();
          setIsVideoPlaying(false);
        }
      } catch (error) {
        console.error("Error initializing video:", error);
        setIsVideoPlaying(false);
      }
    };
    
    // Función para probar capacidad de autoplay
    const testAutoplayCapability = () => {
      return new Promise(resolve => {
        // Crear un video temporal para probar autoplay
        const testVideo = document.createElement('video');
        testVideo.muted = true;
        testVideo.playsInline = true;
        testVideo.src = "data:video/mp4;base64,AAAAIGZ0eXBtcDQyAAAAAG1wNDJtcDQxaXNvbWF2YzEAAATKbW9vdgAAAGxtdmhkAAAAANLEP5XSxD+VAAB1MAAAdU4AAQAAAQAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAACFpb2RzAAAAABCAgIAQAE////9//w6AgIAEAAAAAQAABDV0cmFrAAAAXHRraGQAAAAH0sQ/ldLEP5UAAAABAAAAAAAAdU4AAAAAAAAAAAAAAAABAQAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAABbG1kaWEAAAAgbWRoZAAAAADSxD+V0sQ/lQAAVcQAAK1lAAAAAAAAAABiaWRpAAAAAG1keGQAAAAAAAAAAAAAAAAAAD5tZGlhAAAAO21kYXQAAAAAAAEBIAACEAUQAA==";
        
        // Si el video puede reproducirse, entonces autoplay está permitido
        const playPromise = testVideo.play();
        if (playPromise !== undefined) {
          playPromise
            .then(() => resolve(true))
            .catch(() => resolve(false));
        } else {
          resolve(false);
        }
      });
    };
    
    // Inicializar con un pequeño retraso para asegurar que el DOM está listo
    const timer = setTimeout(() => {
      initializeVideo();
    }, 500);
    
    return () => clearTimeout(timer);
  }, []);
  
  // Efecto GSAP para elementos animados en scroll
  useLayoutEffect(() => {
    const ctx = gsap.context(() => {
      ScrollTrigger.batch('.animate-on-scroll', {
        onEnter: batch =>
          gsap.to(batch, {
            opacity: 1,
            y: 0,
            stagger: 0.15,
            overwrite: true
          }),
        start: 'top bottom-=100',
        end: 'bottom top',
        markers: false
      })
    })

    return () => ctx.revert()
  }, [])

  // Función toggleVideo simplificada y mejorada
  const toggleVideo = (e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    console.log("Toggle Video clicked with event:", e);
    console.log("Video ref exists:", !!videoRef.current);
    console.log("Current playing state:", isVideoPlaying);
    
    if (!videoRef.current) {
      console.error("No video reference available");
      return;
    }
    
    try {
      if (isVideoPlaying) {
        // Pausar video
        videoRef.current.pause();
        console.log("Video pause command sent");
        setIsVideoPlaying(false);
      } else {
        // Reproducir video - forma simplificada
        videoRef.current.play()
          .then(() => {
            console.log("Video play successful");
            setIsVideoPlaying(true);
          })
          .catch(err => {
            console.error("Error playing video:", err);
            
            // Solo agregar listener para interacción de usuario si es necesario
            const handleUserInteraction = () => {
              videoRef.current.play()
                .then(() => {
                  setIsVideoPlaying(true);
                  document.removeEventListener('click', handleUserInteraction);
                  console.log("Video reproducido tras interacción del usuario");
                })
                .catch(e => console.error("Fallo en reproducción forzada:", e));
            };
            
            document.addEventListener('click', handleUserInteraction, { once: true });
          });
      }
    } catch (error) {
      console.error("Error al cambiar estado del video:", error);
    }
  };

  // Definición de servicios
  const services = {
    normal: {
      title: 'Tramboory Normal',
      description:
        'La experiencia completa con todos los servicios incluidos para una celebración perfecta.',
      price: '7,999',
      recommended: true,
      type: 'normal',
      items: {
        'Tiempo y Espacio': [
          {
            title: '4 Horas de Diversión',
            description: '3.5 horas de salón + 30 min de despedida',
            included: true
          }
        ],
        'Decoración y Personalización': [
          {
            title: 'Invitación Digital',
            description: 'Invitación personalizada para tu evento',
            included: true
          },
          {
            title: 'Decoración Temática',
            description: 'Ambientación Tramboory para tu fiesta',
            included: true
          }
        ],
        'Alimentos y Bebidas': [
          {
            title: 'Menú Completo',
            description: 'Alimentos para niños y adultos',
            included: true
          },
          {
            title: 'Bebidas Ilimitadas',
            description: 'Refrescos, agua y café de cortesía',
            included: true
          }
        ],
        'Entretenimiento y Personal': [
          {
            title: 'Área de Juegos',
            description: 'Ludoteca y alberca de pelotas',
            included: true
          },
          {
            title: 'Ambiente Festivo',
            description: 'Música y anfitriones para animar',
            included: true
          },
          {
            title: 'Coordinador de Evento',
            description: 'Personal dedicado para tu celebración',
            included: true
          }
        ]
      }
    },
    matutino: {
      title: 'Tramboory Matutino',
      description:
        'Renta del espacio para eventos personalizados con la opción de agregar servicios adicionales.',
      price: '4,999',
      recommended: false,
      type: 'matutino',
      items: {
        'Renta Básica': [
          {
            title: 'Espacio Exclusivo',
            description: 'Salón privado para tu evento',
            included: true
          },
          {
            title: 'Mobiliario Básico',
            description: 'Mesas y sillas incluidas',
            included: true
          },
          {
            title: 'Horario Matutino',
            description: '3 horas de evento',
            included: true
          }
        ],
        'Servicios Opcionales': [
          {
            title: 'Servicio de Alimentos',
            description: 'Personaliza el menú a tu gusto',
            included: false
          },
          {
            title: 'Decoración',
            description: 'Opción de decorar el espacio',
            included: false
          },
          {
            title: 'Personal de Servicio',
            description: 'Meseros y personal de apoyo opcional',
            included: false
          }
        ]
      }
    }
  }

  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-br from-purple-950 to-indigo-950">
      {/* Primero los elementos decorativos de fondo */}
      <ParticlesBackground />
      <AnimatedBalloons />
      
      {/* Video de Fondo - Asegúrate de que esté antes de otros elementos de contenido */}
      <BackgroundVideoComponent
        videoRef={videoRef}
        isVideoPlaying={isVideoPlaying}
        toggleVideo={toggleVideo}
      />

      {/* Contenido principal con mayor z-index para estar por encima del video */}
      <div className="relative z-10 pointer-events-none">
        {/* Navbar público */}
        <div className="pointer-events-auto">
          <NavbarPublic />
        </div>

        {/* Hero Section */}
        <section className="relative pt-32 pb-20 px-4 sm:px-6 lg:px-8 animate-on-scroll pointer-events-auto">
          <div className="max-w-7xl mx-auto text-center">
            <motion.h1
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-5xl md:text-6xl font-extrabold text-white mb-8 font-funhouse"
            >
              Elige tu Experiencia
              <span className="block text-gradient bg-clip-text text-transparent bg-gradient-to-r from-yellow-300 to-yellow-500">Tramboory</span>
            </motion.h1>
            <motion.p
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="text-xl text-gray-300 max-w-3xl mx-auto mb-10"
            >
              Dos opciones perfectas para tu celebración: nuestro paquete todo
              incluido o personaliza tu evento a tu manera en horario matutino.
            </motion.p>
          </div>
        </section>

        {/* Services Section */}
        <section className="py-12 px-4 sm:px-6 lg:px-8 pointer-events-auto">
          <div className="max-w-7xl mx-auto">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <ServiceCard {...services.normal} />
              <ServiceCard {...services.matutino} />
            </div>
          </div>
        </section>

        {/* Contact Section */}
        <section className="py-16 px-4 sm:px-6 lg:px-8 relative overflow-hidden pointer-events-auto">
          <div className="absolute inset-0 bg-gradient-to-r from-purple-800/90 to-indigo-800/90 backdrop-blur-sm" />
          <div className="max-w-7xl mx-auto relative z-10 text-center">
            <h2 className="text-3xl font-bold text-white mb-6 font-funhouse">
              ¿Tienes dudas sobre nuestros servicios?
            </h2>
            <p className="text-white/90 text-lg mb-8">
              Nuestro equipo está listo para ayudarte a elegir la mejor opción
              para tu evento
            </p>
            <div className="flex flex-col sm:flex-row justify-center gap-4">
              <button
                onClick={() => {
                  window.open("https://wa.me/523332300243?text=Hola%2C%20me%20gustar%C3%ADa%20obtener%20m%C3%A1s%20informaci%C3%B3n%20sobre%20sus%20servicios%20para%20fiestas%20infantiles.", '_blank', 'noopener,noreferrer');
                }}
                className="inline-flex items-center justify-center px-6 py-3 rounded-lg 
                        bg-white text-purple-900 font-semibold hover:bg-gray-100 
                        transition-all duration-300 transform hover:scale-105"
              >
                <FiMessageSquare className="mr-2" />
                Contáctanos
              </button>
              <button
                onClick={() => (window.location.href = 'tel:+523332300243')}
                className="inline-flex items-center justify-center px-6 py-3 rounded-lg 
                        border-2 border-white text-white font-semibold hover:bg-white/10 
                        transition-all duration-300 transform hover:scale-105"
              >
                <FiPhone className="mr-2" />
                Llamar Ahora
              </button>
            </div>
          </div>
        </section>
      </div>
    </div>
  )
}\n\n
=== ./public/pages/Home.jsx ===
import React, { useState, useEffect, useRef } from 'react'
import { gsap } from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'
import 'react-responsive-carousel/lib/styles/carousel.min.css'
import { getImagenesCarousel, getPromocionesCarousel } from '@domains/galeria/services/galeriaService'
import NavbarPublic from '@shared/components/NavbarPublic'

// Componentes decorativos
import ParticlesBackground from './home-components/decorative/ParticlesBackground'
import AnimatedBalloons from './home-components/decorative/AnimatedBalloons'
import BackgroundVideoComponent from './home-components/decorative/BackgroundVideoComponent'

// Secciones de la página
import HeroSection from './home-components/sections/HeroSection'
import PromotionsSection from './home-components/sections/PromotionsSection'
import ReservationStepsSection from './home-components/sections/ReservationStepsSection'
import ServicesSection from './home-components/sections/ServicesSection'
import FeaturesSection from './home-components/sections/FeaturesSection'
import GallerySection from './home-components/sections/GallerySection'
import ContactSection from './home-components/sections/ContactSection'
import FooterSection from './home-components/sections/FooterSection'

// Registrar GSAP ScrollTrigger
gsap.registerPlugin(ScrollTrigger)

/**
 * Componente principal de la página de inicio
 * Modularizado para mejor mantenimiento y organización
 */
const Home = () => {
  // Estados
  const [isVideoPlaying, setIsVideoPlaying] = useState(true);
  const [carouselImages, setCarouselImages] = useState([]);
  const [promocionesImages, setPromocionesImages] = useState([]);
  const [isLoadingImages, setIsLoadingImages] = useState(true);
  const [isLoadingPromociones, setIsLoadingPromociones] = useState(true);
  
  // Referencias
  const sectionRefs = {
    hero: useRef(null),
    content: useRef(null),
    video: useRef(null)
  };

  // Datos para servicios
  const services = {
    normal: {
      title: 'Tramboory Normal',
      description: 'La experiencia completa con todos los servicios incluidos para una celebración perfecta',
      price: '7,999',
      features: [
        {
          title: '4 Horas de Diversión',
          description: '3.5 horas de salón + 30 min de despedida',
          icon: FiClock
        },
        {
          title: 'Invitación Digital',
          description: 'Invitación personalizada para tu evento',
          icon: FiMail
        },
        {
          title: 'Decoración Temática',
          description: 'Ambientación Tramboory para tu fiesta',
          icon: FiGift
        },
        {
          title: 'Menú Completo',
          description: 'Alimentos para niños y adultos',
          icon: FiCoffee
        },
        {
          title: 'Bebidas Ilimitadas',
          description: 'Refrescos, agua y café de cortesía',
          icon: FiCoffee
        },
        {
          title: 'Área de Juegos',
          description: 'Ludoteca y alberca de pelotas',
          icon: FiSmile
        },
        {
          title: 'Ambiente Festivo',
          description: 'Música y anfitriones para animar',
          icon: FiMusic
        },
        {
          title: 'Coordinador de Evento',
          description: 'Personal dedicado para tu celebración',
          icon: FiUsers
        }
      ],
      highlights: ['Todo Incluido', 'Personal Completo', 'Sin Preocupaciones'],
      recommended: true
    },
    matutino: {
      title: 'Tramboory Matutino',
      description: 'Renta del espacio para eventos personalizados con servicios opcionales',
      price: '4,999',
      features: [
        {
          title: '3 Horas de Evento',
          description: 'Horario matutino flexible',
          icon: FiClock
        },
        {
          title: 'Espacio Exclusivo',
          description: 'Salón privado para tu evento',
          icon: FiMapPin
        },
        {
          title: 'Mobiliario Básico',
          description: 'Mesas y sillas incluidas',
          icon: FiPackage
        },
        {
          title: 'Servicios Opcionales',
          description: 'Personaliza tu experiencia',
          icon: FiStar
        }
      ],
      highlights: ['Personalizable', 'Económico', 'Flexible'],
      recommended: false
    }
  };

  // Cargar imágenes del carrusel y promociones desde la API
  useEffect(() => {
    // Función para cargar imágenes del carrusel
    const loadImages = async () => {
      try {
        setIsLoadingImages(true);
        const imagenes = await getImagenesCarousel();
        
        // Ordenar por el campo orden y obtener solo las URLs de las imágenes activas
        const imageUrls = imagenes
          .filter(img => img.activo)
          .sort((a, b) => a.orden - b.orden)
          .map(img => img.imagen_url);
        
        // Usar solo las imágenes de la base de datos
        setCarouselImages(imageUrls);
      } catch (error) {
        console.error('Error cargando imágenes del carrusel:', error);
        // En caso de error, establecer un array vacío
        setCarouselImages([]);
      } finally {
        setIsLoadingImages(false);
      }
    };
    
    // Función para cargar promociones del mes
    const loadPromociones = async () => {
      try {
        setIsLoadingPromociones(true);
        const promociones = await getPromocionesCarousel();
        
        // Ordenar por el campo orden y obtener solo las URLs de las promociones activas
        const promoUrls = promociones
          .filter(promo => promo.activo)
          .sort((a, b) => a.orden - b.orden)
          .map(promo => promo.imagen_url);
        
        setPromocionesImages(promoUrls);
      } catch (error) {
        console.error('Error cargando promociones del mes:', error);
        setPromocionesImages([]);
      } finally {
        setIsLoadingPromociones(false);
      }
    };
    
    loadImages();
    loadPromociones();
  }, []);
  
  // Efectos para animaciones
  useEffect(() => {
    let ctx = gsap.context(() => {
      // Parallax effect para el héroe
      if (sectionRefs.content.current && sectionRefs.hero.current) {
        gsap.to(sectionRefs.content.current, {
          yPercent: 30,
          ease: 'none',
          scrollTrigger: {
            trigger: sectionRefs.hero.current,
            start: 'top top',
            end: 'bottom top',
            scrub: true
          }
        });
      }

      // Animaciones para las características
      ScrollTrigger.batch('.feature-card', {
        onEnter: batch => gsap.to(batch, {
          opacity: 1,
          y: 0,
          stagger: 0.15,
          overwrite: true
        }),
        start: 'top bottom-=100',
        end: 'bottom top+=100',
        markers: false
      });
    });

    return () => {
      ScrollTrigger.getAll().forEach(trigger => trigger.kill());
      ctx.revert();
    };
  }, []);

  // Función toggleVideo mejorada
  const toggleVideo = (e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    console.log("Toggle Video clicked in Home:", !!sectionRefs.video.current);
    
    if (!sectionRefs.video.current) {
      console.error("No video reference available");
      return;
    }
    
    try {
      if (isVideoPlaying) {
        // Pausar video
        sectionRefs.video.current.pause();
        console.log("Video pausado en Home.jsx");
        setIsVideoPlaying(false);
      } else {
        // Reproducir video - forma simplificada
        sectionRefs.video.current.play()
          .then(() => {
            console.log("Video reproducido exitosamente en Home.jsx");
            setIsVideoPlaying(true);
          })
          .catch(err => {
            console.error("Error reproduciendo video en Home.jsx:", err);
            
            // Solo agregar listener para interacción de usuario si es necesario
            const handleUserInteraction = () => {
              sectionRefs.video.current.play()
                .then(() => {
                  setIsVideoPlaying(true);
                  document.removeEventListener('click', handleUserInteraction);
                  console.log("Video reproducido tras interacción del usuario");
                })
                .catch(e => console.error("Fallo en reproducción forzada:", e));
            };
            
            document.addEventListener('click', handleUserInteraction, { once: true });
          });
      }
    } catch (error) {
      console.error("Error al cambiar estado del video:", error);
    }
  };

  // JSX principal
  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-br from-purple-950 to-indigo-950">
      {/* Elementos decorativos de fondo */}
      <ParticlesBackground />
      <AnimatedBalloons />
      
      {/* Video de Fondo */}
      <BackgroundVideoComponent
        videoRef={sectionRefs.video}
        isVideoPlaying={isVideoPlaying}
        toggleVideo={toggleVideo}
      />

      {/* Navbar público */}
      <NavbarPublic />

      {/* Secciones principales */}
      <HeroSection sectionRefs={sectionRefs} />
      <PromotionsSection promocionesImages={promocionesImages} />
      <ReservationStepsSection />
      <ServicesSection services={services} />
      <FeaturesSection />
      <GallerySection carouselImages={carouselImages} />
      <ContactSection />
      <FooterSection />
    </div>
  );
};

// Importación faltante para iconos usados en los servicios
import { 
  FiClock, 
  FiMail, 
  FiGift, 
  FiCoffee, 
  FiSmile, 
  FiMusic, 
  FiUsers, 
  FiMapPin, 
  FiPackage, 
  FiStar 
} from 'react-icons/fi';

export default Home;\n\n
=== ./public/pages/PublicHomeContainer.jsx ===
import React from 'react';
import Home from './Home'; // Importa el componente real de la página de inicio

/**
 * Componente contenedor para la página principal que agrega la clase home-public
 * Esta clase se usa para excluir la página principal de los cambios de tema en modo oscuro
 */
const PublicHomeContainer = (props) => {
  return (
    <div className="home-public">
      <Home {...props} />
    </div>
  );
};

export default PublicHomeContainer; \n\n
=== ./public/pages/index.js ===
// Exportar todos los componentes de public/pages
export { default as AboutTramboory } from './AboutTramboory';
export { default as Appointment } from './Appointment';
export { default as Home } from './Home';
export { default as PublicHomeContainer } from './PublicHomeContainer';
// Agrega cualquier otra página pública que tengas\n\n
=== ./public/pages/publico.txt ===
import React, { useState, useEffect, useRef } from 'react'
import { motion } from 'framer-motion'
import { 
  FiInfo, 
  FiUsers, 
  FiHeart, 
  FiSmile, 
  FiStar, 
  FiCalendar, 
  FiMapPin, 
  FiMessageCircle,
  FiCamera,
  FiArrowRight
} from 'react-icons/fi'
import CloudinaryCarousel from '@shared/components/cloudinary/CloudinaryCarousel'
import { getImagenesCarousel } from '@domains/galeria/services/galeriaService'
import NavbarPublic from '@shared/components/NavbarPublic'

// Componentes decorativos
import ParticlesBackground from './home-components/decorative/ParticlesBackground'
import AnimatedBalloons from './home-components/decorative/AnimatedBalloons'
import BackgroundVideoComponent from './home-components/decorative/BackgroundVideoComponent'

/**
 * Página Acerca de Tramboory - rediseñada para mantener consistencia con Home.jsx
 */
const AboutTramboory = () => {
  // Referencias para elementos que necesitan animación
  const videoRef = useRef(null);
  const [isVideoPlaying, setIsVideoPlaying] = useState(true);
  
  // Toggle para el video de fondo
  const toggleVideo = () => {
    if (videoRef.current) {
      if (isVideoPlaying) {
        videoRef.current.pause();
      } else {
        videoRef.current.play();
      }
      setIsVideoPlaying(!isVideoPlaying);
    }
  };
  const [carouselImages, setCarouselImages] = useState([])
  const [isLoadingImages, setIsLoadingImages] = useState(true)

  // Cargar imágenes del carrusel desde la API
  useEffect(() => {
    const loadImages = async () => {
      try {
        setIsLoadingImages(true)
        const imagenes = await getImagenesCarousel()
        
        // Ordenar por el campo orden y obtener solo las URLs de las imágenes activas
        const imageUrls = imagenes
          .filter(img => img.activo)
          .sort((a, b) => a.orden - b.orden)
          .map(img => img.imagen_url)
        
        // Si no hay imágenes en la base de datos, usar imágenes de ejemplo
        if (imageUrls.length === 0) {
          setCarouselImages([
            'samples/landscapes/nature-mountains',
            'samples/landscapes/beach-boat',
            'samples/landscapes/girl-urban-view',
            'samples/food/dessert',
            'samples/people/bicycle'
          ])
        } else {
          setCarouselImages(imageUrls)
        }
      } catch (error) {
        console.error('Error cargando imágenes del carrusel:', error)
        // En caso de error, usar imágenes de ejemplo
        setCarouselImages([
          'samples/landscapes/nature-mountains',
          'samples/landscapes/beach-boat',
          'samples/landscapes/girl-urban-view',
          'samples/landscapes/architecture-signs'
        ])
      } finally {
        setIsLoadingImages(false)
      }
    }
    
    loadImages()
  }, [])

  // Componente FeatureCard para destacar características de Tramboory
  const FeatureCard = ({ feature, index }) => {
    const cardVariants = {
      hidden: { opacity: 0, y: 50 },
      visible: {
        opacity: 1,
        y: 0,
        transition: {
          type: "spring",
          duration: 0.6,
          delay: index * 0.1
        }
      },
      hover: {
        y: -10,
        transition: {
          type: "spring",
          stiffness: 300,
          damping: 20
        }
      }
    }

    const gradients = {
      green: 'from-green-400 to-green-600',
      yellow: 'from-yellow-400 to-yellow-600',
      pink: 'from-pink-400 to-pink-600',
      blue: 'from-blue-400 to-blue-600',
      purple: 'from-purple-400 to-purple-600',
      red: 'from-red-400 to-red-600'
    }

    return (
      <motion.div
        variants={cardVariants}
        initial="hidden"
        whileInView="visible"
        whileHover="hover"
        viewport={{ once: true }}
        className="feature-card p-8 rounded-xl bg-white/10 backdrop-blur-lg
          border border-white/20 hover:border-white/40 hover:shadow-xl 
          transition-all duration-300"
      >
        <div
          className={`w-16 h-16 rounded-full mb-6 flex items-center justify-center
          bg-gradient-to-r ${gradients[feature.color] || gradients.blue}`}
        >
          <feature.icon className="text-2xl text-white" />
        </div>
        <h3 className="text-2xl font-bold text-white mb-4 font-funhouse">{feature.title}</h3>
        <p className="text-gray-300">{feature.description}</p>
      </motion.div>
    )
  }

  // Datos - Características principales de Tramboory
  const features = [
    {
      icon: FiHeart,
      title: 'Nuestro Corazón',
      description: 'En Tramboory creemos en crear momentos inolvidables para las familias, ofreciendo un espacio donde la diversión y la magia se encuentran.',
      color: 'pink'
    },
    {
      icon: FiUsers,
      title: 'Equipo Apasionado',
      description: 'Nuestro equipo está dedicado a hacer de cada evento una experiencia perfecta, cuidando hasta el más mínimo detalle.',
      color: 'purple'
    },
    {
      icon: FiStar,
      title: 'Experiencia Premium',
      description: 'Ofrecemos un servicio de primera calidad, con instalaciones modernas y seguras para que todos disfruten sin preocupaciones.',
      color: 'yellow'
    },
    {
      icon: FiCalendar,
      title: 'Historia y Trayectoria',
      description: 'Desde nuestra fundación, hemos sido parte de miles de celebraciones, creciendo y mejorando constantemente.',
      color: 'blue'
    },
    {
      icon: FiSmile,
      title: 'Diversión Garantizada',
      description: 'Diseñamos cada actividad y espacio para asegurar que todos los asistentes, grandes y pequeños, disfruten al máximo.',
      color: 'green'
    },
    {
      icon: FiMapPin,
      title: 'Ubicación Estratégica',
      description: 'Nos encontramos en una zona accesible de Zapopan, con estacionamiento y todas las facilidades para tu comodidad.',
      color: 'red'
    }
  ]

  // Datos de historia de Tramboory
  const historyMilestones = [
    {
      year: '2018',
      title: 'Nace una Idea',
      description: 'Tramboory surge como un sueño de crear un espacio único para celebraciones infantiles en Guadalajara.'
    },
    {
      year: '2019',
      title: 'Abrimos Nuestras Puertas',
      description: 'Inauguramos nuestras instalaciones en Zapopan, con una gran fiesta de apertura que marcó el inicio de nuestra historia.'
    },
    {
      year: '2020',
      title: 'Superando Desafíos',
      description: 'A pesar de los retos globales, nos reinventamos para seguir ofreciendo experiencias seguras y memorables.'
    },
    {
      year: '2021',
      title: 'Crecimiento y Expansión',
      description: 'Ampliamos nuestros servicios y mejoramos nuestras instalaciones para ofrecer más opciones a nuestros clientes.'
    },
    {
      year: '2022',
      title: 'Innovación Constante',
      description: 'Implementamos nuevas tecnologías y temas de decoración para mantenernos a la vanguardia.'
    },
    {
      year: '2023',
      title: 'Comunidad Tramboory',
      description: 'Celebramos haber sido parte de más de 1,000 eventos y construido una comunidad fiel de familias que confían en nosotros.'
    }
  ]

  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-br from-purple-950 to-indigo-950">
      {/* Elementos decorativos de fondo */}
      <ParticlesBackground />
      <AnimatedBalloons />
      
      {/* Video de Fondo */}
      <BackgroundVideoComponent
        videoRef={videoRef}
        isVideoPlaying={isVideoPlaying}
        toggleVideo={toggleVideo}
      />

      {/* Navbar público */}
      <NavbarPublic />
      
      {/* Sección Hero */}
      <section className="relative pt-32 pb-16 bg-gradient-to-b from-black/40 to-transparent">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="text-center mb-12"
          >
            <h1 className="text-5xl md:text-6xl font-bold text-white mb-6 font-funhouse">
              Conoce{' '}
              <span className="text-gradient bg-clip-text text-transparent bg-gradient-to-r from-yellow-300 to-pink-500">
                Tramboory
              </span>
            </h1>
            <p className="text-xl md:text-2xl text-gray-200 max-w-3xl mx-auto">
              Un espacio mágico donde los sueños se convierten en celebraciones inolvidables
            </p>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="mb-16"
          >
            <CloudinaryCarousel 
              height="500px"
              autoPlaySpeed={3000}
              imageWidth={1.8}
              images={carouselImages}
            />
          </motion.div>
        </div>
        
        {/* Decorative Elements */}
        <div className="absolute top-0 inset-x-0 h-64 bg-gradient-to-b from-black/50 to-transparent pointer-events-none" />
        <div className="absolute bottom-0 inset-x-0 h-64 bg-gradient-to-t from-purple-900/50 to-transparent pointer-events-none" />
      </section>

      {/* Sección Quiénes Somos */}
      <section className="relative py-20 bg-gradient-to-b from-purple-900/90 to-indigo-900/90">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-6 font-funhouse">
              ¿Quiénes Somos?
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              En Tramboory somos especialistas en crear momentos llenos de alegría y diversión para toda la familia
            </p>
          </motion.div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-5xl mx-auto">
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              whileInView={{ opacity: 1, x: 0 }}
              viewport={{ once: true }}
              className="bg-white/10 backdrop-blur-lg p-8 rounded-2xl border border-white/20"
            >
              <div className="flex items-center mb-6">
                <FiInfo className="text-3xl text-yellow-400 mr-4" />
                <h3 className="text-2xl font-bold text-white font-funhouse">Nuestra Misión</h3>
              </div>
              <p className="text-gray-300 mb-4">
                Crear experiencias mágicas y memorables para las familias, ofreciendo un espacio seguro y divertido donde los niños puedan celebrar momentos especiales y los adultos puedan disfrutar sin preocupaciones.
              </p>
              <p className="text-gray-300">
                Nos dedicamos a transformar cada evento en una celebración única, adaptada a los gustos y necesidades de cada cliente, con atención personalizada y servicio de excelencia.
              </p>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, x: 30 }}
              whileInView={{ opacity: 1, x: 0 }}
              viewport={{ once: true }}
              className="bg-white/10 backdrop-blur-lg p-8 rounded-2xl border border-white/20"
            >
              <div className="flex items-center mb-6">
                <FiStar className="text-3xl text-yellow-400 mr-4" />
                <h3 className="text-2xl font-bold text-white font-funhouse">Nuestra Visión</h3>
              </div>
              <p className="text-gray-300 mb-4">
                Ser reconocidos como el lugar preferido para celebraciones infantiles en Guadalajara, innovando constantemente en nuestros servicios y creando tendencias en el mercado.
              </p>
              <p className="text-gray-300">
                Buscamos expandir nuestra presencia y llevar la magia de Tramboory a más familias, manteniendo siempre nuestros valores de excelencia, creatividad y pasión por lo que hacemos.
              </p>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Sección Características */}
      <section className="relative py-20 bg-gradient-to-b from-indigo-900/90 to-purple-900/90">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-6 font-funhouse">
              ¿Por qué Tramboory?
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              Descubre lo que nos hace especiales y por qué tantas familias confían en nosotros
            </p>
          </motion.div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
            {features.map((feature, index) => (
              <FeatureCard key={index} feature={feature} index={index} />
            ))}
          </div>
        </div>
      </section>

      {/* Sección Historia */}
      <section className="relative py-20 bg-gradient-to-b from-purple-900/90 to-black/90">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-6 font-funhouse">
              Nuestra Historia
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              El camino que hemos recorrido para convertirnos en el espacio mágico que somos hoy
            </p>
          </motion.div>

          <div className="relative max-w-4xl mx-auto">
            {/* Línea de tiempo vertical */}
            <div className="absolute left-1/2 top-0 bottom-0 w-1 bg-gradient-to-b from-yellow-400 to-pink-500 transform -translate-x-1/2"></div>
            
            {historyMilestones.map((milestone, index) => (
              <motion.div 
                key={index}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true, margin: "-100px" }}
                transition={{ delay: index * 0.1 }}
                className={`relative mb-16 flex ${
                  index % 2 === 0 ? "flex-row" : "flex-row-reverse"
                }`}
              >
                {/* Círculo en la línea de tiempo */}
                <div className="absolute left-1/2 top-0 w-8 h-8 bg-gradient-to-r from-yellow-400 to-pink-500 rounded-full transform -translate-x-1/2 z-10 border-4 border-purple-900"></div>
                
                {/* Contenedor del contenido */}
                <div className={`w-5/12 ${index % 2 === 0 ? "pr-8 text-right" : "pl-8 text-left"}`}>
                  <div className="bg-white/10 backdrop-blur-lg p-6 rounded-xl border border-white/20 hover:border-white/40 transition-all duration-300 hover:shadow-xl">
                    <div className="inline-block px-4 py-2 bg-gradient-to-r from-yellow-400 to-pink-500 text-purple-900 font-bold rounded-full mb-4">
                      {milestone.year}
                    </div>
                    <h3 className="text-xl font-bold text-white mb-3 font-funhouse">{milestone.title}</h3>
                    <p className="text-gray-300">{milestone.description}</p>
                  </div>
                </div>
                
                {/* Espacio para el lado opuesto */}
                <div className="w-5/12"></div>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Sección CTA */}
      <section className="relative py-16 bg-gradient-to-b from-black/90 to-purple-900/90">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            whileInView={{ opacity: 1, scale: 1 }}
            viewport={{ once: true }}
            className="max-w-4xl mx-auto bg-gradient-to-r from-purple-800/80 to-indigo-800/80 p-10 rounded-2xl border border-white/10 text-center backdrop-blur-lg"
          >
            <h2 className="text-3xl md:text-4xl font-bold text-white mb-6 font-funhouse">
              ¡Vive la Experiencia Tramboory!
            </h2>
            <p className="text-xl text-gray-200 mb-10">
              Estamos listos para hacer de tu próxima celebración un momento inolvidable
            </p>
            <div className="flex flex-col sm:flex-row items-center justify-center gap-6">
              <motion.button
                onClick={() => {
                  window.open("https://wa.me/523332300243?text=Hola%2C%20me%20gustar%C3%ADa%20obtener%20m%C3%A1s%20informaci%C3%B3n%20sobre%20sus%20servicios%20para%20fiestas%20infantiles.", '_blank', 'noopener,noreferrer');
                }}
                whileHover={{ scale: 1.1, rotate: 5 }}
                whileTap={{ scale: 0.95 }}
                className="inline-flex items-center justify-center space-x-2 py-3 px-6
                  bg-green-500 text-white rounded-lg font-bold hover:bg-green-600
                  transition-colors duration-300 shadow-lg cursor-pointer"
                aria-label="Contactar por WhatsApp"
              >
                <FiMessageCircle className="text-xl" />
                <span>Contactar por WhatsApp</span>
              </motion.button>
              
              <motion.a
                href="/appointments"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="px-8 py-3 bg-gradient-to-r from-yellow-400 to-yellow-500
                  text-purple-900 rounded-lg font-bold text-lg shadow-xl
                  hover:from-yellow-500 hover:to-yellow-600 transition-all duration-300 flex items-center"
              >
                <span>Reservar Ahora</span>
                <FiArrowRight className="ml-2" />
              </motion.a>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Sección Galería al final */}
      <section className="relative py-20 bg-gradient-to-b from-purple-900/90 to-black/90">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-6 font-funhouse">
              Momentos Mágicos
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              Algunos recuerdos de las celebraciones especiales en nuestras instalaciones
            </p>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            viewport={{ once: true }}
            className="mb-16"
          >
            <CloudinaryCarousel 
              height="450px"
              autoPlaySpeed={2500}
              imageWidth={1.6}
              images={carouselImages}
            />
          </motion.div>

          <div className="flex justify-center">
            <motion.a
              href="https://www.instagram.com/tramboory/"
              target="_blank"
              rel="noopener noreferrer"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="flex items-center px-8 py-4 bg-white/10 backdrop-blur-sm text-white 
                rounded-full font-bold text-lg border-2 border-yellow-400/30 hover:bg-white/20
                transition-all duration-300"
            >
              <FiCamera className="mr-2" />
              Ver más en Instagram
            </motion.a>
          </div>
        </div>
        
        {/* Decorative Elements */}
        <div className="absolute top-0 inset-x-0 h-64 bg-gradient-to-b from-purple-900/20 to-transparent pointer-events-none" />
        <div className="absolute bottom-0 inset-x-0 h-64 bg-gradient-to-t from-black/20 to-transparent pointer-events-none" />
      </section>
    </div>
  )
}

export default AboutTrambooryimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react'
import { Link } from 'react-router-dom'
import { motion, AnimatePresence } from 'framer-motion'
import { gsap } from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'
import NavbarPublic from '@shared/components/NavbarPublic'
import {
  FiClock,
  FiImage,
  FiCoffee,
  FiMusic,
  FiUsers,
  FiArrowRight,
  FiCheck,
  FiX,
  FiPhone,
  FiMessageSquare,
  FiPlus,
  FiMinus,
  FiPlay,
  FiPause
} from 'react-icons/fi'

// Componentes decorativos
import ParticlesBackground from './home-components/decorative/ParticlesBackground'
import AnimatedBalloons from './home-components/decorative/AnimatedBalloons'
import BackgroundVideoComponent from './home-components/decorative/BackgroundVideoComponent'

gsap.registerPlugin(ScrollTrigger)

/**
 * Componente de tarjeta de servicio para mostrar los paquetes 
 * disponibles con animaciones y detalles expandibles
 */
const ServiceCard = ({
  title,
  description,
  items,
  price,
  recommended,
  type
}) => {
  const [expandedCategory, setExpandedCategory] = useState(null)
  const [isHovered, setIsHovered] = useState(false)

  const cardVariants = {
    hover: {
      scale: 1.02,
      y: -5,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 20
      }
    }
  }

  const categoryVariants = {
    collapsed: { height: 0, opacity: 0 },
    expanded: { height: 'auto', opacity: 1 }
  }

  return (
    <motion.div
      variants={cardVariants}
      whileHover='hover'
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
      className={`bg-white/10 backdrop-blur-lg rounded-2xl shadow-xl p-8 relative cursor-pointer
            ${
              recommended
                ? 'border-4 border-yellow-400'
                : 'border border-white/20'
            }
            transform transition-all duration-300`}
    >
      {recommended && (
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className='absolute -top-4 left-1/2 transform -translate-x-1/2'
        >
          <span className='bg-yellow-400 text-purple-900 px-6 py-2 rounded-full text-sm font-semibold shadow-lg'>
            Paquete Completo
          </span>
        </motion.div>
      )}

      {/* Efecto de brillo en hover */}
      <div
        className={`absolute inset-0 rounded-2xl transition-opacity duration-300 pointer-events-none
              ${isHovered ? 'opacity-100' : 'opacity-0'}
              bg-gradient-to-r from-transparent via-white/10 to-transparent
              animate-shine`}
      />

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className='mb-6'
      >
        <span
          className={`text-sm font-semibold ${
            type === 'normal' ? 'text-yellow-300' : 'text-purple-300'
          }`}
        >
          {type === 'normal' ? 'Todo Incluido' : 'Renta de Espacio'}
        </span>
        <h3 className='text-2xl font-bold text-white mt-2'>{title}</h3>
        <p className='text-gray-300 mt-2'>{description}</p>

        <div className='mt-4 text-3xl font-bold text-white'>
          ${price}
          <span className='text-base font-normal text-gray-400'>/evento</span>
        </div>
      </motion.div>

      <div className='space-y-4 mb-8'>
        {Object.entries(items).map(([category, categoryItems], index) => (
          <motion.div
            key={category}
            className='rounded-lg overflow-hidden'
            initial={false}
            animate={expandedCategory === category ? 'expanded' : 'collapsed'}
          >
            <motion.button
              onClick={() =>
                setExpandedCategory(
                  expandedCategory === category ? null : category
                )
              }
              className={`w-full text-left p-4 flex items-center justify-between
                    rounded-lg transition-colors duration-300
                    ${
                      expandedCategory === category
                        ? 'bg-purple-800/50 text-yellow-300'
                        : 'bg-purple-900/30 text-white hover:bg-purple-800/40'
                    }`}
            >
              <span className='font-semibold'>{category}</span>
              <motion.div
                animate={{ rotate: expandedCategory === category ? 180 : 0 }}
                transition={{ duration: 0.3 }}
              >
                {expandedCategory === category ? <FiMinus /> : <FiPlus />}
              </motion.div>
            </motion.button>

            <AnimatePresence>
              {expandedCategory === category && (
                <motion.div
                  initial='collapsed'
                  animate='expanded'
                  exit='collapsed'
                  variants={categoryVariants}
                  transition={{ duration: 0.3 }}
                  className='px-4 py-2 bg-purple-900/20 backdrop-blur-sm'
                >
                  {categoryItems.map((item, itemIndex) => (
                    <motion.div
                      key={itemIndex}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: itemIndex * 0.1 }}
                      className='flex items-start py-2'
                    >
                      {item.included ? (
                        <FiCheck className='text-green-400 mt-1 mr-3 flex-shrink-0 w-5 h-5' />
                      ) : (
                        <FiX className='text-red-400 mt-1 mr-3 flex-shrink-0 w-5 h-5' />
                      )}
                      <div>
                        <p
                          className={`font-medium ${
                            item.included ? 'text-white' : 'text-gray-400'
                          }`}
                        >
                          {item.title}
                        </p>
                        {item.description && (
                          <p
                            className={`text-sm ${
                              item.included ? 'text-gray-300' : 'text-gray-500'
                            }`}
                          >
                            {item.description}
                          </p>
                        )}
                      </div>
                    </motion.div>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        ))}
      </div>

      <motion.div className='space-y-4' whileHover={{ scale: 1.02 }}>
        <Link
          to='/signin'
          className={`block w-full py-3 px-6 text-center rounded-lg font-semibold 
                transition-all duration-300 transform hover:scale-105 hover:shadow-lg
                ${
                  type === 'normal'
                    ? 'bg-yellow-400 hover:bg-yellow-500 text-purple-900'
                    : 'bg-purple-600 hover:bg-purple-700 text-white'
                }`}
        >
          Reservar Ahora
          <FiArrowRight className='inline ml-2' />
        </Link>

        <button
          onClick={() => (window.location.href = 'tel:+523332300243')}
          className='w-full py-3 px-6 text-center rounded-lg font-semibold 
                border-2 border-white/20 text-white hover:bg-white/10 
                transition-all duration-300 transform hover:scale-105 hover:shadow-lg'
        >
          Llamar para Información
          <FiPhone className='inline ml-2' />
        </button>
      </motion.div>
    </motion.div>
  )
}

/**
 * Componente Appointment rediseñado para mantener consistencia con Home.jsx
 */
export default function Appointment () {
  // Referencias para elementos que necesitan animación
  const videoRef = useRef(null);
  const [isVideoPlaying, setIsVideoPlaying] = useState(true);
  
  // Efecto para inicializar el video de manera segura
  useEffect(() => {
    const initializeVideo = async () => {
      if (!videoRef.current) {
        console.warn("Video element not available on mount");
        return;
      }
      
      console.log("Initializing video element");
      
      try {
        // Forzar carga del video
        videoRef.current.load();
        
        // Verificar si el navegador permite autoplay
        const canAutoplay = await testAutoplayCapability();
        console.log("Autoplay capability:", canAutoplay);
        
        if (canAutoplay) {
          await videoRef.current.play();
          console.log("Video started playing automatically");
          setIsVideoPlaying(true);
        } else {
          console.log("Autoplay not supported - video paused");
          videoRef.current.pause();
          setIsVideoPlaying(false);
        }
      } catch (error) {
        console.error("Error initializing video:", error);
        setIsVideoPlaying(false);
      }
    };
    
    // Función para probar capacidad de autoplay
    const testAutoplayCapability = () => {
      return new Promise(resolve => {
        // Crear un video temporal para probar autoplay
        const testVideo = document.createElement('video');
        testVideo.muted = true;
        testVideo.playsInline = true;
        testVideo.src = "data:video/mp4;base64,AAAAIGZ0eXBtcDQyAAAAAG1wNDJtcDQxaXNvbWF2YzEAAATKbW9vdgAAAGxtdmhkAAAAANLEP5XSxD+VAAB1MAAAdU4AAQAAAQAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAACFpb2RzAAAAABCAgIAQAE////9//w6AgIAEAAAAAQAABDV0cmFrAAAAXHRraGQAAAAH0sQ/ldLEP5UAAAABAAAAAAAAdU4AAAAAAAAAAAAAAAABAQAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAABbG1kaWEAAAAgbWRoZAAAAADSxD+V0sQ/lQAAVcQAAK1lAAAAAAAAAABiaWRpAAAAAG1keGQAAAAAAAAAAAAAAAAAAD5tZGlhAAAAO21kYXQAAAAAAAEBIAACEAUQAA==";
        
        // Si el video puede reproducirse, entonces autoplay está permitido
        const playPromise = testVideo.play();
        if (playPromise !== undefined) {
          playPromise
            .then(() => resolve(true))
            .catch(() => resolve(false));
        } else {
          resolve(false);
        }
      });
    };
    
    // Inicializar con un pequeño retraso para asegurar que el DOM está listo
    const timer = setTimeout(() => {
      initializeVideo();
    }, 500);
    
    return () => clearTimeout(timer);
  }, []);
  
  // Efecto GSAP para elementos animados en scroll
  useLayoutEffect(() => {
    const ctx = gsap.context(() => {
      ScrollTrigger.batch('.animate-on-scroll', {
        onEnter: batch =>
          gsap.to(batch, {
            opacity: 1,
            y: 0,
            stagger: 0.15,
            overwrite: true
          }),
        start: 'top bottom-=100',
        end: 'bottom top',
        markers: false
      })
    })

    return () => ctx.revert()
  }, [])

  // Función toggleVideo simplificada y mejorada
  const toggleVideo = (e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    console.log("Toggle Video clicked with event:", e);
    console.log("Video ref exists:", !!videoRef.current);
    console.log("Current playing state:", isVideoPlaying);
    
    if (!videoRef.current) {
      console.error("No video reference available");
      return;
    }
    
    try {
      if (isVideoPlaying) {
        // Pausar video
        videoRef.current.pause();
        console.log("Video pause command sent");
        setIsVideoPlaying(false);
      } else {
        // Reproducir video - forma simplificada
        videoRef.current.play()
          .then(() => {
            console.log("Video play successful");
            setIsVideoPlaying(true);
          })
          .catch(err => {
            console.error("Error playing video:", err);
            
            // Solo agregar listener para interacción de usuario si es necesario
            const handleUserInteraction = () => {
              videoRef.current.play()
                .then(() => {
                  setIsVideoPlaying(true);
                  document.removeEventListener('click', handleUserInteraction);
                  console.log("Video reproducido tras interacción del usuario");
                })
                .catch(e => console.error("Fallo en reproducción forzada:", e));
            };
            
            document.addEventListener('click', handleUserInteraction, { once: true });
          });
      }
    } catch (error) {
      console.error("Error al cambiar estado del video:", error);
    }
  };

  // Definición de servicios
  const services = {
    normal: {
      title: 'Tramboory Normal',
      description:
        'La experiencia completa con todos los servicios incluidos para una celebración perfecta.',
      price: '7,999',
      recommended: true,
      type: 'normal',
      items: {
        'Tiempo y Espacio': [
          {
            title: '4 Horas de Diversión',
            description: '3.5 horas de salón + 30 min de despedida',
            included: true
          }
        ],
        'Decoración y Personalización': [
          {
            title: 'Invitación Digital',
            description: 'Invitación personalizada para tu evento',
            included: true
          },
          {
            title: 'Decoración Temática',
            description: 'Ambientación Tramboory para tu fiesta',
            included: true
          }
        ],
        'Alimentos y Bebidas': [
          {
            title: 'Menú Completo',
            description: 'Alimentos para niños y adultos',
            included: true
          },
          {
            title: 'Bebidas Ilimitadas',
            description: 'Refrescos, agua y café de cortesía',
            included: true
          }
        ],
        'Entretenimiento y Personal': [
          {
            title: 'Área de Juegos',
            description: 'Ludoteca y alberca de pelotas',
            included: true
          },
          {
            title: 'Ambiente Festivo',
            description: 'Música y anfitriones para animar',
            included: true
          },
          {
            title: 'Coordinador de Evento',
            description: 'Personal dedicado para tu celebración',
            included: true
          }
        ]
      }
    },
    matutino: {
      title: 'Tramboory Matutino',
      description:
        'Renta del espacio para eventos personalizados con la opción de agregar servicios adicionales.',
      price: '4,999',
      recommended: false,
      type: 'matutino',
      items: {
        'Renta Básica': [
          {
            title: 'Espacio Exclusivo',
            description: 'Salón privado para tu evento',
            included: true
          },
          {
            title: 'Mobiliario Básico',
            description: 'Mesas y sillas incluidas',
            included: true
          },
          {
            title: 'Horario Matutino',
            description: '3 horas de evento',
            included: true
          }
        ],
        'Servicios Opcionales': [
          {
            title: 'Servicio de Alimentos',
            description: 'Personaliza el menú a tu gusto',
            included: false
          },
          {
            title: 'Decoración',
            description: 'Opción de decorar el espacio',
            included: false
          },
          {
            title: 'Personal de Servicio',
            description: 'Meseros y personal de apoyo opcional',
            included: false
          }
        ]
      }
    }
  }

  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-br from-purple-950 to-indigo-950">
      {/* Primero los elementos decorativos de fondo */}
      <ParticlesBackground />
      <AnimatedBalloons />
      
      {/* Video de Fondo - Asegúrate de que esté antes de otros elementos de contenido */}
      <BackgroundVideoComponent
        videoRef={videoRef}
        isVideoPlaying={isVideoPlaying}
        toggleVideo={toggleVideo}
      />

      {/* Contenido principal con mayor z-index para estar por encima del video */}
      <div className="relative z-10 pointer-events-none">
        {/* Navbar público */}
        <div className="pointer-events-auto">
          <NavbarPublic />
        </div>

        {/* Hero Section */}
        <section className="relative pt-32 pb-20 px-4 sm:px-6 lg:px-8 animate-on-scroll pointer-events-auto">
          <div className="max-w-7xl mx-auto text-center">
            <motion.h1
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-5xl md:text-6xl font-extrabold text-white mb-8 font-funhouse"
            >
              Elige tu Experiencia
              <span className="block text-gradient bg-clip-text text-transparent bg-gradient-to-r from-yellow-300 to-yellow-500">Tramboory</span>
            </motion.h1>
            <motion.p
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="text-xl text-gray-300 max-w-3xl mx-auto mb-10"
            >
              Dos opciones perfectas para tu celebración: nuestro paquete todo
              incluido o personaliza tu evento a tu manera en horario matutino.
            </motion.p>
          </div>
        </section>

        {/* Services Section */}
        <section className="py-12 px-4 sm:px-6 lg:px-8 pointer-events-auto">
          <div className="max-w-7xl mx-auto">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <ServiceCard {...services.normal} />
              <ServiceCard {...services.matutino} />
            </div>
          </div>
        </section>

        {/* Contact Section */}
        <section className="py-16 px-4 sm:px-6 lg:px-8 relative overflow-hidden pointer-events-auto">
          <div className="absolute inset-0 bg-gradient-to-r from-purple-800/90 to-indigo-800/90 backdrop-blur-sm" />
          <div className="max-w-7xl mx-auto relative z-10 text-center">
            <h2 className="text-3xl font-bold text-white mb-6 font-funhouse">
              ¿Tienes dudas sobre nuestros servicios?
            </h2>
            <p className="text-white/90 text-lg mb-8">
              Nuestro equipo está listo para ayudarte a elegir la mejor opción
              para tu evento
            </p>
            <div className="flex flex-col sm:flex-row justify-center gap-4">
              <button
                onClick={() => {
                  window.open("https://wa.me/523332300243?text=Hola%2C%20me%20gustar%C3%ADa%20obtener%20m%C3%A1s%20informaci%C3%B3n%20sobre%20sus%20servicios%20para%20fiestas%20infantiles.", '_blank', 'noopener,noreferrer');
                }}
                className="inline-flex items-center justify-center px-6 py-3 rounded-lg 
                        bg-white text-purple-900 font-semibold hover:bg-gray-100 
                        transition-all duration-300 transform hover:scale-105"
              >
                <FiMessageSquare className="mr-2" />
                Contáctanos
              </button>
              <button
                onClick={() => (window.location.href = 'tel:+523332300243')}
                className="inline-flex items-center justify-center px-6 py-3 rounded-lg 
                        border-2 border-white text-white font-semibold hover:bg-white/10 
                        transition-all duration-300 transform hover:scale-105"
              >
                <FiPhone className="mr-2" />
                Llamar Ahora
              </button>
            </div>
          </div>
        </section>
      </div>
    </div>
  )
}import React, { useState, useEffect, useRef } from 'react'
import { gsap } from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'
import 'react-responsive-carousel/lib/styles/carousel.min.css'
import { getImagenesCarousel, getPromocionesCarousel } from '@domains/galeria/services/galeriaService'
import NavbarPublic from '@shared/components/NavbarPublic'

// Componentes decorativos
import ParticlesBackground from './home-components/decorative/ParticlesBackground'
import AnimatedBalloons from './home-components/decorative/AnimatedBalloons'
import BackgroundVideoComponent from './home-components/decorative/BackgroundVideoComponent'

// Secciones de la página
import HeroSection from './home-components/sections/HeroSection'
import PromotionsSection from './home-components/sections/PromotionsSection'
import ReservationStepsSection from './home-components/sections/ReservationStepsSection'
import ServicesSection from './home-components/sections/ServicesSection'
import FeaturesSection from './home-components/sections/FeaturesSection'
import GallerySection from './home-components/sections/GallerySection'
import ContactSection from './home-components/sections/ContactSection'
import FooterSection from './home-components/sections/FooterSection'

// Registrar GSAP ScrollTrigger
gsap.registerPlugin(ScrollTrigger)

/**
 * Componente principal de la página de inicio
 * Modularizado para mejor mantenimiento y organización
 */
const Home = () => {
  // Estados
  const [isVideoPlaying, setIsVideoPlaying] = useState(true);
  const [carouselImages, setCarouselImages] = useState([]);
  const [promocionesImages, setPromocionesImages] = useState([]);
  const [isLoadingImages, setIsLoadingImages] = useState(true);
  const [isLoadingPromociones, setIsLoadingPromociones] = useState(true);
  
  // Referencias
  const sectionRefs = {
    hero: useRef(null),
    content: useRef(null),
    video: useRef(null)
  };

  // Datos para servicios
  const services = {
    normal: {
      title: 'Tramboory Normal',
      description: 'La experiencia completa con todos los servicios incluidos para una celebración perfecta',
      price: '7,999',
      features: [
        {
          title: '4 Horas de Diversión',
          description: '3.5 horas de salón + 30 min de despedida',
          icon: FiClock
        },
        {
          title: 'Invitación Digital',
          description: 'Invitación personalizada para tu evento',
          icon: FiMail
        },
        {
          title: 'Decoración Temática',
          description: 'Ambientación Tramboory para tu fiesta',
          icon: FiGift
        },
        {
          title: 'Menú Completo',
          description: 'Alimentos para niños y adultos',
          icon: FiCoffee
        },
        {
          title: 'Bebidas Ilimitadas',
          description: 'Refrescos, agua y café de cortesía',
          icon: FiCoffee
        },
        {
          title: 'Área de Juegos',
          description: 'Ludoteca y alberca de pelotas',
          icon: FiSmile
        },
        {
          title: 'Ambiente Festivo',
          description: 'Música y anfitriones para animar',
          icon: FiMusic
        },
        {
          title: 'Coordinador de Evento',
          description: 'Personal dedicado para tu celebración',
          icon: FiUsers
        }
      ],
      highlights: ['Todo Incluido', 'Personal Completo', 'Sin Preocupaciones'],
      recommended: true
    },
    matutino: {
      title: 'Tramboory Matutino',
      description: 'Renta del espacio para eventos personalizados con servicios opcionales',
      price: '4,999',
      features: [
        {
          title: '3 Horas de Evento',
          description: 'Horario matutino flexible',
          icon: FiClock
        },
        {
          title: 'Espacio Exclusivo',
          description: 'Salón privado para tu evento',
          icon: FiMapPin
        },
        {
          title: 'Mobiliario Básico',
          description: 'Mesas y sillas incluidas',
          icon: FiPackage
        },
        {
          title: 'Servicios Opcionales',
          description: 'Personaliza tu experiencia',
          icon: FiStar
        }
      ],
      highlights: ['Personalizable', 'Económico', 'Flexible'],
      recommended: false
    }
  };

  // Cargar imágenes del carrusel y promociones desde la API
  useEffect(() => {
    // Función para cargar imágenes del carrusel
    const loadImages = async () => {
      try {
        setIsLoadingImages(true);
        const imagenes = await getImagenesCarousel();
        
        // Ordenar por el campo orden y obtener solo las URLs de las imágenes activas
        const imageUrls = imagenes
          .filter(img => img.activo)
          .sort((a, b) => a.orden - b.orden)
          .map(img => img.imagen_url);
        
        // Usar solo las imágenes de la base de datos
        setCarouselImages(imageUrls);
      } catch (error) {
        console.error('Error cargando imágenes del carrusel:', error);
        // En caso de error, establecer un array vacío
        setCarouselImages([]);
      } finally {
        setIsLoadingImages(false);
      }
    };
    
    // Función para cargar promociones del mes
    const loadPromociones = async () => {
      try {
        setIsLoadingPromociones(true);
        const promociones = await getPromocionesCarousel();
        
        // Ordenar por el campo orden y obtener solo las URLs de las promociones activas
        const promoUrls = promociones
          .filter(promo => promo.activo)
          .sort((a, b) => a.orden - b.orden)
          .map(promo => promo.imagen_url);
        
        setPromocionesImages(promoUrls);
      } catch (error) {
        console.error('Error cargando promociones del mes:', error);
        setPromocionesImages([]);
      } finally {
        setIsLoadingPromociones(false);
      }
    };
    
    loadImages();
    loadPromociones();
  }, []);
  
  // Efectos para animaciones
  useEffect(() => {
    let ctx = gsap.context(() => {
      // Parallax effect para el héroe
      if (sectionRefs.content.current && sectionRefs.hero.current) {
        gsap.to(sectionRefs.content.current, {
          yPercent: 30,
          ease: 'none',
          scrollTrigger: {
            trigger: sectionRefs.hero.current,
            start: 'top top',
            end: 'bottom top',
            scrub: true
          }
        });
      }

      // Animaciones para las características
      ScrollTrigger.batch('.feature-card', {
        onEnter: batch => gsap.to(batch, {
          opacity: 1,
          y: 0,
          stagger: 0.15,
          overwrite: true
        }),
        start: 'top bottom-=100',
        end: 'bottom top+=100',
        markers: false
      });
    });

    return () => {
      ScrollTrigger.getAll().forEach(trigger => trigger.kill());
      ctx.revert();
    };
  }, []);

  // Función toggleVideo mejorada
  const toggleVideo = (e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    console.log("Toggle Video clicked in Home:", !!sectionRefs.video.current);
    
    if (!sectionRefs.video.current) {
      console.error("No video reference available");
      return;
    }
    
    try {
      if (isVideoPlaying) {
        // Pausar video
        sectionRefs.video.current.pause();
        console.log("Video pausado en Home.jsx");
        setIsVideoPlaying(false);
      } else {
        // Reproducir video - forma simplificada
        sectionRefs.video.current.play()
          .then(() => {
            console.log("Video reproducido exitosamente en Home.jsx");
            setIsVideoPlaying(true);
          })
          .catch(err => {
            console.error("Error reproduciendo video en Home.jsx:", err);
            
            // Solo agregar listener para interacción de usuario si es necesario
            const handleUserInteraction = () => {
              sectionRefs.video.current.play()
                .then(() => {
                  setIsVideoPlaying(true);
                  document.removeEventListener('click', handleUserInteraction);
                  console.log("Video reproducido tras interacción del usuario");
                })
                .catch(e => console.error("Fallo en reproducción forzada:", e));
            };
            
            document.addEventListener('click', handleUserInteraction, { once: true });
          });
      }
    } catch (error) {
      console.error("Error al cambiar estado del video:", error);
    }
  };

  // JSX principal
  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-br from-purple-950 to-indigo-950">
      {/* Elementos decorativos de fondo */}
      <ParticlesBackground />
      <AnimatedBalloons />
      
      {/* Video de Fondo */}
      <BackgroundVideoComponent
        videoRef={sectionRefs.video}
        isVideoPlaying={isVideoPlaying}
        toggleVideo={toggleVideo}
      />

      {/* Navbar público */}
      <NavbarPublic />

      {/* Secciones principales */}
      <HeroSection sectionRefs={sectionRefs} />
      <PromotionsSection promocionesImages={promocionesImages} />
      <ReservationStepsSection />
      <ServicesSection services={services} />
      <FeaturesSection />
      <GallerySection carouselImages={carouselImages} />
      <ContactSection />
      <FooterSection />
    </div>
  );
};

// Importación faltante para iconos usados en los servicios
import { 
  FiClock, 
  FiMail, 
  FiGift, 
  FiCoffee, 
  FiSmile, 
  FiMusic, 
  FiUsers, 
  FiMapPin, 
  FiPackage, 
  FiStar 
} from 'react-icons/fi';

export default Home;import React from 'react';
import Home from './Home'; // Importa el componente real de la página de inicio

/**
 * Componente contenedor para la página principal que agrega la clase home-public
 * Esta clase se usa para excluir la página principal de los cambios de tema en modo oscuro
 */
const PublicHomeContainer = (props) => {
  return (
    <div className="home-public">
      <Home {...props} />
    </div>
  );
};

export default PublicHomeContainer; // Exportar todos los componentes de public/pages
export { default as AboutTramboory } from './AboutTramboory';
export { default as Appointment } from './Appointment';
export { default as Home } from './Home';
export { default as PublicHomeContainer } from './PublicHomeContainer';
// Agrega cualquier otra página pública que tengas\n\n
=== ./public/services/index.js ===
// Exportar todos los componentes de public/services
\n\n
=== ./reservas/components/AvailabilityAlert.jsx ===
// src/pages/reservation/components/AvailabilityAlert.jsx
import { motion, AnimatePresence } from 'framer-motion';
import { FiAlertCircle, FiX } from 'react-icons/fi';

const AvailabilityAlert = ({ message, onClose }) => {
  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: -50 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -50 }}
        className="fixed top-4 right-4 bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded shadow-lg"
      >
        <div className="flex items-center">
          <div className="flex-shrink-0">
            <FiAlertCircle className="h-5 w-5 text-yellow-400" />
          </div>
          <div className="ml-3">
            <p className="text-sm text-yellow-700">{message}</p>
          </div>
          <div className="ml-auto pl-3">
            <button
              onClick={onClose}
              className="inline-flex text-yellow-400 hover:text-yellow-500"
            >
              <FiX className="h-5 w-5" />
            </button>
          </div>
        </div>
      </motion.div>
    </AnimatePresence>
  );
};

export default AvailabilityAlert;\n\n
=== ./reservas/components/PrintableReservation.jsx ===
import React from 'react';

const PrintableReservation = ({ reservation }) => {
    return (
        <div className="p-8">
            <style type="text/css" media="print">{`
        @page { size: auto; margin: 20mm; }
        body { font-family: Arial, sans-serif; }
        .page-break { page-break-after: always; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
      `}</style>
            <h1 className="text-2xl font-bold mb-6">Detalles de la Reserva</h1>
            <table>
                <tbody>
                <tr>
                    <th>Número de Reserva</th>
                    <td>{reservation.id}</td>
                </tr>
                <tr>
                    <th>Fecha</th>
                    <td>{new Date(reservation.fecha_reserva).toLocaleDateString()}</td>
                </tr>
                <tr>
                    <th>Hora</th>
                    <td>{reservation.hora_inicio}</td>
                </tr>
                <tr>
                    <th>Cliente</th>
                    <td>{reservation.nombre_cliente}</td>
                </tr>
                <tr>
                    <th>Teléfono</th>
                    <td>{reservation.telefono_cliente || 'No especificado'}</td>
                </tr>
                <tr>
                    <th>Email</th>
                    <td>{reservation.email_cliente || 'No especificado'}</td>
                </tr>
                <tr>
                    <th>Paquete</th>
                    <td>{reservation.nombre_paquete}</td>
                </tr>
                <tr>
                    <th>Total</th>
                    <td>${reservation.total}</td>
                </tr>
                <tr>
                    <th>Festejado</th>
                    <td>{reservation.nombre_festejado}</td>
                </tr>
                <tr>
                    <th>Edad</th>
                    <td>{reservation.edad_festejado} años</td>
                </tr>
                <tr>
                    <th>Temática</th>
                    <td>{reservation.tematica || 'No especificada'}</td>
                </tr>
                <tr>
                    <th>Extras</th>
                    <td>
                        Cupcake: {reservation.cupcake ? 'Sí' : 'No'}<br />
                        Mampara: {reservation.mampara ? 'Sí' : 'No'}<br />
                        Piñata: {reservation.piñata ? 'Sí' : 'No'}
                    </td>
                </tr>
                </tbody>
            </table>
            <div className="mt-6">
                <h2 className="text-xl font-bold mb-2">Comentarios</h2>
                <p>{reservation.comentarios || 'Sin comentarios'}</p>
            </div>
        </div>
    );
};

export default PrintableReservation;\n\n
=== ./reservas/components/ReservationDateTime.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { Controller } from 'react-hook-form';
import { FiAlertCircle, FiCalendar, FiInfo } from 'react-icons/fi';
import { toast } from 'react-toastify';
import DatePicker from 'react-datepicker';
import Select from 'react-select';

// Constants
const RESERVATION_STATES = {
  PENDING: 'pendiente',
  CONFIRMED: 'confirmada',
  CANCELLED: 'cancelada'
};

const TIME_SLOTS = {
  MORNING: {
    value: 'mañana',
    label: 'Matutino (9:00 - 14:00)',
    startTime: '09:00',
    endTime: '14:00'
  },
  AFTERNOON: {
    value: 'tarde',
    label: 'Vespertino (15:00 - 20:00)',
    startTime: '15:00',
    endTime: '20:00'
  }
};

const ReservationDateTime = ({
  control,
  setValue,
  watch,
  errors,
  packages = [],
  existingReservations = [],
  unavailableDates = [],
  setIsTuesdayModalOpen
}) => {
  const [loading, setLoading] = useState(false);
  const [availableSlots, setAvailableSlots] = useState({
    morning: true,
    afternoon: true
  });
  const watchedFields = watch();

  const { subscribeToDate, unsubscribeFromDate } = useReservationSocket(
    handleAvailabilityUpdate
  );


  // Helper function to check if a reservation is active
  const isActiveReservation = (reservation) => {
    return reservation.estado === RESERVATION_STATES.PENDING || 
           reservation.estado === RESERVATION_STATES.CONFIRMED;
  };

  const handleAvailabilityUpdate = useCallback(
    ({ date, availability }) => {
      const selectedDate = watchedFields.fecha_reserva;
      if (!selectedDate) return;

      const selectedDateStr = selectedDate.toISOString().split('T')[0];
      if (selectedDateStr === date) {
        setAvailableSlots(availability);

        // Si el horario seleccionado ya no está disponible
        if (watchedFields.hora_inicio) {
          const isCurrentSlotAvailable =
            (watchedFields.hora_inicio === 'mañana' && availability.morning) ||
            (watchedFields.hora_inicio === 'tarde' && availability.afternoon);

          if (!isCurrentSlotAvailable) {
            setValue('hora_inicio', null);
            toast.warn('El horario seleccionado ya no está disponible');
          }
        }
      }
    },
    [watchedFields.fecha_reserva, watchedFields.hora_inicio, setValue]
  );

  // Function to check if a specific time slot is available
  const isTimeSlotAvailable = useCallback((date, timeSlot) => {
    if (!date) return false;

    const dateStr = date.toISOString().split('T')[0];
    const reservationsForDate = existingReservations.filter(reservation => {
      const resDate = new Date(reservation.fecha_reserva).toISOString().split('T')[0];
      return resDate === dateStr && isActiveReservation(reservation);
    });

    return !reservationsForDate.some(r => r.hora_inicio === timeSlot);
  }, [existingReservations]);

  // Function to update availability of time slots
  const updateAvailability = useCallback((date) => {
    if (!date) {
      setAvailableSlots({ morning: true, afternoon: true });
      return;
    }

    setLoading(true);
    try {
      const morningAvailable = isTimeSlotAvailable(date, TIME_SLOTS.MORNING.value);
      const afternoonAvailable = isTimeSlotAvailable(date, TIME_SLOTS.AFTERNOON.value);

      setAvailableSlots({
        morning: morningAvailable,
        afternoon: afternoonAvailable
      });

      // Clear selected time if it's no longer available
      const currentTime = watchedFields.hora_inicio;
      if (currentTime) {
        const isMorning = currentTime === TIME_SLOTS.MORNING.value;
        if ((isMorning && !morningAvailable) || (!isMorning && !afternoonAvailable)) {
          setValue('hora_inicio', null);
          toast.warning('El horario seleccionado ya no está disponible');
        }
      }
    } catch (error) {
      console.error('Error al actualizar disponibilidad:', error);
      toast.error('Error al verificar disponibilidad de horarios');
    } finally {
      setLoading(false);
    }
  }, [watchedFields.hora_inicio, setValue, isTimeSlotAvailable]);

  // Update availability when date changes
  useEffect(() => {
    const selectedDate = watchedFields.fecha_reserva;
    if (selectedDate) {
      const dateStr = selectedDate.toISOString().split('T')[0];
      subscribeToDate(dateStr);
      return () => unsubscribeFromDate(dateStr);
    }
  }, [watchedFields.fecha_reserva, subscribeToDate, unsubscribeFromDate]);

  // Function to get available time slot options
  const getTimeOptions = useCallback(() => {
    const options = [];
    
    if (availableSlots.morning) {
      options.push({
        value: TIME_SLOTS.MORNING.value,
        label: TIME_SLOTS.MORNING.label,
      });
    }
    
    if (availableSlots.afternoon) {
      options.push({
        value: TIME_SLOTS.AFTERNOON.value,
        label: TIME_SLOTS.AFTERNOON.label,
      });
    }

    return options;
  }, [availableSlots]);

  // Function to handle date selection
  const handleDateChange = (date) => {
    if (!date) {
      setValue('fecha_reserva', null);
      setValue('hora_inicio', null);
      return;
    }

    setValue('fecha_reserva', date);
    
    // Check if it's Tuesday
    if (date.getDay() === 2) {
      setValue('tuesdayFee', 1500);
      setIsTuesdayModalOpen(true);
    } else {
      setValue('tuesdayFee', 0);
    }

    // Update time slots availability
    updateAvailability(date);
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* Date Picker */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Fecha de Reserva
        </label>
        <div className="relative">
          <Controller
            control={control}
            name="fecha_reserva"
            rules={{ required: 'Fecha de reserva es requerida' }}
            render={({ field }) => (
              <DatePicker
                selected={field.value}
                onChange={handleDateChange}
                className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                placeholderText="Seleccionar fecha"
                dateFormat="dd/MM/yyyy"
                minDate={new Date()}
                excludeDates={unavailableDates}
                disabled={loading}
              />
            )}
          />
          {errors.fecha_reserva && (
            <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
              <FiAlertCircle className="w-4 h-4" />
              {errors.fecha_reserva.message}
            </p>
          )}
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiCalendar className="h-5 w-5 text-gray-400" />
          </div>
        </div>
      </div>

      {/* Time Slot Selector */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Horario Disponible
        </label>
        <div className="relative">
          <Controller
            name="hora_inicio"
            control={control}
            rules={{ required: 'Horario es requerido' }}
            render={({ field }) => {
              const timeOptions = getTimeOptions();
              const selectedOption = timeOptions.find(
                option => option.value === field.value
              );

              return (
                <div>
                  <Select
                    options={timeOptions}
                    value={selectedOption}
                    onChange={(option) => field.onChange(option.value)}
                    isDisabled={!watchedFields.fecha_reserva || loading}
                    placeholder={
                      !watchedFields.fecha_reserva
                        ? 'Primero selecciona una fecha'
                        : loading
                        ? 'Verificando disponibilidad...'
                        : timeOptions.length === 0
                        ? 'No hay horarios disponibles'
                        : 'Selecciona un horario'
                    }
                    className="react-select-container"
                    classNamePrefix="react-select"
                  />
                  {watchedFields.fecha_reserva && !loading && timeOptions.length === 0 && (
                    <div className="mt-2 text-sm text-red-600 bg-red-50 p-2 rounded-md flex items-center gap-2">
                      <FiAlertCircle className="w-4 h-4" />
                      <span>No hay horarios disponibles para esta fecha</span>
                    </div>
                  )}
                  {loading && (
                    <div className="mt-2 text-sm text-blue-600 bg-blue-50 p-2 rounded-md flex items-center gap-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600" />
                      <span>Verificando disponibilidad...</span>
                    </div>
                  )}
                </div>
              );
            }}
          />
          {errors.hora_inicio && (
            <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
              <FiAlertCircle className="w-4 h-4" />
              {errors.hora_inicio.message}
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

export default ReservationDateTime;\n\n
=== ./reservas/components/index.js ===
// Exportar todos los componentes de reservas/components
\n\n
=== ./reservas/hooks/index.js ===
// Exportar todos los componentes de reservas/hooks
\n\n
=== ./reservas/hooks/useReservationData.js ===
import { useState, useEffect } from 'react';
import { toast } from 'react-toastify';
import { useNavigate } from 'react-router-dom';
import axiosInstance from '../components/axiosConfig';

export const useReservationData = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [data, setData] = useState({
    packages: [],
    tematicas: [],
    extrasData: [],
    mamparas: [],
    userData: null,
    foodOptions: [],
    existingReservations: [],
    userReservations: [],
    hasReservations: false
  });

  const fetchData = async () => {
    setIsLoading(true);
    setError(null);

    try {
      // Primero obtenemos los datos del usuario ya que lo necesitamos para las reservaciones
      const userResponse = await axiosInstance.get('/usuarios/me'); // Cambiado de '/auth/me' a '/usuarios/me' para mantener consistencia
      const userData = userResponse.data;

      // Hacemos todas las demás peticiones en paralelo
      const [
        packagesRes,
        tematicasRes,
        extrasRes,
        mamparasRes,
        foodOptionsRes,
        reservationsRes,
        userReservationsRes
      ] = await Promise.all([
        axiosInstance.get('/paquetes'),
        axiosInstance.get('/tematicas'),
        axiosInstance.get('/extras'),
        axiosInstance.get('/mamparas'),
        axiosInstance.get('/opciones-alimentos'),
        axiosInstance.get('/reservas'),
        axiosInstance.get('/reservas/user')
      ]);

      setData({
        packages: packagesRes.data,
        tematicas: tematicasRes.data,
        extrasData: extrasRes.data,
        mamparas: mamparasRes.data,
        userData: userData,
        foodOptions: foodOptionsRes.data,
        existingReservations: reservationsRes.data,
        userReservations: userReservationsRes.data,
        hasReservations: userReservationsRes.data.length > 0
      });
    } catch (error) {
      console.error('Error fetching reservation data:', error);
      
      // Convertimos el error a un mensaje de texto para evitar errores de renderizado
      const errorMessage = error?.response?.data?.message || 
                          error?.message || 
                          'Error desconocido al cargar datos';
      
      setError(errorMessage); // Guardamos solo el mensaje de error, no el objeto completo
      
      if (error.response?.status === 401) {
        toast.error('Sesión expirada. Por favor, inicia sesión nuevamente.');
        navigate('/signin');
        return;
      }
      
      toast.error('Error al cargar los datos necesarios. Por favor, intenta nuevamente.');
    } finally {
      setIsLoading(false);
    }
  };

  // Función para crear una reserva de manera segura
  const createReservation = async (reservationData) => {
    try {
      const response = await axiosInstance.post('/reservas', reservationData);
      return { success: true, data: response.data };
    } catch (error) {
      console.error('Error creating reservation:', error);
      
      // Convertimos el error a un mensaje de texto
      const errorMessage = error?.response?.data?.message || 
                          error?.message || 
                          'Error desconocido al crear la reserva';
      
      return { success: false, message: errorMessage };
    }
  };

  // Función para recargar los datos
  const refreshData = () => {
    fetchData();
  };

  useEffect(() => {
    fetchData();
  }, []);

  return {
    ...data,
    isLoading,
    error,
    refreshData,
    createReservation // Añadimos la función para crear reservas
  };
};

// Also export a context provider for reservation data
export const setReservationData = (data) => {
  // This is a temporary function that will be replaced by the context provider
  console.log('Setting reservation data:', data);
  return data;
};\n\n
=== ./reservas/index.js ===
export * from './components';
export * from './pages';
export * from './services';
export * from './hooks';\n\n
=== ./reservas/pages/admin/ReservationForm.jsx ===
import React, { useCallback, useEffect, useState, useRef, useMemo } from 'react';
import { useForm, useWatch } from 'react-hook-form';
import { isWeekend, isTuesday } from 'date-fns';
import { 
  TIME_SLOTS, 
  formatReservationForApi, 
  formatReservationForEditing 
} from '@shared/utils/reservationUtils';
import axiosInstance from '@shared/utils/axiosConfig';
import { FiX, FiSearch } from 'react-icons/fi';
import { toast } from 'react-hot-toast';

// Importar las secciones restantes (sin UserSection, porque lo reemplazamos):
import PackageSection from './reservationform-components/PackageSection.jsx';
import FoodOptionsSection from './reservationform-components/FoodOptionsSection.jsx';
import DateTimeSection from './reservationform-components/DateTimeSection.jsx';
import ThemeSection from './reservationform-components/ThemeSection.jsx';
import MamparaSection from './reservationform-components/MamparaSection.jsx';
import ExtrasSection from './reservationform-components/ExtrasSection.jsx';
import CelebrantSection from './reservationform-components/CelebrantSection.jsx';
import CommentsSection from './reservationform-components/CommentsSection.jsx';
import GenderSelector from '@shared/components/form/GenderSelector';


const ReservationForm = ({
  editingItem,
  users,
  packages,
  foodOptions = [],
  extras = [],
  tematicas = [],
  mamparas = [],
  onSave,
  activeTab,
  existingReservations = [],
  onClose,
}) => {
  const [manualTotal, setManualTotal] = useState(false);
  const [total, setTotal] = useState('0.00');
  const [calculationLogs, setCalculationLogs] = useState([]);
  const [showTuesdayModal, setShowTuesdayModal] = useState(false);
  const [savedReservation, setSavedReservation] = useState(null);
  const formRef = useRef(null);

  // ----------- ESTADOS Y LÓGICA PARA EL BUSCADOR DE USUARIOS -----------
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredUsers, setFilteredUsers] = useState(users);
  const [showUserSuggestions, setShowUserSuggestions] = useState(false);
  // ---------------------------------------------------------------------

  const {
    register,
    control,
    handleSubmit,
    setValue,
    reset,
    getValues,
    watch,
    formState: { errors },
  } = useForm({
    defaultValues: {
      id_usuario: '',
      id_paquete: '',
      id_opcion_alimento: null,
      id_tematica: null,
      id_mampara: null,
      extras: [],
      fecha_reserva: null,
      hora_inicio: null,
      nombre_festejado: '',
      edad_festejado: '',
      comentarios: '',
      total: '0.00',
      activo: true,
      tuesdayFee: 0,
    },
  });

  const watchedFields = useWatch({
    control,
    name: [
      'id_paquete',
      'id_opcion_alimento',
      'id_mampara',
      'extras',
      'fecha_reserva',
      'id_tematica',
      'tuesdayFee',
    ],
  });

  // ---------------------------------------------------------------------
  // Funciones de LOG (opcional, para debug)
  // ---------------------------------------------------------------------
  const sanitizeLogData = (data) => {
    if (!data) return null;
    if (typeof data === 'number' || typeof data === 'string') return data;
    if (Array.isArray(data)) return '[Array]';
    if (typeof data === 'object') return '[Object]';
    return String(data);
  };

  const addLog = useCallback((message, data = null) => {
    const sanitizedData = sanitizeLogData(data);
    console.log(`[ReservationForm] ${message}`, sanitizedData);
    setCalculationLogs((prev) => [
      ...prev.slice(-4),
      {
        message,
        data: sanitizedData,
        timestamp: new Date().toISOString(),
      },
    ]);
  }, []);

  // ---------------------------------------------------------------------
  // Lógica para calcular el total de la reserva
  // ---------------------------------------------------------------------
  const calculateTotal = useCallback(() => {
    let newTotal = 0;
    addLog('Iniciando cálculo del total');

    const paqueteId = getValues('id_paquete');
    const fecha = getValues('fecha_reserva');
    const tuesdayFee = getValues('tuesdayFee') || 0;

    if (paqueteId && fecha) {
      const paquete = packages.find((p) => Number(p.id) === Number(paqueteId));
      if (paquete) {
        const precio = isWeekend(fecha)
          ? parseFloat(paquete.precio_viernes_domingo)
          : parseFloat(paquete.precio_lunes_jueves);
        
        newTotal += precio;
        addLog(
          `Precio del paquete (${isWeekend(fecha) ? 'fin de semana' : 'entre semana'})`,
          precio
        );

        if (isTuesday(fecha)) {
          newTotal += tuesdayFee;
          addLog('Cargo adicional por martes', tuesdayFee);
        }
      }
    }

    const alimentoValue = getValues('id_opcion_alimento');
    if (alimentoValue?.value) {
      const selectedFood = foodOptions.find(
        (f) => f.id === Number(alimentoValue.value)
      );
      if (selectedFood?.precio_extra) {
        const precioAlimento = parseFloat(selectedFood.precio_extra);
        newTotal += precioAlimento;
        addLog('Precio extra por alimento', precioAlimento);
      }
    }

    const mamparaValue = getValues('id_mampara');
    if (mamparaValue?.value) {
      const selectedMampara = mamparas.find(
        (m) => m.id === Number(mamparaValue.value)
      );
      if (selectedMampara?.precio) {
        const precioMampara = parseFloat(selectedMampara.precio);
        newTotal += precioMampara;
        addLog('Precio de mampara', precioMampara);
      }
    }

    const tematicaValue = getValues('id_tematica');
    if (tematicaValue?.value) {
      const selectedTematica = tematicas.find(
        (t) => t.id === Number(tematicaValue.value)
      );
      if (selectedTematica?.precio) {
        const precioTematica = parseFloat(selectedTematica.precio);
        newTotal += precioTematica;
        addLog('Precio de temática', precioTematica);
      }
    }

    const selectedExtras = getValues('extras') || [];
    let extrasTotal = 0;
    const uniqueExtras = Array.from(new Set(selectedExtras.map((e) => e.id))).map(
      (id) => {
        const extra = selectedExtras.find((e) => e.id === id);
        return extra;
      }
    );

    uniqueExtras.forEach((extra) => {
      const extraInfo = extras.find((e) => Number(e.id) === Number(extra.id));
      if (extraInfo?.precio && extra.cantidad) {
        const extraPrecio =
          parseFloat(extraInfo.precio) * parseInt(extra.cantidad);
        if (!isNaN(extraPrecio)) {
          extrasTotal += extraPrecio;
          addLog(`Extra ${extraInfo.nombre} (${extra.cantidad}x)`, extraPrecio);
        }
      }
    });
    newTotal += extrasTotal;
    addLog('Total de extras', extrasTotal);
    addLog('Total final calculado', newTotal);

    return parseFloat(newTotal).toFixed(2);
  }, [
    getValues,
    packages,
    foodOptions,
    mamparas,
    tematicas,
    extras,
    addLog
  ]);

  // ---------------------------------------------------------------------
  // Efecto para inicializar el formulario en modo edición
  // ---------------------------------------------------------------------
  useEffect(() => {
    if (editingItem) {
      addLog('Inicializando datos de edición');
      
      // Usar la función bidireccional para formatear datos para edición
      const formattedData = formatReservationForEditing(
        editingItem, 
        foodOptions, 
        tematicas, 
        mamparas
      );

      reset(formattedData);
      setTotal(formattedData.total);
      addLog('Datos de edición cargados');

      // También podríamos setear el término de búsqueda si queremos mostrar
      // el nombre en el input directamente:
      const editingUser = users.find(u => u.id === editingItem.id_usuario);
      if (editingUser) {
        setSearchTerm(`${editingUser.nombre} ${editingUser.apellido}`);
      }
    }
  }, [editingItem, reset, addLog, users, foodOptions, tematicas, mamparas]);

  // ---------------------------------------------------------------------
  // Efecto para recalcular el total cuando cambian campos relevantes
  // ---------------------------------------------------------------------
  useEffect(() => {
    if (!manualTotal) {
      addLog('Actualizando total automáticamente');
      const newTotal = calculateTotal();
      setTotal(newTotal);
      setValue('total', newTotal);
    }
  }, [watchedFields, manualTotal, calculateTotal, setValue, addLog]);

  // ---------------------------------------------------------------------
  // useMemo para filtrar mamparas según la temática
  // ---------------------------------------------------------------------
  const filteredMamparas = useMemo(() => {
    const selectedTheme = watchedFields[5];
    return selectedTheme
      ? mamparas.filter(
          (m) =>
            Number(m.id_tematica) === Number(selectedTheme.value) && m.activo
        )
      : [];
  }, [watchedFields, mamparas]);

  // ---------------------------------------------------------------------
  // Función para limpiar los datos antes de guardar
  // ---------------------------------------------------------------------

  // ---------------------------------------------------------------------
  // onSubmit para guardar la reserva
  // ---------------------------------------------------------------------
  const onSubmit = useCallback(
    async (data) => {
      try {
        addLog('Preparando datos para guardar');
        // Ensure extras[] is properly formatted
        const cleanedData = {
          ...data,
          extras: data.extras || []
        };
        
        const formattedData = formatReservationForApi(cleanedData);
        addLog('Datos formateados para guardar');

        try {
          const reservation = await onSave(formattedData);
          addLog('Reserva guardada');

          if (reservation?.id) {
            setSavedReservation(reservation);
            
            // Crear pago pendiente automáticamente
            const paymentData = {
              id_reserva: reservation.id,
              monto: formattedData.total,
              fecha_pago: new Date(),
              metodo_pago: 'pendiente',
              estado: 'pendiente',
            };

            await axiosInstance.post('/api/pagos', paymentData);
            addLog('Entrada de pagos creada como pendiente');
            toast.success('¡Reservación creada exitosamente!');
            onClose();
          }
        } catch (error) {
          console.error('Error al crear el pago:', error);
          // Si falla la creación del pago, eliminamos la reserva para mantener consistencia
          if (savedReservation?.id) {
            await axiosInstance.delete(`/api/reservas/${savedReservation.id}`);
            addLog('Reserva eliminada debido a error en creación de pago');
          }
          throw error;
        }
      } catch (error) {
        console.error('Error al guardar la reserva:', error);
        addLog('Error al guardar la reserva');
        toast.error('Error al crear la reservación');
      }
    },
    [onSave, addLog, onClose]
  );

  // ---------------------------------------------------------------------
  // Efecto para filtrar usuarios según searchTerm
  // ---------------------------------------------------------------------
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredUsers(users);
    } else {
      const term = searchTerm.toLowerCase();
      const filtered = users.filter((user) => {
        const fullName = `${user.nombre} ${user.apellido}`.toLowerCase();
        return (
          fullName.includes(term) ||
          user.id.toString() === term
        );
      });
      setFilteredUsers(filtered);
    }
  }, [searchTerm, users]);

  // ---------------------------------------------------------------------
  // Manejador para seleccionar un usuario del autocompletado
  // ---------------------------------------------------------------------
  const handleSelectUser = (user) => {
    // Mostramos el nombre del usuario en el input
    setSearchTerm(`${user.nombre} ${user.apellido}`);
    // Guardamos en react-hook-form el ID del usuario
    setValue('id_usuario', user.id);
    // Ocultamos las sugerencias
    setShowUserSuggestions(false);
    // Log de depuración
    addLog(`Usuario seleccionado: ${user.id} - ${user.nombre}`);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl relative">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 focus:outline-none"
        >
          <FiX className="w-6 h-6" />
        </button>

        <div className="p-6">
          <h2 className="text-2xl font-semibold text-gray-800 mb-6">
            {editingItem ? 'Editar Reservación' : 'Nueva Reservación'}
          </h2>

          <form
            ref={formRef}
            id={activeTab + 'Form'}
            onSubmit={handleSubmit(onSubmit)}
            className="space-y-6 max-h-[calc(100vh-16rem)] overflow-y-auto px-2"
          >
            {/*
              --------------------------------------------------------------------------------
              Reemplazamos el componente <UserSection> por nuestro buscador de usuarios inline
              --------------------------------------------------------------------------------
            */}
            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <div className="mb-4 relative">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Usuario
                </label>

                {/* Campo de búsqueda */}
                <div className="flex items-center bg-gray-50 rounded-md p-2">
                  <FiSearch className="mr-2 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Buscar usuario por nombre o ID..."
                    value={searchTerm}
                    onChange={(e) => {
                      setSearchTerm(e.target.value);
                      setShowUserSuggestions(true);
                    }}
                    className="bg-transparent w-full focus:outline-none"
                  />
                </div>

                {/* Lista de sugerencias */}
                {showUserSuggestions && filteredUsers.length > 0 && (
                  <ul className="absolute z-10 mt-1 bg-white border border-gray-200 rounded-md w-full max-h-60 overflow-auto shadow-lg">
                    {filteredUsers.map((user) => (
                      <li
                        key={user.id}
                        className="px-4 py-2 cursor-pointer hover:bg-gray-100"
                        onClick={() => handleSelectUser(user)}
                      >
                        {user.nombre} {user.apellido} (ID: {user.id})
                      </li>
                    ))}
                  </ul>
                )}

                {/* Si hay error en el id_usuario, lo mostramos */}
                {errors.id_usuario && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.id_usuario.message}
                  </p>
                )}
                
                {/* Registramos manualmente el campo id_usuario */}
                <input
                  type="hidden"
                  {...register('id_usuario', { required: 'El usuario es requerido' })}
                />
              </div>
            </div>
            {/*
              --------------------------------------------------------------------------------
              FIN DE SECCIÓN PARA EL BUSCADOR DE USUARIOS
              --------------------------------------------------------------------------------
            */}


            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <PackageSection
                control={control}
                packages={packages}
                errors={errors}
                setValue={setValue}
              />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <FoodOptionsSection
                control={control}
                errors={errors}
                foodOptions={foodOptions}
                setValue={setValue}
              />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <DateTimeSection
                control={control}
                errors={errors}
                setValue={setValue}
                getValues={getValues}
                existingReservations={existingReservations.filter(r => r.estado !== 'cancelada')}
                packages={packages}
                showTuesdayModal={showTuesdayModal}
                setShowTuesdayModal={setShowTuesdayModal}
              />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <ThemeSection
                control={control}
                errors={errors}
                tematicas={tematicas}
                setValue={setValue}
              />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <MamparaSection
                control={control}
                errors={errors}
                filteredMamparas={filteredMamparas}
                setValue={setValue}
                getValues={getValues}
              />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <ExtrasSection
                extras={extras}
                control={control}
                setValue={setValue}
              />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <CelebrantSection control={control} errors={errors} />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <GenderSelector control={control} errors={errors} />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <CommentsSection control={control} />
            </div>

            {/* SECCIÓN PARA MOSTRAR/MODIFICAR EL TOTAL */}
            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <label className="text-lg font-medium text-gray-700">
                  Total
                </label>
                <div className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={manualTotal}
                    onChange={(e) => {
                      setManualTotal(e.target.checked);
                      if (!e.target.checked) {
                        const newTotal = calculateTotal();
                        setTotal(newTotal);
                        setValue('total', newTotal);
                        addLog('Total actualizado automáticamente');
                      } else {
                        addLog('Modo manual activado');
                      }
                    }}
                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                  />
                  <span className="text-sm text-gray-500">
                    Editar manualmente
                  </span>
                </div>
              </div>
              <div className="mt-2 flex gap-4">
                <input
                  type="text"
                  value={total}
                  onChange={(e) => {
                    if (manualTotal) {
                      const value = e.target.value.replace(/[^0-9.]/g, '');
                      setTotal(value);
                      setValue('total', value);
                      addLog('Total actualizado manualmente');
                    }
                  }}
                  readOnly={!manualTotal}
                  className="flex-1 px-3 py-2 text-lg font-medium text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                />
                <button
                  type="button"
                  onClick={() => {
                    const newTotal = calculateTotal();
                    setTotal(newTotal);
                    setValue('total', newTotal);
                    addLog('Total recalculado');
                  }}
                  className="px-4 py-2 bg-indigo-600 text-white font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                >
                  Calcular
                </button>
              </div>

              <div className="mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200 max-h-40 overflow-y-auto">
                <h4 className="text-sm font-medium text-gray-700 mb-2">
                  Logs de cálculo:
                </h4>
                {calculationLogs.map((log, index) => (
                  <div key={index} className="text-xs text-gray-600 mb-1">
                    {new Date(log.timestamp).toLocaleTimeString()}:{' '}
                    {log.message}
                    {log.data !== null && (
                      <span className="text-indigo-600"> {log.data}</span>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </form>

          {/* Botones de acción */}
          <div className="mt-6 flex justify-end gap-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
            >
              Cancelar
            </button>
            <button
              type="submit"
              form={activeTab + 'Form'}
              className="px-6 py-2 font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 bg-indigo-600 hover:bg-indigo-700 text-white focus:ring-indigo-500"
            >
              {editingItem ? 'Actualizar' : 'Crear'} Reservación
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReservationForm;\n\n
=== ./reservas/pages/admin/ReservationModal.jsx ===
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
// Usar el alias @ para garantizar resolución correcta en Docker
import axiosInstance from '@shared/utils/axiosConfig';
import { toast } from 'react-hot-toast';
import {
  FiCalendar,
  FiClock,
  FiDollarSign,
  FiUser,
  FiPackage,
  FiMail,
  FiPhone,
  FiCheckCircle,
  FiXCircle,
  FiPrinter,
  FiAlertCircle,
  FiTag,
  FiGift,
  FiImage,
} from 'react-icons/fi';
import PrintableReservation from '@domains/reservas/components/PrintableReservation';

const ReservationModal = ({
  reservation,
  onClose,
  onSendEmail,
  onContactUser
}) => {
  const [modalHeight, setModalHeight] = useState('100vh');
  const [isUpdatingPayment, setIsUpdatingPayment] = useState(false);
  const [isUpdatingStatus, setIsUpdatingStatus] = useState(false);

  const handleUpdateReservationStatus = async (newStatus) => {
    if (isUpdatingStatus) return;
    setIsUpdatingStatus(true);
    try {
      await axiosInstance.put(`/api/reservas/${reservation.id}/status`, {
        estado: newStatus
      });
      toast.success('Estado de la reservación actualizado');
      window.dispatchEvent(new CustomEvent('reservationsUpdated'));
    } catch (error) {
      console.error('Error al actualizar el estado de la reservación:', error);
      toast.error('Error al actualizar el estado de la reservación');
    } finally {
      setIsUpdatingStatus(false);
    }
  };

  const handleUpdatePaymentStatus = async (pagoId, newStatus) => {
    setIsUpdatingPayment(true);
    try {
      await axiosInstance.put(`/api/pagos/${pagoId}/status`, {
        estado: newStatus
      });
      toast.success('Estado del pago actualizado');
      window.dispatchEvent(new CustomEvent('reservationsUpdated'));
    } catch (error) {
      console.error('Error al actualizar el estado del pago:', error);
      toast.error('Error al actualizar el estado del pago');
    } finally {
      setIsUpdatingPayment(false);
    }
  };

  useEffect(() => {
    const updateModalHeight = () => {
      const vh = window.innerHeight;
      setModalHeight(`${vh}px`);
    };

    updateModalHeight();
    window.addEventListener('resize', updateModalHeight);

    return () => window.removeEventListener('resize', updateModalHeight);
  }, []);

  // Add event listener for escape key
  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    // Add event listener
    document.addEventListener('keydown', handleEscKey);

    // Cleanup function
    return () => {
      document.removeEventListener('keydown', handleEscKey);
    };
  }, [onClose]);

  if (!reservation) return null;

  const handlePrint = () => {
    const printContent = document.getElementById('printable-reservation');
    const winPrint = window.open(
      '',
      '',
      'left=0,top=0,width=800,height=900,toolbar=0,scrollbars=0,status=0'
    );
    winPrint.document.write(printContent.innerHTML);
    winPrint.document.close();
    winPrint.focus();
    winPrint.print();
    winPrint.close();
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pendiente':
        return 'text-yellow-500';
      case 'confirmada':
        return 'text-green-500';
      case 'cancelada':
        return 'text-red-500';
      default:
        return 'text-gray-500';
    }
  };

  const IconWrapper = ({ icon: Icon, text, color = 'text-gray-700', className = '' }) => (
    <div className={`flex items-center mb-3 ${color} ${className}`}>
      <Icon className="mr-2 text-xl" />
      <span className="text-sm">{text}</span>
    </div>
  );

  return (
    <AnimatePresence>
      <div 
        className="fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center z-50 overflow-hidden"
        style={{ height: modalHeight }}
      >
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 20 }}
          transition={{ type: "spring", stiffness: 300, damping: 30 }}
          className="bg-white rounded-lg shadow-xl w-full max-w-4xl my-4 flex flex-col"
          style={{ maxHeight: 'calc(100vh - 2rem)' }}
        >
          {/* Header */}
          <div className="sticky top-0 bg-white z-10 px-6 py-4 border-b flex justify-between items-center rounded-t-lg">
            <h2 className="text-2xl font-semibold text-gray-800">
              Detalles de la Reserva
            </h2>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 transition duration-300"
            >
              <FiXCircle size={24} />
            </button>
          </div>

          {/* Content */}
          <div className="flex-1 overflow-y-auto px-6 py-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-6">
                {/* General Information */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">
                    Información General
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <IconWrapper
                      icon={FiCalendar}
                      text={`Fecha: ${new Date(
                        reservation.fecha_reserva
                      ).toLocaleDateString()}`}
                    />
                    <IconWrapper
                      icon={FiClock}
                      text={`Hora: ${reservation.hora_inicio}`}
                    />
                    <IconWrapper
                      icon={FiDollarSign}
                      text={`Total: $${reservation.total}`}
                    />
                    <IconWrapper
                      icon={FiPackage}
                      text={`Paquete: ${
                        reservation.paquete?.nombre || 'No especificado'
                      }`}
                    />
                    <IconWrapper
                      icon={FiTag}
                      text={`Opción de Alimento: ${
                        reservation.opcionAlimento?.nombre || 'No especificada'
                      }`}
                    />
                    <IconWrapper
                      icon={FiAlertCircle}
                      text={`Estado: ${
                        reservation.estado.charAt(0).toUpperCase() + reservation.estado.slice(1)
                      }`}
                      color={getStatusColor(reservation.estado)}
                    />
                  </div>
                </div>

                {/* Payment Information */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">
                    Información de Pagos
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    {reservation.pagos && reservation.pagos.length > 0 ? (
                      <div className="space-y-4">
                        {reservation.pagos.map((pago, index) => (
                          <div key={pago.id} className="bg-white p-3 rounded-lg shadow-sm">
                            <div className="flex justify-between items-center mb-2">
                              <span className="text-sm font-medium">
                                Pago #{index + 1}
                              </span>
                              <span className="text-sm text-gray-500">
                                {new Date(pago.fecha_pago).toLocaleDateString()}
                              </span>
                            </div>
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-sm text-gray-600">
                                  Método: {pago.metodo_pago}
                                </p>
                                <p className="text-sm font-medium">
                                  Monto: ${pago.monto}
                                </p>
                              </div>
                              <select
                                value={pago.estado}
                                onChange={(e) => handleUpdatePaymentStatus(pago.id, e.target.value)}
                                disabled={isUpdatingPayment}
                                className={`ml-2 rounded-full px-3 py-1 text-sm font-medium border-0 focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 ${
                                  pago.estado === 'completado'
                                    ? 'bg-green-100 text-green-800'
                                    : pago.estado === 'fallido'
                                    ? 'bg-red-100 text-red-800'
                                    : 'bg-yellow-100 text-yellow-800'
                                }`}
                              >
                                <option value="pendiente">Pendiente</option>
                                <option value="completado">Completado</option>
                                <option value="fallido">Fallido</option>
                              </select>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <p className="text-gray-500 text-sm">No hay pagos registrados</p>
                    )}
                  </div>
                </div>

                {/* Client Details */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">
                    Detalles del Cliente
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <IconWrapper
                      icon={FiUser}
                      text={`Cliente: ${
                        reservation.usuario?.nombre || 'No especificado'
                      }`}
                    />
                    <IconWrapper
                      icon={FiPhone}
                      text={`Teléfono: ${
                        reservation.usuario?.telefono || 'No especificado'
                      }`}
                    />
                    <IconWrapper
                      icon={FiMail}
                      text={`Email: ${
                        reservation.usuario?.email || 'No especificado'
                      }`}
                    />
                  </div>
                </div>
              </div>

              <div className="space-y-6">
                {/* Event Details */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">
                    Detalles del Evento
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <IconWrapper
                      icon={FiUser}
                      text={`Festejado: ${reservation.nombre_festejado}`}
                    />
                    <IconWrapper
                      icon={FiUser}
                      text={`Edad: ${reservation.edad_festejado} años`}
                    />
                    <IconWrapper
                      icon={FiGift}
                      text={`Temática: ${
                        reservation.tematicaReserva?.nombre || 'No especificada'
                      }`}
                    />
                    {/* Mampara Section */}
                    <div className="mt-3 p-3 bg-white rounded-md shadow-sm">
                      <h4 className="text-sm font-medium text-gray-900 mb-2">Detalles de la Mampara</h4>
                      {reservation.mampara ? (
                        <>
                          <IconWrapper
                            icon={FiImage}
                            text={`Piezas: ${reservation.mampara.piezas}`}
                            className="mb-1"
                          />
                          <IconWrapper
                            icon={FiDollarSign}
                            text={`Precio: $${reservation.mampara.precio}`}
                            className="mb-1"
                          />
                          {reservation.mampara.tematica && (
                            <IconWrapper
                              icon={FiGift}
                              text={`Temática: ${reservation.mampara.tematica.nombre}`}
                            />
                          )}
                        </>
                      ) : (
                        <p className="text-gray-500 text-sm">No se seleccionó mampara</p>
                      )}
                    </div>
                  </div>
                </div>

                {/* Extras */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">
                    Extras
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    {reservation.extras && reservation.extras.length > 0 ? (
                      <ul>
                        {reservation.extras.map((extra) => {
                          const cantidad = extra.ReservaExtra?.cantidad || 1;
                          return (
                            <li key={extra.id} className="flex items-center mb-2">
                              <FiCheckCircle className="text-green-600 mr-2" />
                              <span>
                                {`${extra.nombre} (x${cantidad}) - $${extra.precio * cantidad}`}
                              </span>
                            </li>
                          );
                        })}
                      </ul>
                    ) : (
                      <p className="text-gray-500">
                        No se seleccionaron extras.
                      </p>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Comments */}
            <div className="mt-6">
              <h3 className="text-lg font-medium text-gray-900 mb-3">
                Comentarios
              </h3>
              <div className="bg-gray-50 p-4 rounded-lg">
                <p className="text-gray-700 text-sm">
                  {reservation.comentarios || 'Sin comentarios'}
                </p>
              </div>
            </div>
          </div>

          {/* Status Change Section */}
          <div className="bg-white px-6 py-4 border-b">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Estado de la Reservación</h3>
            <div className="flex flex-wrap gap-4">
              <button
                onClick={() => handleUpdateReservationStatus('pendiente')}
                disabled={isUpdatingStatus || reservation.estado === 'pendiente'}
                className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${
                  reservation.estado === 'pendiente'
                    ? 'bg-yellow-500 text-white cursor-default'
                    : 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200'
                }`}
              >
                <FiClock className="mr-2" />
                Pendiente
              </button>
              <button
                onClick={() => handleUpdateReservationStatus('confirmada')}
                disabled={isUpdatingStatus || reservation.estado === 'confirmada'}
                className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${
                  reservation.estado === 'confirmada'
                    ? 'bg-green-500 text-white cursor-default'
                    : 'bg-green-100 text-green-800 hover:bg-green-200'
                }`}
              >
                <FiCheckCircle className="mr-2" />
                Confirmada
              </button>
              <button
                onClick={() => handleUpdateReservationStatus('cancelada')}
                disabled={isUpdatingStatus || reservation.estado === 'cancelada'}
                className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${
                  reservation.estado === 'cancelada'
                    ? 'bg-red-500 text-white cursor-default'
                    : 'bg-red-100 text-red-800 hover:bg-red-200'
                }`}
              >
                <FiXCircle className="mr-2" />
                Cancelada
              </button>
            </div>
          </div>

          {/* Footer */}
          <div className="sticky bottom-0 bg-gray-50 px-6 py-4 border-t rounded-b-lg">

            {/* Action Buttons */}
            <div className="flex flex-wrap justify-end gap-4">
              <button
                onClick={handlePrint}
                className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition duration-300 flex items-center text-sm"
              >
                <FiPrinter className="mr-2" />
                Imprimir Reserva
              </button>
              <button
                onClick={() => onSendEmail(reservation)}
                className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition duration-300 flex items-center text-sm"
              >
                <FiMail className="mr-2" />
                Enviar por Correo
              </button>
              <button
                onClick={() => onContactUser(reservation)}
                className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition duration-300 flex items-center text-sm"
              >
                <FiPhone className="mr-2" />
                Contactar Cliente
              </button>
            </div>
          </div>
        </motion.div>

        {/* Printable Content */}
        <div id="printable-reservation" className="hidden">
          <PrintableReservation reservation={reservation} />
        </div>
      </div>
    </AnimatePresence>
  );
};

export default ReservationModal;\n\n
=== ./reservas/pages/admin/ReservationPreviewModal.jsx ===
import React from 'react';
import PropTypes from 'prop-types';
// Usar el alias @ para garantizar resolución correcta en Docker
import Modal from '@shared/components/Modal';
import { 
    FiCalendar, FiUser, FiPhone, FiMail, FiPackage, 
    FiClock, FiDollarSign, FiImage, FiInfo, FiCoffee 
} from 'react-icons/fi';
import { formatDate, formatTime, formatNumber } from '@shared/utils/formatters';

const ReservationPreviewModal = ({ reservation, onClose }) => {
    const InfoItem = ({ icon: Icon, label, value, color = "text-gray-500" }) => (
        <div className="flex items-center mb-3 last:mb-0 group">
            <div className={`flex items-center justify-center w-8 h-8 rounded-lg ${color} bg-opacity-10 mr-3 group-hover:scale-110 transition-transform duration-200`}>
                <Icon className={`w-4 h-4 ${color}`} />
            </div>
            <div className="flex flex-col">
                <span className="text-xs text-gray-500">{label}</span>
                <span className="text-sm font-medium text-gray-900">{value}</span>
            </div>
        </div>
    );

    const Section = ({ title, children, icon: Icon }) => (
        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-200">
            <div className="flex items-center mb-3">
                <Icon className="w-5 h-5 text-indigo-500 mr-2" />
                <h3 className="text-sm font-medium text-gray-900">{title}</h3>
            </div>
            <div className="space-y-2">
                {children}
            </div>
        </div>
    );

    return (
        <Modal
            isOpen={true}
            onClose={onClose}
            title={`Vista Rápida - Reserva #${reservation.id}`}
            size="md"
            className="animate-modalEntry"
            overlayClassName="backdrop-blur-sm bg-black/30 animate-fadeIn"
        >
            <style jsx global>{`
                @keyframes modalEntry {
                    from {
                        opacity: 0;
                        transform: scale(0.95) translateY(-10px);
                        box-shadow: 0 0 0 rgba(0, 0, 0, 0);
                    }
                    to {
                        opacity: 1;
                        transform: scale(1) translateY(0);
                        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                    }
                }
                
                @keyframes fadeIn {
                    from {
                        opacity: 0;
                        backdrop-filter: blur(0px);
                    }
                    to {
                        opacity: 1;
                        backdrop-filter: blur(8px);
                    }
                }
                
                .animate-modalEntry {
                    animation: modalEntry 0.4s cubic-bezier(0.16, 1, 0.3, 1);
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                }
                
                .animate-fadeIn {
                    animation: fadeIn 0.4s ease-out forwards;
                }
            `}</style>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Información del Evento */}
                <Section title="Información del Evento" icon={FiCalendar}>
                    <InfoItem 
                        icon={FiUser} 
                        label="Festejado"
                        value={`${reservation.nombre_festejado} (${reservation.edad_festejado} años)`}
                        color="text-blue-500"
                    />
                    <InfoItem 
                        icon={FiCalendar} 
                        label="Fecha"
                        value={formatDate(reservation.fecha_reserva)}
                        color="text-purple-500"
                    />
                    <InfoItem 
                        icon={FiClock} 
                        label="Horario"
                        value={`${formatTime(reservation.hora_inicio)} - ${formatTime(reservation.hora_fin)}`}
                        color="text-green-500"
                    />
                    <InfoItem 
                        icon={FiDollarSign} 
                        label="Total"
                        value={formatNumber(reservation.total)}
                        color="text-emerald-500"
                    />
                </Section>

                {/* Detalles del Paquete */}
                <Section title="Detalles del Paquete" icon={FiPackage}>
                    <InfoItem 
                        icon={FiPackage} 
                        label="Paquete"
                        value={reservation.paquete?.nombre || 'No especificado'}
                        color="text-orange-500"
                    />
                    <InfoItem 
                        icon={FiImage} 
                        label="Temática"
                        value={reservation.tematica?.nombre || 'No especificada'}
                        color="text-pink-500"
                    />
                    {reservation.opcion_alimento && (
                        <InfoItem 
                            icon={FiCoffee} 
                            label="Opción de Alimentos"
                            value={reservation.opcion_alimento.nombre}
                            color="text-yellow-500"
                        />
                    )}
                </Section>

                {/* Estado y Comentarios */}
                <div className="md:col-span-2">
                    <Section title="Estado y Comentarios" icon={FiInfo}>
                        <div className="flex items-center mb-3">
                            <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                                !reservation.estado ? 'bg-gray-100 text-gray-800' :
                                reservation.estado === 'confirmada' ? 'bg-green-100 text-green-800' :
                                reservation.estado === 'pendiente' ? 'bg-yellow-100 text-yellow-800' :
                                'bg-red-100 text-red-800'
                            }`}>
                                {reservation.estado ? 
                                    (reservation.estado.charAt(0).toUpperCase() + reservation.estado.slice(1)) :
                                    'No especificado'
                                }
                            </span>
                        </div>
                        {reservation.comentarios && (
                            <p className="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
                                {reservation.comentarios}
                            </p>
                        )}
                    </Section>
                </div>
            </div>
        </Modal>
    );
};

ReservationPreviewModal.propTypes = {
    reservation: PropTypes.shape({
        id: PropTypes.number.isRequired,
        nombre_festejado: PropTypes.string.isRequired,
        edad_festejado: PropTypes.number.isRequired,
        fecha_reserva: PropTypes.string.isRequired,
        hora_inicio: PropTypes.string.isRequired,
        hora_fin: PropTypes.string.isRequired,
        estado: PropTypes.oneOf(['pendiente', 'confirmada', 'cancelada']),
        total: PropTypes.number.isRequired,
        comentarios: PropTypes.string,
        paquete: PropTypes.shape({
            nombre: PropTypes.string,
            descripcion: PropTypes.string
        }),
        tematica: PropTypes.shape({
            nombre: PropTypes.string
        }),
        opcion_alimento: PropTypes.shape({
            nombre: PropTypes.string
        })
    }).isRequired,
    onClose: PropTypes.func.isRequired
};

export default ReservationPreviewModal;\n\n
=== ./reservas/pages/admin/ReservationSummary.jsx ===
import { motion } from 'framer-motion';
import { FiCalendar, FiClock, FiCheck, FiAlertTriangle, FiTrendingUp, FiTrendingDown } from 'react-icons/fi';
import { useTheme } from '@shared/context/ThemeContext';

const ReservationSummary = ({ reservations, filterDataByMonth }) => {
    const { theme } = useTheme();
    const isDark = theme === 'dark';
    
    const currentMonth = new Date().toLocaleString('es-ES', { month: 'long' });
    const capitalizedMonth = currentMonth.charAt(0).toUpperCase() + currentMonth.slice(1);

    const filteredReservations = filterDataByMonth(reservations, 'fecha_reserva');
    const reservationsCount = filteredReservations.length;
    
    // Calcular estadísticas
    const confirmedReservations = filteredReservations.filter(r => r.estado === 'confirmada').length;
    const pendingReservations = filteredReservations.filter(r => r.estado === 'pendiente').length;
    const cancelledReservations = filteredReservations.filter(r => r.estado === 'cancelada').length;
    
    // Calcular porcentajes
    const confirmedPercentage = reservationsCount > 0 ? Math.round((confirmedReservations / reservationsCount) * 100) : 0;
    const pendingPercentage = reservationsCount > 0 ? Math.round((pendingReservations / reservationsCount) * 100) : 0;

    return (
        <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            className="h-full"
        >
            {/* Header */}
            <div className={`p-6 ${
                isDark 
                    ? "bg-gradient-to-r from-green-800 to-emerald-900" 
                    : "bg-gradient-to-r from-green-500 to-emerald-600"
            }`}>
                <div className="flex items-center justify-between">
                    <h2 className="text-xl font-semibold text-white">Reservas</h2>
                    <div className="p-3 rounded-full bg-white/20 text-white shadow-lg">
                        <FiCalendar className="w-6 h-6" />
                    </div>
                </div>
            </div>
            
            {/* Content */}
            <div className="p-4 md:p-6" style={{ 
                backgroundColor: isDark ? 'var(--panel-bg)' : 'white',
                color: isDark ? 'var(--color-text-primary)' : 'inherit'
            }}>
                {/* Summary Stats */}
                <div className="flex flex-col items-center text-center mb-6">
                    <span className={`text-xs md:text-sm font-medium px-4 py-2 rounded-full mb-3 ${
                        isDark 
                            ? 'bg-gray-800 text-gray-100 border border-gray-700' 
                            : 'bg-gray-100 text-gray-600'
                    }`}>
                        {capitalizedMonth}
                    </span>
                    <p className={`text-4xl md:text-5xl font-bold ${
                        isDark ? 'text-green-400' : 'text-green-600'
                    }`} style={{ 
                        background: isDark ? 'linear-gradient(135deg, #10b981, #06d6a0)' : 'linear-gradient(135deg, #059669, #10b981)',
                        WebkitBackgroundClip: 'text',
                        WebkitTextFillColor: 'transparent',
                        backgroundClip: 'text'
                    }}>
                        {reservationsCount}
                    </p>
                    <p className={`text-sm md:text-base font-medium mt-2 ${
                        isDark ? 'text-gray-300' : 'text-gray-600'
                    }`}>
                        {reservationsCount === 1 ? 'reserva' : 'reservas'} este mes
                    </p>
                </div>
                
                {/* Quick Overview */}
                {reservationsCount > 0 && (
                    <div className={`p-4 rounded-lg mb-6 border ${
                        isDark ? 'bg-gray-800 border-gray-700' : 'bg-gray-50 border-gray-200'
                    }`}>
                        <div className="flex items-center justify-between">
                            <span className={`text-sm font-medium ${
                                isDark ? 'text-gray-300' : 'text-gray-600'
                            }`}>
                                Tasa de confirmación
                            </span>
                            <span className={`text-lg font-bold ${
                                isDark ? 'text-green-400' : 'text-green-600'
                            }`}>
                                {confirmedPercentage}%
                            </span>
                        </div>
                    </div>
                )}
                
                {/* Detailed Cards */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-6">
                    {/* Confirmed Reservations */}
                    <motion.div 
                        whileHover={{ scale: 1.02 }}
                        className={`rounded-lg p-4 shadow-sm border text-center transition-all duration-300 ${
                            isDark ? 'bg-gray-800 border-gray-700 hover:bg-gray-750' : 'bg-white border-gray-100 hover:shadow-md'
                        }`}
                    >
                        <div className={`mx-auto w-10 h-10 md:w-12 md:h-12 flex items-center justify-center rounded-full mb-3 ${
                            isDark ? 'bg-green-900 text-green-400' : 'bg-green-100 text-green-600'
                        }`}>
                            <FiCheck className="w-5 h-5 md:w-6 md:h-6" />
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className={`text-xl md:text-2xl font-bold ${
                                isDark ? 'text-white' : 'text-gray-800'
                            }`}>
                                {confirmedReservations}
                            </p>
                            <p className={`text-xs md:text-sm font-medium text-center ${
                                isDark ? 'text-gray-300' : 'text-gray-600'
                            }`}>
                                Confirmadas
                            </p>
                            {reservationsCount > 0 && (
                                <p className={`text-xs mt-1 ${
                                    isDark ? 'text-green-400' : 'text-green-600'
                                }`}>
                                    {confirmedPercentage}%
                                </p>
                            )}
                        </div>
                    </motion.div>
                    
                    {/* Pending Reservations */}
                    <motion.div 
                        whileHover={{ scale: 1.02 }}
                        className={`rounded-lg p-4 shadow-sm border text-center transition-all duration-300 ${
                            isDark ? 'bg-gray-800 border-gray-700 hover:bg-gray-750' : 'bg-white border-gray-100 hover:shadow-md'
                        }`}
                    >
                        <div className={`mx-auto w-10 h-10 md:w-12 md:h-12 flex items-center justify-center rounded-full mb-3 ${
                            isDark ? 'bg-amber-900 text-amber-400' : 'bg-amber-100 text-amber-600'
                        }`}>
                            <FiClock className="w-5 h-5 md:w-6 md:h-6" />
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className={`text-xl md:text-2xl font-bold ${
                                isDark ? 'text-white' : 'text-gray-800'
                            }`}>
                                {pendingReservations}
                            </p>
                            <p className={`text-xs md:text-sm font-medium text-center ${
                                isDark ? 'text-gray-300' : 'text-gray-600'
                            }`}>
                                Pendientes
                            </p>
                            {reservationsCount > 0 && (
                                <p className={`text-xs mt-1 ${
                                    isDark ? 'text-amber-400' : 'text-amber-600'
                                }`}>
                                    {pendingPercentage}%
                                </p>
                            )}
                        </div>
                    </motion.div>
                </div>
                
                {/* Additional Stats */}
                {(cancelledReservations > 0 || reservationsCount === 0) && (
                    <div className="mt-6">
                        <div className={`rounded-lg p-4 border ${
                            isDark ? 'bg-gray-800 border-gray-700' : 'bg-gray-50 border-gray-200'
                        }`}>
                            {cancelledReservations > 0 && (
                                <div className="flex items-center justify-between">
                                    <span className={`text-sm font-medium ${
                                        isDark ? 'text-gray-300' : 'text-gray-600'
                                    }`}>
                                        Canceladas
                                    </span>
                                    <span className={`text-lg font-bold ${
                                        isDark ? 'text-red-400' : 'text-red-600'
                                    }`}>
                                        {cancelledReservations}
                                    </span>
                                </div>
                            )}
                            {reservationsCount === 0 && (
                                <div className="text-center">
                                    <FiCalendar className={`mx-auto w-8 h-8 mb-2 ${
                                        isDark ? 'text-gray-500' : 'text-gray-400'
                                    }`} />
                                    <p className={`text-sm ${
                                        isDark ? 'text-gray-400' : 'text-gray-500'
                                    }`}>
                                        No hay reservas este mes
                                    </p>
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </div>
        </motion.div>
    );
};

export default ReservationSummary;\n\n
=== ./reservas/pages/admin/ReservationTable.jsx ===
﻿import React, { useState, useCallback, useMemo } from 'react';
import { FiEdit2, FiEye, FiTrash2, FiSearch, FiFilter, FiX, FiDollarSign } from 'react-icons/fi';
// ImportaciÃ³n con ruta relativa desde src/
import PaymentModal from '@shared/@domains/dashboard/pages/Dashboard/payment-service/PaymentModal';
import { formatDate, formatTime } from '@shared/utils/formatters';
import axiosInstance from '@shared/utils/axiosConfig';
import { toast } from 'react-hot-toast';

const ReservationTable = ({
  reservations,
  reservationSearch,
  setReservationSearch,
  handleViewReservation,
  handleEditItem,
  handleDeleteItem,
  selectedMonth,
}) => {
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState({
    estado: '',
    fecha_inicio: '',
    fecha_fin: '',
    paquete: '',
    opcion_alimento: '',
    tematica: '',
    hora: ''
  });

  const uniqueValues = useMemo(() => ({
    estados: [...new Set(reservations.map(r => r.estado))],
    paquetes: [...new Set(reservations.map(r => r.paquete?.nombre).filter(Boolean))],
    opcionesAlimento: [...new Set(reservations.map(r => r.opcionAlimento?.nombre).filter(Boolean))],
    tematicas: [...new Set(reservations.map(r => r.tematicaReserva?.nombre).filter(Boolean))],
    horas: [...new Set(reservations.map(r => r.hora_inicio))]
  }), [reservations]);

  const calculateTotalPaid = (pagos) => {
    if (!pagos || !Array.isArray(pagos)) return 0;
    return pagos
      .filter(p => p.estado === 'completado')
      .reduce((sum, p) => sum + (p.monto || 0), 0);
  };

  const getPaymentStatus = (reservation) => {
    if (!reservation.pagos) return { status: 'pendiente', style: 'bg-yellow-100 text-yellow-800' };
    
    const totalPaid = calculateTotalPaid(reservation.pagos);
    
    if (totalPaid >= reservation.total) {
      return { status: 'Pagado', style: 'bg-green-100 text-green-800' };
    } else if (totalPaid > 0) {
      return { status: 'Pago Parcial', style: 'bg-blue-100 text-blue-800' };
    }
    return { status: 'Pendiente', style: 'bg-yellow-100 text-yellow-800' };
  };

  const renderStatus = (estado) => {
    const statusStyles = {
      confirmada: 'bg-green-100 text-green-800',
      cancelada: 'bg-red-100 text-red-800',
      pendiente: 'bg-yellow-100 text-yellow-800'
    };

    return (
      <span
        className={`px-2 py-1 rounded-full text-xs font-semibold ${
          statusStyles[estado] || statusStyles.pendiente
        }`}
      >
        {estado.charAt(0).toUpperCase() + estado.slice(1)}
      </span>
    );
  };

  const handleFilterChange = useCallback((name, value) => {
    setFilters(prev => ({
      ...prev,
      [name]: value
    }));
  }, []);

  const clearFilters = useCallback(() => {
    setFilters({
      estado: '',
      fecha_inicio: '',
      fecha_fin: '',
      paquete: '',
      opcion_alimento: '',
      tematica: '',
      hora: ''
    });
  }, []);

  const filteredReservations = useMemo(() => {
    return reservations.filter(reservation => {
      const searchTerm = reservationSearch.toLowerCase();
      const matchesSearch = 
        reservation.id.toString().includes(searchTerm) ||
        reservation.usuario?.nombre?.toLowerCase().includes(searchTerm) ||
        reservation.paquete?.nombre?.toLowerCase().includes(searchTerm);

      const matchesEstado = !filters.estado || reservation.estado === filters.estado;
      const matchesPaquete = !filters.paquete || reservation.paquete?.nombre === filters.paquete;
      const matchesOpcionAlimento = !filters.opcion_alimento || 
        reservation.opcionAlimento?.nombre === filters.opcion_alimento;
      const matchesTematica = !filters.tematica || 
        reservation.tematicaReserva?.nombre === filters.tematica;
      const matchesHora = !filters.hora || reservation.hora_inicio === filters.hora;

      const reservationDate = new Date(reservation.fecha_reserva);
      const matchesFechaInicio = !filters.fecha_inicio || 
        reservationDate >= new Date(filters.fecha_inicio);
      const matchesFechaFin = !filters.fecha_fin || 
        reservationDate <= new Date(filters.fecha_fin);

      const matchesMonth = reservationDate.getMonth() === selectedMonth;

      return matchesSearch && matchesEstado && matchesPaquete && 
             matchesOpcionAlimento && matchesTematica && matchesHora && 
             matchesFechaInicio && matchesFechaFin && matchesMonth;
    });
  }, [reservations, reservationSearch, filters, selectedMonth]);

  const renderWithFallback = (value, fallback = 'No especificado') => {
    return value || fallback;
  };

  const renderMampara = (mampara) => {
    if (!mampara) return 'No especificada';
    return `${mampara.piezas} pieza(s) - $${mampara.precio}`;
  };

  const FilterPanel = () => (
    <div className="bg-white p-4 border-b border-gray-200">
      <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Estado
          </label>
          <select
            value={filters.estado}
            onChange={(e) => handleFilterChange('estado', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todos</option>
            {uniqueValues.estados.map(estado => (
              <option key={estado} value={estado}>
                {estado.charAt(0).toUpperCase() + estado.slice(1)}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha Inicio
          </label>
          <input
            type="date"
            value={filters.fecha_inicio}
            onChange={(e) => handleFilterChange('fecha_inicio', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha Fin
          </label>
          <input
            type="date"
            value={filters.fecha_fin}
            onChange={(e) => handleFilterChange('fecha_fin', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Paquete
          </label>
          <select
            value={filters.paquete}
            onChange={(e) => handleFilterChange('paquete', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todos</option>
            {uniqueValues.paquetes.map(paquete => (
              <option key={paquete} value={paquete}>{paquete}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            OpciÃ³n de Alimento
          </label>
          <select
            value={filters.opcion_alimento}
            onChange={(e) => handleFilterChange('opcion_alimento', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {uniqueValues.opcionesAlimento.map(opcion => (
              <option key={opcion} value={opcion}>{opcion}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            TemÃ¡tica
          </label>
          <select
            value={filters.tematica}
            onChange={(e) => handleFilterChange('tematica', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {uniqueValues.tematicas.map(tematica => (
              <option key={tematica} value={tematica}>{tematica}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Hora
          </label>
          <select
            value={filters.hora}
            onChange={(e) => handleFilterChange('hora', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {uniqueValues.horas.map(hora => (
              <option key={hora} value={hora}>{hora}</option>
            ))}
          </select>
        </div>
      </div>

      <div className="mt-4 flex justify-end space-x-2">
        <button
          onClick={clearFilters}
          className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Limpiar Filtros
        </button>
        <button
          onClick={() => setShowFilters(false)}
          className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          <FiX className="mr-2" />
          Cerrar Filtros
        </button>
      </div>
    </div>
  );

  return (
    <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
      <div className="bg-white p-4 border-b border-gray-200">
        <div className="flex items-center justify-between flex-wrap gap-4">
          <div className="flex-1 min-w-0 relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              placeholder="Buscar reserva..."
              value={reservationSearch}
              onChange={(e) => setReservationSearch(e.target.value)}
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          <button
            type="button"
            onClick={() => setShowFilters(!showFilters)}
            className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <FiFilter className="h-5 w-5 mr-2" />
            {showFilters ? 'Ocultar Filtros' : 'Mostrar Filtros'}
          </button>
        </div>
      </div>

      {showFilters && <FilterPanel />}

      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-300">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                NÂº Reserva
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Cliente
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Fecha
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Hora
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Paquete
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                OpciÃ³n Alimento
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                TemÃ¡tica
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Mampara
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredReservations.map((reservation) => {
              const paymentStatus = getPaymentStatus(reservation);
              const totalPaid = calculateTotalPaid(reservation.pagos);
              return (
                <tr key={reservation.id} className="hover:bg-gray-50">
                  <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                    {reservation.id}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.usuario?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {formatDate(reservation.fecha_reserva)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {formatTime(reservation.hora_inicio)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.paquete?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.opcionAlimento?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.tematicaReserva?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderMampara(reservation.mampara)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm">
                    {renderStatus(reservation.estado)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => handleViewReservation(reservation)}
                        className="text-blue-600 hover:text-blue-900 transition-colors duration-200"
                        title="Ver detalles"
                      >
                        <FiEye className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => handleEditItem(reservation)}
                        className="text-green-600 hover:text-green-900 transition-colors duration-200"
                        title="Editar reserva"
                      >
                        <FiEdit2 className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => handleDeleteItem(reservation.id)}
                        className="text-red-600 hover:text-red-900 transition-colors duration-200"
                        title="Eliminar reserva"
                      >
                        <FiTrash2 className="h-5 w-5" />
                      </button>
                      {totalPaid < reservation.total && (
                        <button
                          onClick={() => {
                            setSelectedReservation(reservation);
                            setShowPaymentModal(true);
                          }}
                          className="text-indigo-600 hover:text-indigo-900 transition-colors duration-200"
                          title="Procesar pago"
                        >
                          <FiDollarSign className="h-5 w-5" />
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {filteredReservations.length === 0 && (
        <div className="text-center py-8 bg-white">
          <p className="text-gray-500 text-sm">No se encontraron reservaciones para el mes seleccionado</p>
        </div>
      )}

      {/* Modal de Pago */}
      {showPaymentModal && selectedReservation && (
        <PaymentModal
          reservationData={selectedReservation}
          onCancel={() => {
            setShowPaymentModal(false);
            setSelectedReservation(null);
          }}
          onConfirm={async (paymentData) => {
            try {
              const response = await axiosInstance.post('/api/pagos', {
                ...paymentData,
                id_reserva: selectedReservation.id
              });

              if (response.data) {
                toast.success('Pago registrado exitosamente');
                setShowPaymentModal(false);
                setSelectedReservation(null);
              }
              return response;
            } catch (error) {
              console.error('Error al crear el pago:', error);
              toast.error('Error al registrar el pago');
            }
          }}
        />
      )}
    </div>
  );
};

export default ReservationTable;

\n\n
=== ./reservas/pages/admin/ReservationTable.jsx.pre-legacy-fix.20250521220728 ===
import React, { useState, useCallback, useMemo } from 'react';
import { FiEdit2, FiEye, FiTrash2, FiSearch, FiFilter, FiX, FiDollarSign } from 'react-icons/fi';
// Importación con ruta relativa desde src/
import PaymentModal from '@shared/pages/admin/dashboard/payment-service/PaymentModal';
import { formatDate, formatTime } from '@shared/utils/formatters';
import axiosInstance from '@shared/utils/axiosConfig';
import { toast } from 'react-hot-toast';

const ReservationTable = ({
  reservations,
  reservationSearch,
  setReservationSearch,
  handleViewReservation,
  handleEditItem,
  handleDeleteItem,
  selectedMonth,
}) => {
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState({
    estado: '',
    fecha_inicio: '',
    fecha_fin: '',
    paquete: '',
    opcion_alimento: '',
    tematica: '',
    hora: ''
  });

  const uniqueValues = useMemo(() => ({
    estados: [...new Set(reservations.map(r => r.estado))],
    paquetes: [...new Set(reservations.map(r => r.paquete?.nombre).filter(Boolean))],
    opcionesAlimento: [...new Set(reservations.map(r => r.opcionAlimento?.nombre).filter(Boolean))],
    tematicas: [...new Set(reservations.map(r => r.tematicaReserva?.nombre).filter(Boolean))],
    horas: [...new Set(reservations.map(r => r.hora_inicio))]
  }), [reservations]);

  const calculateTotalPaid = (pagos) => {
    if (!pagos || !Array.isArray(pagos)) return 0;
    return pagos
      .filter(p => p.estado === 'completado')
      .reduce((sum, p) => sum + (p.monto || 0), 0);
  };

  const getPaymentStatus = (reservation) => {
    if (!reservation.pagos) return { status: 'pendiente', style: 'bg-yellow-100 text-yellow-800' };
    
    const totalPaid = calculateTotalPaid(reservation.pagos);
    
    if (totalPaid >= reservation.total) {
      return { status: 'Pagado', style: 'bg-green-100 text-green-800' };
    } else if (totalPaid > 0) {
      return { status: 'Pago Parcial', style: 'bg-blue-100 text-blue-800' };
    }
    return { status: 'Pendiente', style: 'bg-yellow-100 text-yellow-800' };
  };

  const renderStatus = (estado) => {
    const statusStyles = {
      confirmada: 'bg-green-100 text-green-800',
      cancelada: 'bg-red-100 text-red-800',
      pendiente: 'bg-yellow-100 text-yellow-800'
    };

    return (
      <span
        className={`px-2 py-1 rounded-full text-xs font-semibold ${
          statusStyles[estado] || statusStyles.pendiente
        }`}
      >
        {estado.charAt(0).toUpperCase() + estado.slice(1)}
      </span>
    );
  };

  const handleFilterChange = useCallback((name, value) => {
    setFilters(prev => ({
      ...prev,
      [name]: value
    }));
  }, []);

  const clearFilters = useCallback(() => {
    setFilters({
      estado: '',
      fecha_inicio: '',
      fecha_fin: '',
      paquete: '',
      opcion_alimento: '',
      tematica: '',
      hora: ''
    });
  }, []);

  const filteredReservations = useMemo(() => {
    return reservations.filter(reservation => {
      const searchTerm = reservationSearch.toLowerCase();
      const matchesSearch = 
        reservation.id.toString().includes(searchTerm) ||
        reservation.usuario?.nombre?.toLowerCase().includes(searchTerm) ||
        reservation.paquete?.nombre?.toLowerCase().includes(searchTerm);

      const matchesEstado = !filters.estado || reservation.estado === filters.estado;
      const matchesPaquete = !filters.paquete || reservation.paquete?.nombre === filters.paquete;
      const matchesOpcionAlimento = !filters.opcion_alimento || 
        reservation.opcionAlimento?.nombre === filters.opcion_alimento;
      const matchesTematica = !filters.tematica || 
        reservation.tematicaReserva?.nombre === filters.tematica;
      const matchesHora = !filters.hora || reservation.hora_inicio === filters.hora;

      const reservationDate = new Date(reservation.fecha_reserva);
      const matchesFechaInicio = !filters.fecha_inicio || 
        reservationDate >= new Date(filters.fecha_inicio);
      const matchesFechaFin = !filters.fecha_fin || 
        reservationDate <= new Date(filters.fecha_fin);

      const matchesMonth = reservationDate.getMonth() === selectedMonth;

      return matchesSearch && matchesEstado && matchesPaquete && 
             matchesOpcionAlimento && matchesTematica && matchesHora && 
             matchesFechaInicio && matchesFechaFin && matchesMonth;
    });
  }, [reservations, reservationSearch, filters, selectedMonth]);

  const renderWithFallback = (value, fallback = 'No especificado') => {
    return value || fallback;
  };

  const renderMampara = (mampara) => {
    if (!mampara) return 'No especificada';
    return `${mampara.piezas} pieza(s) - $${mampara.precio}`;
  };

  const FilterPanel = () => (
    <div className="bg-white p-4 border-b border-gray-200">
      <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Estado
          </label>
          <select
            value={filters.estado}
            onChange={(e) => handleFilterChange('estado', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todos</option>
            {uniqueValues.estados.map(estado => (
              <option key={estado} value={estado}>
                {estado.charAt(0).toUpperCase() + estado.slice(1)}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha Inicio
          </label>
          <input
            type="date"
            value={filters.fecha_inicio}
            onChange={(e) => handleFilterChange('fecha_inicio', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha Fin
          </label>
          <input
            type="date"
            value={filters.fecha_fin}
            onChange={(e) => handleFilterChange('fecha_fin', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Paquete
          </label>
          <select
            value={filters.paquete}
            onChange={(e) => handleFilterChange('paquete', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todos</option>
            {uniqueValues.paquetes.map(paquete => (
              <option key={paquete} value={paquete}>{paquete}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Opción de Alimento
          </label>
          <select
            value={filters.opcion_alimento}
            onChange={(e) => handleFilterChange('opcion_alimento', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {uniqueValues.opcionesAlimento.map(opcion => (
              <option key={opcion} value={opcion}>{opcion}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Temática
          </label>
          <select
            value={filters.tematica}
            onChange={(e) => handleFilterChange('tematica', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {uniqueValues.tematicas.map(tematica => (
              <option key={tematica} value={tematica}>{tematica}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Hora
          </label>
          <select
            value={filters.hora}
            onChange={(e) => handleFilterChange('hora', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {uniqueValues.horas.map(hora => (
              <option key={hora} value={hora}>{hora}</option>
            ))}
          </select>
        </div>
      </div>

      <div className="mt-4 flex justify-end space-x-2">
        <button
          onClick={clearFilters}
          className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Limpiar Filtros
        </button>
        <button
          onClick={() => setShowFilters(false)}
          className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          <FiX className="mr-2" />
          Cerrar Filtros
        </button>
      </div>
    </div>
  );

  return (
    <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
      <div className="bg-white p-4 border-b border-gray-200">
        <div className="flex items-center justify-between flex-wrap gap-4">
          <div className="flex-1 min-w-0 relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              placeholder="Buscar reserva..."
              value={reservationSearch}
              onChange={(e) => setReservationSearch(e.target.value)}
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          <button
            type="button"
            onClick={() => setShowFilters(!showFilters)}
            className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <FiFilter className="h-5 w-5 mr-2" />
            {showFilters ? 'Ocultar Filtros' : 'Mostrar Filtros'}
          </button>
        </div>
      </div>

      {showFilters && <FilterPanel />}

      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-300">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Nº Reserva
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Cliente
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Fecha
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Hora
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Paquete
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Opción Alimento
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Temática
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Mampara
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredReservations.map((reservation) => {
              const paymentStatus = getPaymentStatus(reservation);
              const totalPaid = calculateTotalPaid(reservation.pagos);
              return (
                <tr key={reservation.id} className="hover:bg-gray-50">
                  <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                    {reservation.id}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.usuario?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {formatDate(reservation.fecha_reserva)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {formatTime(reservation.hora_inicio)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.paquete?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.opcionAlimento?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.tematicaReserva?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderMampara(reservation.mampara)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm">
                    {renderStatus(reservation.estado)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => handleViewReservation(reservation)}
                        className="text-blue-600 hover:text-blue-900 transition-colors duration-200"
                        title="Ver detalles"
                      >
                        <FiEye className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => handleEditItem(reservation)}
                        className="text-green-600 hover:text-green-900 transition-colors duration-200"
                        title="Editar reserva"
                      >
                        <FiEdit2 className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => handleDeleteItem(reservation.id)}
                        className="text-red-600 hover:text-red-900 transition-colors duration-200"
                        title="Eliminar reserva"
                      >
                        <FiTrash2 className="h-5 w-5" />
                      </button>
                      {totalPaid < reservation.total && (
                        <button
                          onClick={() => {
                            setSelectedReservation(reservation);
                            setShowPaymentModal(true);
                          }}
                          className="text-indigo-600 hover:text-indigo-900 transition-colors duration-200"
                          title="Procesar pago"
                        >
                          <FiDollarSign className="h-5 w-5" />
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {filteredReservations.length === 0 && (
        <div className="text-center py-8 bg-white">
          <p className="text-gray-500 text-sm">No se encontraron reservaciones para el mes seleccionado</p>
        </div>
      )}

      {/* Modal de Pago */}
      {showPaymentModal && selectedReservation && (
        <PaymentModal
          reservationData={selectedReservation}
          onCancel={() => {
            setShowPaymentModal(false);
            setSelectedReservation(null);
          }}
          onConfirm={async (paymentData) => {
            try {
              const response = await axiosInstance.post('/api/pagos', {
                ...paymentData,
                id_reserva: selectedReservation.id
              });

              if (response.data) {
                toast.success('Pago registrado exitosamente');
                setShowPaymentModal(false);
                setSelectedReservation(null);
              }
              return response;
            } catch (error) {
              console.error('Error al crear el pago:', error);
              toast.error('Error al registrar el pago');
            }
          }}
        />
      )}
    </div>
  );
};

export default ReservationTable;
\n\n
=== ./reservas/pages/admin/reservationform-components/CelebrantSection.jsx ===
import React from 'react';
import { Controller } from 'react-hook-form';
import { FiUser } from 'react-icons/fi';

const CelebrantSection = ({ control, errors }) => {
  return (
    <div className="space-y-4">
      <div className="flex items-center gap-2 mb-4">
        <FiUser className="text-indigo-600 w-5 h-5" />
        <h3 className="text-lg font-semibold text-gray-900">Datos del Festejado</h3>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* Nombre del Festejado */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Nombre del Festejado
          </label>
          <Controller
            name="nombre_festejado"
            control={control}
            rules={{
              required: 'El nombre del festejado es requerido',
              minLength: {
                value: 2,
                message: 'El nombre debe tener al menos 2 caracteres'
              }
            }}
            render={({ field }) => (
              <div>
                <input
                  {...field}
                  type="text"
                  className={`w-full pl-3 pr-10 py-2 text-sm text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 ${
                    errors.nombre_festejado ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Nombre completo"
                />
                {errors.nombre_festejado && (
                  <p className="mt-1 text-xs text-red-500">
                    {errors.nombre_festejado.message}
                  </p>
                )}
              </div>
            )}
          />
        </div>

        {/* Edad del Festejado */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Edad del Festejado
          </label>
          <Controller
            name="edad_festejado"
            control={control}
            rules={{
              required: 'La edad es requerida',
              min: {
                value: 1,
                message: 'La edad debe ser mayor a 0'
              },
              max: {
                value: 100,
                message: 'La edad debe ser menor a 100'
              }
            }}
            render={({ field }) => (
              <div>
                <input
                  {...field}
                  type="number"
                  min="1"
                  max="100"
                  className={`w-full pl-3 pr-10 py-2 text-sm text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 ${
                    errors.edad_festejado ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Edad"
                  onChange={(e) => {
                    const value = e.target.value;
                    if (value === '' || (parseInt(value) >= 1 && parseInt(value) <= 100)) {
                      field.onChange(value);
                    }
                  }}
                />
                {errors.edad_festejado && (
                  <p className="mt-1 text-xs text-red-500">
                    {errors.edad_festejado.message}
                  </p>
                )}
              </div>
            )}
          />
        </div>
      </div>

      {/* Información adicional */}
      <div className="mt-4 bg-gray-50 p-4 rounded-lg border border-gray-200">
        <div className="flex items-center gap-2 mb-2">
          <FiUser className="text-indigo-600 w-4 h-4" />
          <h4 className="font-medium text-gray-900">Información importante:</h4>
        </div>
        <ul className="list-disc list-inside space-y-1 text-sm text-gray-600">
          <li>El nombre debe ser el nombre completo del festejado</li>
          <li>La edad debe ser un número entre 1 y 100 años</li>
          <li>Estos datos serán utilizados para personalizar la experiencia</li>
        </ul>
      </div>
    </div>
  );
};

export default CelebrantSection;\n\n
=== ./reservas/pages/admin/reservationform-components/CommentsSection.jsx ===
import React from 'react';
import { Controller } from 'react-hook-form';
import { FiMessageSquare } from 'react-icons/fi';

const CommentsSection = ({ control }) => {
  return (
    <div className="space-y-4">
      <div className="flex items-center gap-2 mb-4">
        <FiMessageSquare className="text-indigo-600 w-5 h-5" />
        <h3 className="text-lg font-semibold text-gray-900">Comentarios</h3>
      </div>

      <Controller
        name="comentarios"
        control={control}
        render={({ field }) => (
          <div>
            <textarea
              {...field}
              rows={4}
              className="w-full pl-3 pr-10 py-2 text-sm text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Agrega cualquier comentario o instrucción especial para la reserva..."
            />
            <p className="mt-2 text-sm text-gray-500">
              Puedes incluir detalles adicionales como:
            </p>
            <ul className="mt-1 list-disc list-inside text-sm text-gray-500 space-y-1">
              <li>Requerimientos especiales</li>
              <li>Alergias o restricciones alimenticias</li>
              <li>Instrucciones específicas para la decoración</li>
              <li>Cualquier otra información relevante</li>
            </ul>
          </div>
        )}
      />

      {/* Panel informativo */}
      <div className="mt-4 bg-gray-50 p-4 rounded-lg border border-gray-200">
        <div className="flex items-center gap-2 mb-2">
          <FiMessageSquare className="text-indigo-600 w-4 h-4" />
          <h4 className="font-medium text-gray-900">Información importante:</h4>
        </div>
        <ul className="list-disc list-inside space-y-1 text-sm text-gray-600">
          <li>Los comentarios son visibles para el personal del establecimiento</li>
          <li>Serán considerados durante la preparación del evento</li>
          <li>No incluyas información sensible o confidencial</li>
        </ul>
      </div>

      {/* Contador de caracteres */}
      <Controller
        name="comentarios"
        control={control}
        render={({ field }) => (
          <div className="flex justify-end">
            <span className="text-sm text-gray-500">
              {field.value?.length || 0} caracteres
            </span>
          </div>
        )}
      />
    </div>
  );
};

export default CommentsSection;\n\n
=== ./reservas/pages/admin/reservationform-components/DateTimeSection.jsx ===
import React, { useCallback, useMemo, useState, useEffect } from 'react';
import { Controller, useWatch } from 'react-hook-form';
import { FiCalendar, FiClock, FiAlertCircle, FiInfo } from 'react-icons/fi';
import DatePicker, { registerLocale } from 'react-datepicker';
import es from 'date-fns/locale/es';
import { format, isWeekend, isTuesday, addDays, isBefore, startOfDay } from 'date-fns';
import "react-datepicker/dist/react-datepicker.css";
import Select from 'react-select';

registerLocale('es', es);

const TIME_SLOTS = {
  MORNING: {
    label: 'Mañana (11:00 - 16:00)',
    value: 'mañana',
    start: '11:00:00',
    end: '16:00:00',
    icon: '🌅'
  },
  AFTERNOON: {
    label: 'Tarde (17:00 - 22:00)',
    value: 'tarde',
    start: '17:00:00',
    end: '22:00:00',
    icon: '🌇'
  }
};

const DateTimeSection = ({
  control,
  errors,
  setValue,
  unavailableDates = [],
  existingReservations = [],
  packages = [],
  showTuesdayModal,
  setShowTuesdayModal
}) => {
  const [selectedDate, setSelectedDate] = useState(null);
  const [hasShownTuesdayModal, setHasShownTuesdayModal] = useState(false);

  const selectedPackage = useWatch({
    control,
    name: 'id_paquete'
  });

  useEffect(() => {
    if (selectedPackage && selectedDate instanceof Date) {
      const pkg = packages.find((p) => p.id === selectedPackage);
      if (pkg) {
        const dayOfWeek = selectedDate.getDay();
        const newPrice =
          dayOfWeek >= 1 && dayOfWeek <= 4
            ? parseFloat(pkg.precio_lunes_jueves)
            : parseFloat(pkg.precio_viernes_domingo);
        setValue('packagePrice', newPrice, { shouldValidate: false });

        if (dayOfWeek === 2 && !hasShownTuesdayModal) {
          setValue('tuesdayFee', 1500, { shouldValidate: false });
          setShowTuesdayModal(true);
          setHasShownTuesdayModal(true);
        } else if (dayOfWeek !== 2) {
          setValue('tuesdayFee', 0, { shouldValidate: false });
          setHasShownTuesdayModal(false);
        }
      }
    }
  }, [selectedPackage, selectedDate, packages, setValue, setShowTuesdayModal, hasShownTuesdayModal]);

  const getDateAvailability = useCallback((date) => {
    if (!date) return 'available';

    // Check if date is in the past or within one week
    const today = startOfDay(new Date());
    const oneWeekFromNow = addDays(today, 7);
    if (isBefore(date, oneWeekFromNow)) {
      return 'unavailable';
    }

    const reservationsOnDate = existingReservations.filter(
      (reservation) =>
        new Date(reservation.fecha_reserva).toDateString() === date.toDateString() &&
        reservation.estado !== 'cancelada'
    );

    const morningReserved = reservationsOnDate.some(r => r.hora_inicio === TIME_SLOTS.MORNING.start);
    const afternoonReserved = reservationsOnDate.some(r => r.hora_inicio === TIME_SLOTS.AFTERNOON.start);

    if (morningReserved && afternoonReserved) return 'unavailable';
    if (morningReserved || afternoonReserved) return 'partial';
    return 'available';
  }, [existingReservations]);

  const isTimeSlotAvailable = useCallback((date, timeSlot) => {
    if (!date) return true;

    const reservationsOnDate = existingReservations.filter(
      (reservation) =>
        new Date(reservation.fecha_reserva).toDateString() === date.toDateString()
    );

    return !reservationsOnDate.some(
      (reservation) => reservation.hora_inicio === timeSlot.start
    );
  }, [existingReservations]);

  const availableTimeSlots = useMemo(() => {
    if (!selectedDate) return [];
    return Object.values(TIME_SLOTS).filter((slot) =>
      isTimeSlotAvailable(selectedDate, slot)
    );
  }, [selectedDate, isTimeSlotAvailable]);

  const timeSlotOptions = useMemo(() =>
    availableTimeSlots.map((slot) => ({
      value: slot.value,
      label: slot.label,
      icon: slot.icon,
      hora_inicio: slot.start,
      hora_fin: slot.end,
      data: slot
    })),
    [availableTimeSlots]
  );

  const formatOptionLabel = useCallback(({ label, icon, value }) => (
    <div key={`time-slot-${value}`} className="flex items-center gap-2">
      <span>{icon}</span>
      <span>{label}</span>
    </div>
  ), []);

  const customSelectStyles = {
    control: (base, state) => ({
      ...base,
      borderColor: errors.hora_inicio ? '#ef4444' : state.isFocused ? '#6366f1' : '#e5e7eb',
      boxShadow: state.isFocused ? '0 0 0 1px #6366f1' : 'none',
      transition: 'all 0.2s ease',
      '&:hover': {
        borderColor: state.isFocused ? '#6366f1' : '#e5e7eb'
      }
    }),
    option: (base, state) => ({
      ...base,
      backgroundColor: state.isSelected ? '#6366f1' : state.isFocused ? '#e0e7ff' : 'white',
      color: state.isSelected ? 'white' : '#374151',
      transition: 'all 0.2s ease',
      '&:active': {
        backgroundColor: '#6366f1'
      }
    }),
    menu: (base) => ({
      ...base,
      zIndex: 50
    })
  };

  const getDatePriceInfo = useCallback((date) => {
    if (!selectedPackage || !packages.length) return '';
    
    const pkg = packages.find((p) => p.id === selectedPackage);
    if (!pkg) return '';

    const dayOfWeek = date.getDay();
    const basePrice = dayOfWeek >= 1 && dayOfWeek <= 4
      ? pkg.precio_lunes_jueves
      : pkg.precio_viernes_domingo;

    const isTuesdayDate = date.getDay() === 2;
    const priceInfo = `Precio: $${basePrice}${isTuesdayDate ? ' + $1,500 (Martes)' : ''}`;
    
    return priceInfo;
  }, [selectedPackage, packages]);

  const getDayClassName = useCallback((date) => {
    const today = startOfDay(new Date());
    const oneWeekFromNow = addDays(today, 7);
    const availability = getDateAvailability(date);
    const isWeekendDay = isWeekend(date);
    const isPastDate = isBefore(date, today);
    const isWithinFirstWeek = isBefore(date, oneWeekFromNow);
    const isToday = date.getTime() === today.getTime();
    let className = 'w-full h-full flex items-center justify-center hover:bg-opacity-80 transition-all duration-200 ';

    if (isToday) {
      className += 'bg-blue-100 text-blue-800 font-bold ring-2 ring-blue-400 ';
    } else if (isPastDate || isWithinFirstWeek) {
      className += 'bg-gray-100 text-gray-400 cursor-not-allowed ';
    } else if (availability === 'unavailable') {
      className += 'bg-red-100 text-red-800 cursor-not-allowed ';
    } else if (availability === 'partial') {
      className += 'bg-yellow-100 text-yellow-800 ';
    } else if (availability === 'available') {
      className += 'bg-green-100 text-green-800 ';
    }

    if (isWeekendDay && !isToday) {
      className += 'font-medium';
    }

    return className;
  }, [getDateAvailability]);

  const renderDateHeader = useCallback((date) => {
    const isWeekendDay = isWeekend(date);
    return (
      <div className={`text-center py-1 ${isWeekendDay ? 'bg-indigo-50' : ''}`}>
        {format(date, 'EEE', { locale: es })}
      </div>
    );
  }, []);

  const filterDate = useCallback((date) => {
    const today = startOfDay(new Date());
    const oneWeekFromNow = addDays(today, 7);
    const availability = getDateAvailability(date);
    return !isBefore(date, oneWeekFromNow) && availability !== 'unavailable';
  }, []);

  // Usar useWatch para observar el valor del horario
  const currentTimeSlot = useWatch({
    control,
    name: 'hora_inicio'
  });

  const handleDateChange = useCallback((date) => {
    if (!date) {
      setSelectedDate(null);
      setValue('fecha_reserva', null);
      setValue('packagePrice', 0, { shouldValidate: false });
      setValue('tuesdayFee', 0, { shouldValidate: false });
      setHasShownTuesdayModal(false);
      setValue('hora_inicio', null);
      return;
    }

    setSelectedDate(date);
    setValue('fecha_reserva', date);
    
    // Solo mantener el horario si existe y está disponible
    if (!currentTimeSlot || !isTimeSlotAvailable(date, currentTimeSlot.data)) {
      setValue('hora_inicio', null);
    }
  }, [setValue, currentTimeSlot, isTimeSlotAvailable]);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FiCalendar className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">Fecha y Hora</h3>
        </div>
        {selectedDate && (
          <span className="text-sm text-indigo-600 bg-indigo-50 px-4 py-2 rounded-full">
            {format(selectedDate, "EEEE d 'de' MMMM", { locale: es })}
          </span>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700">
            Fecha de la Reserva
          </label>
          <Controller
            name="fecha_reserva"
            control={control}
            rules={{ required: 'La fecha es requerida' }}
            render={({ field }) => (
              <div>
                <DatePicker
                  selected={field.value}
                  onChange={handleDateChange}
                  locale="es"
                  dateFormat="dd/MM/yyyy"
                  minDate={addDays(new Date(), 7)}
                  filterDate={filterDate}
                  renderDayContents={(day, date) => (
                    <div className="relative group">
                      <div 
                        className={getDayClassName(date)}
                        aria-label={
                          date.getTime() === startOfDay(new Date()).getTime() 
                            ? "Día actual" 
                            : getDatePriceInfo(date)
                        }
                      >
                        {day}
                      </div>
                      <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 hidden group-hover:block">
                        <div className="bg-gray-900 text-white text-xs rounded py-1 px-2 whitespace-nowrap">
                          {date.getTime() === startOfDay(new Date()).getTime() 
                            ? "Día actual" 
                            : getDatePriceInfo(date)}
                        </div>
                      </div>
                    </div>
                  )}
                  renderCustomHeader={({
                    date,
                    decreaseMonth,
                    increaseMonth,
                    prevMonthButtonDisabled,
                    nextMonthButtonDisabled
                  }) => (
                    <div className="flex items-center justify-between px-2 py-2">
                      <button
                        onClick={decreaseMonth}
                        disabled={prevMonthButtonDisabled}
                        type="button"
                        className="p-1 hover:bg-gray-100 rounded-full disabled:opacity-50"
                      >
                        ←
                      </button>
                      <div className="text-lg font-semibold">
                        {format(date, 'MMMM yyyy', { locale: es })}
                      </div>
                      <button
                        onClick={increaseMonth}
                        disabled={nextMonthButtonDisabled}
                        type="button"
                        className="p-1 hover:bg-gray-100 rounded-full disabled:opacity-50"
                      >
                        →
                      </button>
                    </div>
                  )}
                  renderWeekdayShort={(day) => renderDateHeader(new Date(day))}
                  className="w-full px-3 py-2 text-sm text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  calendarClassName="border border-gray-200 rounded-lg shadow-lg"
                />
                {errors.fecha_reserva && (
                  <p className="mt-1 text-xs text-red-500 flex items-center gap-1">
                    <FiAlertCircle className="w-3 h-3" />
                    {errors.fecha_reserva.message}
                  </p>
                )}
              </div>
            )}
          />
        </div>

        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700">
            Horario
          </label>
          <Controller
            name="hora_inicio"
            control={control}
            rules={{ required: 'El horario es requerido' }}
            render={({ field }) => (
              <div>
                <Select
                  {...field}
                  isDisabled={!selectedDate}
                  options={timeSlotOptions}
                  placeholder={
                    selectedDate
                      ? "Selecciona un horario"
                      : "Primero selecciona una fecha"
                  }
                  className="react-select-container"
                  classNamePrefix="react-select"
                  styles={customSelectStyles}
                  formatOptionLabel={formatOptionLabel}
                  noOptionsMessage={() => "No hay horarios disponibles"}
                />
                {errors.hora_inicio && (
                  <p className="mt-1 text-xs text-red-500 flex items-center gap-1">
                    <FiAlertCircle className="w-3 h-3" />
                    {errors.hora_inicio.message}
                  </p>
                )}
              </div>
            )}
          />
        </div>
      </div>

      <div className="bg-white p-4 rounded-lg border border-indigo-100 shadow-sm space-y-4">
        <div className="grid grid-cols-3 gap-2">
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-green-100"></div>
            <span>Ambos horarios disponibles</span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-yellow-100"></div>
            <span>Un horario disponible</span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-red-100"></div>
            <span>Sin disponibilidad</span>
          </div>
        </div>
        <div className="flex items-center gap-2 mb-3">
          <FiInfo className="text-indigo-600" />
          <h4 className="font-medium text-gray-900">Información de Horarios</h4>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {Object.values(TIME_SLOTS).map((slot) => (
            <div
              key={`time-slot-info-${slot.value}`}
              className="flex items-center gap-3 bg-gray-50 p-3 rounded-md"
            >
              <span className="text-xl">{slot.icon}</span>
              <div>
                <div className="font-medium text-gray-900">{slot.label}</div>
                <div className="text-sm text-gray-600">
                  Duración: 5 horas
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {selectedDate && availableTimeSlots.length === 0 && (
        <div className="flex items-start gap-3 p-4 bg-amber-50 text-amber-700 rounded-lg border border-amber-200">
          <FiAlertCircle className="w-5 h-5 mt-0.5 flex-shrink-0" />
          <div>
            <p className="font-medium">No hay horarios disponibles</p>
            <p className="text-sm mt-1">
              Todos los horarios para esta fecha están reservados.
              Por favor, selecciona otra fecha.
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default DateTimeSection;
\n\n
=== ./reservas/pages/admin/reservationform-components/ExtrasSection.jsx ===
import React, { useCallback, useMemo } from 'react';
import { Controller, useFieldArray } from 'react-hook-form';
import { FiPlus, FiMinus, FiPackage, FiCheck, FiDollarSign, FiShoppingCart, FiInfo } from 'react-icons/fi';

const ExtrasSection = ({ extras, control, setValue }) => {
  const { fields, append, remove, update } = useFieldArray({
    control,
    name: 'extras',
  });

  const handleExtraToggle = useCallback((extra) => {
    console.log('[ExtrasSection] Toggling extra:', extra);
    const existingIndex = fields.findIndex((field) => field.id === extra.id);
    if (existingIndex === -1) {
      console.log('[ExtrasSection] Adding extra with quantity 1');
      append({ 
        id: extra.id, 
        cantidad: 1,
        nombre: extra.nombre,
        precio: extra.precio 
      });
    } else {
      console.log('[ExtrasSection] Removing extra');
      remove(existingIndex);
    }
  }, [fields, append, remove]);

  const handleQuantityChange = useCallback((index, newQuantity) => {
    console.log('[ExtrasSection] Changing quantity:', { index, newQuantity });
    const validQuantity = Math.max(1, parseInt(newQuantity) || 1);
    
    if (validQuantity < 1) {
      console.log('[ExtrasSection] Removing extra due to quantity < 1');
      remove(index);
    } else {
      const currentField = fields[index];
      const extraInfo = extras.find(e => e.id === currentField.id);
      
      if (extraInfo) {
        console.log('[ExtrasSection] Updating quantity to:', validQuantity);
        const updatedExtra = {
          id: currentField.id,
          cantidad: validQuantity,
          nombre: extraInfo.nombre,
          precio: extraInfo.precio
        };
        
        update(index, updatedExtra);
        setValue(`extras.${index}`, updatedExtra);
      }
    }
  }, [fields, remove, update, setValue, extras]);

  const selectedExtras = useMemo(() => 
    fields.map(field => ({
      ...field,
      extra: extras.find(e => e.id === field.id)
    })).filter(item => item.extra),
    [fields, extras]
  );

  const renderQuantityControls = useCallback((index, cantidad) => (
    <div className="flex items-center gap-2 bg-white p-1 rounded-lg border border-gray-200 shadow-sm">
      <button
        type="button"
        onClick={() => handleQuantityChange(index, Math.max(1, cantidad - 1))}
        className="p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Disminuir cantidad"
      >
        <FiMinus className="w-3 h-3" />
      </button>
      <Controller
        name={`extras.${index}.cantidad`}
        control={control}
        defaultValue={1}
        render={({ field }) => (
          <input
            type="number"
            {...field}
            value={field.value || 1}
            min="1"
            className="w-16 text-center border border-gray-300 rounded-md p-1 text-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            onChange={(e) => {
              const value = parseInt(e.target.value) || 1;
              field.onChange(value);
              handleQuantityChange(index, value);
            }}
            onBlur={(e) => {
              const value = parseInt(e.target.value) || 1;
              field.onChange(value);
              handleQuantityChange(index, value);
            }}
            aria-label="Cantidad"
          />
        )}
      />
      <button
        type="button"
        onClick={() => handleQuantityChange(index, cantidad + 1)}
        className="p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Aumentar cantidad"
      >
        <FiPlus className="w-3 h-3" />
      </button>
    </div>
  ), [control, handleQuantityChange]);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FiShoppingCart className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">Extras</h3>
        </div>
        {fields.length > 0 && (
          <span className="bg-indigo-100 text-indigo-800 text-sm font-medium px-3 py-1 rounded-full">
            {fields.length} seleccionado{fields.length !== 1 ? 's' : ''}
          </span>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {extras.map((extra) => {
          const existingExtra = fields.find((field) => field.id === extra.id);
          const isSelected = !!existingExtra;
          const extraIndex = fields.findIndex((field) => field.id === extra.id);

          return (
            <div
              key={extra.id}
              className={`group p-4 rounded-lg border transition-all duration-300 transform ${
                isSelected
                  ? 'border-indigo-500 bg-indigo-50 shadow-md scale-[1.02]'
                  : 'border-gray-200 hover:border-indigo-300 hover:shadow-sm hover:scale-[1.01]'
              }`}
            >
              <div className="flex justify-between items-start mb-3">
                <div className="flex-1">
                  <div className="flex items-center gap-2">
                    <h4 className="font-medium text-gray-900">{extra.nombre}</h4>
                    {isSelected && (
                      <span className="flex items-center gap-1 text-xs bg-indigo-500 text-white px-2 py-0.5 rounded-full">
                        <FiCheck className="w-3 h-3" />
                        Seleccionado
                      </span>
                    )}
                  </div>
                  {extra.descripcion && (
                    <p className="text-sm text-gray-600 mt-1 group-hover:text-gray-700">
                      {extra.descripcion}
                    </p>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => handleExtraToggle(extra)}
                  className={`p-2 rounded-full transition-all duration-200 ${
                    isSelected
                      ? 'bg-indigo-500 text-white hover:bg-indigo-600'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                  aria-label={isSelected ? 'Remover extra' : 'Agregar extra'}
                >
                  {isSelected ? <FiMinus /> : <FiPlus />}
                </button>
              </div>

              <div className="flex justify-between items-center mt-3">
                <div className="flex items-center gap-2">
                  <FiDollarSign className="text-indigo-600 w-4 h-4" />
                  <span className="text-lg font-semibold text-indigo-600">
                    ${Number(extra.precio).toFixed(2)}
                  </span>
                </div>

                {isSelected && renderQuantityControls(extraIndex, existingExtra.cantidad)}
              </div>
            </div>
          );
        })}
      </div>

      {extras.length === 0 && (
        <div className="flex items-center justify-center gap-2 py-8 text-gray-500 bg-gray-50 rounded-lg border border-dashed border-gray-300">
          <FiInfo className="w-5 h-5" />
          <span>No hay extras disponibles</span>
        </div>
      )}

      {selectedExtras.length > 0 && (
        <div className="mt-6 p-4 bg-white rounded-lg border border-indigo-200 shadow-sm">
          <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
            <FiPackage className="text-indigo-600" />
            Extras seleccionados
          </h4>
          <div className="space-y-2">
            {selectedExtras.map(({ id, cantidad, extra }) => (
              <div
                key={id}
                className="flex justify-between items-center text-sm bg-gray-50 p-2.5 rounded-md transition-colors duration-200 hover:bg-gray-100"
              >
                <div className="flex items-center gap-2">
                  <FiCheck className="text-indigo-500" />
                  <span className="font-medium">{extra.nombre}</span>
                  <span className="text-gray-500">
                    (x{cantidad})
                  </span>
                </div>
                <span className="font-medium text-indigo-600">
                  ${(parseFloat(extra.precio) * cantidad).toFixed(2)}
                </span>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ExtrasSection;\n\n
=== ./reservas/pages/admin/reservationform-components/FoodOptionsSection.jsx ===
import React, { useCallback, useMemo } from 'react';
import { Controller } from 'react-hook-form';
import { FiCoffee, FiDollarSign, FiUsers, FiClock, FiAlertCircle, FiInfo } from 'react-icons/fi';
import Select from 'react-select';

const FoodOptionsSection = ({ control, errors, foodOptions }) => {
  const formatFoodOption = useCallback((option) => ({
    value: option.id,
    label: `${option.nombre} - $${option.precio_extra}`,
    data: option,
  }), []);

  const foodOptionsList = useMemo(() => 
    foodOptions.map(formatFoodOption),
    [foodOptions, formatFoodOption]
  );

  const customSelectStyles = {
    control: (base, state) => ({
      ...base,
      borderColor: errors.id_opcion_alimento ? '#ef4444' : state.isFocused ? '#6366f1' : '#e5e7eb',
      boxShadow: state.isFocused ? '0 0 0 1px #6366f1' : 'none',
      transition: 'all 0.2s ease',
      '&:hover': {
        borderColor: state.isFocused ? '#6366f1' : '#e5e7eb'
      }
    }),
    option: (base, state) => ({
      ...base,
      backgroundColor: state.isSelected ? '#6366f1' : state.isFocused ? '#e0e7ff' : 'white',
      color: state.isSelected ? 'white' : '#374151',
      transition: 'all 0.2s ease',
      '&:active': {
        backgroundColor: '#6366f1'
      }
    }),
    menu: (base) => ({
      ...base,
      zIndex: 50
    })
  };

  const renderOptionDetails = useCallback((option) => {
    if (!option) return null;

    const details = [
      { 
        icon: FiUsers,
        title: 'Platillo Adulto',
        value: option.platillo_adulto,
        price: option.precio_adulto,
        highlight: true
      },
      { 
        icon: FiUsers,
        title: 'Platillo Niño',
        value: option.platillo_nino,
        price: option.precio_nino,
        highlight: true
      },
      { 
        icon: FiDollarSign,
        title: 'Precio Extra',
        value: `$${option.precio_extra}`,
        isPrice: true
      },
      { 
        icon: FiClock,
        title: 'Turno',
        value: option.turno.charAt(0).toUpperCase() + option.turno.slice(1)
      }
    ];

    return (
      <div className="mt-4 bg-white p-4 rounded-lg border border-indigo-100 shadow-sm">
        <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
          <FiInfo className="text-indigo-600" />
          Detalles de la opción seleccionada
        </h4>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {details.map(({ icon: Icon, title, value, price, highlight, isPrice }) => (
            <div
              key={title}
              className={`flex items-start gap-3 bg-gray-50 p-3 rounded-md ${
                highlight ? 'col-span-full' : ''
              }`}
            >
              <Icon className={`w-5 h-5 mt-0.5 ${isPrice ? 'text-indigo-600' : 'text-gray-500'}`} />
              <div className="flex-1">
                <span className="text-sm text-gray-600">{title}:</span>
                <div className="font-medium text-gray-900">
                  {value}
                  {price && (
                    <span className="ml-2 text-indigo-600">
                      (${price})
                    </span>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>

        {option.opcion_papas && (
          <div className="mt-4 bg-green-50 p-3 rounded-md border border-green-100">
            <div className="flex items-center gap-2">
              <FiInfo className="text-green-600" />
              <div>
                <span className="font-medium text-green-800">Opción de Papas Disponible</span>
                <span className="ml-2 text-green-600">+${option.precio_papas}</span>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  }, []);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FiCoffee className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">Opción de Alimentos</h3>
        </div>
        {foodOptionsList.length > 0 && (
          <span className="text-sm text-indigo-600 bg-indigo-50 px-4 py-2 rounded-full">
            {foodOptionsList.length} opciones disponibles
          </span>
        )}
      </div>

      <Controller
        name="id_opcion_alimento"
        control={control}
        rules={{ required: 'Debes seleccionar una opción de alimentos' }}
        render={({ field }) => (
          <div>
            <Select
              {...field}
              isClearable
              placeholder="Selecciona una opción de alimentos"
              options={foodOptionsList}
              className="react-select-container"
              classNamePrefix="react-select"
              styles={customSelectStyles}
              noOptionsMessage={() => "No hay opciones disponibles"}
            />
            {errors.id_opcion_alimento && (
              <p className="mt-1 text-xs text-red-500 flex items-center gap-1">
                <FiAlertCircle className="w-3 h-3" />
                {errors.id_opcion_alimento.message}
              </p>
            )}
          </div>
        )}
      />

      <Controller
        name="id_opcion_alimento"
        control={control}
        render={({ field }) => renderOptionDetails(field.value?.data)}
      />

      {foodOptionsList.length === 0 && (
        <div className="flex items-center justify-center gap-2 py-8 text-gray-500 bg-gray-50 rounded-lg border border-dashed border-gray-300">
          <FiInfo className="w-5 h-5" />
          <span>No hay opciones de alimentos disponibles</span>
        </div>
      )}
    </div>
  );
};

export default FoodOptionsSection;\n\n
=== ./reservas/pages/admin/reservationform-components/MamparaSection.jsx ===
import React, { useCallback, useEffect, useMemo } from 'react';
import { Controller, useWatch } from 'react-hook-form';
import { FiLayout, FiAlertCircle, FiImage, FiDollarSign, FiLayers } from 'react-icons/fi';
import Select from 'react-select';

const MamparaSection = ({ control, errors, filteredMamparas, setValue, getValues }) => {
  // Usar useWatch para observar los cambios en los campos relevantes
  const selectedTheme = useWatch({
    control,
    name: 'id_tematica',
  });

  const selectedMampara = useWatch({
    control,
    name: 'id_mampara',
  });

  const formatMamparaOption = useCallback((mampara) => {
    console.log('[MamparaSection] Formatting mampara option:', mampara);
    return {
      value: mampara.id,
      label: `${mampara.piezas} pieza(s) - ${new Intl.NumberFormat('es-MX', {
        style: 'currency',
        currency: 'MXN'
      }).format(parseFloat(mampara.precio) || 0)}`,
      piezas: mampara.piezas,
      precio: mampara.precio,
      foto: mampara.foto,
    };
  }, []);

  const isThemeSelected = useMemo(() => {
    const hasTheme = Boolean(selectedTheme?.value);
    console.log('[MamparaSection] Theme selected:', hasTheme, selectedTheme);
    return hasTheme;
  }, [selectedTheme]);

  const mamparaOptions = useMemo(() => {
    const options = filteredMamparas.map(formatMamparaOption);
    console.log('[MamparaSection] Available mampara options:', options);
    return options;
  }, [filteredMamparas, formatMamparaOption]);

  // Efecto para validar la mampara cuando cambia la temática
  useEffect(() => {
    console.log('[MamparaSection] Theme changed:', selectedTheme);
    const currentMampara = getValues('id_mampara');
    
    // Solo validar si hay una mampara seleccionada
    if (currentMampara) {
      // Verificar si la mampara actual es válida para la nueva temática
      const isMamparaValid = filteredMamparas.some(
        m => m.id === currentMampara.value
      );
      
      if (!isMamparaValid) {
        console.log('[MamparaSection] Current mampara is not valid for new theme');
        setValue('id_mampara', null);
      } else {
        console.log('[MamparaSection] Current mampara is valid for new theme');
      }
    }
  }, [selectedTheme, filteredMamparas, setValue, getValues]);

  // Efecto para notificar cambios en la mampara
  useEffect(() => {
    if (selectedMampara) {
      console.log('[MamparaSection] Mampara changed:', selectedMampara);
    }
  }, [selectedMampara]);

  const customSelectStyles = {
    control: (base, state) => ({
      ...base,
      borderColor: errors.id_mampara ? '#ef4444' : state.isFocused ? '#6366f1' : '#e5e7eb',
      boxShadow: state.isFocused ? '0 0 0 1px #6366f1' : 'none',
      backgroundColor: !isThemeSelected ? '#f9fafb' : 'white',
      transition: 'all 0.2s ease',
      '&:hover': {
        borderColor: state.isFocused ? '#6366f1' : '#e5e7eb'
      }
    }),
    option: (base, state) => ({
      ...base,
      backgroundColor: state.isSelected ? '#6366f1' : state.isFocused ? '#e0e7ff' : 'white',
      color: state.isSelected ? 'white' : '#374151',
      transition: 'all 0.2s ease',
      '&:active': {
        backgroundColor: '#6366f1'
      }
    }),
    placeholder: (base) => ({
      ...base,
      color: !isThemeSelected ? '#9ca3af' : '#6b7280'
    }),
    menu: (base) => ({
      ...base,
      zIndex: 50
    })
  };

  const renderMamparaDetails = useCallback((mampara) => {
    if (!mampara) return null;
    console.log('[MamparaSection] Rendering details for mampara:', mampara);

    const details = [
      { icon: FiLayers, label: 'Piezas', value: mampara.piezas },
      { 
        icon: FiDollarSign, 
        label: 'Precio', 
        value: new Intl.NumberFormat('es-MX', {
          style: 'currency',
          currency: 'MXN'
        }).format(parseFloat(mampara.precio) || 0),
        highlight: true 
      }
    ];

    return (
      <div className="mt-4 bg-white p-4 rounded-lg border border-indigo-100 shadow-sm">
        <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
          <FiLayout className="text-indigo-600" />
          Detalles de la mampara
        </h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          {details.map(({ icon: Icon, label, value, highlight }) => (
            <div key={label} className="flex items-center gap-3 bg-gray-50 p-3 rounded-md">
              <Icon className={`w-5 h-5 ${highlight ? 'text-indigo-600' : 'text-gray-500'}`} />
              <div>
                <span className="text-sm text-gray-600">{label}:</span>
                <span className={`ml-2 font-medium ${highlight ? 'text-indigo-600' : 'text-gray-900'}`}>
                  {value}
                </span>
              </div>
            </div>
          ))}
        </div>
        {mampara.foto && (
          <div className="mt-4">
            <div className="flex items-center gap-2 text-sm text-gray-600 mb-2">
              <FiImage className="text-indigo-600" />
              <span>Imagen de referencia</span>
            </div>
            <div className="relative group">
              <img
                src={mampara.foto}
                alt={`Mampara de ${mampara.piezas} piezas`}
                className="w-full max-w-md rounded-lg shadow-sm group-hover:shadow-md transition-shadow duration-200"
              />
              <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-opacity duration-200 rounded-lg"></div>
            </div>
          </div>
        )}
      </div>
    );
  }, []);

  const handleMamparaChange = useCallback((selectedOption, onChange) => {
    console.log('[MamparaSection] Mampara selection changed:', selectedOption);
    onChange(selectedOption);
    // Forzar actualización del total
    setValue('total', null, { shouldValidate: true });
  }, [setValue]);

  return (
    <div className="space-y-4">
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3 mb-4">
        <div className="flex items-center gap-2">
          <FiLayout className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">Mampara</h3>
        </div>
        {isThemeSelected && selectedTheme?.label && (
          <div className="flex items-center gap-2 text-sm text-indigo-600 bg-indigo-50 px-4 py-2 rounded-full">
            <span className="font-medium">Temática:</span>
            <span>{selectedTheme.label}</span>
          </div>
        )}
      </div>

      <div className={`transition-all duration-300 ${!isThemeSelected ? 'opacity-50' : ''}`}>
        <Controller
          name="id_mampara"
          control={control}
          render={({ field }) => (
            <div>
              <Select
                {...field}
                isClearable
                isDisabled={!isThemeSelected}
                placeholder={
                  isThemeSelected
                    ? "Selecciona una mampara"
                    : "Primero selecciona una temática"
                }
                options={mamparaOptions}
                className="react-select-container"
                classNamePrefix="react-select"
                styles={customSelectStyles}
                noOptionsMessage={() => "No hay mamparas disponibles"}
                onChange={(selectedOption) => handleMamparaChange(selectedOption, field.onChange)}
                onBlur={() => {
                  console.log('[MamparaSection] Mampara selection blurred');
                  field.onBlur();
                }}
              />
              {errors.id_mampara && (
                <p className="mt-1 text-xs text-red-500 flex items-center gap-1">
                  <FiAlertCircle className="w-3 h-3" />
                  {errors.id_mampara.message}
                </p>
              )}
            </div>
          )}
        />
      </div>

      <Controller
        name="id_mampara"
        control={control}
        render={({ field }) => renderMamparaDetails(field.value)}
      />

      {!isThemeSelected && (
        <div className="flex items-start gap-3 p-4 bg-amber-50 text-amber-700 rounded-lg border border-amber-200">
          <FiAlertCircle className="w-5 h-5 mt-0.5 flex-shrink-0" />
          <div>
            <p className="font-medium">Selección de temática requerida</p>
            <p className="text-sm mt-1">
              Para ver las mamparas disponibles, primero debes seleccionar una temática en la sección anterior.
            </p>
          </div>
        </div>
      )}

      {isThemeSelected && mamparaOptions.length === 0 && (
        <div className="flex items-start gap-3 p-4 bg-amber-50 text-amber-700 rounded-lg border border-amber-200">
          <FiAlertCircle className="w-5 h-5 mt-0.5 flex-shrink-0" />
          <div>
            <p className="font-medium">No hay mamparas disponibles</p>
            <p className="text-sm mt-1">
              No se encontraron mamparas disponibles para la temática seleccionada.
              Por favor, selecciona otra temática o contacta al administrador.
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default MamparaSection;\n\n
=== ./reservas/pages/admin/reservationform-components/PackageSection.jsx ===
import React, { useCallback, useMemo } from 'react';
import { Controller } from 'react-hook-form';
import { FiPackage, FiCalendar, FiDollarSign, FiAlertCircle, FiCheck, FiInfo } from 'react-icons/fi';

const PackageSection = ({ control, packages, errors }) => {
  const renderPriceInfo = useCallback((pkg) => (
    <div className="grid grid-cols-2 gap-3 mt-3">
      <div className="flex flex-col bg-gray-50 p-2 rounded-md">
        <div className="flex items-center gap-1 text-sm text-gray-600">
          <FiCalendar className="w-4 h-4" />
          <span>L-J</span>
        </div>
        <div className="flex items-center gap-1 mt-1">
          <FiDollarSign className="w-4 h-4 text-indigo-600" />
          <span className="text-lg font-semibold text-indigo-600">
            {pkg.precio_lunes_jueves}
          </span>
        </div>
      </div>
      <div className="flex flex-col bg-gray-50 p-2 rounded-md">
        <div className="flex items-center gap-1 text-sm text-gray-600">
          <FiCalendar className="w-4 h-4" />
          <span>V-D</span>
        </div>
        <div className="flex items-center gap-1 mt-1">
          <FiDollarSign className="w-4 h-4 text-indigo-600" />
          <span className="text-lg font-semibold text-indigo-600">
            {pkg.precio_viernes_domingo}
          </span>
        </div>
      </div>
    </div>
  ), []);

  const packagesList = useMemo(() => 
    packages.filter(pkg => pkg.activo),
    [packages]
  );

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FiPackage className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">Selección de Paquete</h3>
        </div>
        {packagesList.length > 0 && (
          <span className="text-sm text-indigo-600 bg-indigo-50 px-4 py-2 rounded-full">
            {packagesList.length} paquetes disponibles
          </span>
        )}
      </div>

      <Controller
        name="id_paquete"
        control={control}
        rules={{ required: 'Debes seleccionar un paquete' }}
        render={({ field }) => (
          <div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {packagesList.map((pkg) => {
                const isSelected = field.value === pkg.id;
                return (
                  <div
                    key={pkg.id}
                    className={`relative p-4 rounded-lg border transition-all duration-300 transform cursor-pointer ${
                      isSelected
                        ? 'border-indigo-500 bg-indigo-50 shadow-md scale-[1.02]'
                        : 'border-gray-200 hover:border-indigo-300 hover:shadow-sm hover:scale-[1.01]'
                    }`}
                    onClick={() => field.onChange(pkg.id)}
                    role="button"
                    tabIndex={0}
                    onKeyPress={(e) => {
                      if (e.key === 'Enter' || e.key === ' ') {
                        field.onChange(pkg.id);
                      }
                    }}
                    aria-pressed={isSelected}
                    aria-label={`Seleccionar paquete ${pkg.nombre}`}
                  >
                    <div className="flex flex-col h-full">
                      <div className="flex-1">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="text-lg font-medium text-gray-900">
                            {pkg.nombre}
                          </h4>
                          {isSelected && (
                            <span className="flex items-center gap-1 text-xs bg-indigo-500 text-white px-2 py-0.5 rounded-full">
                              <FiCheck className="w-3 h-3" />
                              Seleccionado
                            </span>
                          )}
                        </div>
                        <p className="text-sm text-gray-600 mb-4">
                          {pkg.descripcion}
                        </p>
                      </div>
                      {renderPriceInfo(pkg)}
                    </div>

                    {pkg.caracteristicas && (
                      <div className="mt-4 pt-4 border-t border-gray-200">
                        <div className="flex items-center gap-2 mb-2">
                          <FiInfo className="text-indigo-600 w-4 h-4" />
                          <span className="text-sm font-medium text-gray-700">
                            Características
                          </span>
                        </div>
                        <ul className="space-y-1">
                          {pkg.caracteristicas.split(',').map((caracteristica, index) => (
                            <li
                              key={index}
                              className="flex items-center gap-2 text-sm text-gray-600"
                            >
                              <FiCheck className="w-3 h-3 text-green-500" />
                              {caracteristica.trim()}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
            {errors.id_paquete && (
              <p className="mt-2 text-sm text-red-500 flex items-center gap-1">
                <FiAlertCircle className="w-4 h-4" />
                {errors.id_paquete.message}
              </p>
            )}
          </div>
        )}
      />

      {packagesList.length === 0 && (
        <div className="flex items-center justify-center gap-2 py-8 text-gray-500 bg-gray-50 rounded-lg border border-dashed border-gray-300">
          <FiInfo className="w-5 h-5" />
          <span>No hay paquetes disponibles</span>
        </div>
      )}
    </div>
  );
};

export default PackageSection;\n\n
=== ./reservas/pages/admin/reservationform-components/StatusSection.jsx ===
import React from 'react';

const StatusSection = ({ register }) => {
  return (
    <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Estado Activo
        </label>
        <div className="flex items-center">
          <input
            type="checkbox"
            {...register('activo')}
            className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
          />
          <span className="ml-2 text-sm text-gray-600">
            Reservación activa
          </span>
        </div>
      </div>
    </div>
  );
};

export default StatusSection;\n\n
=== ./reservas/pages/admin/reservationform-components/ThemeSection.jsx ===
import React, { useCallback, useMemo } from 'react';
import { Controller } from 'react-hook-form';
import { FiImage, FiAlertCircle, FiInfo, FiTag, FiFileText } from 'react-icons/fi';
import Select from 'react-select';

const ThemeSection = ({ control, errors, tematicas, setValue }) => {
  const formatThemeOption = useCallback((tematica) => ({
    value: tematica.id,
    label: tematica.nombre,
    descripcion: tematica.descripcion || '',
    foto: tematica.foto || null,
    key: `theme-${tematica.id}`
  }), []);

  const formatOptionLabel = useCallback(({ label, value }) => (
    <div key={`theme-label-${value}`} className="flex items-center gap-2">
      <FiImage className="w-4 h-4 text-gray-500" />
      <span>{label}</span>
    </div>
  ), []);

  const themeOptions = useMemo(() => {
    const options = tematicas
      .filter(tematica => tematica.activo)
      .map(formatThemeOption);
    console.log('[ThemeSection] Available theme options:', options);
    return options;
  }, [tematicas, formatThemeOption]);

  const customSelectStyles = {
    control: (base, state) => ({
      ...base,
      borderColor: errors.id_tematica ? '#ef4444' : state.isFocused ? '#6366f1' : '#e5e7eb',
      boxShadow: state.isFocused ? '0 0 0 1px #6366f1' : 'none',
      transition: 'all 0.2s ease',
      '&:hover': {
        borderColor: state.isFocused ? '#6366f1' : '#e5e7eb'
      }
    }),
    option: (base, state) => ({
      ...base,
      backgroundColor: state.isSelected ? '#6366f1' : state.isFocused ? '#e0e7ff' : 'white',
      color: state.isSelected ? 'white' : '#374151',
      transition: 'all 0.2s ease',
      '&:active': {
        backgroundColor: '#6366f1'
      }
    }),
    menu: (base) => ({
      ...base,
      zIndex: 50
    })
  };

  const renderThemeDetails = useCallback((theme) => {
    if (!theme) return null;
    console.log('[ThemeSection] Rendering details for theme:', theme);

    const details = [
      { icon: FiTag, label: 'Nombre', value: theme.label },
      ...(theme.descripcion ? [{ 
        icon: FiFileText, 
        label: 'Descripción', 
        value: theme.descripcion,
        fullWidth: true 
      }] : [])
    ];

    return (
      <div className="mt-4 bg-white p-4 rounded-lg border border-indigo-100 shadow-sm">
        <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
          <FiInfo className="text-indigo-600" />
          Detalles de la temática
        </h4>
        <div className="grid grid-cols-1 gap-3">
          {details.map(({ icon: Icon, label, value, fullWidth }) => (
            <div 
              key={`theme-detail-${label}-${value}`}
              className={`flex items-start gap-3 bg-gray-50 p-3 rounded-md ${
                fullWidth ? 'col-span-full' : ''
              }`}
            >
              <Icon className="w-5 h-5 mt-0.5 text-gray-500" />
              <div className="flex-1">
                <span className="text-sm text-gray-600">{label}:</span>
                <div className={`${fullWidth ? 'mt-1' : 'ml-1 inline'} font-medium text-gray-900`}>
                  {value}
                </div>
              </div>
            </div>
          ))}
        </div>
        {theme.foto && (
          <div className="mt-4">
            <div className="flex items-center gap-2 text-sm text-gray-600 mb-2">
              <FiImage className="text-indigo-600" />
              <span>Imagen de referencia</span>
            </div>
            <div className="relative group">
              <img
                src={theme.foto}
                alt={theme.label}
                className="w-full max-w-md rounded-lg shadow-sm group-hover:shadow-md transition-shadow duration-200"
              />
              <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-opacity duration-200 rounded-lg"></div>
            </div>
          </div>
        )}
      </div>
    );
  }, []);

  const handleThemeChange = useCallback((selectedOption, onChange) => {
    console.log('[ThemeSection] Theme selection changed:', selectedOption);
    const currentTheme = control._formValues.id_tematica;
    
    // Solo limpiar la mampara si realmente cambia la temática
    if (!selectedOption || !currentTheme || selectedOption.value !== currentTheme.value) {
      console.log('[ThemeSection] Clearing mampara due to theme change');
      setValue('id_mampara', null);
    } else {
      console.log('[ThemeSection] Preserving mampara as theme remains the same');
    }
    
    onChange(selectedOption);
  }, [setValue, control._formValues.id_tematica]);

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <FiImage className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">Temática</h3>
        </div>
        {themeOptions.length > 0 && (
          <span className="text-sm text-indigo-600 bg-indigo-50 px-4 py-2 rounded-full">
            {themeOptions.length} temáticas disponibles
          </span>
        )}
      </div>

      <Controller
        name="id_tematica"
        control={control}
        rules={{ required: 'Debes seleccionar una temática' }}
        render={({ field }) => (
          <div>
            <Select
              {...field}
              isClearable
              placeholder="Selecciona una temática"
              options={themeOptions}
              className="react-select-container"
              classNamePrefix="react-select"
              styles={customSelectStyles}
              formatOptionLabel={formatOptionLabel}
              noOptionsMessage={() => "No hay temáticas disponibles"}
              onChange={(selectedOption) => handleThemeChange(selectedOption, field.onChange)}
              onBlur={() => {
                console.log('[ThemeSection] Theme selection blurred');
                field.onBlur();
              }}
            />
            {errors.id_tematica && (
              <p className="mt-1 text-xs text-red-500 flex items-center gap-1">
                <FiAlertCircle className="w-3 h-3" />
                {errors.id_tematica.message}
              </p>
            )}
          </div>
        )}
      />

      {/* Use the current form value directly */}
      {renderThemeDetails(control._formValues.id_tematica)}

      {themeOptions.length === 0 && (
        <div className="flex items-start gap-3 p-4 bg-amber-50 text-amber-700 rounded-lg border border-amber-200">
          <FiAlertCircle className="w-5 h-5 mt-0.5 flex-shrink-0" />
          <div>
            <p className="font-medium">No hay temáticas disponibles</p>
            <p className="text-sm mt-1">
              No se encontraron temáticas activas en el sistema.
              Por favor, contacta al administrador para más información.
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default ThemeSection;\n\n
=== ./reservas/pages/admin/reservationform-components/UserSection.jsx ===
import React from 'react';

const UserSection = ({ register, errors, users, addLog }) => {
  return (
    <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
      <label className="block text-sm font-medium text-gray-700 mb-2">
        Usuario
      </label>
      <div className="relative">
        <select
          {...register('id_usuario', {
            required: 'Este campo es requerido',
          })}
          className="w-full px-3 py-2 text-sm text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
          onChange={(e) => {
            register('id_usuario').onChange(e);
            addLog('Usuario seleccionado');
          }}
        >
          <option value="">Seleccionar usuario</option>
          {users.map((user) => (
            <option key={user.id} value={user.id}>
              {user.nombre}
            </option>
          ))}
        </select>
        {errors.id_usuario && (
          <p className="mt-1 text-xs text-red-500">
            {errors.id_usuario.message}
          </p>
        )}
      </div>
    </div>
  );
};

export default UserSection;\n\n
=== ./reservas/pages/customer/Appointment.jsx ===
import React from 'react'
import { useState, useEffect, useLayoutEffect, useRef } from 'react'
import { Link } from 'react-router-dom'
import { motion, AnimatePresence } from 'framer-motion'
import {
  FiClock,
  FiImage,
  FiCoffee,
  FiMusic,
  FiUsers,
  FiArrowRight,
  FiCheck,
  FiX,
  FiPhone,
  FiMessageSquare,
  FiPlus,
  FiMinus,
  FiMenu,
  FiCalendar,
  FiPackage,
  FiMail,
  FiLogIn,
  FiUserPlus
} from 'react-icons/fi'
import { gsap } from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'
import Logo from '@shared/src/img/logo.webp'

gsap.registerPlugin(ScrollTrigger)

// Componente NavigationBar
const NavigationBar = ({ toggleMenu, isMenuOpen }) => (
  <nav className='fixed top-0 left-0 right-0 z-50 bg-white/5 backdrop-blur-md'>
    <div className='container mx-auto px-6 py-4'>
      <div className='flex justify-between items-center'>
        <Link to='/'>
          <motion.img
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            src={Logo}
            alt='Tramboory'
            className='h-16 w-auto transition-transform duration-300 hover:scale-110'
          />
        </Link>
        <motion.button
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5 }}
          onClick={toggleMenu}
          className='text-white p-2 rounded-full hover:bg-white/10 transition-colors duration-300'
        >
          {isMenuOpen ? <FiX size={24} /> : <FiMenu size={24} />}
        </motion.button>
      </div>
    </div>
  </nav>
)

// Componente FullscreenMenu
const FullscreenMenu = ({
  isOpen,
  menuRef,
  menuBackgroundRef,
  menuItems,
  onMenuItemClick
}) => (
  <AnimatePresence>
    {isOpen && (
      <motion.div
        ref={menuRef}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className='fixed inset-0 z-40 flex items-center justify-center'
      >
        <motion.div
          ref={menuBackgroundRef}
          className='absolute inset-0 bg-gradient-to-br from-purple-900/95 to-indigo-900/95 backdrop-blur-lg'
          initial={{ scale: 0, borderRadius: '100%' }}
          animate={{ scale: 1, borderRadius: '0%' }}
          exit={{ scale: 0, borderRadius: '100%' }}
          transition={{ duration: 0.5, ease: 'easeInOut' }}
        />
        <ul className='relative z-50 space-y-8'>
          {menuItems.map((item, index) => (
            <motion.li
              key={item.text}
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 50 }}
              transition={{ delay: index * 0.1 }}
            >
              <Link
                to={item.link}
                className='group flex items-center justify-center space-x-4 text-white text-2xl
                  hover:text-yellow-300 transition-all duration-300'
                onClick={() => onMenuItemClick()}
              >
                <span
                  className='text-3xl text-yellow-300 group-hover:text-white
                  transition-colors duration-300'
                >
                  {item.icon}
                </span>
                <span className='relative'>
                  {item.text}
                  <span
                    className='absolute -bottom-1 left-0 w-0 h-0.5 bg-yellow-300
                    transition-all duration-300 group-hover:w-full'
                  />
                </span>
              </Link>
            </motion.li>
          ))}
        </ul>
      </motion.div>
    )}
  </AnimatePresence>
)

// Componente de fondo animado
const AnimatedBackground = () => (
  <div className='fixed inset-0 z-0 overflow-hidden'>
    <motion.div
      className='absolute inset-0'
      style={{
        background: `
              radial-gradient(circle at 20% 30%, rgba(147, 51, 234, 0.1) 0%, transparent 50%),
              radial-gradient(circle at 80% 70%, rgba(79, 70, 229, 0.1) 0%, transparent 50%),
              radial-gradient(circle at 50% 50%, rgba(219, 39, 119, 0.05) 0%, transparent 50%)
            `
      }}
    >
      {[...Array(5)].map((_, i) => (
        <motion.div
          key={i}
          className='absolute rounded-full mix-blend-multiply filter blur-xl'
          animate={{
            x: [0, 100, 0],
            y: [0, 50, 0],
            scale: [1, 1.2, 1]
          }}
          transition={{
            duration: 20 + i * 2,
            repeat: Infinity,
            ease: 'linear'
          }}
          style={{
            width: `${200 + i * 100}px`,
            height: `${200 + i * 100}px`,
            left: `${20 + i * 15}%`,
            top: `${20 + i * 10}%`,
            backgroundColor: `hsla(${220 + i * 40}, 70%, 80%, 0.05)`
          }}
        />
      ))}
    </motion.div>
  </div>
)

const ServiceCard = ({
  title,
  description,
  items,
  price,
  recommended,
  type
}) => {
  const [expandedCategory, setExpandedCategory] = useState(null)
  const [isHovered, setIsHovered] = useState(false)

  const cardVariants = {
    hover: {
      scale: 1.02,
      y: -5,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 20
      }
    }
  }

  const categoryVariants = {
    collapsed: { height: 0, opacity: 0 },
    expanded: { height: 'auto', opacity: 1 }
  }

  return (
    <motion.div
      variants={cardVariants}
      whileHover='hover'
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
      className={`bg-white/90 backdrop-blur-lg rounded-2xl shadow-xl p-8 relative cursor-pointer
            ${
              recommended
                ? 'border-4 border-indigo-500'
                : 'border border-gray-200'
            }
            transform transition-all duration-300`}
    >
      {recommended && (
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className='absolute -top-4 left-1/2 transform -translate-x-1/2'
        >
          <span className='bg-indigo-500 text-white px-6 py-2 rounded-full text-sm font-semibold shadow-lg'>
            Paquete Completo
          </span>
        </motion.div>
      )}

      {/* Efecto de brillo en hover */}
      <div
        className={`absolute inset-0 rounded-2xl transition-opacity duration-300 pointer-events-none
              ${isHovered ? 'opacity-100' : 'opacity-0'}
              bg-gradient-to-r from-transparent via-white/10 to-transparent
              animate-shine`}
      />

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className='mb-6'
      >
        <span
          className={`text-sm font-semibold ${
            type === 'normal' ? 'text-indigo-600' : 'text-purple-600'
          }`}
        >
          {type === 'normal' ? 'Todo Incluido' : 'Renta de Espacio'}
        </span>
        <h3 className='text-2xl font-bold text-gray-900 mt-2'>{title}</h3>
        <p className='text-gray-600 mt-2'>{description}</p>

        <div className='mt-4 text-3xl font-bold text-gray-900'>
          ${price}
          <span className='text-base font-normal text-gray-500'>/evento</span>
        </div>
      </motion.div>

      <div className='space-y-4 mb-8'>
        {Object.entries(items).map(([category, categoryItems], index) => (
          <motion.div
            key={category}
            className='rounded-lg overflow-hidden'
            initial={false}
            animate={expandedCategory === category ? 'expanded' : 'collapsed'}
          >
            <motion.button
              onClick={() =>
                setExpandedCategory(
                  expandedCategory === category ? null : category
                )
              }
              className={`w-full text-left p-4 flex items-center justify-between
                    rounded-lg transition-colors duration-300
                    ${
                      expandedCategory === category
                        ? 'bg-indigo-50 text-indigo-700'
                        : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
                    }`}
            >
              <span className='font-semibold'>{category}</span>
              <motion.div
                animate={{ rotate: expandedCategory === category ? 180 : 0 }}
                transition={{ duration: 0.3 }}
              >
                {expandedCategory === category ? <FiMinus /> : <FiPlus />}
              </motion.div>
            </motion.button>

            <AnimatePresence>
              {expandedCategory === category && (
                <motion.div
                  initial='collapsed'
                  animate='expanded'
                  exit='collapsed'
                  variants={categoryVariants}
                  transition={{ duration: 0.3 }}
                  className='px-4 py-2 bg-white/50'
                >
                  {categoryItems.map((item, itemIndex) => (
                    <motion.div
                      key={itemIndex}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: itemIndex * 0.1 }}
                      className='flex items-start py-2'
                    >
                      {item.included ? (
                        <FiCheck className='text-green-500 mt-1 mr-3 flex-shrink-0 w-5 h-5' />
                      ) : (
                        <FiX className='text-red-500 mt-1 mr-3 flex-shrink-0 w-5 h-5' />
                      )}
                      <div>
                        <p
                          className={`font-medium ${
                            item.included ? 'text-gray-700' : 'text-gray-400'
                          }`}
                        >
                          {item.title}
                        </p>
                        {item.description && (
                          <p
                            className={`text-sm ${
                              item.included ? 'text-gray-600' : 'text-gray-400'
                            }`}
                          >
                            {item.description}
                          </p>
                        )}
                      </div>
                    </motion.div>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        ))}
      </div>

      <motion.div className='space-y-4' whileHover={{ scale: 1.02 }}>
        <Link
          to='/signin'
          className={`block w-full py-3 px-6 text-center rounded-lg font-semibold 
                transition-all duration-300 transform hover:scale-105 hover:shadow-lg
                ${
                  type === 'normal'
                    ? 'bg-indigo-600 hover:bg-indigo-700 text-white'
                    : 'bg-purple-600 hover:bg-purple-700 text-white'
                }`}
        >
          Reservar Ahora
          <FiArrowRight className='inline ml-2' />
        </Link>

        <button
          onClick={() => (window.location.href = 'tel:+XXXXXXXXXX')}
          className='w-full py-3 px-6 text-center rounded-lg font-semibold 
                border-2 border-gray-300 text-gray-700 hover:bg-gray-50 
                transition-all duration-300 transform hover:scale-105 hover:shadow-lg'
        >
          Llamar para Información
          <FiPhone className='inline ml-2' />
        </button>
      </motion.div>
    </motion.div>
  )
}

export default function Appointment () {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const menuRef = React.useRef(null)
  const menuBackgroundRef = React.useRef(null)

  const menuItems = [
    { icon: <FiCalendar />, text: 'Reservar', link: '/appointments' },
    { icon: <FiPackage />, text: 'Paquetes', link: '/appointments' },
    { icon: <FiMail />, text: 'Contacto', link: '/contact' },
    { icon: <FiLogIn />, text: 'Iniciar Sesión', link: '/signin' },
    { icon: <FiUserPlus />, text: 'Registrarse', link: '/signup' }
  ]

  useLayoutEffect(() => {
    const ctx = gsap.context(() => {
      ScrollTrigger.batch('.animate-on-scroll', {
        onEnter: batch =>
          gsap.to(batch, {
            opacity: 1,
            y: 0,
            stagger: 0.15,
            overwrite: true
          }),
        start: 'top bottom-=100',
        end: 'bottom top',
        markers: false
      })
    })

    return () => ctx.revert()
  }, [])

  // Definición de servicios dentro del componente
  const services = {
    normal: {
      title: 'Tramboory Normal',
      description:
        'La experiencia completa con todos los servicios incluidos para una celebración perfecta.',
      price: '7,999',
      recommended: true,
      type: 'normal',
      items: {
        'Tiempo y Espacio': [
          {
            title: '4 Horas de Diversión',
            description: '3.5 horas de salón + 30 min de despedida',
            included: true
          }
        ],
        'Decoración y Personalización': [
          {
            title: 'Invitación Digital',
            description: 'Invitación personalizada para tu evento',
            included: true
          },
          {
            title: 'Decoración Temática',
            description: 'Ambientación Tramboory para tu fiesta',
            included: true
          }
        ],
        'Alimentos y Bebidas': [
          {
            title: 'Menú Completo',
            description: 'Alimentos para niños y adultos',
            included: true
          },
          {
            title: 'Bebidas Ilimitadas',
            description: 'Refrescos, agua y café de cortesía',
            included: true
          }
        ],
        'Entretenimiento y Personal': [
          {
            title: 'Área de Juegos',
            description: 'Ludoteca y alberca de pelotas',
            included: true
          },
          {
            title: 'Ambiente Festivo',
            description: 'Música y anfitriones para animar',
            included: true
          },
          {
            title: 'Coordinador de Evento',
            description: 'Personal dedicado para tu celebración',
            included: true
          }
        ]
      }
    },
    matutino: {
      title: 'Tramboory Matutino',
      description:
        'Renta del espacio para eventos personalizados con la opción de agregar servicios adicionales.',
      price: '4,999',
      recommended: false,
      type: 'matutino',
      items: {
        'Renta Básica': [
          {
            title: 'Espacio Exclusivo',
            description: 'Salón privado para tu evento',
            included: true
          },
          {
            title: 'Mobiliario Básico',
            description: 'Mesas y sillas incluidas',
            included: true
          },
          {
            title: 'Horario Matutino',
            description: '3 horas de evento',
            included: true
          }
        ],
        'Servicios Opcionales': [
          {
            title: 'Servicio de Alimentos',
            description: 'Personaliza el menú a tu gusto',
            included: false
          },
          {
            title: 'Decoración',
            description: 'Opción de decorar el espacio',
            included: false
          },
          {
            title: 'Personal de Servicio',
            description: 'Meseros y personal de apoyo opcional',
            included: false
          }
        ]
      }
    }
  }

  return (
    <div className='min-h-screen relative'>
      {/* Navegación */}
      <NavigationBar
        toggleMenu={() => setIsMenuOpen(!isMenuOpen)}
        isMenuOpen={isMenuOpen}
      />

      {/* Menú Fullscreen */}
      <FullscreenMenu
        isOpen={isMenuOpen}
        menuRef={menuRef}
        menuBackgroundRef={menuBackgroundRef}
        menuItems={menuItems}
        onMenuItemClick={() => setIsMenuOpen(false)}
      />
      <div className='fixed inset-0 z-0 overflow-hidden'>
        <div className='absolute inset-0 bg-gradient-to-br from-indigo-50 to-purple-50'>
          <div className='absolute inset-0 animate-wave opacity-20 bg-[linear-gradient(45deg,transparent_25%,rgba(68,51,122,0.1)_50%,transparent_75%,transparent_100%)]' />
          <div className='absolute inset-0 animate-wave-slow opacity-20 bg-[linear-gradient(-45deg,transparent_25%,rgba(79,70,229,0.1)_50%,transparent_75%,transparent_100%)]' />
        </div>
      </div>

      <div className='relative z-10'>
        {/* Hero Section */}
        <section className='relative py-20 px-4 sm:px-6 lg:px-8 animate-on-scroll'>
          <div className='max-w-7xl mx-auto text-center'>
            <motion.h1
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              className='text-5xl md:text-6xl font-extrabold text-gray-900 mb-8'
            >
              Elige tu Experiencia
              <span className='block text-indigo-600'>Tramboory</span>
            </motion.h1>
            <motion.p
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className='text-xl text-gray-600 max-w-3xl mx-auto mb-10'
            >
              Dos opciones perfectas para tu celebración: nuestro paquete todo
              incluido o personaliza tu evento a tu manera en horario matutino.
            </motion.p>
          </div>
        </section>

        {/* Services Section */}
        <section className='py-12 px-4 sm:px-6 lg:px-8'>
          <div className='max-w-7xl mx-auto'>
            <div className='grid grid-cols-1 lg:grid-cols-2 gap-8'>
              <ServiceCard {...services.normal} />
              <ServiceCard {...services.matutino} />
            </div>
          </div>
        </section>

        {/* Contact Section */}
        <section className='py-16 px-4 sm:px-6 lg:px-8 relative overflow-hidden'>
          <div className='absolute inset-0 bg-gradient-to-r from-indigo-600/90 to-purple-600/90 backdrop-blur-sm' />
          <div className='max-w-7xl mx-auto relative z-10 text-center'>
            <h2 className='text-3xl font-bold text-white mb-6'>
              ¿Tienes dudas sobre nuestros servicios?
            </h2>
            <p className='text-white/90 text-lg mb-8'>
              Nuestro equipo está listo para ayudarte a elegir la mejor opción
              para tu evento
            </p>
            <div className='flex flex-col sm:flex-row justify-center gap-4'>
              <Link
                to='/contact'
                className='inline-flex items-center justify-center px-6 py-3 rounded-lg 
                        bg-white text-indigo-600 font-semibold hover:bg-gray-100 
                        transition-all duration-300 transform hover:scale-105'
              >
                <FiMessageSquare className='mr-2' />
                Contáctanos
              </Link>
              <a
                href='tel:+XXXXXXXXXX'
                className='inline-flex items-center justify-center px-6 py-3 rounded-lg 
                        border-2 border-white text-white font-semibold hover:bg-white/10 
                        transition-all duration-300 transform hover:scale-105'
              >
                <FiPhone className='mr-2' />
                Llamar Ahora
              </a>
            </div>
          </div>
        </section>
      </div>
    </div>
  )
}\n\n
=== ./reservas/pages/customer/ConfirmationModal.jsx ===
import React, { useState, useEffect, useRef } from 'react';
import { gsap } from 'gsap';
import { toast } from 'react-toastify';
import usePreReservasStore from '@domains/reservas/services/preReservasStore';
import {
  FiCreditCard,
  FiCalendar,
  FiUser,
  FiPackage,
  FiCheck,
  FiX,
  FiAlertCircle,
  FiClock
} from 'react-icons/fi';

const ConfirmationModal = ({ onClose, onConfirm }) => {
  const modalRef = useRef(null);
  const [transactionData, setTransactionData] = useState({
    token_transaccion: '',
    comprobante: '',
  });
  const [isValid, setIsValid] = useState(false);

  const { 
    pagoEnProceso, 
    error, 
    loading, 
    confirmarPago, 
    preReserva 
  } = usePreReservasStore();

  // Animation on mount
  useEffect(() => {
    gsap.fromTo(
      modalRef.current,
      { opacity: 0, y: -50 },
      { opacity: 1, y: 0, duration: 0.5, ease: 'power3.out' }
    );
  }, []);

  // Calculate time remaining for pre-reservation expiration
  const calculateTimeRemaining = () => {
    if (!pagoEnProceso?.expiracion_pre_reserva) return null;
    
    const expiration = new Date(pagoEnProceso.expiracion_pre_reserva);
    const now = new Date();
    const diffMs = expiration - now;
    
    if (diffMs <= 0) return 'Expirado';
    
    const diffMins = Math.floor(diffMs / 60000);
    const diffSecs = Math.floor((diffMs % 60000) / 1000);
    
    return `${diffMins}:${diffSecs < 10 ? '0' : ''}${diffSecs}`;
  };
  
  const [timeRemaining, setTimeRemaining] = useState(calculateTimeRemaining());
  
  // Update time remaining every second
  useEffect(() => {
    if (!pagoEnProceso?.expiracion_pre_reserva) return;
    
    const timer = setInterval(() => {
      const remaining = calculateTimeRemaining();
      setTimeRemaining(remaining);
      
      if (remaining === 'Expirado') {
        clearInterval(timer);
        toast.error('La pre-reserva ha expirado. Por favor, inicie el proceso nuevamente.');
        onClose();
      }
    }, 1000);
    
    return () => clearInterval(timer);
  }, [pagoEnProceso, onClose]);

  // Add event listener for escape key
  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEscKey);
    return () => {
      document.removeEventListener('keydown', handleEscKey);
    };
  }, [onClose]);

  // Validate form input
  useEffect(() => {
    setIsValid(!!transactionData.token_transaccion);
  }, [transactionData]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setTransactionData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onloadend = () => {
        setTransactionData(prev => ({
          ...prev,
          comprobante: reader.result
        }));
      };
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!isValid || loading) return;
    
    try {
      await confirmarPago({
        token_transaccion: transactionData.token_transaccion,
        datos_transaccion: {
          comprobante: transactionData.comprobante
        }
      });
      
      if (onConfirm) {
        onConfirm();
      }
    } catch (err) {
      console.error('Error al confirmar pago:', err);
      // Error is handled by the store
    }
  };

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('es-MX', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center z-50 p-4">
      <div
        ref={modalRef}
        className="bg-white rounded-xl shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto"
      >
        {/* Header */}
        <div className="bg-indigo-50 p-6 border-b border-indigo-100">
          <h2 className="text-2xl font-bold text-indigo-700 mb-2">Confirmar Pago</h2>
          <p className="text-gray-600">
            Tu pre-reserva está pendiente de confirmación. Por favor, ingresa los datos del pago realizado.
          </p>
          
          {pagoEnProceso && (
            <div className="mt-4 bg-indigo-100 p-4 rounded-lg flex items-center justify-between">
              <div className="flex items-center gap-2">
                <FiClock className="text-indigo-600" />
                <span className="font-medium text-indigo-700">Tiempo restante:</span>
              </div>
              <span className="font-mono text-lg font-bold text-indigo-800">
                {timeRemaining || 'Calculando...'}
              </span>
            </div>
          )}
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Pre-reserva info */}
          {preReserva && (
            <div className="bg-gray-50 p-4 rounded-lg space-y-3">
              <h3 className="font-medium text-gray-900">Detalles de Pre-reserva</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex items-start gap-2">
                  <FiUser className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Festejado</p>
                    <p className="font-medium">{preReserva.nombre_festejado || 'No especificado'}</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-2">
                  <FiCalendar className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Fecha y Hora</p>
                    <p className="font-medium">
                      {preReserva.fecha_reserva ? formatDate(preReserva.fecha_reserva) : 'No especificado'}
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start gap-2">
                  <FiPackage className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Paquete</p>
                    <p className="font-medium">{preReserva.paquete_nombre || 'No especificado'}</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-2">
                  <FiCreditCard className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Total a Pagar</p>
                    <p className="font-medium text-indigo-700">
                      ${pagoEnProceso?.monto?.toFixed(2) || 'N/A'} MXN
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Error message */}
          {error && (
            <div className="bg-red-50 p-4 rounded-lg flex items-start gap-2 text-red-600">
              <FiAlertCircle className="mt-1 flex-shrink-0" />
              <div>
                <p className="font-medium">Error</p>
                <p>{error}</p>
              </div>
            </div>
          )}

          {/* Payment confirmation form */}
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="token_transaccion" className="block text-sm font-medium text-gray-700 mb-1">
                Número de Referencia / Confirmación
              </label>
              <input
                type="text"
                id="token_transaccion"
                name="token_transaccion"
                value={transactionData.token_transaccion}
                onChange={handleChange}
                placeholder="Ej. 123456789"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                required
              />
              <p className="mt-1 text-sm text-gray-500">
                Ingresa el número de referencia o confirmación de tu pago
              </p>
            </div>

            <div>
              <label htmlFor="comprobante" className="block text-sm font-medium text-gray-700 mb-1">
                Comprobante de Pago (opcional)
              </label>
              <input
                type="file"
                id="comprobante"
                name="comprobante"
                onChange={handleFileChange}
                accept="image/*,.pdf"
                className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              />
              <p className="mt-1 text-sm text-gray-500">
                Puedes adjuntar una imagen o PDF de tu comprobante de pago
              </p>
            </div>
          </form>
        </div>

        {/* Actions */}
        <div className="border-t border-gray-200 p-6 bg-gray-50 flex justify-end gap-4">
          <button
            onClick={onClose}
            className="px-6 py-2 rounded-lg text-gray-700 bg-white border border-gray-300 hover:bg-gray-50 transition duration-300 flex items-center gap-2"
            disabled={loading}
          >
            <FiX className="w-5 h-5" />
            Cancelar
          </button>
          <button
            onClick={handleSubmit}
            disabled={!isValid || loading}
            className={`px-6 py-2 rounded-lg text-white flex items-center gap-2 ${
              isValid && !loading
                ? 'bg-indigo-600 hover:bg-indigo-700'
                : 'bg-gray-400 cursor-not-allowed'
            } transition duration-300`}
          >
            {loading ? (
              <>
                <span className="animate-spin h-5 w-5 mr-2 border-t-2 border-b-2 border-white rounded-full"></span>
                Procesando...
              </>
            ) : (
              <>
                <FiCheck className="w-5 h-5" />
                Confirmar Pago
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default ConfirmationModal;\n\n
=== ./reservas/pages/customer/ContractModal.jsx ===
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { 
  FiCheckCircle, 
  FiX, 
  FiArrowDown, 
  FiAlertTriangle, 
  FiLock,
  FiThumbsUp,
  FiThumbsDown,
  FiClock,
  FiDollarSign,
  FiCalendar,
  FiShield,
  FiAlertCircle,
  FiChevronDown,
  FiInfo,
  FiClipboard,
  FiBookOpen,
  FiArrowRight
} from 'react-icons/fi';
import { toast } from 'react-toastify';

// Definiciones de animaciones
const transitionConfig = {
  type: "spring",
  damping: 30,
  stiffness: 400
};

const ContractModal = ({ isOpen, onClose, onAccept }) => {
  const [isAccepted, setIsAccepted] = useState(false);
  const [hasScrolledToBottom, setHasScrolledToBottom] = useState(false);
  const [showAcceptButtons, setShowAcceptButtons] = useState(false);
  const [readStartTime, setReadStartTime] = useState(null);
  const [scrollPercentage, setScrollPercentage] = useState(0);
  const [expandedSections, setExpandedSections] = useState({
    pagos: true,
    cambios: true,
    evento: true,
    restricciones: true
  });
  const navigate = useNavigate();
  
  const contentRef = useRef(null);
  const modalRef = useRef(null);
  
  useEffect(() => {
    if (isOpen) {
      setReadStartTime(Date.now());
      
      // Animación de entrada
      const timer = setTimeout(() => {
        if (modalRef.current) {
          modalRef.current.classList.add('animate-in');
        }
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [isOpen]);

  const toggleSection = (section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const handleScroll = (e) => {
    const element = e.target;
    const scrollTop = element.scrollTop;
    const scrollHeight = element.scrollHeight;
    const clientHeight = element.clientHeight;
    
    // Calcular porcentaje de scroll
    const newScrollPercentage = Math.min(
      100,
      Math.round((scrollTop / (scrollHeight - clientHeight)) * 100)
    );
    setScrollPercentage(newScrollPercentage);
    
    // Verificar si ha llegado al final
    const isAtBottom = scrollTop + clientHeight >= scrollHeight - 20;
    
    if (isAtBottom && !hasScrolledToBottom) {
      const timeSpentReading = (Date.now() - readStartTime) / 1000; // convertir a segundos
      
      if (timeSpentReading < 10) { // Si han pasado menos de 10 segundos
        toast.warning('Por favor, tómate tu tiempo para leer el contrato completo.', {
          icon: '⏳',
          position: 'top-center'
        });
        return;
      }
      
      setHasScrolledToBottom(true);
      
      // Añadir animación más suave para los botones
      setTimeout(() => {
        setShowAcceptButtons(true);
      }, 500);
    }
  };

  const handleAccept = async () => {
    setIsAccepted(true);
    
    // Animación de aceptación
    await new Promise(resolve => setTimeout(resolve, 800));
    
    toast.success('¡Contrato aceptado exitosamente!', {
      icon: "🎉",
      position: 'top-center',
      style: {
        borderRadius: '10px',
        background: '#10B981',
        color: '#fff',
      },
    });
    
    await new Promise(resolve => setTimeout(resolve, 500));
    onAccept();
  };

  const handleReject = () => {
    toast.error('Has rechazado los términos y condiciones.', {
      icon: "ℹ️",
      position: 'top-center',
      onClose: () => {
        toast.info('Serás redirigido al inicio...', {
          autoClose: 2000,
          position: 'top-center',
          onClose: () => navigate('/')
        });
      }
    });
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <div className="fixed inset-0 z-50 overflow-hidden">
        {/* Overlay con efecto de blur */}
        <motion.div 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3 }}
          className="absolute inset-0 backdrop-blur-sm bg-gradient-to-br from-slate-900/70 to-indigo-900/70"
          onClick={onClose}
        />
        
        {/* Modal principal */}
        <div className="fixed inset-0 flex items-center justify-center p-4 sm:p-6 md:p-8 pointer-events-none">
          <motion.div
            ref={modalRef}
            initial={{ opacity: 0, scale: 0.95, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.95, y: 20 }}
            transition={transitionConfig}
            className="bg-white dark:bg-gray-900 rounded-2xl shadow-2xl w-full max-w-3xl overflow-hidden pointer-events-auto border border-indigo-50 dark:border-indigo-900/30"
            style={{
              maxHeight: 'calc(100vh - 2rem)',
              boxShadow: '0 25px 50px -12px rgba(79, 70, 229, 0.25)'
            }}
          >
            {/* Header con estilo glassmorphism */}
            <div className="relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-r from-indigo-600 to-purple-600 opacity-95"></div>
              <div className="relative p-6 sm:p-8">
                <div className="flex justify-between items-center">
                  <div className="flex items-center space-x-3">
                    <div className="bg-white/20 backdrop-blur-md p-2.5 rounded-xl">
                      <FiClipboard className="w-6 h-6 text-white" />
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold text-white">
                        Contrato de Servicios
                      </h2>
                      <p className="text-indigo-100 text-sm mt-1">
                        Léelo detenidamente antes de aceptar
                      </p>
                    </div>
                  </div>
                  <button
                    onClick={onClose}
                    className="text-white/80 hover:text-white p-2 hover:bg-white/10 rounded-full transition-all duration-300"
                    aria-label="Cerrar"
                  >
                    <FiX className="w-6 h-6" />
                  </button>
                </div>
                
                {/* Barra de progreso de lectura */}
                <div className="absolute bottom-0 left-0 right-0 h-1.5 bg-white/20">
                  <motion.div 
                    className="h-full bg-white"
                    initial={{ width: "0%" }}
                    animate={{ width: `${scrollPercentage}%` }}
                    transition={{ duration: 0.2 }}
                  />
                </div>
              </div>
            </div>

            {/* Contenido principal con scroll */}
            <div 
              ref={contentRef}
              onScroll={handleScroll}
              className="max-h-[calc(100vh-22rem)] overflow-y-auto scroll-smooth p-6 sm:p-8 space-y-6"
            >
              {/* Alerta introductoria */}
              <motion.div 
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2, ...transitionConfig }}
                className="bg-amber-50 dark:bg-amber-900/30 border-l-4 border-amber-400 dark:border-amber-500 p-4 rounded-lg shadow-sm"
              >
                <div className="flex items-start">
                  <FiAlertCircle className="h-6 w-6 text-amber-500 mt-0.5 flex-shrink-0" />
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-amber-800 dark:text-amber-300">Información importante</h3>
                    <div className="mt-2 text-sm text-amber-700 dark:text-amber-400">
                      <p>
                        Este documento constituye un acuerdo legal vinculante entre usted y Tramboory.
                        Al aceptar, confirma que ha leído, entendido y está de acuerdo con todos los términos.
                      </p>
                    </div>
                  </div>
                </div>
              </motion.div>

              {/* Secciones del contrato con acordeón */}
              <div className="space-y-4">
                <ContractSection
                  title="Pagos y Reservaciones"
                  icon={FiDollarSign}
                  isExpanded={expandedSections.pagos}
                  toggleExpand={() => toggleSection('pagos')}
                  delay={0.3}
                  items={[
                    "Anticipo requerido de $2,000 pesos para reservar.",
                    "50% del total debe pagarse 30 días antes del evento.",
                    "Pago restante debe completarse 15 días antes del evento.",
                    "No hay devolución del anticipo en caso de cancelación."
                  ]}
                />

                <ContractSection
                  title="Cambios y Modificaciones"
                  icon={FiCalendar}
                  isExpanded={expandedSections.cambios}
                  toggleExpand={() => toggleSection('cambios')}
                  delay={0.4}
                  items={[
                    "Cambios de fecha requieren 20 días de anticipación.",
                    "Autorización previa necesaria para servicios externos.",
                    "La temática no puede modificarse una vez seleccionada."
                  ]}
                />

                <ContractSection
                  title="Durante el Evento"
                  icon={FiClock}
                  isExpanded={expandedSections.evento}
                  toggleExpand={() => toggleSection('evento')}
                  delay={0.5}
                  items={[
                    "Inicio puntual a la hora reservada.",
                    "Llegada recomendada 15 minutos antes.",
                    "No se permiten alimentos externos excepto dulces y pastel autorizado.",
                    "Servicio de cocina finaliza 2.5 horas después del inicio."
                  ]}
                />

                <ContractSection
                  title="Restricciones y Seguridad"
                  icon={FiAlertTriangle}
                  isExpanded={expandedSections.restricciones}
                  toggleExpand={() => toggleSection('restricciones')}
                  delay={0.6}
                  items={[
                    "Prohibido: chicles, confeti, espuma, slime, gelatina, pintura, plastilinas.",
                    "No se permiten espectáculos con fuego o pirotecnia.",
                    "La empresa no se hace responsable por mal uso de instalaciones."
                  ]}
                />
              </div>
              
              {/* Información adicional */}
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.7 }}
                className="bg-gray-50 dark:bg-gray-800/50 p-5 rounded-xl border border-gray-100 dark:border-gray-700"
              >
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <FiInfo className="h-6 w-6 text-indigo-500" />
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-gray-600 dark:text-gray-300">
                      Al aceptar este contrato, reconoces que has leído y comprendido todas las cláusulas
                      y que aceptas todas las responsabilidades y condiciones establecidas en este acuerdo.
                    </p>
                  </div>
                </div>
              </motion.div>
              
              {/* Indicador de scroll si no ha llegado al final */}
              {!hasScrolledToBottom && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1, y: [0, 10, 0] }}
                  transition={{ 
                    delay: 0.8, 
                    y: {
                      repeat: Infinity,
                      duration: 2
                    }
                  }}
                  className="flex flex-col items-center justify-center py-4"
                >
                  <FiArrowDown className="h-6 w-6 text-indigo-400" />
                  <p className="text-sm text-gray-500 mt-2">Continúa leyendo para aceptar</p>
                </motion.div>
              )}
            </div>

            {/* Footer con acciones */}
            <div className="border-t border-gray-200 dark:border-gray-800 bg-gray-50 dark:bg-gray-900 p-6">
              {!hasScrolledToBottom ? (
                <div className="flex justify-center">
                  <div className="flex items-center space-x-2 text-gray-600 dark:text-gray-400">
                    <FiBookOpen className="w-5 h-5" />
                    <span>Por favor, lee el contrato completo</span>
                  </div>
                </div>
              ) : (
                <div className="space-y-6">
                  <AnimatePresence>
                    {showAcceptButtons && (
                      <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: 20 }}
                        transition={transitionConfig}
                        className="flex flex-col sm:flex-row justify-center gap-4"
                      >
                        <motion.button
                          whileHover={{ scale: 1.03 }}
                          whileTap={{ scale: 0.97 }}
                          onClick={handleReject}
                          className="flex-1 px-6 py-3 bg-white border border-red-200 text-red-600 hover:bg-red-50 rounded-xl shadow-sm flex items-center justify-center space-x-2 transition-all duration-300"
                        >
                          <FiThumbsDown className="w-5 h-5" />
                          <span>Rechazar Términos</span>
                        </motion.button>

                        <motion.button
                          whileHover={{ scale: 1.03 }}
                          whileTap={{ scale: 0.97 }}
                          onClick={handleAccept}
                          className="flex-1 px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-xl shadow-md hover:shadow-lg flex items-center justify-center space-x-2 transition-all duration-300"
                        >
                          <FiThumbsUp className="w-5 h-5" />
                          <span>Aceptar Términos</span>
                        </motion.button>
                      </motion.div>
                    )}
                  </AnimatePresence>

                  {/* Indicador de estado de aceptación */}
                  {isAccepted && (
                    <motion.div
                      initial={{ opacity: 0, scale: 0.8 }}
                      animate={{ opacity: 1, scale: 1 }}
                      transition={{ type: "spring", stiffness: 500, damping: 30 }}
                      className="text-center"
                    >
                      <div className="inline-flex items-center justify-center p-2 bg-green-100 dark:bg-green-900/30 rounded-full">
                        <FiCheckCircle className="h-8 w-8 text-green-500" />
                      </div>
                      <p className="mt-2 font-medium text-green-700 dark:text-green-400">
                        ¡Contrato Aceptado!
                      </p>
                    </motion.div>
                  )}
                </div>
              )}
            </div>
          </motion.div>
        </div>
      </div>
    </AnimatePresence>
  );
};

// Componente de sección de contrato mejorado
const ContractSection = ({ icon: Icon, title, items, isExpanded, toggleExpand, delay = 0 }) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay, ...transitionConfig }}
      className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 overflow-hidden shadow-sm hover:shadow-md transition-all duration-300"
    >
      <button 
        onClick={toggleExpand}
        className="w-full flex items-center justify-between p-5 text-left focus:outline-none"
      >
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-indigo-100 dark:bg-indigo-900/50 rounded-lg">
            <Icon className="h-5 w-5 text-indigo-600 dark:text-indigo-400" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">{title}</h3>
        </div>
        <motion.div
          animate={{ rotate: isExpanded ? 180 : 0 }}
          transition={{ duration: 0.3 }}
        >
          <FiChevronDown className="h-5 w-5 text-gray-500" />
        </motion.div>
      </button>
      
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: "auto", opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className="px-5 pb-5 pt-1">
              <ul className="space-y-3">
                {items.map((item, index) => (
                  <motion.li 
                    key={index}
                    initial={{ opacity: 0, x: -5 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.1 * index }}
                    className="flex items-start"
                  >
                    <span className="inline-flex items-center justify-center h-6 w-6 text-indigo-600 dark:text-indigo-400 mr-2 flex-shrink-0">
                      <FiArrowRight className="h-3.5 w-3.5" />
                    </span>
                    <span className="text-gray-700 dark:text-gray-300">{item}</span>
                  </motion.li>
                ))}
              </ul>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default ContractModal;\n\n
=== ./reservas/pages/customer/PaymentModalCustomer.jsx ===
import React, { useEffect, useRef, useState } from 'react';
import PropTypes from 'prop-types';
import { gsap } from 'gsap';
import axios from '@shared/utils/axiosConfig';
import { toast } from 'react-toastify';
import usePreReservasStore from '@domains/reservas/services/preReservasStore';
import {
  FiDollarSign,
  FiCreditCard,
  FiMapPin,
  FiCopy,
  FiCheck,
  FiX,
  FiAlertCircle,
  FiInfo,
  FiLoader
} from 'react-icons/fi';

const PaymentModal = ({ total, onClose, onSelectPaymentMethod, loading }) => {
  const modalRef = useRef(null);
  const [paymentMethod, setPaymentMethod] = useState('');
  const [copiedClabe, setCopiedClabe] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const CLABE = '646016206867172653';
  const ADDRESS = 'P.º Solares 1639, Solares Residencial, 45019 Zapopan, Jal.';

  // Use preReservasStore for payment-first flow
  const { iniciarProcesoPago, pagoEnProceso } = usePreReservasStore();

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('es-MX', {
      style: 'currency',
      currency: 'MXN'
    }).format(amount);
  };

  useEffect(() => {
    gsap.fromTo(
      modalRef.current,
      { opacity: 0, y: -50 },
      { opacity: 1, y: 0, duration: 0.5, ease: 'power3.out' }
    );
  }, []);

  // Add event listener for escape key
  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    // Add event listener
    document.addEventListener('keydown', handleEscKey);

    // Cleanup function
    return () => {
      document.removeEventListener('keydown', handleEscKey);
    };
  }, [onClose]);

  const handleCopyClabe = () => {
    navigator.clipboard.writeText(CLABE);
    setCopiedClabe(true);
    setTimeout(() => setCopiedClabe(false), 2000);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!paymentMethod || isProcessing) return;
    
    // Validar que onSelectPaymentMethod sea una función
    if (typeof onSelectPaymentMethod !== 'function') {
      console.error('Error: onSelectPaymentMethod no es una función');
      toast.error('Error en la configuración del proceso de pago. Por favor, intenta nuevamente.');
      setErrorMessage('Error interno: Método de procesamiento de pago no disponible');
      return;
    }
    
    setIsProcessing(true);
    setErrorMessage('');
    
    try {
      console.log('Enviando método de pago:', paymentMethod);
      
      // Iniciar proceso de pago con pre-reserva
      await onSelectPaymentMethod(paymentMethod);
      
      // Mostrar mensaje de éxito
      toast.success('Método de pago seleccionado. Procesando pre-reserva...');
    } catch (error) {
      console.error('Error en el proceso de pago y confirmación:', error);
      
      // Extraer y mostrar información detallada del error
      if (error.response) {
        console.error('Datos de la respuesta de error:', error.response.data);
        console.error('Estado HTTP:', error.response.status);
        console.error('Cabeceras:', error.response.headers);
        toast.error(`Error ${error.response.status}: ${error.response.data.message || 'Error al procesar el pago'}`);
        setErrorMessage(error.response.data.message || 'Error al procesar el pago');
      } else if (error.request) {
        console.error('No se recibió respuesta. Request:', error.request);
        toast.error('No se recibió respuesta del servidor.');
        setErrorMessage('No se recibió respuesta del servidor. Verifique su conexión.');
      } else {
        console.error('Error al configurar la petición:', error.message);
        toast.error(`Error: ${error.message}`);
        setErrorMessage(error.message || 'Error al procesar el pago');
      }
    } finally {
      setIsProcessing(false);
    }
  };

  const PaymentOption = ({ value, title, icon: Icon, description }) => (
    <button
      onClick={() => setPaymentMethod(value)}
      className={`w-full p-4 rounded-lg border-2 transition-all duration-300 ${
        paymentMethod === value
          ? 'border-indigo-600 bg-indigo-50'
          : 'border-gray-200 hover:border-indigo-200 hover:bg-gray-50'
      }`}
    >
      <div className="flex items-center gap-3">
        <div
          className={`p-2 rounded-full ${
            paymentMethod === value ? 'bg-indigo-100 text-indigo-600' : 'bg-gray-100 text-gray-600'
          }`}
        >
          <Icon className="w-6 h-6" />
        </div>
        <div className="text-left">
          <h3 className={`font-medium ${paymentMethod === value ? 'text-indigo-600' : 'text-gray-900'}`}>
            {title}
          </h3>
          <p className="text-sm text-gray-500">{description}</p>
        </div>
      </div>
    </button>
  );

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center z-50 p-4">
      <div
        ref={modalRef}
        className="bg-white rounded-xl shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto"
      >
        {/* Header */}
        <div className="bg-indigo-50 p-6 border-b border-indigo-100">
          <div className="flex items-center gap-3 mb-2">
            <FiDollarSign className="text-indigo-600 text-2xl" />
            <h2 className="text-2xl font-bold text-indigo-700">Método de Pago</h2>
          </div>
          <p className="text-gray-600">
            Selecciona tu método de pago preferido para completar la reserva.
          </p>
          <div className="mt-3 bg-white rounded-lg p-3 border border-indigo-100">
            <span className="text-gray-700">Total a pagar: </span>
            <span className="font-bold text-indigo-600 text-lg">
              {formatCurrency(total)}
            </span>
          </div>
        </div>

        {/* Content */}
        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {/* Payment Options */}
          <div className="space-y-4">
            <PaymentOption
              value="transferencia"
              title="Transferencia Bancaria"
              icon={FiCreditCard}
              description="Realiza una transferencia bancaria desde tu aplicación"
            />
            <PaymentOption
              value="efectivo"
              title="Pago en Efectivo"
              icon={FiDollarSign}
              description="Paga en efectivo directamente en nuestra sucursal"
            />
            <PaymentOption
              value="tarjeta_credito"
              title="Tarjeta de Crédito"
              icon={FiCreditCard}
              description="Paga con tarjeta de crédito"
            />
            <PaymentOption
              value="tarjeta_debito"
              title="Tarjeta de Débito"
              icon={FiCreditCard}
              description="Paga con tarjeta de débito"
            />
          </div>

          {/* Payment Details */}
          {paymentMethod && (
            <div className="mt-6 animate-fadeIn">
              {paymentMethod === 'transferencia' ? (
                <div className="bg-gray-50 p-6 rounded-lg space-y-4">
                  <h3 className="font-medium text-gray-900 flex items-center gap-2">
                    <FiInfo className="text-indigo-600" />
                    Información para Transferencia
                  </h3>
                  <div className="space-y-2">
                    <p className="text-sm text-gray-600">CLABE Interbancaria:</p>
                    <div className="flex items-center gap-2 bg-white p-3 rounded-lg border border-gray-200">
                      <span className="font-mono text-lg">{CLABE}</span>
                      <button
                        onClick={handleCopyClabe}
                        className="ml-auto p-2 hover:bg-gray-100 rounded-lg transition-colors"
                        title="Copiar CLABE"
                      >
                        {copiedClabe ? (
                          <FiCheck className="w-5 h-5 text-green-500" />
                        ) : (
                          <FiCopy className="w-5 h-5 text-gray-500" />
                        )}
                      </button>
                    </div>
                    <p className="text-sm text-gray-500 mt-2">
                      * Una vez realizada la transferencia, conserva tu comprobante.
                    </p>
                  </div>
                </div>
              ) : (
                <div className="bg-gray-50 p-6 rounded-lg space-y-4">
                  <h3 className="font-medium text-gray-900 flex items-center gap-2">
                    <FiMapPin className="text-indigo-600" />
                    Dirección de Pago
                  </h3>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <p className="text-gray-800">{ADDRESS}</p>
                  </div>
                  <p className="text-sm text-gray-500">
                    * Horario de atención: Lunes a Viernes de 9:00 AM a 6:00 PM
                  </p>
                </div>
              )}
            </div>
          )}

          {/* Información y alertas */}
          {loading ? (
            <div className="text-indigo-600 flex items-center gap-2 bg-indigo-50 p-4 rounded-lg">
              <FiLoader className="animate-spin" />
              <span>Procesando pre-reserva...</span>
            </div>
          ) : (
            <>
              {!paymentMethod && (
                <div className="text-amber-600 flex items-center gap-2 bg-amber-50 p-4 rounded-lg">
                  <FiAlertCircle />
                  <span>Por favor, selecciona un método de pago para continuar</span>
                </div>
              )}
              
              {/* Mostrar mensaje de error si existe */}
              {errorMessage && (
                <div className="text-red-600 flex items-center gap-2 bg-red-50 p-4 rounded-lg">
                  <FiAlertCircle />
                  <span>{errorMessage}</span>
                </div>
              )}
              
              {/* Información de pre-reserva si existe */}
              {pagoEnProceso && (
                <div className="bg-green-50 p-4 rounded-lg mt-4">
                  <h3 className="font-medium text-green-800 mb-2">Información de Pre-reserva:</h3>
                  <p className="text-green-700">ID Pago: {pagoEnProceso.id}</p>
                  <p className="text-green-700">
                    Expira en: {new Date(pagoEnProceso.expiracion).toLocaleTimeString()}
                  </p>
                </div>
              )}
            </>
          )}
        </form>

        {/* Actions */}
        <div className="border-t border-gray-200 p-6 bg-gray-50 flex justify-end gap-4">
          <button
            onClick={onClose}
            className="px-6 py-2 rounded-lg text-gray-700 bg-white border border-gray-300 hover:bg-gray-50 transition duration-300 flex items-center gap-2"
          >
            <FiX className="w-5 h-5" />
            Cancelar
          </button>
          <button
            onClick={handleSubmit}
            disabled={!paymentMethod || isProcessing || loading || typeof onSelectPaymentMethod !== 'function'}
            className={`px-6 py-2 rounded-lg text-white flex items-center gap-2 ${
              paymentMethod && !isProcessing && typeof onSelectPaymentMethod === 'function'
                ? 'bg-indigo-600 hover:bg-indigo-700'
                : 'bg-gray-400 cursor-not-allowed'
            } transition duration-300`}
          >
            <FiCheck className="w-5 h-5" />
            {isProcessing || loading ? 'Procesando...' : 'Continuar'}
          </button>
        </div>
      </div>
    </div>
  );
};

// Añadir validación de PropTypes
PaymentModal.propTypes = {
  total: PropTypes.number.isRequired,
  onClose: PropTypes.func.isRequired,
  onSelectPaymentMethod: PropTypes.func.isRequired,
  loading: PropTypes.bool
};

// Valores por defecto
PaymentModal.defaultProps = {
  loading: false
};

export default PaymentModal;
\n\n
=== ./reservas/pages/customer/QuotationConfirmationModal.jsx ===
import React, { useEffect, useRef } from 'react';
import { gsap } from 'gsap';
import { motion } from 'framer-motion';
import {
  FiCreditCard,
  FiCalendar,
  FiUser,
  FiPackage,
  FiCheck,
  FiX,
  FiClock,
  FiImage,
  FiMapPin
} from 'react-icons/fi';

const QuotationConfirmationModal = ({ 
  reservationData, 
  packages, 
  foodOptions, 
  tematicas, 
  extras, 
  mamparas, 
  onCancel, 
  onConfirm 
}) => {
  const modalRef = useRef(null);

  // Animation on mount
  useEffect(() => {
    gsap.fromTo(
      modalRef.current,
      { opacity: 0, y: -50 },
      { opacity: 1, y: 0, duration: 0.5, ease: 'power3.out' }
    );
  }, []);

  // Add event listener for escape key
  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.key === 'Escape') {
        onCancel();
      }
    };

    document.addEventListener('keydown', handleEscKey);
    return () => {
      document.removeEventListener('keydown', handleEscKey);
    };
  }, [onCancel]);

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('es-MX', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    }).format(date);
  };

  // Format time for display
  const formatTime = (timeString) => {
    if (!timeString) return '';
    // Convert "11:00:00" to "11:00"
    return timeString.substring(0, 5);
  };

  // Get package details
  const selectedPackage = packages?.find(pkg => pkg.id === reservationData?.id_paquete);
  const selectedFoodOption = foodOptions?.find(option => option.id === reservationData?.id_opcion_alimento);
  const selectedTematica = tematicas?.find(t => t.id === reservationData?.id_tematica);
  const selectedMampara = mamparas?.find(m => m.id === reservationData?.id_mampara);

  // Calculate expiration date (48 hours from now)
  const expirationDate = new Date();
  expirationDate.setHours(expirationDate.getHours() + 48);

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center z-50 p-4">
      <motion.div
        ref={modalRef}
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-xl shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto"
      >
        {/* Header */}
        <div className="bg-indigo-50 p-6 border-b border-indigo-100">
          <h2 className="text-2xl font-bold text-indigo-700 mb-2">Confirmar Cotización</h2>
          <p className="text-gray-600">
            Revisa los detalles de tu cotización. Esta cotización estará disponible por 48 horas.
          </p>
          
          <div className="mt-4 bg-indigo-100 p-4 rounded-lg flex items-center justify-between">
            <div className="flex items-center gap-2">
              <FiClock className="text-indigo-600" />
              <span className="font-medium text-indigo-700">Expira:</span>
            </div>
            <span className="font-medium text-indigo-800">
              {formatDate(expirationDate)} a las {expirationDate.getHours()}:{expirationDate.getMinutes() < 10 ? '0' : ''}{expirationDate.getMinutes()}
            </span>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Reservation info */}
          <div className="bg-gray-50 p-4 rounded-lg space-y-4">
            <h3 className="font-medium text-gray-900">Detalles del Evento</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {reservationData?.nombre_festejado && (
                <div className="flex items-start gap-2">
                  <FiUser className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Festejado</p>
                    <p className="font-medium">{reservationData.nombre_festejado}</p>
                  </div>
                </div>
              )}
              
              <div className="flex items-start gap-2">
                <FiCalendar className="mt-1 text-indigo-500" />
                <div>
                  <p className="text-sm text-gray-500">Fecha</p>
                  <p className="font-medium">
                    {formatDate(reservationData?.fecha_reserva)}
                  </p>
                </div>
              </div>
              
              <div className="flex items-start gap-2">
                <FiClock className="mt-1 text-indigo-500" />
                <div>
                  <p className="text-sm text-gray-500">Horario</p>
                  <p className="font-medium">
                    {formatTime(reservationData?.hora_inicio)} - {formatTime(reservationData?.hora_fin)}
                  </p>
                </div>
              </div>
              
              <div className="flex items-start gap-2">
                <FiPackage className="mt-1 text-indigo-500" />
                <div>
                  <p className="text-sm text-gray-500">Paquete</p>
                  <p className="font-medium">{selectedPackage?.nombre || 'No especificado'}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Extras and options */}
          <div className="bg-gray-50 p-4 rounded-lg space-y-4">
            <h3 className="font-medium text-gray-900">Opciones y Extras</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {selectedTematica && (
                <div className="flex items-start gap-2">
                  <FiImage className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Temática</p>
                    <p className="font-medium">{selectedTematica.nombre}</p>
                  </div>
                </div>
              )}
              
              {selectedMampara && (
                <div className="flex items-start gap-2">
                  <FiMapPin className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Mampara</p>
                    <p className="font-medium">{selectedMampara.nombre}</p>
                  </div>
                </div>
              )}
              
              {selectedFoodOption && (
                <div className="flex items-start gap-2">
                  <FiPackage className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Opción de Alimento</p>
                    <p className="font-medium">{selectedFoodOption.nombre}</p>
                  </div>
                </div>
              )}
            </div>
            
            {/* Extras list */}
            {reservationData?.extras && reservationData.extras.length > 0 && (
              <div className="mt-4">
                <h4 className="text-sm font-medium text-gray-700 mb-2">Extras Seleccionados</h4>
                <ul className="space-y-2">
                  {reservationData.extras.map((extra, index) => (
                    <li key={index} className="flex justify-between text-sm">
                      <span>{extra.nombre} x{extra.cantidad}</span>
                      <span className="font-medium">${parseFloat(extra.precio * extra.cantidad).toFixed(2)}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>

          {/* Price summary */}
          <div className="bg-indigo-50 p-4 rounded-lg">
            <h3 className="font-medium text-gray-900 mb-4">Resumen de Precios</h3>
            
            <div className="space-y-2">
              <div className="flex justify-between">
                <span>Paquete Base</span>
                <span className="font-medium">${parseFloat(reservationData?.packagePrice || 0).toFixed(2)}</span>
              </div>
              
              {selectedTematica && (
                <div className="flex justify-between">
                  <span>Temática: {selectedTematica.nombre}</span>
                  <span className="font-medium">${parseFloat(selectedTematica.precio || 0).toFixed(2)}</span>
                </div>
              )}
              
              {selectedMampara && (
                <div className="flex justify-between">
                  <span>Mampara: {selectedMampara.nombre}</span>
                  <span className="font-medium">${parseFloat(selectedMampara.precio || 0).toFixed(2)}</span>
                </div>
              )}
              
              {selectedFoodOption && (
                <div className="flex justify-between">
                  <span>Opción de Alimento: {selectedFoodOption.nombre}</span>
                  <span className="font-medium">${parseFloat(selectedFoodOption.precio_extra || 0).toFixed(2)}</span>
                </div>
              )}
              
              {reservationData?.martes_fee > 0 && (
                <div className="flex justify-between">
                  <span>Cargo por Martes</span>
                  <span className="font-medium">${parseFloat(reservationData.martes_fee).toFixed(2)}</span>
                </div>
              )}
              
              {/* Extras total */}
              {reservationData?.extras && reservationData.extras.length > 0 && (
                <div className="flex justify-between">
                  <span>Extras</span>
                  <span className="font-medium">
                    ${reservationData.extras.reduce((sum, extra) => sum + parseFloat(extra.precio * extra.cantidad), 0).toFixed(2)}
                  </span>
                </div>
              )}
              
              <div className="border-t border-indigo-200 pt-2 mt-2 flex justify-between font-bold text-indigo-800">
                <span>Total</span>
                <span>${parseFloat(reservationData?.total || 0).toFixed(2)}</span>
              </div>
            </div>
          </div>
          
          {/* Disclaimer */}
          <div className="text-sm text-gray-500 italic">
            <p>Esta cotización es válida por 48 horas. Los precios y disponibilidad están sujetos a cambios después de este período.</p>
            <p className="mt-1">Al crear esta cotización, no se realiza ningún cargo ni se confirma la reserva.</p>
          </div>
        </div>

        {/* Actions */}
        <div className="border-t border-gray-200 p-6 bg-gray-50 flex justify-end gap-4">
          <button
            onClick={onCancel}
            className="px-6 py-2 rounded-lg text-gray-700 bg-white border border-gray-300 hover:bg-gray-50 transition duration-300 flex items-center gap-2"
          >
            <FiX className="w-5 h-5" />
            Cancelar
          </button>
          <button
            onClick={onConfirm}
            className="px-6 py-2 rounded-lg text-white bg-indigo-600 hover:bg-indigo-700 transition duration-300 flex items-center gap-2"
          >
            <FiCheck className="w-5 h-5" />
            Crear Cotización
          </button>
        </div>
      </motion.div>
    </div>
  );
};

export default QuotationConfirmationModal;\n\n
=== ./reservas/pages/customer/ReservationForm.jsx ===
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useWatch } from 'react-hook-form'; 
import { FiCheck } from 'react-icons/fi';
import { isTuesday } from 'date-fns';
import { 
  TIME_SLOTS, 
  TUESDAY_SURCHARGE,
  formatReservationForApi, 
  formatReservationForEditing 
} from '@shared/utils/reservationUtils';

// Import all section components
import PackageSection from './reservationform/PackageSection';
import FoodOptionsSection from './reservationform/FoodOptionsSection';
import DateTimeSection from './reservationform/DateTimeSection';
import ThemeSection from './reservationform/ThemeSection';
import MamparaSection from './reservationform/MamparaSection';
import ExtrasSection from './reservationform/ExtrasSection';
import CelebrantSection from './reservationform/CelebrantSection';
import CommentsSection from './reservationform/CommentsSection';
const ReservationForm = ({
  onSubmit,
  handleSubmit,
  packages,
  foodOptions,
  tematicas,
  mamparas,
  extras,
  unavailableDates,
  existingReservations,
  control,
  setValue,
  errors,
  watch,
  setIsTuesdayModalOpen,
  editingReservation = null // Nueva prop para manejar edición
}) => {
  // Efecto para inicializar el formulario cuando hay una reserva en edición
  useEffect(() => {
    if (editingReservation) {
      console.log('Inicializando formulario para edición:', editingReservation);
      
      // Transformar datos para edición usando la función común
      const formattedData = formatReservationForEditing(
        editingReservation,
        foodOptions,
        tematicas,
        mamparas
      );
      
      // Reiniciar todos los campos del formulario con los datos formateados
      Object.keys(formattedData).forEach(field => {
        if (field !== 'extras') { // Extras requiere manejo especial
          setValue(field, formattedData[field]);
        }
      });
      
      // Manejar extras especialmente para preservar cantidades
      if (formattedData.extras?.length) {
        setValue('extras', formattedData.extras);
      }
      
      console.log('Datos formateados para edición:', formattedData);
    }
  }, [editingReservation, foodOptions, tematicas, mamparas, setValue]);
  // Memoize form values
  const formValues = useWatch({ control });
  
  // Wrapper para la función onSubmit que transforma los datos para la API
  const handleFormSubmit = useCallback((data) => {
    // Transformar los datos al formato esperado por la API usando la función común
    const apiData = formatReservationForApi(data);
    
    // Llamar a la función onSubmit original con los datos transformados
    onSubmit(apiData);
  }, [onSubmit]);
  
  // Memoize filtered mamparas con compatibilidad para objetos complejos
  const filteredMamparas = useMemo(() => {
    // Extraer el ID de temática (puede ser un objeto complejo o un ID directo)
    const themeId = typeof formValues.id_tematica === 'object'
      ? formValues.id_tematica?.value
      : formValues.id_tematica;
    
    // Usar Number() para asegurar comparación numérica consistente
    return themeId
      ? mamparas.filter(m => Number(m.id_tematica) === Number(themeId) && m.activo)
      : [];
  }, [formValues.id_tematica, mamparas]);
  // Memoize package price calculation
  const calculatePackagePrice = useCallback((packageId, date) => {
    if (!packageId || !date || !(date instanceof Date)) return 0;
    
    const selectedPkg = packages.find(pkg => pkg.id === packageId);
    if (!selectedPkg) return 0;

    const dayOfWeek = date.getDay();
    const isWeekend = dayOfWeek === 0 || dayOfWeek >= 5;
    const basePrice = isWeekend 
      ? parseFloat(selectedPkg.precio_viernes_domingo)
      : parseFloat(selectedPkg.precio_lunes_jueves);
    
    return basePrice + (isTuesday(date) ? TUESDAY_SURCHARGE : 0);
  }, [packages]);

  // Memoize food option price con compatibilidad para objetos complejos
  const getFoodOptionPrice = useCallback((foodOption) => {
    if (!foodOption) return 0;
    
    // Si es un objeto complejo, usar su precio_extra directo o buscar por id.value
    if (typeof foodOption === 'object') {
      if (foodOption.precio_extra) {
        return parseFloat(foodOption.precio_extra);
      }
      const optionId = foodOption.value;
      const option = foodOptions.find(opt => Number(opt.id) === Number(optionId));
      return option?.precio_extra ? parseFloat(option.precio_extra) : 0;
    }
    
    // Si es un ID directo
    const option = foodOptions.find(opt => Number(opt.id) === Number(foodOption));
    return option?.precio_extra ? parseFloat(option.precio_extra) : 0;
  }, [foodOptions]);

  // Memoize mampara price con compatibilidad para objetos complejos
  const getMamparaPrice = useCallback((mamparaObj) => {
    if (!mamparaObj) return 0;
    
    // Si es un objeto complejo, usar su precio directo o buscar por id.value
    if (typeof mamparaObj === 'object') {
      if (mamparaObj.precio) {
        return parseFloat(mamparaObj.precio);
      }
      const mamparaId = mamparaObj.value;
      const mampara = mamparas.find(m => Number(m.id) === Number(mamparaId));
      return mampara?.precio ? parseFloat(mampara.precio) : 0;
    }
    
    // Si es un ID directo
    const mampara = mamparas.find(m => Number(m.id) === Number(mamparaObj));
    return mampara?.precio ? parseFloat(mampara.precio) : 0;
  }, [mamparas]);

  // Memoize extras total
  const calculateExtrasTotal = useCallback((selectedExtras) => {
    if (!selectedExtras?.length) return 0;
    return selectedExtras.reduce((total, extra) => {
      const extraInfo = extras.find(e => e.id === extra.id);
      if (extraInfo?.precio && extra.cantidad) {
        return total + (parseFloat(extraInfo.precio) * parseInt(extra.cantidad));
      }
      return total;
    }, 0);
  }, [extras]);

  // Memoize total calculation
  const total = useMemo(() => {
    const packagePrice = calculatePackagePrice(formValues.id_paquete, formValues.fecha_reserva);
    const foodPrice = getFoodOptionPrice(formValues.id_opcion_alimento);
    const mamparaPrice = getMamparaPrice(formValues.id_mampara);
    const extrasTotal = calculateExtrasTotal(formValues.extras);
    
    return packagePrice + foodPrice + mamparaPrice + extrasTotal;
  }, [
    formValues,
    calculatePackagePrice,
    getFoodOptionPrice,
    getMamparaPrice,
    calculateExtrasTotal
  ]);

  // Update total when dependencies change
  useEffect(() => {
    setValue('total', total);
  }, [total, setValue]);

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-8">
      <PackageSection 
        control={control}
        packages={packages}
        errors={errors}
        setValue={setValue}
      />

      <FoodOptionsSection
        control={control}
        errors={errors}
        foodOptions={foodOptions}
        setValue={setValue}
      />

      <DateTimeSection
        control={control}
        errors={errors}
        setValue={setValue}
        unavailableDates={unavailableDates}
        existingReservations={existingReservations}
        setIsTuesdayModalOpen={setIsTuesdayModalOpen}
        packages={packages}
      />

      <ThemeSection
        control={control}
        errors={errors}
        tematicas={tematicas}
        setValue={setValue}
      />

      <MamparaSection
        control={control}
        errors={errors}
        filteredMamparas={filteredMamparas}
        setValue={setValue}
      />

      <ExtrasSection
        control={control}
        extras={extras}
        setValue={setValue}
      />

      <CelebrantSection
        control={control}
        errors={errors}
      />

      <CommentsSection
        control={control}
      />

      <div className="flex justify-end mt-8">
        <button
          type="submit"
          className="px-8 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200 flex items-center gap-2 font-medium shadow-sm"
        >
          <FiCheck className="w-5 h-5" />
          {editingReservation ? 'Actualizar Reserva' : 'Crear Reserva'}
        </button>
      </div>
    </form>
  );
};

export default ReservationForm;\n\n
=== ./reservas/pages/customer/ReservationModal.jsx ===
import { useEffect, useRef } from 'react';
import { gsap } from 'gsap';
import {
  FiCheck,
  FiPackage,
  FiCalendar,
  FiClock,
  FiDollarSign,
  FiUser,
  FiImage,
  FiList,
  FiInfo,
  FiMapPin,
  FiMail
} from 'react-icons/fi';
import SummaryItem from './SummaryItem';
import { useNavigate } from 'react-router-dom';

const ReservationModal = ({ reservationData, onClose, packages, extrasData }) => {
  const navigate = useNavigate();
  const modalRef = useRef(null);
  const { extras, tuesdayFee } = reservationData;

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('es-MX', {
      style: 'currency',
      currency: 'MXN'
    }).format(amount);
  };

  const formatDate = (date) => {
    return new Intl.DateTimeFormat('es-MX', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    }).format(new Date(date));
  };
  
  const getDayType = (fecha) => {
    if (!fecha) return '';
    const reservationDate = new Date(fecha);
    const dayOfWeek = reservationDate.getDay();
    return dayOfWeek >= 1 && dayOfWeek <= 4 ? 'L-J' : 'V-D';
  };

  const getExtrasTotal = () => {
    return extras?.reduce((total, extra) => {
      const extraInfo = extrasData.find(e => e.id === extra.id);
      return total + (parseFloat(extraInfo?.precio || 0) * (parseInt(extra.cantidad) || 1));
    }, 0) || 0;
  };

  useEffect(() => {
    gsap.fromTo(
      modalRef.current,
      { opacity: 0, scale: 0.8 },
      {
        opacity: 1,
        scale: 1,
        duration: 0.5,
        ease: 'elastic.out(1, 0.75)',
      }
    );
  }, []);

  const handleClose = () => {
    onClose();
    navigate(`/reservation-status/${reservationData.id}`);
  };

  const Section = ({ title, children, icon: Icon }) => (
    <div className="bg-white p-4 rounded-lg border border-gray-100 space-y-3">
      <h3 className="text-lg font-medium text-gray-900 flex items-center gap-2 border-b pb-2">
        {Icon && <Icon className="w-5 h-5 text-indigo-600" />}
        {title}
      </h3>
      {children}
    </div>
  );

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center z-50 p-4">
      <div
        ref={modalRef}
        className="bg-gradient-to-b from-white to-gray-50 p-6 rounded-xl shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto"
      >
        {/* Encabezado */}
        <div className="text-center mb-8">
          <div className="bg-green-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
            <FiCheck className="text-green-500 text-4xl" />
          </div>
          <h2 className="text-2xl font-bold text-indigo-700">
            ¡Reserva Confirmada!
          </h2>
          <p className="text-gray-600 mt-2">
            Tu reservación ha sido registrada exitosamente
          </p>
          <div className="text-sm text-gray-500 mt-1">
            ID de Reserva: #{reservationData.id}
          </div>
        </div>

        <div className="space-y-6">
          {/* Detalles del Paquete */}
          <Section title="Detalles del Paquete" icon={FiPackage}>
            <div className="bg-indigo-50 p-4 rounded-lg">
              <SummaryItem
                icon={<FiPackage className="text-indigo-600" />}
                label="Paquete Seleccionado"
                value={`${packages.find((pkg) => pkg.id === reservationData.id_paquete)?.nombre || 'No seleccionado'}`}
              />
              <SummaryItem
                icon={<FiDollarSign className="text-indigo-600" />}
                label="Precio del Paquete"
                value={`${formatCurrency(reservationData.packagePrice)} (Tarifa ${getDayType(reservationData.fecha_reserva)})`}
              />
            </div>
          </Section>

          {/* Fecha y Horario */}
          <Section title="Fecha y Horario" icon={FiCalendar}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <SummaryItem
                icon={<FiCalendar className="text-indigo-600" />}
                label="Fecha"
                value={formatDate(reservationData.fecha_reserva)}
              />
              <SummaryItem
                icon={<FiClock className="text-indigo-600" />}
                label="Horario"
                value={reservationData.hora_inicio === 'mañana' ? 'Matutino (9:00 - 14:00)' : 'Vespertino (15:00 - 20:00)'}
              />
            </div>
          </Section>

          {/* Información del Festejado */}
          <Section title="Información del Festejado" icon={FiUser}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <SummaryItem
                icon={<FiUser className="text-indigo-600" />}
                label="Nombre"
                value={reservationData.nombre_festejado}
              />
              <SummaryItem
                icon={<FiUser className="text-indigo-600" />}
                label="Edad"
                value={`${reservationData.edad_festejado} años`}
              />
            </div>
          </Section>

          {/* Servicios Seleccionados */}
          <Section title="Servicios Seleccionados" icon={FiList}>
            <SummaryItem
              icon={<FiDollarSign className="text-indigo-600" />}
              label="Opción de Alimento"
              value={reservationData.opcion_alimento_nombre || 'Ninguna'}
            />
            <SummaryItem
              icon={<FiImage className="text-indigo-600" />}
              label="Temática"
              value={reservationData.tematica_nombre || 'No seleccionada'}
            />
          </Section>

          {/* Extras y Cargos Adicionales */}
          {(extras?.length > 0 || tuesdayFee > 0) && (
            <Section title="Extras y Cargos Adicionales" icon={FiList}>
              {extras && extras.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-medium text-gray-700">Servicios Extra:</h4>
                  {extras.map((extra, index) => {
                    const extraInfo = extrasData.find((e) => e.id === extra.id);
                    const extraTotal = (parseFloat(extraInfo?.precio) || 0) * (parseInt(extra.cantidad) || 1);
                    return (
                      <div key={index} className="flex justify-between text-sm">
                        <span>{`${extraInfo?.nombre} (x${extra.cantidad})`}</span>
                        <span className="font-medium">{formatCurrency(extraTotal)}</span>
                      </div>
                    );
                  })}
                  <div className="border-t pt-2 mt-2">
                    <div className="flex justify-between font-medium">
                      <span>Total Extras:</span>
                      <span>{formatCurrency(getExtrasTotal())}</span>
                    </div>
                  </div>
                </div>
              )}
              {tuesdayFee > 0 && (
                <SummaryItem
                  icon={<FiDollarSign className="text-indigo-600" />}
                  label="Cargo por Martes"
                  value={formatCurrency(tuesdayFee)}
                />
              )}
            </Section>
          )}

          {/* Resumen de Costos */}
          <Section title="Resumen de Costos" icon={FiDollarSign}>
            <div className="bg-indigo-50 p-4 rounded-lg space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Paquete Base ({getDayType(reservationData.fecha_reserva)}):</span>
                <span>{formatCurrency(reservationData.packagePrice)}</span>
              </div>
              {extras && extras.length > 0 && (
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Total Extras:</span>
                  <span>{formatCurrency(getExtrasTotal())}</span>
                </div>
              )}
              {tuesdayFee > 0 && (
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Cargo Martes:</span>
                  <span>{formatCurrency(tuesdayFee)}</span>
                </div>
              )}
              <div className="border-t border-indigo-100 pt-2 mt-2">
                <div className="flex justify-between items-center font-bold text-lg">
                  <span>Total Final:</span>
                  <span className="text-indigo-600">{formatCurrency(reservationData.total)}</span>
                </div>
              </div>
            </div>
          </Section>
        </div>

        {/* Botones de Acción */}
        <div className="mt-8 flex justify-center gap-4">
          <button
            onClick={handleClose}
            className="px-6 py-2 rounded-md text-white bg-indigo-600 hover:bg-indigo-700 transition duration-300 flex items-center gap-2"
          >
            <FiCheck className="w-5 h-5" />
            Ver Estado de Reserva
          </button>
        </div>
      </div>
    </div>
  );
};

export default ReservationModal;\n\n
=== ./reservas/pages/customer/ReservationStatus.jsx ===
// ReservationStatus.js
import { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import axiosInstance from '@shared/utils/axiosConfig';
import { toast } from 'react-toastify';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';
import {jwtDecode} from 'jwt-decode'; // Corrected import

import {
  FiCalendar,
  FiClock,
  FiDollarSign,
  FiPackage,
  FiUser,
  FiImage,
  FiInfo,
  FiPlus,
  FiCheck,
  FiX,
  FiAlertCircle,
  FiCreditCard,
  FiMessageCircle,
  FiStar,
  FiActivity,
  FiRefreshCw,
  FiList,
  FiMaximize,
  FiZoomIn,
} from 'react-icons/fi';
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
} from '@shared/components/Card';
import { Dialog, DialogContent, DialogTitle } from '@shared/components/Dialog';

// Helper functions
const formatDate = (dateString) => {
  if (!dateString) return 'Fecha no disponible';
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return 'Fecha inválida';
    return format(date, 'PPP', { locale: es });
  } catch (error) {
    console.error('Error al formatear fecha:', error);
    return 'Fecha inválida';
  }
};

const formatCurrency = (amount) => {
  if (!amount) return '$0.00';
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN',
  }).format(amount);
};

// Componente para mostrar imágenes a pantalla completa
const ImageLightbox = ({ isOpen, onClose, imageUrl, alt }) => {
  if (!isOpen) return null;

  // Handler para detectar clics en el fondo
  const handleBackdropClick = (e) => {
    // Cerrar el lightbox al hacer clic en cualquier parte
    onClose();
  };

  // Handler para evitar que los clics en la imagen cierren el lightbox
  const handleImageClick = (e) => {
    e.stopPropagation(); // Evita que el clic se propague al fondo
  };

  return (
    <div 
      className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-90 transition-opacity duration-300"
      onClick={handleBackdropClick} // Cerrar al hacer clic en cualquier parte
    >
      <div className="relative w-full h-full flex flex-col">
        {/* Barra superior con botón de cierre */}
        <div className="flex justify-end p-4">
          <button 
            onClick={onClose}
            className="text-white p-2 rounded-full hover:bg-white/10 transition-colors"
            aria-label="Cerrar"
          >
            <FiX size={24} />
          </button>
        </div>
        
        {/* Contenedor de la imagen */}
        <div className="flex-1 flex items-center justify-center p-4">
          <img 
            src={imageUrl}
            alt={alt}
            className="max-h-full max-w-full object-contain"
            onClick={handleImageClick}
          />
        </div>
      </div>
    </div>
  );
};

// Components
const StatusBadge = ({ status }) => {
  const statusConfig = {
    pendiente: {
      icon: FiClock,
      class: 'bg-yellow-100 text-yellow-800',
      text: 'Pendiente',
    },
    confirmada: {
      icon: FiCheck,
      class: 'bg-green-100 text-green-800',
      text: 'Confirmada',
    },
    cancelada: {
      icon: FiX,
      class: 'bg-red-100 text-red-800',
      text: 'Cancelada',
    },
  };

  const config = statusConfig[status] || statusConfig.pendiente;
  const Icon = config.icon;

  return (
    <span
      className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${config.class}`}
    >
      <Icon className="w-4 h-4 mr-2" />
      {config.text}
    </span>
  );
};

const ReservationCard = ({ reservation, isActive, onClick }) => {
  const cardVariants = {
    initial: { scale: 1 },
    hover: { scale: 1.02 },
    tap: { scale: 0.98 },
  };

  return (
    <motion.div
      variants={cardVariants}
      initial="initial"
      whileHover="hover"
      whileTap="tap"
      className={`p-4 rounded-lg border cursor-pointer transition-colors duration-200 ${
        isActive
          ? 'border-indigo-500 bg-indigo-50 shadow-md'
          : 'border-gray-200 hover:border-indigo-300 hover:bg-gray-50'
      }`}
      onClick={onClick}
    >
      <div className="flex justify-between items-start">
        <div className="flex items-start space-x-3">
          <div
            className={`p-2 rounded-full ${
              isActive ? 'bg-indigo-100' : 'bg-gray-100'
            }`}
          >
            <FiUser
              className={`w-5 h-5 ${
                isActive ? 'text-indigo-600' : 'text-gray-500'
              }`}
            />
          </div>
          <div>
            <h3 className="font-medium text-gray-900">
              {reservation.nombre_festejado}
            </h3>
            <div className="flex items-center text-sm text-gray-500">
              <FiCalendar className="w-4 h-4 mr-1" />
              {formatDate(reservation.fecha_reserva)}
            </div>
          </div>
        </div>
        <StatusBadge status={reservation.estado} />
      </div>
    </motion.div>
  );
};

// Componente estándar para detalles sin imágenes
const DetailSection = ({ icon: Icon, label, value, className = '' }) => (
  <div className={`flex items-start space-x-3 ${className}`}>
    <div className="flex-shrink-0 p-2 bg-indigo-100 rounded-lg">
      <Icon className="w-5 h-5 text-indigo-600" />
    </div>
    <div>
      <p className="text-sm font-medium text-gray-500">{label}</p>
      <p className="mt-1 text-lg font-medium text-gray-900">{value}</p>
    </div>
  </div>
);

// Componente para detalles con imágenes (temáticas, mamparas)
const DetailSectionWithImage = ({ icon: Icon, label, value, imageUrl, alt, onImageClick, imageError = false, className = '' }) => (
  <div className={`flex flex-col ${className}`}>
    <div className="flex items-start space-x-3">
      <div className="flex-shrink-0 p-2 bg-indigo-100 rounded-lg">
        <Icon className="w-5 h-5 text-indigo-600" />
      </div>
      <div>
        <p className="text-sm font-medium text-gray-500">{label}</p>
        <p className="mt-1 text-lg font-medium text-gray-900">{value}</p>
      </div>
    </div>
    
    {imageUrl && !imageError ? (
      <div className="mt-3 ml-10 relative">
        <div className="relative overflow-hidden rounded-lg group">
          <img
            src={imageUrl}
            alt={alt}
            className="w-full max-w-xs rounded-lg shadow-sm group-hover:shadow-md transition-all duration-300 object-cover"
            style={{ maxHeight: '160px' }}
            onError={(e) => {
              e.target.onerror = null;
              e.target.style.display = 'none';
            }}
          />
          <div 
            className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100 cursor-pointer"
            onClick={onImageClick}
          >
            <div className="p-2 bg-white bg-opacity-80 rounded-full">
              <FiZoomIn size={20} className="text-indigo-600" />
            </div>
          </div>
        </div>
        <button
          className="absolute top-2 right-2 p-1 bg-white rounded-full shadow-md hover:bg-indigo-50 transition-colors"
          onClick={onImageClick}
          aria-label="Ver imagen ampliada"
        >
          <FiMaximize size={16} className="text-indigo-600" />
        </button>
      </div>
    ) : null}
  </div>
);

const TimelineEvent = ({ title, description, icon: Icon, isCompleted }) => (
  <div className="flex items-start space-x-4">
    <div
      className={`flex-shrink-0 w-8 h-8 flex items-center justify-center rounded-full ${
        isCompleted ? 'bg-green-100' : 'bg-gray-100'
      }`}
    >
      <Icon
        className={`w-4 h-4 ${
          isCompleted ? 'text-green-600' : 'text-gray-400'
        }`}
      />
    </div>
    <div>
      <p className="font-medium text-gray-900">{title}</p>
      <p className="text-sm text-gray-500">{description}</p>
    </div>
  </div>
);

const LoadingSpinner = () => (
  <div className="min-h-screen bg-gradient-to-br from-purple-100 to-indigo-200 flex items-center justify-center">
    <motion.div
      className="relative w-20 h-20"
      animate={{ rotate: 360 }}
      transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}
    >
      <div className="absolute top-0 left-0 w-full h-full border-4 border-indigo-200 rounded-full"></div>
      <div className="absolute top-0 left-0 w-full h-full border-4 border-indigo-600 rounded-full border-t-transparent animate-spin"></div>
      <motion.div
        className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"
        animate={{ opacity: [0.5, 1, 0.5] }}
        transition={{ duration: 1, repeat: Infinity }}
      >
        <FiRefreshCw className="w-8 h-8 text-indigo-600" />
      </motion.div>
    </motion.div>
  </div>
);

const ErrorState = ({ message, onRetry }) => (
  <div className="min-h-screen bg-gradient-to-br from-purple-100 to-indigo-200 flex items-center justify-center p-4">
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white p-8 rounded-lg shadow-xl max-w-md w-full text-center"
    >
      <div className="mb-6">
        <motion.div
          animate={{
            scale: [1, 1.2, 1],
            rotate: [0, 15, -15, 0],
          }}
          transition={{ duration: 0.5 }}
        >
          <FiAlertCircle className="w-16 h-16 text-red-500 mx-auto" />
        </motion.div>
      </div>
      <h2 className="text-2xl font-bold text-gray-900 mb-4">
        ¡Ups! Algo salió mal
      </h2>
      <p className="text-gray-600 mb-8">{message}</p>
      <div className="space-y-4">
        <button
          onClick={onRetry}
          className="w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors flex items-center justify-center"
        >
          <FiRefreshCw className="w-5 h-5 mr-2" />
          Intentar de nuevo
        </button>
        <button
          onClick={() => window.location.href = '/'}
          className="w-full px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
        >
          Volver al inicio
        </button>
      </div>
    </motion.div>
  </div>
);

const EmptyState = ({ onCreateNew }) => (
  <div className="min-h-screen bg-gradient-to-br from-purple-100 to-indigo-200 flex items-center justify-center p-4">
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white p-8 rounded-lg shadow-xl max-w-md w-full text-center"
    >
      <motion.div
        animate={{
          y: [0, -10, 0],
        }}
        transition={{
          duration: 2,
          repeat: Infinity,
          ease: 'easeInOut',
        }}
      >
        <FiCalendar className="w-16 h-16 text-indigo-500 mx-auto mb-6" />
      </motion.div>
      <h2 className="text-2xl font-bold text-gray-900 mb-4">
        ¡Comienza tu aventura!
      </h2>
      <p className="text-gray-600 mb-8">
        Aún no tienes reservas. ¿Qué tal si creas tu primera experiencia mágica?
      </p>
      <motion.button
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={onCreateNew}
        className="px-6 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors flex items-center justify-center mx-auto"
      >
        <FiPlus className="w-5 h-5 mr-2" />
        Crear Nueva Reserva
      </motion.button>
    </motion.div>
  </div>
);

const ReservationStatus = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeReservation, setActiveReservation] = useState(null);
  const [userReservations, setUserReservations] = useState([]);
  const [showConfirmCancel, setShowConfirmCancel] = useState(false);
  const [userId, setUserId] = useState(null);
  const [reservationData, setReservationData] = useState(null);
  
  // Estados para los lightboxes
  const [tematicaLightboxOpen, setTematicaLightboxOpen] = useState(false);
  const [mamparaLightboxOpen, setMamparaLightboxOpen] = useState(false);
  const [tematicaImageError, setTematicaImageError] = useState(false);
  const [mamparaImageError, setMamparaImageError] = useState(false);

  const { id } = useParams();
  const navigate = useNavigate();

  // Resetear los errores de imagen cuando cambia la reserva activa
  useEffect(() => {
    if (activeReservation) {
      setTematicaImageError(false);
      setMamparaImageError(false);
    }
  }, [activeReservation]);

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      navigate('/signin');
      return;
    }

    try {
      const decodedToken = jwtDecode(token);
      console.log('Decoded token:', decodedToken);
      setUserId(decodedToken.id);
    } catch (error) {
      console.error('Error al decodificar el token:', error);
      navigate('/signin');
    }
  }, [navigate]);

  useEffect(() => {
    const fetchReservationData = async () => {
      try {
        const response = await axiosInstance.get(`/api/reservas/${id}`);
        setReservationData(response.data);
      } catch (error) {
        console.error('Error al obtener los datos de la reserva:', error);
        // Redirigir a una página de error o a la página de reservas
        navigate('/reservations');
      }
    };

    fetchReservationData();
  }, [id, navigate]);

  useEffect(() => {
    if (userId) {
      fetchUserReservations();
    }
  }, [userId]);

  const fetchUserReservations = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await axiosInstance.get('/api/reservas', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });

      if (response.data) {
        // Filter reservations by userId
        const userReservationsData = response.data.filter(
          (reserva) => reserva.id_usuario === userId
        );

        const sortedReservations = userReservationsData.sort(
          (a, b) => new Date(b.fecha_reserva) - new Date(a.fecha_reserva)
        );

        setUserReservations(sortedReservations);

        // Select the active reservation
        if (id) {
          const selectedReservation = sortedReservations.find(
            (r) => r.id === parseInt(id)
          );
          setActiveReservation(selectedReservation || sortedReservations[0]);
        } else {
          setActiveReservation(sortedReservations[0]);
        }
      }
    } catch (error) {
      console.error('Error al obtener las reservas:', error);
      if (error.response?.status === 401) {
        navigate('/signin');
      } else {
        setError(
          'No se pudieron cargar tus reservas. Por favor, intenta más tarde.'
        );
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCancelReservation = async () => {
    try {
      if (!activeReservation?.id || activeReservation.id_usuario !== userId) {
        toast.error('No tienes permiso para cancelar esta reserva');
        return;
      }

      await axiosInstance.put(
        `/api/reservas/${activeReservation.id}`,
        {
          estado: 'cancelada',
        },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        }
      );

      await fetchUserReservations();
      setShowConfirmCancel(false);
      toast.success('Reserva cancelada exitosamente');
    } catch (error) {
      console.error('Error al cancelar la reserva:', error);
      toast.error('No se pudo cancelar la reserva. Por favor, intenta más tarde.');
      if (error.response?.status === 401) {
        navigate('/signin');
      }
    }
  };

  // Render conditional based on state
  if (loading) return <LoadingSpinner />;
  if (error) return <ErrorState message={error} onRetry={fetchUserReservations} />;
  if (!userReservations || userReservations.length === 0) {
    return <EmptyState onCreateNew={() => navigate('/reservations')} />;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-100 to-indigo-200 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-3xl font-bold text-gray-900">Mis Reservas</h1>
          <p className="mt-2 text-gray-600">
            Gestiona y visualiza todas tus reservas en un solo lugar
          </p>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
          {/* Sidebar with reservations */}
          <div className="lg:col-span-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex justify-between items-center">
                  <span className="flex items-center">
                    <FiList className="w-5 h-5 mr-2" />
                    Reservas Activas
                  </span>
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => navigate('/reservations')}
                    className="p-2 bg-indigo-100 text-indigo-600 rounded-full hover:bg-indigo-200 transition-colors"
                  >
                    <FiPlus className="w-5 h-5" />
                  </motion.button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <AnimatePresence>
                  <div className="space-y-4">
                    {userReservations.map((reservation) => (
                      <ReservationCard
                        key={reservation.id}
                        reservation={reservation}
                        isActive={activeReservation?.id === reservation.id}
                        onClick={() => setActiveReservation(reservation)}
                      />
                    ))}
                  </div>
                </AnimatePresence>
              </CardContent>
            </Card>
          </div>

          {/* Reservation details */}
          <div className="lg:col-span-8">
            {activeReservation && (
              <AnimatePresence mode="wait">
                <motion.div
                  key={activeReservation.id}
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: -20 }}
                  className="space-y-6"
                >
                  <Card>
                    <CardHeader>
                      <div className="flex justify-between items-center">
                        <CardTitle className="flex items-center">
                          <FiStar className="w-6 h-6 mr-2 text-indigo-500" />
                          Detalles de la Reserva
                        </CardTitle>
                        <StatusBadge status={activeReservation.estado} />
                      </div>
                    </CardHeader>
                    <CardContent>
                      {/* Main info grid */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
                        <DetailSection
                          icon={FiPackage}
                          label="Paquete"
                          value={
                            activeReservation.paquete?.nombre || 'No especificado'
                          }
                        />
                        <DetailSection
                          icon={FiCalendar}
                          label="Fecha"
                          value={formatDate(activeReservation.fecha_reserva)}
                        />
                        <DetailSection
                          icon={FiClock}
                          label="Horario"
                          value={
                            activeReservation.hora_inicio === 'mañana'
                              ? 'Matutino'
                              : 'Vespertino'
                          }
                        />
                        <DetailSection
                          icon={FiUser}
                          label="Festejado"
                          value={`${activeReservation.nombre_festejado} (${activeReservation.edad_festejado} años)`}
                        />
                        
                        {/* Temática con imagen */}
                        <DetailSectionWithImage
                          icon={FiImage}
                          label="Temática"
                          value={activeReservation.tematicaReserva?.nombre || 'No especificada'}
                          imageUrl={activeReservation.tematicaReserva?.foto}
                          alt={`Temática ${activeReservation.tematicaReserva?.nombre}`}
                          onImageClick={() => setTematicaLightboxOpen(true)}
                          imageError={tematicaImageError}
                        />
                        
                        {/* Mampara con imagen */}
                        {activeReservation.mampara && (
                          <DetailSectionWithImage
                            icon={FiImage}
                            label="Mampara"
                            value={`${activeReservation.mampara.piezas} piezas`}
                            imageUrl={activeReservation.mampara?.foto}
                            alt={`Mampara de ${activeReservation.mampara.piezas} piezas`}
                            onImageClick={() => setMamparaLightboxOpen(true)}
                            imageError={mamparaImageError}
                          />
                        )}
                        <DetailSection
                          icon={FiDollarSign}
                          label="Total"
                          value={formatCurrency(activeReservation.total)}
                        />
                      </div>

                      {/* Timeline */}
                      <div className="mb-8">
                        <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                          <FiActivity className="w-5 h-5 mr-2 text-indigo-500" />
                          Progreso de la Reserva
                        </h3>
                        <div className="relative">
                          <div className="absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200"></div>
                          <div className="space-y-6">
                            <TimelineEvent
                              title="Reserva Creada"
                              description="Tu reserva ha sido registrada en el sistema"
                              icon={FiCalendar}
                              isCompleted={true}
                            />
                            <TimelineEvent
                              title="Pago Confirmado"
                              description="El pago ha sido procesado exitosamente"
                              icon={FiCreditCard}
                              isCompleted={
                                activeReservation.estado === 'confirmada'
                              }
                            />
                            <TimelineEvent
                              title="Evento Completado"
                              description="¡Gracias por celebrar con nosotros!"
                              icon={FiCheck}
                              isCompleted={
                                activeReservation.estado === 'completada'
                              }
                            />
                          </div>
                        </div>
                      </div>

                      {/* Extras */}
                      {activeReservation.extras?.length > 0 && (
                        <div className="mb-8">
                          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                            <FiPlus className="w-5 h-5 mr-2 text-indigo-500" />
                            Extras Contratados
                          </h3>
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            {activeReservation.extras.map((extra) => (
                              <motion.div
                                key={extra.id}
                                whileHover={{ scale: 1.02 }}
                                className="bg-white p-4 rounded-lg border border-gray-200 shadow-sm"
                              >
                                <div className="flex items-start space-x-3">
                                  <div className="p-2 bg-indigo-100 rounded-lg">
                                    <FiStar className="w-5 h-5 text-indigo-600" />
                                  </div>
                                  <div>
                                    <h4 className="font-medium text-gray-900">
                                      {extra.nombre}
                                    </h4>
                                    <p className="text-sm text-gray-500">
                                      {formatCurrency(extra.precio)}
                                    </p>
                                  </div>
                                </div>
                              </motion.div>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Comments */}
                      {activeReservation.comentarios && (
                        <div className="mb-8">
                          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                            <FiMessageCircle className="w-5 h-5 mr-2 text-indigo-500" />
                            Comentarios
                          </h3>
                          <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                            <p className="text-gray-700">
                              {activeReservation.comentarios}
                            </p>
                          </div>
                        </div>
                      )}

                      {/* Actions */}
                      <div className="flex justify-end space-x-4">
                        {activeReservation.estado === 'pendiente' && (
                          <motion.button
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                            onClick={() => setShowConfirmCancel(true)}
                            className="px-4 py-2 text-red-600 hover:text-red-700 transition-colors flex items-center"
                          >
                            <FiX className="w-5 h-5 mr-2" />
                            Cancelar Reserva
                          </motion.button>
                        )}
                        <motion.button
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                          onClick={() => navigate('/reservations')}
                          className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors flex items-center"
                        >
                          <FiPlus className="w-5 h-5 mr-2" />
                          Nueva Reserva
                        </motion.button>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              </AnimatePresence>
            )}
          </div>
        </div>
      </div>

      {/* Lightbox para imagen de temática - fuera de la card */}
      <ImageLightbox 
        isOpen={tematicaLightboxOpen}
        onClose={() => setTematicaLightboxOpen(false)}
        imageUrl={activeReservation?.tematicaReserva?.foto || ''}
        alt={activeReservation?.tematicaReserva?.nombre || 'Imagen de temática'}
      />
      
      {/* Lightbox para imagen de mampara - fuera de la card */}
      <ImageLightbox 
        isOpen={mamparaLightboxOpen}
        onClose={() => setMamparaLightboxOpen(false)}
        imageUrl={activeReservation?.mampara?.foto || ''}
        alt={`Mampara de ${activeReservation?.mampara?.piezas || 0} piezas`}
      />

      {/* Cancel Confirmation Modal */}
      <Dialog open={showConfirmCancel} onClose={() => setShowConfirmCancel(false)}>
        <DialogContent className="sm:max-w-lg">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
          >
            <DialogTitle className="flex items-center text-red-600">
              <FiAlertCircle className="w-6 h-6 mr-2" />
              Confirmar Cancelación
            </DialogTitle>
            <div className="mt-6">
              <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <FiInfo className="h-5 w-5 text-red-400" />
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-red-800">
                      Importante: Esta acción no se puede deshacer
                    </h3>
                    <div className="mt-2 text-sm text-red-700">
                      <ul className="list-disc space-y-1 pl-5">
                        <li>
                          La fecha quedará disponible para otros clientes
                        </li>
                        <li>
                          Deberás crear una nueva reserva si deseas reagendar
                        </li>
                        <li>
                          El reembolso puede tomar hasta 15 días hábiles
                        </li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>

              <div className="mt-6 flex justify-end space-x-4">
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => setShowConfirmCancel(false)}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors flex items-center"
                >
                  <FiX className="w-5 h-5 mr-2" />
                  Mantener Reserva
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={handleCancelReservation}
                  className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors flex items-center"
                >
                  <FiCheck className="w-5 h-5 mr-2" />
                  Confirmar Cancelación
                </motion.button>
              </div>
            </div>
          </motion.div>
        </DialogContent>
      </Dialog>

      {/* Error Notification */}
      {error && (
        <div className="fixed bottom-4 right-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg shadow-lg">
          <div className="flex items-start">
            <FiAlertCircle className="w-5 h-5 mr-2 mt-0.5" />
            <div>
              <h3 className="font-medium">Error</h3>
              <p className="text-sm">{error}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ReservationStatus;\n\n
=== ./reservas/pages/customer/ReservationSummary.jsx ===
import { motion } from 'framer-motion';
import { FiCalendar, FiClock, FiCheck } from 'react-icons/fi';
import { useTheme } from '@shared/context/ThemeContext';

const ReservationSummary = ({ reservations, filterDataByMonth }) => {
    const { theme } = useTheme();
    const isDark = theme === 'dark';
    
    const currentMonth = new Date().toLocaleString('es-ES', { month: 'long' });
    const capitalizedMonth = currentMonth.charAt(0).toUpperCase() + currentMonth.slice(1);

    const filteredReservations = filterDataByMonth(reservations, 'fecha_reserva');
    const reservationsCount = filteredReservations.length;
    const confirmedReservations = filteredReservations.filter(r => r.estado === 'confirmada').length;
    const pendingReservations = filteredReservations.filter(r => r.estado === 'pendiente').length;

    return (
        <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            className="h-full"
        >
            {/* Header */}
            <div className={isDark 
                ? "bg-gradient-to-r from-green-800 to-emerald-900 p-6" 
                : "bg-gradient-to-r from-green-500 to-emerald-600 p-6"
            }>
                <div className="flex items-center justify-between">
                    <h2 className="text-xl font-semibold text-white">Reservas</h2>
                    <div className="p-2 rounded-full bg-white/20 text-white">
                        <FiCalendar className="w-5 h-5" />
                    </div>
                </div>
            </div>
            
            {/* Content */}
            <div className="p-4 md:p-6" style={{ 
                backgroundColor: isDark ? 'var(--panel-bg)' : 'white',
                color: isDark ? 'var(--color-text-primary)' : 'inherit'
            }}>
                <div className="flex flex-col items-center text-center mb-4 md:mb-6">
                    <span className={`text-xs md:text-sm font-medium px-3 md:px-4 py-1 rounded-full mb-2 md:mb-3 ${
                        isDark ? 'bg-gray-800 text-gray-100' : 'bg-gray-100 text-gray-600'
                    }`}>
                        {capitalizedMonth}
                    </span>
                    <p className={`text-3xl md:text-4xl font-bold ${
                        isDark ? 'text-green-400' : 'text-green-600'
                    }`}>
                        {reservationsCount}
                    </p>
                    <p className={`text-xs md:text-sm font-medium mt-1 ${
                        isDark ? 'text-gray-300' : 'text-gray-600'
                    }`}>
                        {reservationsCount === 1 ? 'reserva' : 'reservas'} este mes
                    </p>
                </div>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-6">
                    {/* Confirmed reservations card */}
                    <div className={`rounded-lg p-3 md:p-4 shadow-sm border text-center ${
                        isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'
                    }`}>
                        <div className={`mx-auto w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-full mb-2 md:mb-3 ${
                            isDark ? 'bg-green-900 text-green-400' : 'bg-green-100 text-green-600'
                        }`}>
                            <FiCheck className="w-4 h-4 md:w-5 md:h-5" />
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className={`text-base md:text-xl font-bold ${
                                isDark ? 'text-white' : 'text-gray-800'
                            }`}>
                                {confirmedReservations}
                            </p>
                            <p className={`text-xs md:text-sm font-medium text-center ${
                                isDark ? 'text-gray-300' : 'text-gray-600'
                            }`}>
                                Confirmadas
                            </p>
                        </div>
                    </div>
                    
                    {/* Pending reservations card */}
                    <div className={`rounded-lg p-3 md:p-4 shadow-sm border text-center ${
                        isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'
                    }`}>
                        <div className={`mx-auto w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-full mb-2 md:mb-3 ${
                            isDark ? 'bg-amber-900 text-amber-400' : 'bg-amber-100 text-amber-600'
                        }`}>
                            <FiClock className="w-4 h-4 md:w-5 md:h-5" />
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className={`text-base md:text-xl font-bold ${
                                isDark ? 'text-white' : 'text-gray-800'
                            }`}>
                                {pendingReservations}
                            </p>
                            <p className={`text-xs md:text-sm font-medium text-center ${
                                isDark ? 'text-gray-300' : 'text-gray-600'
                            }`}>
                                Pendientes
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </motion.div>
    );
};

export default ReservationSummary;\n\n
=== ./reservas/pages/customer/StepperReservation.jsx ===
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm, FormProvider } from 'react-hook-form';
import { AnimatePresence, motion } from 'framer-motion';
import { 
  FiArrowLeft, 
  FiArrowRight, 
  FiCheck, 
  FiX, 
  FiAlertTriangle, 
  FiInfo, 
  FiShoppingCart, 
  FiMenu,
  FiChevronLeft,
  FiChevronRight,
  FiMaximize,
  FiMinimize
} from 'react-icons/fi';

// Componentes de cada paso
import PackageStep from './reservationsteps/PackageStep';
import DateTimeStep from './reservationsteps/DateTimeStep';
import ThemeStep from './reservationsteps/ThemeStep';
import MamparaStep from './reservationsteps/MamparaStep';
import FoodOptionsStep from './reservationsteps/FoodOptionsStep';
import ExtrasStep from './reservationsteps/ExtrasStep';
import CelebrantStep from './reservationsteps/CelebrantStep';
import ReviewStep from './reservationsteps/ReviewStep';

// Componentes auxiliares
import StepIndicator from './reservationcomponents/StepIndicator';
import SummarySidebar from './reservationcomponents/SummarySidebar';
import TuesdayModal from './TuesdayModal';
import PaymentModal from './PaymentModalCustomer';
import ConfirmationModal from './ConfirmationModal';

// Servicios y utilidades
import { useReservationData } from '@shared/hooks/useReservationData';
import { formatters } from '@shared/utils/formatters';

// Definición de los pasos
const STEPS = [
  { id: 'package', label: 'Paquete', component: PackageStep, required: ['id_paquete'], icon: FiShoppingCart },
  { id: 'datetime', label: 'Fecha y Hora', component: DateTimeStep, required: ['fecha_reserva', 'hora_inicio'], icon: FiArrowRight },
  { id: 'theme', label: 'Temática', component: ThemeStep, required: ['id_tematica'], icon: FiArrowRight },
  { id: 'mampara', label: 'Mampara', component: MamparaStep, required: [], icon: FiArrowRight },
  { id: 'food', label: 'Alimentos', component: FoodOptionsStep, required: [], icon: FiArrowRight },
  { id: 'extras', label: 'Extras', component: ExtrasStep, required: [], icon: FiArrowRight },
  { id: 'celebrant', label: 'Festejado', component: CelebrantStep, required: ['nombre_festejado', 'edad_festejado'], icon: FiArrowRight },
  { id: 'review', label: 'Revisar', component: ReviewStep, required: [], icon: FiCheck }
];

const StepperReservation = () => {
  const navigate = useNavigate();
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalType, setModalType] = useState(null); // 'tuesday', 'payment', 'confirmation'
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [apiError, setApiError] = useState(null);
  const [isExitWarningOpen, setIsExitWarningOpen] = useState(false);
  const [isSummaryOpen, setIsSummaryOpen] = useState(false); // Para toggle del resumen en móvil
  const [isFullscreen, setIsFullscreen] = useState(false); // Para modo pantalla completa

  // Obtener datos para el formulario de reserva
  const { 
    packages, 
    tematicas, 
    mamparas, 
    foodOptions,
    extras,
    loading, 
    error, 
    unavailableDates,
    existingReservations,
    createReservation,
  } = useReservationData();
  
  // Configurar el formulario con react-hook-form
  const methods = useForm({
    defaultValues: {
      id_paquete: null,
      fecha_reserva: null,
      hora_inicio: null,
      id_tematica: null,
      id_mampara: null,
      id_opcion_alimento: null,
      extras: [],
      nombre_festejado: '',
      edad_festejado: '',
      sexo_festejado: '',
      color_favorito: '',
      detalles_especiales: '',
      tuesdayFee: 0,
      packagePrice: 0
    }
  });
  
  const { watch, setValue, handleSubmit, formState } = methods;
  
  // Valores actuales del formulario
  const formValues = watch();
  
  // Efecto para manejar el cálculo de precios del paquete
  useEffect(() => {
    if (formValues.id_paquete && formValues.fecha_reserva) {
      const selectedPackage = packages.find(pkg => pkg.id === formValues.id_paquete);
      if (selectedPackage) {
        // Determinar si es fin de semana
        const day = formValues.fecha_reserva.getDay();
        const isWeekend = day === 0 || day === 5 || day === 6; // Domingo(0), Viernes(5), Sábado(6)
        
        // Establecer precio según el día
        const packagePrice = isWeekend 
          ? parseFloat(selectedPackage.precio_viernes_domingo)
          : parseFloat(selectedPackage.precio_lunes_jueves);
          
        setValue('packagePrice', packagePrice);
      }
    }
  }, [formValues.id_paquete, formValues.fecha_reserva, packages, setValue]);
  
  // Obtener el paso actual
  const currentStep = STEPS[currentStepIndex];
  
  // Verificar si los datos del paso actual son válidos
  const isCurrentStepValid = () => {
    if (!currentStep.required.length) return true;
    
    return currentStep.required.every(field => {
      const value = formValues[field];
      return value !== null && value !== undefined && value !== '';
    });
  };
  
  // Verificar si todos los datos requeridos están completos
  const isFormValid = () => {
    const allRequiredFields = STEPS.flatMap(step => step.required);
    return allRequiredFields.every(field => {
      const value = formValues[field];
      return value !== null && value !== undefined && value !== '';
    });
  };
  
  // Avanzar al siguiente paso
  const nextStep = async () => {
    if (currentStepIndex < STEPS.length - 1) {
      // Si es el último paso, ir al pago
      if (currentStepIndex === STEPS.length - 2) {
        if (isFormValid()) {
          setModalType('payment');
          setIsModalOpen(true);
        } else {
          // Destacar campos requeridos faltantes
          setCurrentStepIndex(STEPS.length - 1); // Ir a la revisión para mostrar errores
        }
      } else {
        // Animación al cambiar de paso
        setCurrentStepIndex(currentStepIndex + 1);
        
        // Auto scroll al inicio del contenido en dispositivos móviles
        if (window.innerWidth < 768) {
          const contentElement = document.getElementById('step-content');
          if (contentElement) {
            contentElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        }
      }
    }
  };
  
  // Retroceder al paso anterior
  const prevStep = () => {
    if (currentStepIndex > 0) {
      setCurrentStepIndex(currentStepIndex - 1);
      
      // Auto scroll al inicio del contenido en dispositivos móviles
      if (window.innerWidth < 768) {
        const contentElement = document.getElementById('step-content');
        if (contentElement) {
          contentElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }
    }
  };
  
  // Ir a un paso específico
  const goToStep = (index) => {
    if (index >= 0 && index < STEPS.length) {
      setCurrentStepIndex(index);
      
      // Auto scroll al inicio del contenido en dispositivos móviles
      if (window.innerWidth < 768) {
        const contentElement = document.getElementById('step-content');
        if (contentElement) {
          contentElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }
    }
  };
  
  // Manejar martes con recargo
  const handleTuesdayConfirm = () => {
    setIsModalOpen(false);
    setModalType(null);
    // El valor de tuesdayFee ya se establece en DateTimeStep
  };
  
  // Manejar selección de método de pago
  const handleSelectPaymentMethod = async (paymentMethod) => {
    try {
      // Guardar el método de pago seleccionado
      console.log('Método de pago seleccionado:', paymentMethod);
      
      // Normalizar el método de pago para asegurar compatibilidad
      const normalizedPaymentMethod = paymentMethod === 'transfer' ? 'transferencia' : paymentMethod;
      
      // Guardar el método de pago en el formulario si es necesario
      setValue('payment_method', normalizedPaymentMethod);
      
      // Continuar con el proceso de reserva - convertir a Promise para poder usar await
      return new Promise((resolve, reject) => {
        // Usar el callback de onSubmit para detectar éxito o error
        const onSubmitSuccess = async (data) => {
          try {
            await submitReservation(data);
            resolve(true);
          } catch (error) {
            console.error('Error en el proceso de reserva:', error);
            reject(error);
          }
        };
        
        // Ejecutar handleSubmit con nuestro callback personalizado
        const submitResult = handleSubmit(onSubmitSuccess)();
        
        // Si handleSubmit devuelve una promesa (por validación), manejarla
        if (submitResult && typeof submitResult.catch === 'function') {
          submitResult.catch(reject);
        }
      });
    } catch (error) {
      console.error('Error al seleccionar método de pago:', error);
      throw error; // Re-lanzar para que PaymentModal pueda manejarlo
    }
  };
  
  // Manejar confirmación
  const handleConfirmation = () => {
    setIsModalOpen(false);
    setModalType(null);
    navigate('/customer/reservationstatus', { replace: true });
  };
  
  // Enviar reserva
  // Función para generar un código de seguimiento de exactamente 10 caracteres
  const generateTrackingCode = () => {
    // Obtener fecha actual
    const now = new Date();
    
    // Extraer componentes de fecha (2 dígitos del año, mes y día)
    const year = now.getFullYear().toString().slice(2); // 2 dígitos
    const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 2 dígitos
    const day = now.getDate().toString().padStart(2, '0'); // 2 dígitos
    
    // Generar parte aleatoria (4 dígitos para completar 10 caracteres en total)
    const randomPart = Math.floor(1000 + Math.random() * 9000);
    
    // Construir código: YYMMDDXXXX (exactamente 10 caracteres)
    return `${year}${month}${day}${randomPart}`;
  };

  const submitReservation = async (data) => {
    setIsSubmitting(true);
    setApiError(null);
    
    try {
      // Generar código de seguimiento
      const codigoSeguimiento = generateTrackingCode();
      
      // Preparar comentarios combinando campos adicionales
      let comentarios = '';
      if (data.sexo_festejado) {
        comentarios += `Sexo: ${data.sexo_festejado}. `;
      }
      if (data.color_favorito) {
        comentarios += `Color favorito: ${data.color_favorito}. `;
      }
      if (data.detalles_especiales) {
        comentarios += `Detalles especiales: ${data.detalles_especiales}`;
      }
      
      // Normalizar el método de pago
      let metodoPagoNormalizado;
      switch(data.payment_method) {
        case 'transfer':
          metodoPagoNormalizado = 'transferencia';
          break;
        case 'cash':
          metodoPagoNormalizado = 'efectivo';
          break;
        case 'credit':
          metodoPagoNormalizado = 'tarjeta_credito';
          break;
        case 'debit':
          metodoPagoNormalizado = 'tarjeta_debito';
          break;
        default:
          metodoPagoNormalizado = 'transferencia';
      }
      
      // Convertir hora_inicio a formato correcto si es "tarde" o "mañana"
      let horaInicio = typeof data.hora_inicio === 'object' ? data.hora_inicio.value : data.hora_inicio;
      if (horaInicio === 'tarde') {
        horaInicio = '14:00:00';
      } else if (horaInicio === 'mañana' || horaInicio === 'manana') {
        horaInicio = '10:00:00';
      }
      
      // Calcular hora_fin (3 horas después de hora_inicio)
      const [horas, minutos, segundos] = horaInicio.split(':').map(Number);
      const horaFin = `${String(horas + 3).padStart(2, '0')}:${String(minutos).padStart(2, '0')}:${String(segundos).padStart(2, '0')}`;
      
      // Formatear la fecha en formato YYYY-MM-DD
      let fechaReserva = data.fecha_reserva;
      if (fechaReserva instanceof Date) {
        fechaReserva = fechaReserva.toISOString().split('T')[0]; // Formato YYYY-MM-DD
      }
      
      // Adaptar datos para la API
      const reservationData = {
        id_paquete: data.id_paquete,
        fecha_reserva: fechaReserva,
        hora_inicio: horaInicio,
        hora_fin: horaFin, // Añadir hora_fin obligatoria
        id_tematica: data.id_tematica,
        id_mampara: data.id_mampara || null,
        id_opcion_alimento: data.id_opcion_alimento || null,
        nombre_festejado: data.nombre_festejado,
        edad_festejado: parseInt(data.edad_festejado, 10), // Convertir a número
        comentarios: comentarios.trim() || null, // Usar el campo comentarios para datos adicionales
        extras: data.extras || [],
        total: calculateTotal(), // Cambiado de precio_total a total para coincidir con el backend
        estado: 'pendiente', // Campo requerido por el backend
        metodo_pago: metodoPagoNormalizado, // Usar el método de pago normalizado
        codigo_seguimiento: codigoSeguimiento // Añadir código de seguimiento
      };
      
      // Asegurarse de que el código de seguimiento esté presente y tenga el formato correcto
      if (!reservationData.codigo_seguimiento || reservationData.codigo_seguimiento.length !== 10) {
        console.error('Código de seguimiento inválido, generando uno nuevo');
        reservationData.codigo_seguimiento = generateTrackingCode();
      }
      
      console.log('Enviando datos de reserva:', reservationData);
      
      // Validar datos antes de enviar
      if (!reservationData.hora_inicio || !reservationData.hora_fin) {
        throw new Error('Las horas de inicio y fin son obligatorias');
      }
      
      if (!reservationData.fecha_reserva || !/^\d{4}-\d{2}-\d{2}$/.test(reservationData.fecha_reserva)) {
        throw new Error('La fecha de reserva debe estar en formato YYYY-MM-DD');
      }
      
      if (isNaN(reservationData.edad_festejado)) {
        throw new Error('La edad del festejado debe ser un número');
      }
      
      // Enviar a la API
      const result = await createReservation(reservationData);
      
      if (result.success) {
        // Mostrar modal de confirmación
        setModalType('confirmation');
        setIsModalOpen(true);
      } else {
        setApiError(result.message || 'Error al crear la reserva');
      }
    } catch (error) {
      console.error('Error al enviar la reserva:', error);
      setApiError('Ocurrió un error al procesar tu reserva. Por favor intenta nuevamente.');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Calcular el total
  const calculateTotal = () => {
    let total = 0;
    
    // Precio del paquete
    total += parseFloat(formValues.packagePrice || 0);
    
    // Precio de la temática (si tiene)
    const selectedTematica = tematicas.find(tema => tema.id === formValues.id_tematica);
    if (selectedTematica && selectedTematica.precio) {
      total += parseFloat(selectedTematica.precio);
    }
    
    // Precio de la mampara (si seleccionada)
    if (formValues.id_mampara) {
      const selectedMampara = mamparas.find(mampara => mampara.id === formValues.id_mampara);
      if (selectedMampara && selectedMampara.precio) {
        total += parseFloat(selectedMampara.precio);
      }
    }
    
    // Precio de la opción de alimento (si seleccionada)
    if (formValues.id_opcion_alimento) {
      const selectedFoodOption = foodOptions.find(food => food.id === formValues.id_opcion_alimento);
      if (selectedFoodOption && selectedFoodOption.precio_extra) {
        total += parseFloat(selectedFoodOption.precio_extra);
      }
    }
    
    // Precio de extras (si hay)
    if (formValues.extras && formValues.extras.length > 0) {
      formValues.extras.forEach(extra => {
        const extraInfo = extras.find(e => e.id === extra.id);
        if (extraInfo && extraInfo.precio && extra.cantidad) {
          total += parseFloat(extraInfo.precio) * parseInt(extra.cantidad);
        }
      });
    }
    
    // Recargo por martes
    total += parseFloat(formValues.tuesdayFee || 0);
    
    return total;
  };
  
  // Manejar teclado para navegación
  useEffect(() => {
    const handleKeyDown = (e) => {
      // Solo si no hay modales abiertos
      if (!isModalOpen) {
        // Avanzar con Alt+Derecha o Alt+Enter
        if (e.altKey && (e.key === 'ArrowRight' || e.key === 'Enter')) {
          if (isCurrentStepValid()) {
            e.preventDefault();
            nextStep();
          }
        }
        // Retroceder con Alt+Izquierda
        else if (e.altKey && e.key === 'ArrowLeft') {
          e.preventDefault();
          prevStep();
        }
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isModalOpen, currentStepIndex, formValues, isCurrentStepValid]);
  
  // Manejar intento de salir con cambios sin guardar
  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (formState.isDirty) {
        e.preventDefault();
        e.returnValue = '';
        return '';
      }
    };
    
    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, [formState.isDirty]);

  // Escuchar cambios de tamaño de pantalla para ajustes de UI
  useEffect(() => {
    const handleResize = () => {
      // En desktop, asegurar que el resumen siempre esté visible
      if (window.innerWidth >= 1024) {
        setIsSummaryOpen(false);
      }
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  // Toggle modo pantalla completa
  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen);
    
    if (!isFullscreen) {
      // Si el navegador soporta pantalla completa
      if (document.documentElement.requestFullscreen) {
        document.documentElement.requestFullscreen();
      } else if (document.documentElement.webkitRequestFullscreen) {
        document.documentElement.webkitRequestFullscreen();
      } else if (document.documentElement.msRequestFullscreen) {
        document.documentElement.msRequestFullscreen();
      }
    } else {
      // Salir de pantalla completa
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      }
    }
  };
  
  // Renderizar el componente actual
  const renderCurrentStep = () => {
    if (loading) {
      return (
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
        </div>
      );
    }
    
    if (error) {
      return (
        <div className="bg-red-50 p-4 rounded-lg border border-red-200">
          <div className="flex items-start gap-3">
            <FiAlertTriangle className="text-red-500 w-6 h-6 flex-shrink-0" />
            <div>
              <h3 className="font-medium text-red-800">Error al cargar datos</h3>
              <p className="text-red-700 mt-1">
                {typeof error === 'string' ? error : 'Error desconocido al cargar los datos. Por favor intenta nuevamente.'}
              </p>
              <button
                onClick={() => window.location.reload()}
                className="mt-3 bg-red-100 text-red-700 px-4 py-2 rounded-md font-medium hover:bg-red-200"
              >
                Recargar página
              </button>
            </div>
          </div>
        </div>
      );
    }
    
    const CurrentStepComponent = currentStep.component;
    
    return (
      <CurrentStepComponent
        packages={packages || []}
        tematicas={tematicas || []}
        mamparas={mamparas || []}
        foodOptions={foodOptions || []}
        extras={extras || []}
        unavailableDates={unavailableDates || []}
        existingReservations={existingReservations || []}
        nextStep={nextStep}
        setIsTuesdayModalOpen={(open) => {
          setModalType('tuesday');
          setIsModalOpen(open);
        }}
        goToStep={goToStep}
        methods={methods}
      />
    );
  };
  
  // Renderizar el progreso en formato de barra para móviles
  const renderMobileProgress = () => {
    const progress = ((currentStepIndex + 1) / STEPS.length) * 100;
    
    return (
      <div className="mb-3">
        <div className="flex justify-between text-xs text-gray-600 mb-1">
          <span>Paso {currentStepIndex + 1} de {STEPS.length}</span>
          <span>{Math.round(progress)}% completado</span>
        </div>
        <div className="h-1.5 bg-gray-200 rounded-full overflow-hidden">
          <div 
            className="h-full bg-gradient-to-r from-indigo-500 to-indigo-600 rounded-full"
            style={{ width: `${progress}%` }}
          ></div>
        </div>
      </div>
    );
  };
  
  // Manejar los controles de navegación
  const renderControls = () => {
    const isLastStep = currentStepIndex === STEPS.length - 1;
    const isFirstStep = currentStepIndex === 0;
    
    return (
      <div className="flex justify-between mt-8 pt-4 border-t border-gray-200">
        <button
          type="button"
          onClick={prevStep}
          disabled={isFirstStep}
          className={`flex items-center gap-2 px-5 py-2.5 rounded-lg transition-all duration-200 ${
            isFirstStep
              ? 'text-gray-400 cursor-not-allowed'
              : 'text-gray-700 hover:bg-gray-100'
          }`}
        >
          <FiChevronLeft className="w-5 h-5" />
          <span className="hidden sm:inline dark:text-white">Anterior</span>
        </button>
        
        <div className="flex gap-3">
          <button
            type="button"
            onClick={() => setIsExitWarningOpen(true)}
            className="text-gray-500 hover:text-gray-700 px-4 py-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <span className="hidden sm:inline dark:text-white">Cancelar</span>
            <FiX className="w-5 h-5 inline sm:hidden" />
          </button>
          
          <button
            type="button"
            onClick={nextStep}
            disabled={!isCurrentStepValid() || isSubmitting}
            className={`flex items-center gap-2 px-6 py-2.5 rounded-lg font-medium transition-all duration-200 ${
              !isCurrentStepValid() || isSubmitting
                ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                : isLastStep
                  ? 'bg-gradient-to-r from-green-500 to-green-600 text-white hover:shadow-lg hover:from-green-600 hover:to-green-700'
                  : 'bg-gradient-to-r from-indigo-500 to-indigo-600 text-white hover:shadow-lg hover:from-indigo-600 hover:to-indigo-700'
            }`}
          >
            {isSubmitting ? (
              <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
            ) : isLastStep ? (
              <FiCheck className="w-5 h-5" />
            ) : (
              <FiChevronRight className="w-5 h-5" />
            )}
            <span className="hidden sm:inline dark:text-white">{isLastStep ? 'Confirmar y Pagar' : 'Siguiente'}</span>
          </button>
        </div>
      </div>
    );
  };

  return (
    <FormProvider {...methods}>
      <div className={`bg-gradient-to-b from-indigo-50 to-gray-50 dark:from-gray-900 dark:to-black min-h-screen transition-all duration-300 ${isFullscreen ? 'fixed inset-0 z-50' : ''}`}>
        <div className="container mx-auto px-0 sm:px-4 max-w-7xl">
          {/* Header con título y controles */}
          <div className="bg-white dark:bg-gray-800 shadow-sm p-4 md:rounded-lg md:mt-4 sticky top-0 z-30 border-b md:border border-gray-200 dark:border-gray-700">
            <div className="flex justify-between items-center">
              <h1 className="text-xl font-bold text-gray-900 dark:text-white">Reserva tu Evento</h1>
              
              <div className="flex items-center gap-2">
                {/* Toggle del resumen en móvil */}
                <button
                  type="button"
                  onClick={() => setIsSummaryOpen(!isSummaryOpen)}
                  className="p-2 text-gray-700 dark:text-gray-300 hover:text-indigo-700 dark:hover:text-indigo-400 rounded-full hover:bg-indigo-100 dark:hover:bg-indigo-900 transition-colors lg:hidden"
                  aria-label={isSummaryOpen ? "Ocultar resumen" : "Mostrar resumen"}
                >
                  <FiMenu className="w-5 h-5" />
                </button>
                
                {/* Botón de pantalla completa */}
                <button
                  type="button"
                  onClick={toggleFullscreen}
                  className="p-2 text-gray-700 dark:text-gray-300 hover:text-indigo-700 dark:hover:text-indigo-400 rounded-full hover:bg-indigo-100 dark:hover:bg-indigo-900 transition-colors hidden sm:flex"
                  aria-label={isFullscreen ? "Salir de pantalla completa" : "Pantalla completa"}
                >
                  {isFullscreen ? (
                    <FiMinimize className="w-5 h-5" />
                  ) : (
                    <FiMaximize className="w-5 h-5" />
                  )}
                </button>
              </div>
            </div>
          </div>

          {/* Indicador de pasos para desktop */}
          <div className="hidden md:block my-6 px-4">
            <StepIndicator
              steps={STEPS.map(step => step.label)}
              currentStep={currentStepIndex}
              goToStep={goToStep}
            />
          </div>
          
          {/* Contenedor principal con layout adaptativo */}
          <div className="md:mt-8 md:px-4 relative md:grid md:grid-cols-3 md:gap-8 lg:grid-cols-4">
            {/* Sidebar de resumen (fijo en desktop, desplegable en móvil) */}
            <div className={`
              ${isSummaryOpen 
                ? 'fixed inset-0 z-40 bg-gray-900/50 backdrop-blur-sm' 
                : 'hidden lg:block lg:col-span-1'
              } 
              transition-all duration-300 ease-in-out
            `}>
              <div className={`
                bg-white shadow-lg h-full overflow-y-auto w-full max-w-md ${
                  isSummaryOpen 
                    ? 'animate-slide-in-right ml-auto' 
                    : 'lg:h-auto lg:sticky lg:top-24 lg:rounded-xl lg:shadow-sm'
                }
              `}>
                {/* Cabecera del resumen en móvil */}
                {isSummaryOpen && (
                  <div className="flex justify-between items-center p-4 border-b border-gray-200">
                    <h2 className="font-bold text-gray-900">Resumen de tu Reserva</h2>
                    <button
                      type="button"
                      onClick={() => setIsSummaryOpen(false)}
                      className="p-2 text-gray-700 hover:bg-gray-100 rounded-full"
                    >
                      <FiX className="w-5 h-5" />
                    </button>
                  </div>
                )}
                
                {/* Contenido del resumen */}
                <div className="p-4">
                  <SummarySidebar
                    formValues={formValues}
                    packages={packages}
                    tematicas={tematicas}
                    mamparas={mamparas}
                    foodOptions={foodOptions}
                    extras={extras}
                    currentStepIndex={currentStepIndex}
                    formatters={formatters}
                    calculateTotal={calculateTotal}
                  />
                </div>
              </div>
            </div>
            
            {/* Área principal de contenido */}
            <div id="step-content" className="md:col-span-3 bg-white dark:bg-gray-800 md:rounded-xl shadow-sm">
              {/* Indicador de progreso para móviles */}
              <div className="p-4 md:hidden">
                {renderMobileProgress()}
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                  Paso {currentStepIndex + 1}: <span className="dark:text-white">{STEPS[currentStepIndex].label}</span>
                </h2>
              </div>
              
              {/* Contenido del paso actual */}
              <div className="p-4 md:p-8">
                <AnimatePresence mode="wait">
                  <motion.div
                    key={currentStepIndex}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -10 }}
                    transition={{ duration: 0.3 }}
                    className="min-h-[50vh] sm:min-h-[60vh] flex flex-col"
                  >
                    {renderCurrentStep()}
                  </motion.div>
                </AnimatePresence>
                
                {/* Controles de navegación */}
                {renderControls()}
              </div>
            </div>
          </div>
          
          {/* Información contextual */}
          <div className="p-4 md:mt-8 md:mb-12">
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900 dark:to-indigo-900 p-4 rounded-xl border border-blue-200 dark:border-blue-800 shadow-sm">
              <div className="flex gap-3">
                <FiInfo className="w-6 h-6 text-blue-600 flex-shrink-0" />
                <div>
                  <h4 className="font-medium text-blue-800 dark:text-blue-300">¿Necesitas ayuda?</h4>
                  <p className="text-blue-700 dark:text-blue-400 text-sm mt-1">
                    Puedes <motion.button
                      onClick={() => {
                        window.open("https://wa.me/523332300243?text=Hola%2C%20necesito%20ayuda%20con%20mi%20reservaci%C3%B3n%20en%20Tramboory.", '_blank', 'noopener,noreferrer');
                      }}
                      className="text-blue-800 dark:text-blue-300 font-medium hover:text-green-600 dark:hover:text-green-400 transition-colors duration-300 inline cursor-pointer"
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      contactarnos por WhatsApp
                    </motion.button> para asistencia personal o navegar entre los pasos usando los botones de navegación.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Botón flotante de resumen en dispositivos móviles */}
      <button
        type="button"
        onClick={() => setIsSummaryOpen(true)}
        className={`fixed bottom-4 right-4 z-20 flex items-center gap-2 px-4 py-3 rounded-full shadow-lg bg-indigo-600 dark:bg-indigo-700 text-white lg:hidden ${isSummaryOpen ? 'hidden' : 'flex animate-bounce-subtle'}`}
      >
        <FiShoppingCart className="w-5 h-5" />
        <span className="font-medium dark:text-white">Ver resumen (<span className="dark:text-white">{formatters.formatCurrency(calculateTotal())}</span>)</span>
      </button>
      
      {/* Modales */}
      {isModalOpen && modalType === 'tuesday' && (
        <TuesdayModal
          isOpen={isModalOpen && modalType === 'tuesday'}
          onClose={() => {
            setIsModalOpen(false);
            setModalType(null);
          }}
          onConfirm={handleTuesdayConfirm}
        />
      )}
      
      {isModalOpen && modalType === 'payment' && (
        <PaymentModal
          total={calculateTotal()}
          onClose={() => {
            setIsModalOpen(false);
            setModalType(null);
          }}
          onSelectPaymentMethod={handleSelectPaymentMethod}
          loading={isSubmitting}
        />
      )}
      
      {isModalOpen && modalType === 'confirmation' && (
        <ConfirmationModal
          isOpen={isModalOpen && modalType === 'confirmation'}
          onClose={handleConfirmation}
        />
      )}
      
      {/* Modal de advertencia de salida */}
      {isExitWarningOpen && (
        <div className="fixed inset-0 bg-gray-900/70 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-2xl p-6 max-w-md w-full mx-4 shadow-2xl animate-zoom-in">
            <div className="flex items-center gap-3 mb-4">
              <div className="bg-amber-100 p-2 rounded-full">
                <FiAlertTriangle className="w-6 h-6 text-amber-600" />
              </div>
              <h3 className="text-lg font-bold text-gray-900 dark:text-white">¿Seguro que deseas salir?</h3>
            </div>
            <p className="text-gray-600 dark:text-gray-300 mb-6">
              Si sales ahora, perderás toda la información que has ingresado.
            </p>
            <div className="flex flex-col sm:flex-row sm:justify-end gap-3">
              <button
                onClick={() => setIsExitWarningOpen(false)}
                className="px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors sm:order-1"
              >
                Cancelar
              </button>
              <button
                onClick={() => navigate('/')}
                className="px-4 py-2 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-lg hover:from-red-600 hover:to-red-700 transition-colors sm:order-2"
              >
                Salir sin guardar
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Error API */}
      {apiError && (
        <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-red-50 dark:bg-red-900 border border-red-300 dark:border-red-700 p-4 rounded-xl shadow-lg max-w-sm w-full animate-slide-up">
          <div className="flex items-start gap-3">
            <FiAlertTriangle className="text-red-500 w-6 h-6 flex-shrink-0" />
            <div className="flex-1">
              <h3 className="font-medium text-red-800 dark:text-red-300">Error</h3>
              <p className="text-red-700 dark:text-red-400 text-sm mt-1">{apiError}</p>
            </div>
            <button
              onClick={() => setApiError(null)}
              className="text-gray-500 hover:text-gray-700"
            >
              <FiX className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}
      
      <style jsx="true">{`
        @keyframes slide-in-right {
          from { transform: translateX(100%); }
          to { transform: translateX(0); }
        }
        
        @keyframes slide-up {
          from { transform: translate(-50%, 100%); opacity: 0; }
          to { transform: translate(-50%, 0); opacity: 1; }
        }
        
        @keyframes zoom-in {
          from { transform: scale(0.9); opacity: 0; }
          to { transform: scale(1); opacity: 1; }
        }
        
        @keyframes bounce-subtle {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-5px); }
        }
        
        .animate-slide-in-right {
          animation: slide-in-right 0.3s ease-out forwards;
        }
        
        .animate-slide-up {
          animation: slide-up 0.3s ease-out forwards;
        }
        
        .animate-zoom-in {
          animation: zoom-in 0.3s ease-out forwards;
        }
        
        .animate-bounce-subtle {
          animation: bounce-subtle 2s infinite;
        }
      `}</style>
    </FormProvider>
  );
};

export default StepperReservation;\n\n
=== ./reservas/pages/customer/StepperReservation.jsx.new ===
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm, FormProvider } from 'react-hook-form';
import { AnimatePresence, motion } from 'framer-motion';
import { 
  FiArrowLeft, 
  FiArrowRight, 
  FiCheck, 
  FiX, 
  FiAlertTriangle, 
  FiInfo, 
  FiShoppingCart, 
  FiMenu,
  FiChevronLeft,
  FiChevronRight,
  FiMaximize,
  FiMinimize
} from 'react-icons/fi';

// Importaciones organizadas por dominio
// Pasos del formulario
import STEPS, { isStepValid, areAllRequiredStepsValid } from './reservationsteps';

// Componentes auxiliares
import { 
  StepIndicator, 
  SummarySidebar, 
  calculateProgress, 
  isStepNavigable 
} from './reservationcomponents';

// Modales
import TuesdayModal from './TuesdayModal';
import PaymentModal from './PaymentModal';
import ConfirmationModal from './ConfirmationModal';

// Servicios y utilidades
import { useReservationData } from '../../../hooks/useReservationData';
import { formatters } from '../../../utils/formatters';

// Estilos organizados
import styles, { cn, cond } from './styles';
const StepperReservation = () => {
  const navigate = useNavigate();
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalType, setModalType] = useState(null); // 'tuesday', 'payment', 'confirmation'
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [apiError, setApiError] = useState(null);
  const [isExitWarningOpen, setIsExitWarningOpen] = useState(false);
  const [isSummaryOpen, setIsSummaryOpen] = useState(false); // Para toggle del resumen en móvil
  const [isFullscreen, setIsFullscreen] = useState(false); // Para modo pantalla completa

  // Obtener datos para el formulario de reserva
  const { 
    packages, 
    tematicas, 
    mamparas, 
    foodOptions,
    extras,
    loading, 
    error, 
    unavailableDates,
    existingReservations,
    createReservation,
  } = useReservationData();
  
  // Configurar el formulario con react-hook-form
  const methods = useForm({
    defaultValues: {
      id_paquete: null,
      fecha_reserva: null,
      hora_inicio: null,
      id_tematica: null,
      id_mampara: null,
      id_opcion_alimento: null,
      extras: [],
      nombre_festejado: '',
      edad_festejado: '',
      sexo_festejado: '',
      color_favorito: '',
      detalles_especiales: '',
      tuesdayFee: 0,
      packagePrice: 0
    }
  });
  
  const { watch, setValue, handleSubmit, formState } = methods;
  
  // Valores actuales del formulario
  const formValues = watch();\n\n
=== ./reservas/pages/customer/SummaryItem.jsx ===
// SummaryItem.js
import React from 'react';

const SummaryItem = ({ icon, label, value }) => {
  if (!value) return null;

  return (
    <div className="flex items-center space-x-3">
      <div className="text-indigo-500">{icon}</div>
      <div>
        <p className="text-sm font-medium text-gray-500">{label}</p>
        <p className="text-lg font-semibold text-gray-900">
          {value && typeof value === 'object' && value.label
            ? value.label
            : value || 'No seleccionado'}
        </p>
      </div>
    </div>
  );
};

export default SummaryItem;
\n\n
=== ./reservas/pages/customer/TuesdayModal.jsx ===
import { motion } from 'framer-motion';
import { FiAlertCircle } from 'react-icons/fi';

const TuesdayModal = ({ onClose, onConfirm }) => {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.9 }}
        className="bg-white rounded-lg shadow-xl w-full max-w-md p-6"
      >
        <div className="flex items-center mb-4">
          <FiAlertCircle className="text-yellow-500 text-2xl mr-2" />
          <h2 className="text-xl font-semibold">Reserva en Martes</h2>
        </div>
        <p className="mb-4">
          Has seleccionado un martes para tu reserva. Se aplicará una tarifa adicional de 1500 pesos mexicanos. ¿Deseas continuar?
        </p>
        <div className="flex justify-end">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md mr-2"
          >
            Cancelar
          </button>
          <button
            onClick={onConfirm}
            className="px-4 py-2 bg-indigo-600 text-white rounded-md"
          >
            Continuar
          </button>
        </div>
      </motion.div>
    </div>
  );
};

export default TuesdayModal;\n\n
=== ./reservas/pages/customer/index.jsx ===
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { motion } from 'framer-motion';
import axiosInstance from '@shared/utils/axiosConfig';
import { FiArrowLeft, FiCalendar, FiPackage, FiImage, FiClock, FiUsers } from 'react-icons/fi';
import ParticlesBackground from '@domains/public/components/decorative/ParticlesBackground';
import AnimatedBalloons from '@domains/public/components/decorative/AnimatedBalloons';

// Componente principal de flujo paso a paso
import StepperReservation from './StepperReservation';

// Modales
import ContractModal from './ContractModal';
import PaymentModal from './PaymentModalCustomer';
import TuesdayModal from './TuesdayModal';
import ConfirmationModal from './ConfirmationModal';
import QuotationConfirmationModal from './QuotationConfirmationModal';

// Stores
import usePreReservasStore from '@domains/reservas/services/preReservasStore';
import useCotizacionesStore from '@domains/cotizaciones/services/cotizacionesStore';

// Constantes para slots de tiempo
const TIME_SLOTS = {
  MORNING: {
    label: 'Mañana (11:00 - 16:00)',
    value: 'mañana',
    start: '11:00:00',
    end: '16:00:00'
  },
  AFTERNOON: {
    label: 'Tarde (17:00 - 22:00)',
    value: 'tarde',
    start: '17:00:00',
    end: '22:00:00'
  }
};

// Función para verificar si una reserva está activa
const isActiveReservation = (reserva) => {
  return reserva.activo &&
    (reserva.estado === 'pendiente' || reserva.estado === 'confirmada');
};

// Tiempo máximo para completar la pre-reserva (en minutos)
const PRE_RESERVA_TIMEOUT = 30;

// Componente de tarjeta de información
const InfoCard = ({ icon: Icon, title, description }) => (
  <motion.div 
    whileHover={{ scale: 1.05 }}
    className="bg-white/85 dark:bg-gray-800/85 backdrop-blur-sm rounded-xl shadow-lg p-6 flex flex-col items-center text-center transition-all duration-300"
  >
    <div className="bg-indigo-100 dark:bg-indigo-900/50 rounded-full p-3 mb-4">
      <Icon className="text-indigo-600 dark:text-indigo-400 w-6 h-6" />
    </div>
    <h3 className="text-lg font-bold text-gray-800 dark:text-white mb-2">{title}</h3>
    <p className="text-gray-600 dark:text-gray-300 text-sm">{description}</p>
  </motion.div>
);

const ReservationPage = () => {
  const navigate = useNavigate();
  
  // Estados para datos de API
  const [packages, setPackages] = useState([]);
  const [tematicas, setTematicas] = useState([]);
  const [extrasData, setExtrasData] = useState([]);
  const [mamparas, setMamparas] = useState([]);
  const [foodOptions, setFoodOptions] = useState([]);
  const [userData, setUserData] = useState(null);
  const [unavailableDates, setUnavailableDates] = useState([]);
  const [existingReservations, setExistingReservations] = useState([]);
  const [userReservations, setUserReservations] = useState([]);
  
  // Estados para modales
  const [isContractModalOpen, setIsContractModalOpen] = useState(false);
  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);
  const [isTuesdayModalOpen, setIsTuesdayModalOpen] = useState(false);
  const [isConfirmationModalOpen, setIsConfirmationModalOpen] = useState(false);
  const [isQuotationModalOpen, setIsQuotationModalOpen] = useState(false);
  
  // Estados para flujo de reserva
  const [reservationData, setReservationData] = useState(null);
  const [hasReservations, setHasReservations] = useState(false);
  const [contractAccepted, setContractAccepted] = useState(false);
  const [loading, setLoading] = useState(true);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [isCotizacion, setIsCotizacion] = useState(true); // Por defecto, crear cotización

  // Obtener cabecera de autenticación
  const getAuthHeader = () => {
    const token = localStorage.getItem('token');
    return { headers: { Authorization: `Bearer ${token}` } };
  };

  // Efecto para simular la carga progresiva
  useEffect(() => {
    const interval = setInterval(() => {
      setLoadingProgress((prev) => {
        const newProgress = prev + 5;
        if (newProgress >= 100) {
          clearInterval(interval);
          setTimeout(() => setLoading(false), 300);
          return 100;
        }
        return newProgress;
      });
    }, 100);

    return () => clearInterval(interval);
  }, []);

  // Efecto para cargar datos al iniciar
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      toast.error('No se ha iniciado sesión. Redirigiendo al inicio de sesión...', {
        position: "top-right",
        autoClose: 2000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true
      });
      setTimeout(() => navigate('/signin'), 2000);
      return;
    }

    const loadAllData = async () => {
      try {
        // Cargar datos en paralelo para optimizar
        const [
          userResponse,
          packagesResponse,
          tematicasResponse,
          foodOptionsResponse,
          mamparasResponse,
          extrasResponse,
          reservationsResponse
        ] = await Promise.all([
          axiosInstance.get('/usuarios/me', getAuthHeader()),
          axiosInstance.get('/paquetes', getAuthHeader()),
          axiosInstance.get('/tematicas', getAuthHeader()),
          axiosInstance.get('/opciones-alimentos', getAuthHeader()),
          axiosInstance.get('/mamparas', getAuthHeader()),
          axiosInstance.get('/extras', getAuthHeader()),
          axiosInstance.get('/reservas', getAuthHeader())
        ]);

        // Inicializar datos
        setUserData(userResponse.data);
        setPackages(packagesResponse.data);
        setTematicas(tematicasResponse.data);
        setFoodOptions(foodOptionsResponse.data);
        setMamparas(mamparasResponse.data);
        setExtrasData(extrasResponse.data);

        // Procesar reservas
        const allReservations = reservationsResponse.data;
        const userReservs = await axiosInstance.get('/reservas/user', getAuthHeader());
        setUserReservations(userReservs.data);
        setHasReservations(userReservs.data.length > 0);

        // Procesar fechas no disponibles
        const activeReservations = allReservations.filter(isActiveReservation);
        setExistingReservations(activeReservations);

        const reservationsByDate = activeReservations.reduce((acc, reserva) => {
          const dateStr = reserva.fecha_reserva.split('T')[0];
          if (!acc[dateStr]) {
            acc[dateStr] = {
              morning: false,
              afternoon: false
            };
          }

          if (reserva.hora_inicio === TIME_SLOTS.MORNING.start) {
            acc[dateStr].morning = true;
          }
          if (reserva.hora_inicio === TIME_SLOTS.AFTERNOON.start) {
            acc[dateStr].afternoon = true;
          }

          return acc;
        }, {});

        const fullyBookedDates = Object.entries(reservationsByDate)
          .filter(([_, slots]) => slots.morning && slots.afternoon)
          .map(([dateStr]) => new Date(dateStr));

        setUnavailableDates(fullyBookedDates);
      } catch (error) {
        console.error('Error al cargar los datos iniciales:', error);
        toast.error('Error al cargar los datos. Por favor, recarga la página.');
        if (error.response?.status === 401) {
          navigate('/signin');
        }
      }
    };

    loadAllData();
  }, [navigate]);

  // Calcular precio del paquete según día de la semana
  const calculatePackagePrice = (selectedPackage, fecha) => {
    if (!selectedPackage || !fecha) return 0;

    const reservationDate = new Date(fecha);
    const dayOfWeek = reservationDate.getDay();

    if (dayOfWeek >= 1 && dayOfWeek <= 4) {
      return parseFloat(selectedPackage.precio_lunes_jueves) || 0;
    } else {
      return parseFloat(selectedPackage.precio_viernes_domingo) || 0;
    }
  };

  // Obtener las funciones y estados de los stores
  const {
    iniciarProcesoPago,
    confirmarPago,
    loading: preReservaLoading,
    error: preReservaError,
    pagoEnProceso,
    preReserva,
    limpiarPreReserva
  } = usePreReservasStore();
  
  const {
    crearCotizacion,
    loading: cotizacionLoading,
    error: cotizacionError,
    cotizacionActual,
    limpiarCotizacionActual
  } = useCotizacionesStore();

  // Manejar envío de formulario (puede ser cotización o reserva)
  const handleReservationSubmit = async (data) => {
    try {
      // Validar fecha y hora
      if (!(data.fecha_reserva instanceof Date) || isNaN(data.fecha_reserva.getTime())) {
        toast.error('La fecha de reserva es inválida');
        return;
      }

      if (!data.hora_inicio) {
        toast.error('El horario es inválido');
        return;
      }

      // Transformar hora al formato del backend
      const timeSlotValue = typeof data.hora_inicio === 'object' ?
        data.hora_inicio.value : data.hora_inicio;
      
      const timeSlot = timeSlotValue === 'mañana' ?
        TIME_SLOTS.MORNING : TIME_SLOTS.AFTERNOON;

      // Crear fecha sin hora para backend
      const fecha = new Date(data.fecha_reserva.getTime());
      fecha.setHours(0, 0, 0, 0);

      // Obtener elementos seleccionados
      const selectedPackage = packages.find(pkg => pkg.id === data.id_paquete);
      const selectedFoodOption = foodOptions.find(option => option.id === data.id_opcion_alimento);
      const selectedTematica = tematicas.find(t => t.id === data.id_tematica);
      const selectedMampara = mamparas.find(m => m.id === data.id_mampara);

      // Procesar extras seleccionados
      const selectedExtras = (data.extras || []).map(extra => {
        const extraInfo = extrasData.find(e => e.id === extra.id);
        return {
          ...extra,
          nombre: extraInfo?.nombre,
          precio: extraInfo?.precio,
          descripcion: extraInfo?.descripcion
        };
      });

      // Calcular precio total
      let packagePrice = calculatePackagePrice(selectedPackage, fecha);
      let total = packagePrice;

      if (selectedFoodOption) {
        total += parseFloat(selectedFoodOption.precio_extra) || 0;
      }

      total += parseFloat(data.tuesdayFee) || 0;

      if (selectedMampara) {
        total += parseFloat(selectedMampara.precio) || 0;
      }

      if (selectedTematica) {
        total += parseFloat(selectedTematica.precio) || 0;
      }

      selectedExtras.forEach((extra) => {
        if (extra.precio && extra.cantidad) {
          total += (parseFloat(extra.precio) || 0) * (parseInt(extra.cantidad) || 1);
        }
      });

      const formattedTotal = total.toFixed(2);

      // Crear objeto de datos para cotización o reserva
      const formData = {
        ...data,
        id_usuario: userData?.id,
        packagePrice: packagePrice,
        total: parseFloat(formattedTotal),
        extras: selectedExtras,
        paquete_nombre: selectedPackage?.nombre,
        opcion_alimento_nombre: selectedFoodOption?.nombre,
        tematica_nombre: selectedTematica?.nombre,
        mampara_nombre: selectedMampara?.nombre,
        fecha_reserva: fecha.toISOString().split('T')[0],
        hora_inicio: timeSlot.start,
        hora_fin: timeSlot.end,
        martes_fee: data.tuesdayFee || 0,
      };

      setReservationData(formData);
      
      // Mostrar el modal correspondiente según el flujo seleccionado
      if (isCotizacion) {
        setIsQuotationModalOpen(true);
      } else {
        setIsConfirmationModalOpen(true);
      }
    } catch (error) {
      console.error('Error al procesar la reserva:', error);
      toast.error('Ocurrió un error al procesar la reserva. Por favor, intenta nuevamente.');
    }
  };

  // Iniciar el proceso de pago para reserva directa
  const iniciarPago = async () => {
    try {
      setIsConfirmationModalOpen(false);
      setIsPaymentModalOpen(true);
    } catch (error) {
      console.error('Error al iniciar el proceso de pago:', error);
      toast.error('Error al iniciar el proceso de pago. Por favor, intenta nuevamente.');
    }
  };
  
  // Crear cotización
  const iniciarCotizacion = async () => {
    try {
      setIsQuotationModalOpen(false);
      
      // Crear cotización en el backend
      const resultado = await crearCotizacion(reservationData);
      
      // Mostrar mensaje de éxito
      toast.success('¡Cotización creada con éxito! Puedes revisarla en tu perfil.');
      
      // Navegar a la página de cotizaciones
      navigate('/customer/cotizaciones');
    } catch (error) {
      console.error('Error al crear cotización:', error);
      toast.error('Error al crear la cotización. Por favor, intenta nuevamente.');
    }
  };

  // Función para manejar la selección del método de pago
  const handleSelectPaymentMethod = async (metodoPago) => {
    try {
      // Iniciar proceso de pago con pre-reserva
      await iniciarProcesoPago(reservationData, metodoPago);
      
      // Cerrar modal de pago y mostrar modal de confirmación
      setIsPaymentModalOpen(false);
      setIsConfirmationModalOpen(true);
    } catch (error) {
      console.error('Error al iniciar proceso de pago:', error);
      // El error se maneja en el store y se muestra en el modal
    }
  };

  // Manejar confirmación de pago
  const handlePaymentConfirm = async () => {
    try {
      const result = await confirmarPago();
      toast.success('¡Reserva confirmada con éxito!');
      
      // Limpiar datos de pre-reserva
      limpiarPreReserva();
      
      // Navegar a la página de estado de reserva
      navigate(`/customer/reservationstatus/${result.reserva.id}`);
    } catch (error) {
      console.error('Error al confirmar pago:', error);
      // El error se maneja en el store y se muestra en el modal
    }
  };

  // Manejar aceptación de contrato
  const handleContractAccept = () => {
    setContractAccepted(true);
    setIsContractModalOpen(false);
    toast.success('Contrato aceptado exitosamente');
    setIsPaymentModalOpen(true);
  };

  // Renderizar pantalla de carga
  if (loading) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-indigo-100 to-purple-100 dark:from-gray-900 dark:to-indigo-950">
        <div className="w-64 h-64 relative">
          <div className="w-full h-full rounded-full border-8 border-indigo-200 dark:border-indigo-900"></div>
          <div 
            className="absolute top-0 left-0 w-full h-full rounded-full border-t-8 border-l-8 border-indigo-600 dark:border-indigo-400"
            style={{ 
              transform: 'rotate(0deg)',
              animation: 'spin 1.5s linear infinite'
            }}
          ></div>
          <div className="absolute inset-0 flex items-center justify-center text-2xl font-bold text-indigo-700 dark:text-indigo-300">
            {loadingProgress}%
          </div>
        </div>
        <h2 className="mt-8 text-xl font-semibold text-indigo-800 dark:text-indigo-300">Preparando tu experiencia mágica...</h2>
        <style jsx>{`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}</style>
      </div>
    );
  }

  return (
    <div className="relative min-h-screen bg-gradient-to-br from-indigo-50 to-purple-100 dark:from-gray-900 dark:to-indigo-950 overflow-hidden">
      {/* Decoración de fondo */}
      <div className="absolute inset-0 z-0 opacity-40">
        <ParticlesBackground color="#4f46e5" />
      </div>
      
      <div className="absolute top-0 right-0 -z-10 opacity-20">
        <AnimatedBalloons count={15} />
      </div>
      
      {/* Decoración con imágenes */}
      <div className="absolute top-10 left-10 -rotate-6 w-32 h-32 opacity-20">
        <img src="/client/src/img/balloons.png" alt="" className="w-full h-full object-contain" />
      </div>
      
      <div className="absolute bottom-10 right-10 rotate-12 w-32 h-32 opacity-20">
        <img src="/client/src/img/confetti.png" alt="" className="w-full h-full object-contain" />
      </div>
      
      {/* Contenedor principal */}
      <div className="relative z-10 py-12 px-4 sm:px-6">
        {/* Notificaciones Toast */}
        <ToastContainer
          position="top-right"
          autoClose={5000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="light"
          limit={3}
        />
        
        <div className="max-w-7xl mx-auto">
          {/* Cabecera */}
          <div className="mb-12 flex flex-col items-center">
            <button
              onClick={() => navigate('/')}
              className="self-start mb-6 flex items-center gap-2 text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-300 transition-colors"
            >
              <FiArrowLeft className="w-5 h-5" />
              <span>Regresar al Inicio</span>
            </button>
            
            <h1 className="text-4xl md:text-5xl font-bold text-center text-indigo-800 dark:text-indigo-300 mb-4">
              <span className="bg-clip-text text-transparent bg-gradient-to-r from-indigo-600 to-purple-600 dark:from-indigo-400 dark:to-purple-400">
                {isCotizacion ? 'Crea tu Cotización' : 'Crea tu Reserva Mágica'}
              </span>
            </h1>
            
            <p className="text-center text-gray-600 dark:text-gray-300 max-w-2xl">
              {isCotizacion
                ? 'Personaliza tu evento y obtén una cotización sin compromiso'
                : 'Sigue los pasos para personalizar tu evento y crear una experiencia inolvidable'}
            </p>
            
            <div className="mt-6 flex justify-center">
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-2 inline-flex">
                <button
                  onClick={() => setIsCotizacion(true)}
                  className={`px-4 py-2 rounded-md transition-colors ${
                    isCotizacion
                      ? 'bg-indigo-600 text-white'
                      : 'bg-transparent text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                  }`}
                >
                  Cotización
                </button>
                <button
                  onClick={() => setIsCotizacion(false)}
                  className={`px-4 py-2 rounded-md transition-colors ${
                    !isCotizacion
                      ? 'bg-indigo-600 text-white'
                      : 'bg-transparent text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                  }`}
                >
                  Reserva Directa
                </button>
              </div>
            </div>
            
            {hasReservations && (
              <button
                onClick={() => navigate('/customer/reservationstatus')}
                className="mt-6 bg-indigo-100 dark:bg-indigo-900 hover:bg-indigo-200 dark:hover:bg-indigo-800 text-indigo-700 dark:text-indigo-300 font-medium py-2 px-4 rounded-lg transition-colors"
              >
                Ver mis reservas actuales
              </button>
            )}
          </div>
          
          {/* Información destacada */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12">
            <InfoCard
              icon={FiPackage}
              title="Personalización Total"
              description="Elige el paquete perfecto para tu evento y personalízalo con extras únicos"
            />
            <InfoCard
              icon={FiCalendar}
              title="Fecha Flexible"
              description="Selecciona la fecha ideal para tu celebración con nuestro calendario interactivo"
            />
            <InfoCard
              icon={FiImage}
              title="Temáticas Únicas"
              description="Explora nuestras temáticas especiales para hacer de tu evento algo inolvidable"
            />
            <InfoCard
              icon={FiUsers}
              title="Atención Personalizada"
              description="Estamos para ayudarte en cada paso del proceso de reservación"
            />
          </div>
          
          {/* StepperReservation componente principal */}
          <StepperReservation
            packages={packages}
            tematicas={tematicas}
            mamparas={mamparas}
            foodOptions={foodOptions}
            extras={extrasData}
            unavailableDates={unavailableDates}
            existingReservations={existingReservations}
            onSubmit={handleReservationSubmit}
            setIsTuesdayModalOpen={setIsTuesdayModalOpen}
          />
        </div>
      </div>
      
      {/* Modales */}
          {/* Modal de cotización */}
          {isQuotationModalOpen && (
            <QuotationConfirmationModal
              reservationData={reservationData}
              packages={packages}
              foodOptions={foodOptions}
              tematicas={tematicas}
              extras={extrasData}
              mamparas={mamparas}
              onCancel={() => setIsQuotationModalOpen(false)}
              onConfirm={iniciarCotizacion}
            />
          )}
          
          {/* Modal de confirmación de pago */}
          {isConfirmationModalOpen && pagoEnProceso ? (
            // Modal de confirmación para pago ya iniciado
            <ConfirmationModal
              onClose={() => setIsConfirmationModalOpen(false)}
              onConfirm={handlePaymentConfirm}
            />
          ) : isConfirmationModalOpen && !pagoEnProceso && (
            // Modal de confirmación de datos antes de pago
            <ConfirmationModal
              reservationData={reservationData}
              packages={packages}
              foodOptions={foodOptions}
              tematicas={tematicas}
              extras={extrasData}
              mamparas={mamparas}
              onCancel={() => setIsConfirmationModalOpen(false)}
              onConfirm={iniciarPago}
            />
          )}

          {isPaymentModalOpen && (
            <PaymentModal
              total={reservationData?.total || 0}
              onClose={() => setIsPaymentModalOpen(false)}
              onSelectPaymentMethod={handleSelectPaymentMethod}
              loading={preReservaLoading}
            />
          )}

          {isContractModalOpen && (
            <ContractModal
              isOpen={isContractModalOpen}
              onClose={() => setIsContractModalOpen(false)}
              onAccept={handleContractAccept}
            />
          )}

          {isTuesdayModalOpen && (
            <TuesdayModal
              onClose={() => setIsTuesdayModalOpen(false)}
              onConfirm={() => setIsTuesdayModalOpen(false)}
            />
          )}

          {/* Mostrar mensajes de error */}
          {preReservaError && (
            <div className="fixed bottom-4 right-4 bg-red-100 dark:bg-red-900 border-l-4 border-red-500 text-red-700 dark:text-red-300 p-4 rounded shadow-lg z-50">
              <p className="font-bold">Error</p>
              <p>{preReservaError}</p>
            </div>
          )}
          
          {cotizacionError && (
            <div className="fixed bottom-4 right-4 bg-red-100 dark:bg-red-900 border-l-4 border-red-500 text-red-700 dark:text-red-300 p-4 rounded shadow-lg z-50">
              <p className="font-bold">Error</p>
              <p>{cotizacionError}</p>
            </div>
          )}
    </div>
  );
};

export default ReservationPage;\n\n
=== ./reservas/pages/customer/reservationcomponents/StepIndicator.jsx ===
import React from 'react';
import { motion } from 'framer-motion';
import { FiCheck } from 'react-icons/fi';

const StepIndicator = ({ steps, currentStep, goToStep }) => {
  // Determinar si un paso está completado, activo o pendiente
  const getStepStatus = (index) => {
    if (index < currentStep) return 'completed';
    if (index === currentStep) return 'active';
    return 'pending';
  };

  // Obtener la clase CSS adecuada según el estado del paso
  const getStepNumberClass = (status) => {
    switch (status) {
      case 'completed':
        return 'bg-gradient-to-r from-indigo-500 to-indigo-600 text-white shadow-md';
      case 'active':
        return 'bg-white text-indigo-600 border-2 border-indigo-600 shadow-md';
      default:
        return 'bg-white text-gray-400 border border-gray-300';
    }
  };

  // Obtener la clase CSS para el conector entre pasos
  const getConnectorClass = (status) => {
    switch (status) {
      case 'completed':
        return 'bg-gradient-to-r from-indigo-400 to-indigo-600';
      case 'active':
        return 'bg-gray-200';
      default:
        return 'bg-gray-200';
    }
  };

  // Obtener la clase CSS para el texto del paso
  const getTextClass = (status) => {
    switch (status) {
      case 'completed':
        return 'text-indigo-600 font-medium';
      case 'active':
        return 'text-gray-900 font-medium';
      default:
        return 'text-gray-400';
    }
  };

  // Animaciones para los elementos
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      className="flex items-center justify-center"
    >
      <div className="w-full max-w-4xl px-4">
        <div className="relative">
          {/* Barra de progreso */}
          <div className="absolute top-5 left-0 right-0 flex">
            {steps.map((_, index) => {
              if (index === steps.length - 1) return null;
              
              const status = getStepStatus(index);
              return (
                <div
                  key={`connector-${index}`}
                  className={`h-1 flex-1 ${getConnectorClass(status)} rounded-full transition-colors duration-300`}
                ></div>
              );
            })}
          </div>

          {/* Pasos */}
          <div className="relative flex justify-between">
            {steps.map((step, index) => {
              const status = getStepStatus(index);
              const isClickable = index < currentStep; // Sólo permitir volver a pasos completados
              
              return (
                <motion.div
                  key={`step-${index}`}
                  variants={itemVariants}
                  className="flex flex-col items-center"
                  style={{ width: `${100 / steps.length}%` }}
                >
                  <motion.button
                    type="button"
                    onClick={() => isClickable && goToStep(index)}
                    disabled={!isClickable}
                    whileHover={isClickable ? { scale: 1.1 } : {}}
                    whileTap={isClickable ? { scale: 0.95 } : {}}
                    className={`relative z-10 flex items-center justify-center w-10 h-10 rounded-full text-sm font-medium transition-all duration-300
                      ${getStepNumberClass(status)}
                      ${isClickable ? 'cursor-pointer hover:shadow-lg' : 'cursor-default'}
                    `}
                    aria-label={`Ir al paso: ${step}`}
                  >
                    {status === 'completed' ? (
                      <motion.div
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        transition={{ type: "spring", stiffness: 400, damping: 10 }}
                      >
                        <FiCheck className="w-5 h-5" />
                      </motion.div>
                    ) : (
                      <motion.span
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 0.2 }}
                      >
                        {index + 1}
                      </motion.span>
                    )}
                  </motion.button>
                  
                  <div className="mt-2 text-center">
                    <motion.span 
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.2 }}
                      className={`text-xs sm:text-sm ${getTextClass(status)} transition-colors duration-300 whitespace-nowrap`}
                    >
                      {step}
                    </motion.span>
                  </div>
                </motion.div>
              );
            })}
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default StepIndicator;\n\n
=== ./reservas/pages/customer/reservationcomponents/SummarySidebar.jsx ===
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  FiPackage,
  FiCalendar,
  FiClock,
  FiImage,
  FiCoffee,
  FiList,
  FiUser,
  FiDollarSign,
  FiShoppingBag,
  FiChevronDown,
  FiChevronUp,
  FiShoppingCart,
  FiAlertTriangle,
  FiTag,
  FiInfo
} from 'react-icons/fi';

const SummarySection = ({ title, children, icon: Icon, visible = true, isExpandable = false }) => {
  const [isExpanded, setIsExpanded] = useState(true);
  
  if (!visible) return null;
  
  return (
    <div className="rounded-xl overflow-hidden mb-3 bg-white shadow-sm border border-gray-100 hover:border-indigo-100 transition-all duration-300">
      <div 
        className={`flex items-center justify-between p-3 ${
          isExpandable ? 'cursor-pointer hover:bg-indigo-50 transition-colors duration-200' : ''
        } ${isExpanded ? 'bg-gradient-to-r from-indigo-50 to-white' : 'bg-white'}`}
        onClick={() => isExpandable && setIsExpanded(!isExpanded)}
      >
        <div className="flex items-center gap-2">
          {Icon && <Icon className="text-indigo-600 w-4 h-4" />}
          <h3 className="font-medium text-gray-800 text-sm">{title}</h3>
        </div>
        
        {isExpandable && (
          <motion.button 
            type="button"
            className="text-gray-500 hover:text-indigo-600 p-1 rounded-full hover:bg-indigo-100 transition-colors duration-200"
            aria-label={isExpanded ? 'Colapsar' : 'Expandir'}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
          >
            {isExpanded ? <FiChevronUp className="w-4 h-4" /> : <FiChevronDown className="w-4 h-4" />}
          </motion.button>
        )}
      </div>
      
      <AnimatePresence>
        {(!isExpandable || isExpanded) && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="overflow-hidden"
          >
            <div className="p-3">
              {children}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

const SummaryItem = ({ label, value, icon: Icon, visible = true, highlight = false }) => {
  if (!visible || !value) return null;
  
  return (
    <motion.div 
      initial={{ opacity: 0, x: -5 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.3 }}
      className={`flex items-start gap-2 py-1.5 ${highlight ? 'text-indigo-700 font-medium' : 'border-b border-gray-100 last:border-0'}`}
    >
      {Icon && (
        <motion.div 
          whileHover={{ scale: 1.1, rotate: 5 }}
          className="mt-0.5 flex-shrink-0"
        >
          <Icon className={`w-4 h-4 ${highlight ? 'text-indigo-600' : 'text-indigo-500'}`} />
        </motion.div>
      )}
      <div className="flex-1 min-w-0">
        <span className={`text-gray-600 text-sm ${highlight ? 'font-medium' : ''}`}>{label}:</span>
        <span className={`ml-1 ${highlight ? 'text-indigo-700 font-medium' : 'text-gray-800'} text-sm truncate block sm:inline`}>
          {value}
        </span>
      </div>
    </motion.div>
  );
};

const PriceTag = ({ label, price, highlight = false }) => {
  return (
    <div className={`flex justify-between items-center ${highlight ? 'pt-2 mt-2 border-t border-dashed border-indigo-200' : ''}`}>
      <span className={`text-sm ${highlight ? 'text-indigo-600 font-medium' : 'text-gray-600'} flex items-center gap-1`}>
        {highlight ? <FiTag className="w-3 h-3" /> : null}
        <span>{label}</span>
      </span>
      <span className={`${highlight ? 'text-indigo-600 font-medium' : 'text-gray-700'} text-sm`}>
        {price}
      </span>
    </div>
  );
};

const SummarySidebar = ({
  formValues,
  packages,
  tematicas,
  mamparas,
  foodOptions,
  extras,
  currentStepIndex,
  formatters,
  calculateTotal
}) => {
  const [selectedPackage, setSelectedPackage] = useState(null);
  const [selectedTematica, setSelectedTematica] = useState(null);
  const [selectedMampara, setSelectedMampara] = useState(null);
  const [selectedFoodOption, setSelectedFoodOption] = useState(null);
  const [selectedExtras, setSelectedExtras] = useState([]);
  const [total, setTotal] = useState(0);
  
  // Actualizar los valores seleccionados cuando cambia el formulario
  useEffect(() => {
    // Buscar el paquete seleccionado
    if (formValues.id_paquete) {
      const pkg = packages.find(p => p.id === formValues.id_paquete);
      setSelectedPackage(pkg);
    } else {
      setSelectedPackage(null);
    }
    
    // Buscar la temática seleccionada
    if (formValues.id_tematica) {
      const tema = tematicas.find(t => t.id === formValues.id_tematica);
      setSelectedTematica(tema);
    } else {
      setSelectedTematica(null);
    }
    
    // Buscar la mampara seleccionada
    if (formValues.id_mampara) {
      const mampara = mamparas.find(m => m.id === formValues.id_mampara);
      setSelectedMampara(mampara);
    } else {
      setSelectedMampara(null);
    }
    
    // Buscar la opción de alimento seleccionada
    if (formValues.id_opcion_alimento) {
      const food = foodOptions.find(f => f.id === formValues.id_opcion_alimento);
      setSelectedFoodOption(food);
    } else {
      setSelectedFoodOption(null);
    }
    
    // Procesar extras seleccionados
    if (formValues.extras && formValues.extras.length) {
      const extrasWithDetails = formValues.extras.map(selectedExtra => {
        const extraInfo = extras.find(e => e.id === selectedExtra.id);
        return {
          ...extraInfo,
          cantidad: selectedExtra.cantidad
        };
      }).filter(Boolean); // Filtrar valores nulos o undefined
      
      setSelectedExtras(extrasWithDetails);
    } else {
      setSelectedExtras([]);
    }
    
    // Calcular el total
    if (typeof calculateTotal === 'function') {
      setTotal(calculateTotal());
    }
  }, [
    formValues, 
    packages, 
    tematicas, 
    mamparas, 
    foodOptions, 
    extras, 
    calculateTotal
  ]);
  
  // Formatear moneda
  const formatCurrency = formatters?.formatCurrency || (amount => 
    new Intl.NumberFormat('es-MX', {
      style: 'currency',
      currency: 'MXN'
    }).format(amount || 0)
  );
  
  // Formatear fecha
  const formatDate = formatters?.formatDate || (date => {
    if (!date || !(date instanceof Date)) return '';
    return new Intl.DateTimeFormat('es-MX', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    }).format(date);
  });
  
  // Obtener el horario formateado
  const getFormattedTimeSlot = () => {
    if (!formValues.hora_inicio) return '';
    
    if (typeof formValues.hora_inicio === 'object') {
      return formValues.hora_inicio.label;
    }
    
    return formValues.hora_inicio === 'mañana' 
      ? 'Mañana (11:00 - 16:00)' 
      : 'Tarde (17:00 - 22:00)';
  };
  
  // Verificar si una sección debe estar visible según el paso actual
  const shouldShowSection = (section) => {
    const sections = [
      'package', // Paso 0
      'datetime', // Paso 1
      'theme', // Paso 2
      'mampara', // Paso 3
      'food', // Paso 4
      'extras', // Paso 5
      'celebrant', // Paso 6
    ];
    
    return currentStepIndex >= sections.indexOf(section);
  };
  
  // Obtener el nombre del paso actual
  const getCurrentStepName = () => {
    const steps = [
      'Selección de Paquete',
      'Selección de Fecha y Hora',
      'Selección de Temática',
      'Selección de Mampara',
      'Opciones de Alimentos',
      'Extras',
      'Información del Festejado',
      'Revisión y Confirmación'
    ];
    
    return steps[currentStepIndex] || '';
  };

  // Animaciones
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: {
        when: "beforeChildren",
        staggerChildren: 0.1
      }
    }
  };
  
  const itemVariants = {
    hidden: { opacity: 0, y: 10 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      className="space-y-4"
    >
      <motion.div 
        variants={itemVariants}
        className="mb-4 pb-3"
      >
        <div className="flex items-center gap-3 mb-3">
          <div className="bg-gradient-to-br from-indigo-500 to-indigo-600 text-white p-2 rounded-full shadow-sm">
            <FiShoppingCart className="w-5 h-5" />
          </div>
          <div>
            <h2 className="text-lg font-bold text-gray-900">Resumen de tu Reserva</h2>
            <p className="text-sm text-gray-600">
              Paso actual: {getCurrentStepName()}
            </p>
          </div>
        </div>
        
        <div className="h-1 bg-gray-100 rounded-full overflow-hidden">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${((currentStepIndex + 1) / 8) * 100}%` }}
            className="h-full bg-gradient-to-r from-indigo-500 to-indigo-600"
            transition={{ duration: 0.5, ease: "easeOut" }}
          />
        </div>
      </motion.div>

      {currentStepIndex >= 0 && (
        <div className="space-y-3">
          {/* Paquete */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title="Paquete" 
              icon={FiPackage}
              visible={shouldShowSection('package')}
            >
              {selectedPackage ? (
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-800">{selectedPackage.nombre}</span>
                    <span className="text-indigo-600 font-medium">
                      {formatCurrency(formValues.packagePrice)}
                    </span>
                  </div>
                  <p className="text-xs text-gray-600 bg-gray-50 p-2 rounded-lg">
                    {selectedPackage.min_invitados} - {selectedPackage.max_invitados} invitados
                  </p>
                </div>
              ) : (
                <div className="text-sm text-gray-500 italic p-2 bg-gray-50 rounded-lg">
                  No seleccionado
                </div>
              )}
            </SummarySection>
          </motion.div>

          {/* Fecha y Hora */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title="Fecha y Hora" 
              icon={FiCalendar}
              visible={shouldShowSection('datetime')}
            >
              <div className="space-y-2">
                <SummaryItem 
                  label="Fecha" 
                  value={formatDate(formValues.fecha_reserva)}
                  icon={FiCalendar}
                  visible={!!formValues.fecha_reserva}
                />
                <SummaryItem 
                  label="Horario" 
                  value={getFormattedTimeSlot()}
                  icon={FiClock}
                  visible={!!formValues.hora_inicio}
                />
                
                {formValues.tuesdayFee > 0 && (
                  <div className="flex justify-between items-center mt-2 pt-2 border-t border-dashed border-amber-200 bg-amber-50 p-2 rounded-lg">
                    <span className="text-amber-600 text-xs flex items-center gap-1">
                      <FiAlertTriangle className="w-3 h-3" />
                      <span>Cargo adicional por martes</span>
                    </span>
                    <span className="text-amber-600 font-medium text-xs">
                      {formatCurrency(formValues.tuesdayFee)}
                    </span>
                  </div>
                )}
              </div>
            </SummarySection>
          </motion.div>

          {/* Temática */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title="Temática" 
              icon={FiImage}
              visible={shouldShowSection('theme')}
            >
              {selectedTematica ? (
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-800">{selectedTematica.nombre}</span>
                    {selectedTematica.precio > 0 && (
                      <span className="text-indigo-600 font-medium">
                        {formatCurrency(selectedTematica.precio)}
                      </span>
                    )}
                  </div>
                  {selectedTematica.descripcion && (
                    <p className="text-xs text-gray-600 line-clamp-2 bg-gray-50 p-2 rounded-lg">
                      {selectedTematica.descripcion}
                    </p>
                  )}
                </div>
              ) : (
                <div className="text-sm text-gray-500 italic p-2 bg-gray-50 rounded-lg">
                  No seleccionada
                </div>
              )}
            </SummarySection>
          </motion.div>

          {/* Mampara */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title="Mampara" 
              icon={FiImage}
              visible={shouldShowSection('mampara')}
            >
              {selectedMampara ? (
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-800">
                      Mampara de {selectedMampara.piezas} piezas
                    </span>
                    <span className="text-indigo-600 font-medium">
                      {formatCurrency(selectedMampara.precio)}
                    </span>
                  </div>
                </div>
              ) : (
                <div className="text-sm text-gray-500 italic p-2 bg-gray-50 rounded-lg">
                  No seleccionada (opcional)
                </div>
              )}
            </SummarySection>
          </motion.div>

          {/* Opción de Alimento */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title="Opción de Alimentos" 
              icon={FiCoffee}
              visible={shouldShowSection('food')}
            >
              {selectedFoodOption ? (
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-800">{selectedFoodOption.nombre}</span>
                    <span className="text-indigo-600 font-medium">
                      {formatCurrency(selectedFoodOption.precio_extra)}
                    </span>
                  </div>
                </div>
              ) : (
                <div className="text-sm text-gray-500 italic p-2 bg-gray-50 rounded-lg">
                  No seleccionada (opcional)
                </div>
              )}
            </SummarySection>
          </motion.div>

          {/* Extras */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title={`Extras${selectedExtras.length > 0 ? ` (${selectedExtras.length})` : ''}`}
              icon={FiList}
              visible={shouldShowSection('extras')}
              isExpandable={selectedExtras.length > 2}
            >
              {selectedExtras.length > 0 ? (
                <div className="space-y-3">
                  {selectedExtras.map((extra, index) => {
                    const cantidad = parseInt(extra.cantidad) || 1;
                    const extraPrice = (parseFloat(extra.precio) || 0) * cantidad;
                    
                    return (
                      <motion.div 
                        key={index} 
                        className="flex justify-between items-center text-sm rounded-lg p-1.5 hover:bg-gray-50 transition-colors"
                        whileHover={{ scale: 1.02 }}
                      >
                        <div className="flex items-center gap-1">
                          <FiShoppingBag className="w-3 h-3 text-indigo-500" />
                          <span className="font-medium text-gray-800">{extra.nombre}</span>
                          {cantidad > 1 && (
                            <span className="text-xs ml-1 bg-indigo-100 text-indigo-700 px-1.5 py-0.5 rounded-full">
                              x{cantidad}
                            </span>
                          )}
                        </div>
                        <span className="text-indigo-600 font-medium">
                          {formatCurrency(extraPrice)}
                        </span>
                      </motion.div>
                    );
                  })}
                </div>
              ) : (
                <div className="text-sm text-gray-500 italic p-2 bg-gray-50 rounded-lg">
                  No seleccionados (opcional)
                </div>
              )}
            </SummarySection>
          </motion.div>

          {/* Información del Festejado */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title="Información del Festejado" 
              icon={FiUser}
              visible={shouldShowSection('celebrant')}
            >
              {formValues.nombre_festejado || formValues.edad_festejado ? (
                <div className="space-y-2">
                  <SummaryItem 
                    label="Nombre" 
                    value={formValues.nombre_festejado}
                    icon={FiUser}
                    visible={!!formValues.nombre_festejado}
                  />
                  <SummaryItem 
                    label="Edad" 
                    value={formValues.edad_festejado}
                    icon={FiCalendar}
                    visible={!!formValues.edad_festejado}
                  />
                  <SummaryItem 
                    label="Sexo" 
                    value={formValues.sexo_festejado === 'femenino' ? 'Niña' : formValues.sexo_festejado === 'masculino' ? 'Niño' : ''}
                    icon={FiUser}
                    visible={!!formValues.sexo_festejado}
                  />
                </div>
              ) : (
                <div className="text-sm text-gray-500 italic p-2 bg-gray-50 rounded-lg">
                  No ingresado
                </div>
              )}
            </SummarySection>
          </motion.div>
        </div>
      )}

      {/* Total */}
      <motion.div 
        variants={itemVariants}
        className="mt-6 pt-4 rounded-xl bg-gradient-to-br from-indigo-50 via-indigo-50 to-white p-4 shadow-sm border border-indigo-100"
      >
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <div className="bg-gradient-to-br from-indigo-500 to-indigo-600 text-white p-1.5 rounded-full shadow-sm">
              <FiShoppingCart className="w-4 h-4" />
            </div>
            <span className="font-bold text-gray-800">Resumen de Costos</span>
          </div>
        </div>
        
        <div className="space-y-2 mb-3">
          {selectedPackage && (
            <PriceTag 
              label="Paquete" 
              price={formatCurrency(formValues.packagePrice)} 
            />
          )}
          
          {selectedTematica && selectedTematica.precio > 0 && (
            <PriceTag 
              label="Temática" 
              price={formatCurrency(selectedTematica.precio)} 
            />
          )}
          
          {selectedMampara && (
            <PriceTag 
              label="Mampara" 
              price={formatCurrency(selectedMampara.precio)} 
            />
          )}
          
          {selectedFoodOption && selectedFoodOption.precio_extra > 0 && (
            <PriceTag 
              label="Opción de alimentos" 
              price={formatCurrency(selectedFoodOption.precio_extra)} 
            />
          )}
          
          {selectedExtras.length > 0 && (
            <PriceTag 
              label={`Extras (${selectedExtras.length})`}
              price={formatCurrency(
                selectedExtras.reduce((sum, extra) => {
                  const cantidad = parseInt(extra.cantidad) || 1;
                  return sum + (parseFloat(extra.precio) || 0) * cantidad;
                }, 0)
              )} 
            />
          )}
          
          {formValues.tuesdayFee > 0 && (
            <PriceTag 
              label="Cargo por martes" 
              price={formatCurrency(formValues.tuesdayFee)}
              highlight={true}
            />
          )}
        </div>
        
        <div className="flex items-center justify-between pt-3 border-t border-indigo-200">
          <span className="font-bold text-gray-800">Total:</span>
          <span className="text-xl font-bold text-indigo-700">
            {formatCurrency(total)}
          </span>
        </div>
        
        <p className="text-xs text-gray-500 mt-2">
          El precio incluye todos los elementos seleccionados.
          {formValues.tuesdayFee > 0 && ' Incluye cargo adicional por martes.'}
        </p>
      </motion.div>

      {/* Información adicional */}
      <motion.div 
        variants={itemVariants}
        className="mt-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-3 border border-blue-100 shadow-sm"
      >
        <div className="flex items-center gap-2">
          <FiInfo className="w-4 h-4 flex-shrink-0 text-blue-600" />
          <p className="text-xs text-blue-700">
            Puedes personalizar tu evento en cualquier momento del proceso de reserva.
          </p>
        </div>
      </motion.div>
    </motion.div>
  );
};

export default SummarySidebar;\n\n
=== ./reservas/pages/customer/reservationcomponents/index.js ===
/**
 * index.js
 * Punto de entrada para los componentes auxiliares de reservación
 * Centraliza las importaciones y exportaciones de componentes auxiliares del stepper
 */

// Importar todos los componentes auxiliares
import StepIndicator from './StepIndicator';
import SummarySidebar from './SummarySidebar';

// Exportar componentes individualmente
export {
  StepIndicator,
  SummarySidebar
};

/**
 * Componentes de modales relacionados con la reservación
 * Estos se importan directamente desde el directorio principal de reservación
 * ya que son componentes más específicos
 */
export const getModals = () => {
  const modalImports = Promise.all([
    import('../TuesdayModal'),
    import('../PaymentModalCustomer'),
    import('../ConfirmationModal'),
    import('../ContractModal'),
    import('../QuotationConfirmationModal')
  ]);
  
  return modalImports.then(([
    TuesdayModal,
    PaymentModal,
    ConfirmationModal,
    ContractModal,
    QuotationConfirmationModal
  ]) => ({
    TuesdayModal: TuesdayModal.default,
    PaymentModal: PaymentModal.default,
    ConfirmationModal: ConfirmationModal.default,
    ContractModal: ContractModal.default,
    QuotationConfirmationModal: QuotationConfirmationModal.default
  }));
};

/**
 * Función para generar un conjunto de elementos para el indicador de pasos
 * @param {Array} steps - Array de objetos de pasos con al menos una propiedad 'label'
 * @param {number} currentStepIndex - Índice del paso actual (base 0)
 * @returns {Array} - Array de elementos de paso formateados para el indicador
 */
export const generateStepItems = (steps, currentStepIndex) => {
  if (!Array.isArray(steps)) return [];
  
  return steps.map((step, index) => ({
    label: step.label || `Paso ${index + 1}`,
    isCompleted: index < currentStepIndex,
    isCurrent: index === currentStepIndex,
    isPending: index > currentStepIndex
  }));
};

/**
 * Función para calcular el progreso total de la reservación
 * @param {number} currentStepIndex - Índice del paso actual (base 0)
 * @param {number} totalSteps - Número total de pasos
 * @returns {number} - Porcentaje de progreso (0-100)
 */
export const calculateProgress = (currentStepIndex, totalSteps) => {
  if (totalSteps <= 0) return 0;
  return Math.round(((currentStepIndex + 1) / totalSteps) * 100);
};

/**
 * Función para determinar si un paso es navegable (puede ser accedido directamente)
 * @param {number} targetStepIndex - Índice del paso objetivo
 * @param {number} currentStepIndex - Índice del paso actual 
 * @param {Array} validSteps - Array de índices de pasos que son válidos para navegar
 * @returns {boolean} - true si el paso puede ser accedido
 */
export const isStepNavigable = (targetStepIndex, currentStepIndex, validSteps = []) => {
  // Siempre se puede navegar hacia atrás
  if (targetStepIndex < currentStepIndex) return true;
  
  // Si es el paso actual, ya estamos ahí
  if (targetStepIndex === currentStepIndex) return true;
  
  // Si el paso objetivo está en la lista de pasos válidos
  if (validSteps.includes(targetStepIndex)) return true;
  
  // Por defecto, no permitir navegación hacia adelante
  return false;
};

/**
 * Función para agrupar elementos de resumen por categoría
 * @param {Object} formValues - Valores del formulario de reservación
 * @param {Object} options - Objetos con opciones disponibles (paquetes, temáticas, etc.)
 * @returns {Object} - Objeto con elementos agrupados por categoría
 */
export const groupSummaryItems = (formValues, options) => {
  const { packages, tematicas, mamparas, foodOptions, extras } = options;
  
  return {
    package: {
      title: 'Paquete',
      item: packages?.find(pkg => pkg.id === formValues.id_paquete),
      price: formValues.packagePrice || 0,
      formatter: 'package'
    },
    datetime: {
      title: 'Fecha y Hora',
      date: formValues.fecha_reserva,
      time: formValues.hora_inicio,
      tuesdayFee: formValues.tuesdayFee || 0,
      formatter: 'datetime'
    },
    theme: {
      title: 'Temática',
      item: tematicas?.find(tema => tema.id === formValues.id_tematica),
      formatter: 'theme'
    },
    mampara: {
      title: 'Mampara',
      item: mamparas?.find(mampara => mampara.id === formValues.id_mampara),
      formatter: 'mampara'
    },
    food: {
      title: 'Alimentos',
      item: foodOptions?.find(food => food.id === formValues.id_opcion_alimento),
      formatter: 'food'
    },
    extras: {
      title: 'Extras',
      items: formValues.extras?.map(extra => {
        const extraInfo = extras?.find(e => e.id === extra.id);
        return {
          ...extraInfo,
          cantidad: extra.cantidad
        };
      }).filter(Boolean) || [],
      formatter: 'extras'
    },
    celebrant: {
      title: 'Festejado',
      nombre: formValues.nombre_festejado,
      edad: formValues.edad_festejado,
      sexo: formValues.sexo_festejado,
      color: formValues.color_favorito,
      detalles: formValues.detalles_especiales,
      formatter: 'celebrant'
    }
  };
};

// Exportar un objeto con todas las utilidades como default
export default {
  StepIndicator,
  SummarySidebar,
  getModals,
  generateStepItems,
  calculateProgress,
  isStepNavigable,
  groupSummaryItems
};\n\n
=== ./reservas/pages/customer/reservationform/CelebrantSection.jsx ===
import React from 'react';
import { Controller } from 'react-hook-form';
import { FiUser, FiAlertCircle } from 'react-icons/fi';
import FormSection from './FormSection';

const CelebrantSection = ({ control, errors }) => {
  return (
    <FormSection title="Información del Festejado" icon={FiUser}>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Nombre del Festejado */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Nombre del Festejado *
          </label>
          <div className="relative">
            <Controller
              name="nombre_festejado"
              control={control}
              defaultValue=""
              rules={{
                required: 'Nombre del festejado es requerido',
                minLength: {
                  value: 3,
                  message: 'El nombre debe tener al menos 3 caracteres',
                },
              }}
              render={({ field }) => (
                <input
                  {...field}
                  type="text"
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="Nombre completo"
                />
              )}
            />
            {errors.nombre_festejado && (
              <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                <FiAlertCircle className="w-4 h-4" />
                {errors.nombre_festejado.message}
              </p>
            )}
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiUser className="h-5 w-5 text-gray-400" />
            </div>
          </div>
        </div>

        {/* Edad del Festejado */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Edad del Festejado *
          </label>
          <div className="relative">
            <Controller
              name="edad_festejado"
              control={control}
              defaultValue=""
              rules={{
                required: 'Edad del festejado es requerida',
                min: {
                  value: 1,
                  message: 'La edad debe ser mayor a 0',
                },
                max: {
                  value: 100,
                  message: 'La edad no puede ser mayor a 100',
                },
              }}
              render={({ field: { onChange, ...field } }) => (
                <input
                  {...field}
                  type="number"
                  onChange={(e) => {
                    const value = parseInt(e.target.value, 10);
                    onChange(isNaN(value) ? '' : value);
                  }}
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="Edad"
                />
              )}
            />
            {errors.edad_festejado && (
              <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                <FiAlertCircle className="w-4 h-4" />
                {errors.edad_festejado.message}
              </p>
            )}
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiUser className="h-5 w-5 text-gray-400" />
            </div>
          </div>
        </div>
      </div>
    </FormSection>
  );
};

export default CelebrantSection;\n\n
=== ./reservas/pages/customer/reservationform/CommentsSection.jsx ===
import React from 'react';
import { Controller } from 'react-hook-form';
import { FiMessageSquare } from 'react-icons/fi';
import FormSection from './FormSection';

const CommentsSection = ({ control }) => {
  return (
    <FormSection title="Comentarios Adicionales" icon={FiMessageSquare}>
      <div>
        <div className="relative">
          <Controller
            name="comentarios"
            control={control}
            defaultValue=""
            render={({ field }) => (
              <textarea
                {...field}
                rows="3"
                className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 resize-y"
                placeholder="¿Tienes algún requerimiento especial o comentario adicional para tu reserva?"
              />
            )}
          />
          <div className="absolute top-3 left-3">
            <FiMessageSquare className="h-5 w-5 text-gray-400" />
          </div>
        </div>
      </div>
    </FormSection>
  );
};

export default CommentsSection;
\n\n
=== ./reservas/pages/customer/reservationform/DateTimeSection.jsx ===
import React, { useState, useEffect, useCallback } from 'react';
import { Controller, useWatch } from 'react-hook-form';
import { FiCalendar, FiClock, FiAlertCircle, FiInfo } from 'react-icons/fi';
import DatePicker, { registerLocale } from 'react-datepicker';
import es from 'date-fns/locale/es';
import Select from 'react-select';
import FormSection from './FormSection';
import { customSelectStyles } from './styles';
import 'react-datepicker/dist/react-datepicker.css';
import { addDays, isBefore, startOfDay } from 'date-fns';

registerLocale('es', es);

const TIME_SLOTS = {
  MORNING: {
    label: 'Mañana (11:00 - 16:00)',
    value: 'mañana',
    hora_inicio: '11:00:00',
    hora_fin: '16:00:00',
    icon: '🌅'
  },
  AFTERNOON: {
    label: 'Tarde (17:00 - 22:00)',
    value: 'tarde',
    hora_inicio: '17:00:00',
    hora_fin: '22:00:00',
    icon: '🌇'
  }
};

const TimeSlotSelect = ({ 
  field, 
  existingReservations,
  selectedDate,
  customStyles 
}) => {
  const getAvailableTimeSlots = () => {
    if (!selectedDate || !(selectedDate instanceof Date)) return [];

    const dateStr = selectedDate.toISOString().split('T')[0];
    const reservationsForDate = existingReservations.filter(
      reservation => {
        const reservationDate = new Date(reservation.fecha_reserva).toISOString().split('T')[0];
        const isActiveReservation = reservation.estado === 'pendiente' || reservation.estado === 'confirmada';
        return reservationDate === dateStr && isActiveReservation;
      }
    );

    const availableSlots = [];

    const morningBooked = reservationsForDate.some(r => r.hora_inicio === TIME_SLOTS.MORNING.hora_inicio);
    const afternoonBooked = reservationsForDate.some(r => r.hora_inicio === TIME_SLOTS.AFTERNOON.hora_inicio);

    if (!morningBooked) {
      availableSlots.push({
        ...TIME_SLOTS.MORNING,
        label: (
          <div className="flex items-center gap-2">
            <span>{TIME_SLOTS.MORNING.icon}</span>
            <span>{TIME_SLOTS.MORNING.label}</span>
          </div>
        )
      });
    }

    if (!afternoonBooked) {
      availableSlots.push({
        ...TIME_SLOTS.AFTERNOON,
        label: (
          <div className="flex items-center gap-2">
            <span>{TIME_SLOTS.AFTERNOON.icon}</span>
            <span>{TIME_SLOTS.AFTERNOON.label}</span>
          </div>
        )
      });
    }

    return availableSlots;
  };

  const timeOptions = getAvailableTimeSlots();
  const selectedOption = field.value ? timeOptions.find(option => 
    option.value === field.value
  ) : null;

  return (
    <Select
      options={timeOptions}
      value={selectedOption}
      onChange={(option) => {
        if (option) {
          field.onChange(option.value);
        } else {
          field.onChange(null);
        }
      }}
      isDisabled={!selectedDate}
      placeholder={
        !selectedDate
          ? 'Primero selecciona una fecha'
          : timeOptions.length === 0
          ? 'No hay horarios disponibles'
          : 'Selecciona un horario'
      }
      className="react-select-container"
      classNamePrefix="react-select"
      styles={customStyles}
      menuPortalTarget={document.body}
    />
  );
};

const DateTimeSection = ({
  control,
  errors,
  setValue,
  unavailableDates,
  existingReservations,
  setIsTuesdayModalOpen,
  packages
}) => {
  const [tuesdayModalShown, setTuesdayModalShown] = useState(false);

  const selectedPackage = useWatch({
    control,
    name: 'id_paquete'
  });

  const selectedDate = useWatch({
    control,
    name: 'fecha_reserva'
  });

  const selectedTimeSlot = useWatch({
    control,
    name: 'hora_inicio'
  });

  useEffect(() => {
    if (selectedPackage && selectedDate instanceof Date) {
      const pkg = packages.find((p) => p.id === selectedPackage);
      if (pkg) {
        const dayOfWeek = selectedDate.getDay();
        const newPrice =
          dayOfWeek >= 1 && dayOfWeek <= 4
            ? parseFloat(pkg.precio_lunes_jueves)
            : parseFloat(pkg.precio_viernes_domingo);
        setValue('packagePrice', newPrice, { shouldValidate: false });
  
        if (dayOfWeek === 2 && !tuesdayModalShown) {
          setValue('tuesdayFee', 1500, { shouldValidate: false });
          setIsTuesdayModalOpen(true);
          setTuesdayModalShown(true);
        } else if (dayOfWeek !== 2) {
          setValue('tuesdayFee', 0, { shouldValidate: false });
          setTuesdayModalShown(false);
        }
      }
    }
  }, [selectedPackage, selectedDate, packages, setValue, setIsTuesdayModalOpen, tuesdayModalShown]);

  const handleDateChange = (date, onChange) => {
    if (!date) {
      onChange(null);
      setValue('hora_inicio', null);
      setValue('packagePrice', 0, { shouldValidate: false });
      setValue('tuesdayFee', 0, { shouldValidate: false });
      setTuesdayModalShown(false);
      return;
    }
  
    if (date instanceof Date && !isNaN(date.getTime())) {
      const validDate = new Date(date);
      validDate.setHours(0, 0, 0, 0);
      onChange(validDate);
      setValue('hora_inicio', null);
      setTuesdayModalShown(false);
    } else {
      console.error('Fecha inválida:', date);
      onChange(null);
      setValue('hora_inicio', null);
      setTuesdayModalShown(false);
    }
  };

  const getDateAvailability = (date) => {
    if (!date) return 'available';

    const today = startOfDay(new Date());
    if (isBefore(date, today)) {
      return 'past';
    }

    // Check if date is within one week
    const oneWeekFromNow = addDays(today, 7);
    if (isBefore(date, oneWeekFromNow)) {
      return 'unavailable';
    }

    const dateStr = date.toISOString().split('T')[0];
    const reservationsForDate = existingReservations.filter(
      reservation => {
        const reservationDate = new Date(reservation.fecha_reserva).toISOString().split('T')[0];
        const isActiveReservation = reservation.estado === 'pendiente' || reservation.estado === 'confirmada';
        return reservationDate === dateStr && isActiveReservation;
      }
    );

    const morningBooked = reservationsForDate.some(r => r.hora_inicio === TIME_SLOTS.MORNING.hora_inicio);
    const afternoonBooked = reservationsForDate.some(r => r.hora_inicio === TIME_SLOTS.AFTERNOON.hora_inicio);

    if (morningBooked && afternoonBooked) return 'unavailable';
    if (morningBooked || afternoonBooked) return 'partial';
    return 'available';
  };

  const getDatePriceInfo = useCallback((date) => {
    if (!selectedPackage || !packages.length) return '';
    
    const pkg = packages.find((p) => p.id === selectedPackage);
    if (!pkg) return '';

    const dayOfWeek = date.getDay();
    const basePrice = dayOfWeek >= 1 && dayOfWeek <= 4
      ? pkg.precio_lunes_jueves
      : pkg.precio_viernes_domingo;

    const isTuesdayDate = date.getDay() === 2;
    const priceInfo = `Precio: $${basePrice}${isTuesdayDate ? ' + $1,500 (Martes)' : ''}`;
    
    return priceInfo;
  }, [selectedPackage, packages]);

  const getDayClassName = (date) => {
    const today = startOfDay(new Date());
    const oneWeekFromNow = addDays(today, 7);
    const availability = getDateAvailability(date);
    const isWithinFirstWeek = isBefore(date, oneWeekFromNow);
    const isToday = date.getTime() === today.getTime();
    let className = 'w-full h-full flex items-center justify-center hover:bg-opacity-80 transition-all duration-200 ';

    if (isToday) {
      className += 'bg-blue-100 text-blue-800 font-bold ring-2 ring-blue-400 ';
    } else if (availability === 'past' || isWithinFirstWeek) {
      className += 'bg-gray-100 text-gray-400 cursor-not-allowed ';
    } else if (availability === 'unavailable') {
      className += 'bg-red-100 text-red-800 cursor-not-allowed ';
    } else if (availability === 'partial') {
      className += 'bg-yellow-100 text-yellow-800 ';
    } else if (availability === 'available') {
      className += 'bg-green-100 text-green-800 ';
    }

    return className;
  };

  const filterDate = (date) => {
    const today = startOfDay(new Date());
    const oneWeekFromNow = addDays(today, 7);
    return !isBefore(date, oneWeekFromNow);
  };

  const CustomInput = React.forwardRef(({ value, onClick, onChange }, ref) => (
    <div className="relative">
      <input
        value={value}
        onChange={onChange}
        onClick={onClick}
        ref={ref}
        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 cursor-pointer bg-white"
        placeholder="Seleccionar fecha"
        readOnly
      />
      <FiCalendar className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
    </div>
  ));

  return (
    <FormSection title="Fecha y Horario" icon={FiCalendar}>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha de Reserva
          </label>
          <div className="relative">
            <Controller
              control={control}
              name="fecha_reserva"
              rules={{ 
                required: 'Fecha de reserva es requerida',
                validate: {
                  isValidDate: (value) => {
                    if (!(value instanceof Date) || isNaN(value.getTime())) {
                      return 'Fecha inválida';
                    }
                    const today = startOfDay(new Date());
                    const oneWeekFromNow = addDays(today, 7);
                    if (isBefore(value, oneWeekFromNow)) {
                      return 'Las reservas deben hacerse con al menos una semana de anticipación';
                    }
                    return true;
                  }
                }
              }}
              render={({ field }) => (
                <DatePicker
                  selected={field.value}
                  onChange={(date) => handleDateChange(date, field.onChange)}
                  customInput={<CustomInput />}
                  dateFormat="dd/MM/yyyy"
                  minDate={new Date()}
                  filterDate={filterDate}
                  excludeDates={unavailableDates}
                  locale="es"
                  showPopperArrow={false}
                  popperPlacement="bottom-start"
                  popperClassName="datepicker-popper"
                  calendarClassName="shadow-lg border border-gray-200 rounded-lg"
                  renderDayContents={(day, date) => (
                    <div className="relative group">
                      <div 
                        className={getDayClassName(date)}
                        aria-label={
                          date.getTime() === startOfDay(new Date()).getTime() 
                            ? "Día actual" 
                            : getDatePriceInfo(date)
                        }
                      >
                        {day}
                      </div>
                      <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 hidden group-hover:block">
                        <div className="bg-gray-900 text-white text-xs rounded py-1 px-2 whitespace-nowrap">
                          {date.getTime() === startOfDay(new Date()).getTime() 
                            ? "Día actual" 
                            : getDatePriceInfo(date)}
                        </div>
                      </div>
                    </div>
                  )}
                />
              )}
            />
            {errors.fecha_reserva && (
              <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                <FiAlertCircle className="w-4 h-4" />
                {errors.fecha_reserva.message}
              </p>
            )}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Horario Disponible
          </label>
          <div className="relative">
            <Controller
              name="hora_inicio"
              control={control}
              rules={{ required: 'Horario es requerido' }}
              render={({ field }) => (
                <div>
                  <TimeSlotSelect
                    field={field}
                    existingReservations={existingReservations}
                    selectedDate={selectedDate}
                    customStyles={customSelectStyles}
                  />
                  {selectedDate && selectedTimeSlot && (
                    <div className="mt-2 text-sm text-gray-600 bg-gray-50 p-2 rounded-md flex items-center gap-2">
                      <FiInfo className="w-4 h-4" />
                      <span>
                        Horario seleccionado: {
                          selectedTimeSlot === 'mañana' 
                            ? TIME_SLOTS.MORNING.label 
                            : TIME_SLOTS.AFTERNOON.label
                        }
                      </span>
                    </div>
                  )}
                </div>
              )}
            />
            {errors.hora_inicio && (
              <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                <FiAlertCircle className="w-4 h-4" />
                {errors.hora_inicio.message}
              </p>
            )}
          </div>
        </div>
      </div>

      {/* Leyenda de colores */}
      <div className="mt-4 bg-white p-4 rounded-lg border border-indigo-100 shadow-sm space-y-4">
        <div className="grid grid-cols-4 gap-2">
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-green-100"></div>
            <span>Ambos horarios disponibles</span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-yellow-100"></div>
            <span>Un horario disponible</span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-red-100"></div>
            <span>Sin disponibilidad</span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-gray-100"></div>
            <span>Fechas pasadas</span>
          </div>
        </div>
      </div>

      {/* Resumen de la selección */}
      {selectedDate && selectedTimeSlot && (
        <div className="mt-4 p-4 bg-indigo-50 rounded-lg border border-indigo-100">
          <h4 className="text-sm font-medium text-indigo-900 mb-2">Resumen de la Reserva</h4>
          <div className="space-y-2 text-sm text-indigo-700">
            <div className="flex items-center gap-2">
              <FiCalendar className="w-4 h-4" />
              <span>Fecha: {selectedDate.toLocaleDateString('es-ES', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}</span>
            </div>
            <div className="flex items-center gap-2">
              <FiClock className="w-4 h-4" />
              <span>Horario: {selectedTimeSlot === 'mañana' ? TIME_SLOTS.MORNING.label : TIME_SLOTS.AFTERNOON.label}</span>
            </div>
          </div>
        </div>
      )}
    </FormSection>
  );
};

export default DateTimeSection;
\n\n
=== ./reservas/pages/customer/reservationform/ExtrasSection.jsx ===
import React, { useCallback, useMemo, useEffect } from 'react';
import { useWatch } from 'react-hook-form';
import { FiPlus, FiMinus, FiCheck, FiDollarSign, FiShoppingCart, FiInfo } from 'react-icons/fi';
import { processExtras } from '@shared/utils/reservationUtils';

const ExtrasSection = ({ extras, control, setValue }) => {
  const selectedExtras = useWatch({
    control,
    name: 'extras',
    defaultValue: []
  });

  // Efecto para procesar extras y eliminar duplicados al inicializar
  useEffect(() => {
    if (selectedExtras && selectedExtras.length > 0) {
      const processedExtras = processExtras(selectedExtras);
      if (JSON.stringify(processedExtras) !== JSON.stringify(selectedExtras)) {
        setValue('extras', processedExtras);
      }
    }
  }, []);

  const handleExtraToggle = useCallback((extra) => {
    const currentExtras = selectedExtras || [];
    // Usar Number() para garantizar comparación consistente
    const existingIndex = currentExtras.findIndex((item) => Number(item.id) === Number(extra.id));
    
    if (existingIndex === -1) {
      // Preservar propiedades adicionales útiles
      setValue('extras', [...currentExtras, { 
        id: extra.id, 
        cantidad: 1,
        nombre: extra.nombre,
        precio: extra.precio
      }]);
    } else {
      setValue('extras', currentExtras.filter((_, index) => index !== existingIndex));
    }
  }, [selectedExtras, setValue]);

  const handleQuantityChange = useCallback((extraId, newQuantity) => {
    const currentExtras = selectedExtras || [];
    // Usar Number() para garantizar comparación consistente
    const existingIndex = currentExtras.findIndex((item) => Number(item.id) === Number(extraId));
    
    if (newQuantity < 1) {
      setValue('extras', currentExtras.filter((_, index) => index !== existingIndex));
    } else {
      const updatedExtras = [...currentExtras];
      updatedExtras[existingIndex] = { 
        ...updatedExtras[existingIndex], 
        cantidad: newQuantity 
      };
      setValue('extras', updatedExtras);
    }
  }, [selectedExtras, setValue]);

  const renderQuantityControls = useCallback((extraId, cantidad) => (
    <div className="flex items-center gap-2 bg-white p-1 rounded-lg border border-gray-200 shadow-sm">
      <button
        type="button"
        onClick={() => handleQuantityChange(extraId, cantidad - 1)}
        className="p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Disminuir cantidad"
      >
        <FiMinus className="w-3 h-3" />
      </button>
      <input
        type="number"
        value={cantidad}
        min="1"
        onChange={(e) => handleQuantityChange(extraId, parseInt(e.target.value) || 1)}
        className="w-16 text-center border border-gray-300 rounded-md p-1 text-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        aria-label="Cantidad"
      />
      <button
        type="button"
        onClick={() => handleQuantityChange(extraId, cantidad + 1)}
        className="p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Aumentar cantidad"
      >
        <FiPlus className="w-3 h-3" />
      </button>
    </div>
  ), [handleQuantityChange]);

  const selectedCount = useMemo(() => selectedExtras?.length || 0, [selectedExtras]);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FiShoppingCart className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">Extras</h3>
        </div>
        {selectedCount > 0 && (
          <span className="bg-indigo-100 text-indigo-800 text-sm font-medium px-3 py-1 rounded-full">
            {selectedCount} seleccionado{selectedCount !== 1 ? 's' : ''}
          </span>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {extras.map((extra) => {
          // Usar Number() para garantizar comparación consistente
          const existingExtra = selectedExtras?.find((item) => Number(item.id) === Number(extra.id));
          const isSelected = !!existingExtra;

          return (
            <div
              key={extra.id}
              className={`group p-4 rounded-lg border transition-all duration-300 transform ${
                isSelected
                  ? 'border-indigo-500 bg-indigo-50 shadow-md scale-[1.02]'
                  : 'border-gray-200 hover:border-indigo-300 hover:shadow-sm hover:scale-[1.01]'
              }`}
            >
              <div className="flex justify-between items-start mb-3">
                <div className="flex-1">
                  <div className="flex items-center gap-2">
                    <h4 className="font-medium text-gray-900">{extra.nombre}</h4>
                    {isSelected && (
                      <span className="flex items-center gap-1 text-xs bg-indigo-500 text-white px-2 py-0.5 rounded-full">
                        <FiCheck className="w-3 h-3" />
                        Seleccionado
                      </span>
                    )}
                  </div>
                  {extra.descripcion && (
                    <p className="text-sm text-gray-600 mt-1 group-hover:text-gray-700">
                      {extra.descripcion}
                    </p>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => handleExtraToggle(extra)}
                  className={`p-2 rounded-full transition-all duration-200 ${
                    isSelected
                      ? 'bg-indigo-500 text-white hover:bg-indigo-600'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                  aria-label={isSelected ? 'Remover extra' : 'Agregar extra'}
                >
                  {isSelected ? <FiMinus /> : <FiPlus />}
                </button>
              </div>

              <div className="flex justify-between items-center mt-3">
                <div className="flex items-center gap-2">
                  <FiDollarSign className="text-indigo-600 w-4 h-4" />
                  <span className="text-lg font-semibold text-indigo-600">
                    ${Number(extra.precio).toFixed(2)}
                  </span>
                </div>

                {isSelected && renderQuantityControls(
                  extra.id, 
                  // Manejar diferentes formatos de cantidad (edición vs nuevo)
                  existingExtra.cantidad || existingExtra.ReservaExtra?.cantidad || 1
                )}
              </div>
            </div>
          );
        })}
      </div>

      {extras.length === 0 && (
        <div className="flex items-center justify-center gap-2 py-8 text-gray-500 bg-gray-50 rounded-lg border border-dashed border-gray-300">
          <FiInfo className="w-5 h-5" />
          <span>No hay extras disponibles</span>
        </div>
      )}
    </div>
  );
};

export default React.memo(ExtrasSection);\n\n
=== ./reservas/pages/customer/reservationform/FoodOptionsSection.jsx ===
import React, { useMemo } from 'react';
import { Controller } from 'react-hook-form';
import { FiCoffee, FiAlertCircle, FiInfo } from 'react-icons/fi';
import Select from 'react-select';
import FormSection from './FormSection';
import { customSelectStyles, formatCurrency } from './styles';

const FoodOptionLabel = React.memo(({ foodOption }) => (
  <div className="space-y-1">
    <div className="font-medium text-gray-900">{foodOption.nombre}</div>
    <div className="text-xs text-gray-500">
      {foodOption.descripcion || 'Opción estándar de alimentos'}
    </div>
  </div>
));

FoodOptionLabel.displayName = 'FoodOptionLabel';

const FoodOptionDetails = React.memo(({ foodOption }) => (
  <div className="p-2 space-y-2">
    <div className="font-medium text-gray-900">{foodOption.nombre}</div>
    <div className="text-sm text-gray-600 space-y-1">
      <div>Menú para Adultos: {foodOption.menu_adulto || 'Menú estándar'}</div>
      <div>Menú para Niños: {foodOption.menu_nino || 'Menú infantil estándar'}</div>
      <div className="mt-2 pt-2 border-t border-gray-200">
        <div className="text-xs text-gray-500">Precios por persona:</div>
        <div>Adultos: {formatCurrency(foodOption.precio_adulto)}</div>
        <div>Niños: {formatCurrency(foodOption.precio_nino)}</div>
        <div className="text-indigo-600 font-medium mt-1">
          Total estimado: {formatCurrency(foodOption.precio_extra)}
        </div>
      </div>
    </div>
  </div>
));

FoodOptionDetails.displayName = 'FoodOptionDetails';

const FoodSelect = React.memo(({ field, options, customStyles }) => {
  // Manejar tanto objetos complejos como IDs directos
  const selectedOption = useMemo(() => {
    // Si es un objeto complejo (formato dashboard)
    if (typeof field.value === 'object' && field.value?.value) {
      return options.find(option => Number(option.value) === Number(field.value.value));
    }
    
    // Si es un ID directo (formato cliente)
    return options.find(option => Number(option.value) === Number(field.value));
  }, [options, field.value]);

  return (
    <Select
      {...field}
      options={options}
      value={selectedOption}
      onChange={(option) => {
        // Mantener el formato de ID simple para compatibilidad
        field.onChange(option ? option.value : null);
      }}
      placeholder="Seleccionar opción de alimento"
      className="react-select-container"
      classNamePrefix="react-select"
      styles={{
        ...customStyles,
        option: (base) => ({
          ...base,
          padding: '8px 12px',
          cursor: 'pointer'
        })
      }}
      formatOptionLabel={(option) => (
        <FoodOptionLabel foodOption={option.foodOption} />
      )}
      components={{
        Option: ({ data, ...props }) => (
          <div {...props.innerProps}>
            <FoodOptionDetails foodOption={data.foodOption} />
          </div>
        )
      }}
      isClearable
    />
  );
});

FoodSelect.displayName = 'FoodSelect';

const FoodOptionsSection = ({ control, errors, foodOptions, setValue }) => {
  const foodOptionsList = useMemo(() => 
    foodOptions
      // Filtrar por opciones activas (si aplica)
      .filter(food => food.activo !== false)
      .map((food) => ({
        value: food.id,
        label: food.nombre,
        foodOption: food, // Pasar la opción completa
        // Propiedades directas para compatibilidad con ambos formatos
        precio_extra: food.precio_extra,
        turno: food.turno,
        descripcion: food.descripcion
      })),
    [foodOptions]
  );

  return (
    <FormSection title="Opción de Alimento" icon={FiCoffee}>
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Selecciona la Opción de Alimento
          </label>
          <Controller
            name="id_opcion_alimento"
            control={control}
            rules={{ required: 'La opción de alimento es requerida' }}
            render={({ field }) => (
              <div>
                <FoodSelect
                  field={field}
                  options={foodOptionsList}
                  customStyles={customSelectStyles}
                />
                {errors.id_opcion_alimento && (
                  <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                    <FiAlertCircle className="w-4 h-4" />
                    {errors.id_opcion_alimento.message}
                  </p>
                )}
              </div>
            )}
          />
        </div>

        {/* Información adicional sobre las opciones de alimento */}
        {foodOptions.length > 0 ? (
          <div className="mt-4 bg-gray-50 p-3 rounded-lg">
            <div className="flex items-center gap-2 text-gray-700 mb-2">
              <FiInfo className="w-4 h-4" />
              <span className="text-sm font-medium">Información importante</span>
            </div>
            <div className="text-sm text-gray-600 space-y-2">
              <p>
                Cada opción de alimento incluye menús específicos para adultos y niños.
                Los precios mostrados son por persona y se suman al paquete base.
              </p>
              <p>
                Puedes solicitar cambios específicos (como papas fritas) al momento de la reserva
                en la sección de comentarios adicionales.
              </p>
            </div>
          </div>
        ) : (
          <div className="text-center py-4 bg-gray-50 rounded-lg">
            <FiInfo className="mx-auto h-6 w-6 text-gray-400" />
            <p className="mt-2 text-sm text-gray-500">
              No hay opciones de alimento disponibles en este momento
            </p>
          </div>
        )}
      </div>
    </FormSection>
  );
};

export default FoodOptionsSection;\n\n
=== ./reservas/pages/customer/reservationform/FormSection.jsx ===
import React from 'react';

const FormSection = ({ title, children, icon: Icon }) => (
  <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-300">
    <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
      {Icon && <Icon className="w-5 h-5 text-indigo-600" />}
      {title}
    </h3>
    {children}
  </div>
);

export default FormSection;
\n\n
=== ./reservas/pages/customer/reservationform/MamparaSection.jsx ===
import React, { useEffect } from 'react';
import { Controller, useWatch } from 'react-hook-form';
import { FiLayout, FiAlertCircle, FiInfo } from 'react-icons/fi';
import Select from 'react-select';
import FormSection from './FormSection';
import { customSelectStyles, formatCurrency } from './styles';

const MamparaSection = ({ control, errors, filteredMamparas, setValue }) => {
  // Observar cambios en la mampara y temática seleccionadas
  const selectedMampara = useWatch({
    control,
    name: 'id_mampara'
  });

  // Extraer ID de mampara (puede ser un objeto complejo o un ID directo)
  const selectedMamparaId = typeof selectedMampara === 'object' 
    ? selectedMampara?.value 
    : selectedMampara;

  const selectedThemeObj = useWatch({
    control,
    name: 'id_tematica'
  });
  
  // Extraer ID de temática (puede ser un objeto complejo o un ID directo)
  const selectedTheme = typeof selectedThemeObj === 'object'
    ? selectedThemeObj?.value
    : selectedThemeObj;

  // Actualizar el precio de la mampara cuando cambia la selección
  useEffect(() => {
    // Si ya es un objeto complejo con precio, usamos ese valor directamente
    if (typeof selectedMampara === 'object' && selectedMampara?.precio) {
      setValue('mamparaPrice', parseFloat(selectedMampara.precio) || 0, {
        shouldValidate: true,
        shouldDirty: true
      });
      return;
    }
    
    // Si es un ID, buscamos la mampara correspondiente
    if (selectedMamparaId) {
      const selectedMamparaObj = filteredMamparas.find(m => Number(m.id) === Number(selectedMamparaId));
      if (selectedMamparaObj) {
        setValue('mamparaPrice', parseFloat(selectedMamparaObj.precio) || 0, {
          shouldValidate: true,
          shouldDirty: true
        });
      }
    } else {
      setValue('mamparaPrice', 0, {
        shouldValidate: true,
        shouldDirty: true
      });
    }
  }, [selectedMampara, selectedMamparaId, filteredMamparas, setValue]);

  // Limpiar la selección de mampara cuando cambia la temática
  useEffect(() => {
    if (!selectedTheme && !selectedThemeObj) {
      setValue('id_mampara', null);
      setValue('mamparaPrice', 0, {
        shouldValidate: true,
        shouldDirty: true
      });
    }
  }, [selectedTheme, selectedThemeObj, setValue]);

  return (
    <FormSection title="Mampara" icon={FiLayout}>
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Selecciona la Mampara
        </label>
        <div className="relative">
          <Controller
            name="id_mampara"
            control={control}
            render={({ field }) => {
              const options = filteredMamparas.map((mampara) => ({
                value: mampara.id,
                label: `${mampara.piezas} piezas - ${formatCurrency(mampara.precio)}`,
                piezas: mampara.piezas,
                precio: mampara.precio
              }));
              
              // Manejar tanto objeto complejo como ID directo
              const selectedOption = typeof field.value === 'object'
                ? field.value // Ya es un objeto completo
                : options.find((option) => Number(option.value) === Number(field.value));

              return (
                <>
                  <Select
                    options={options}
                    value={selectedOption}
                    onChange={(option) => {
                      field.onChange(option ? option.value : null);
                      if (option) {
                        setValue('mamparaPrice', parseFloat(option.precio) || 0, {
                          shouldValidate: true,
                          shouldDirty: true
                        });
                      } else {
                        setValue('mamparaPrice', 0, {
                          shouldValidate: true,
                          shouldDirty: true
                        });
                      }
                    }}
                    placeholder={selectedTheme || selectedThemeObj ? "Seleccionar mampara" : "Primero selecciona una temática"}
                    isDisabled={!selectedTheme && !selectedThemeObj}
                    className="react-select-container"
                    classNamePrefix="react-select"
                    styles={customSelectStyles}
                    menuPortalTarget={document.body}
                    isClearable={true}
                  />
                  {selectedOption && (
                    <div className="mt-2 text-sm text-indigo-600 bg-indigo-50 p-2 rounded-md flex items-center gap-2">
                      <FiInfo className="w-4 h-4" />
                      <span>
                        Esta mampara incluye {selectedOption.piezas} piezas - 
                        Precio: {formatCurrency(selectedOption.precio)}
                      </span>
                    </div>
                  )}
                </>
              );
            }}
          />
          {errors.id_mampara && (
            <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
              <FiAlertCircle className="w-4 h-4" />
              {errors.id_mampara.message}
            </p>
          )}
        </div>
        {(selectedTheme || selectedThemeObj) && filteredMamparas.length === 0 && (
          <p className="mt-2 text-sm text-amber-600 bg-amber-50 p-2 rounded-md flex items-center gap-2">
            <FiInfo className="w-4 h-4" />
            <span>No hay mamparas disponibles para la temática seleccionada</span>
          </p>
        )}
        {!selectedTheme && !selectedThemeObj && (
          <p className="mt-2 text-sm text-gray-600 bg-gray-50 p-2 rounded-md flex items-center gap-2">
            <FiInfo className="w-4 h-4" />
            <span>Selecciona una temática para ver las mamparas disponibles</span>
          </p>
        )}
      </div>
    </FormSection>
  );
};

export default MamparaSection;\n\n
=== ./reservas/pages/customer/reservationform/PackageSection.jsx ===
import React, { useMemo } from 'react';
import { Controller } from 'react-hook-form';
import { FiPackage, FiAlertCircle, FiInfo } from 'react-icons/fi';
import Select from 'react-select';
import FormSection from './FormSection';
import { customSelectStyles, formatCurrency } from './styles';

const PackageOption = React.memo(({ pkg }) => (
  <div className="p-2 space-y-2">
    <div className="font-medium text-gray-900">{pkg.nombre}</div>
    <div className="text-sm text-gray-600">
      <div>L-J: {formatCurrency(pkg.precio_lunes_jueves)}</div>
      <div>V-D: {formatCurrency(pkg.precio_viernes_domingo)}</div>
    </div>
  </div>
));

PackageOption.displayName = 'PackageOption';

const PackageInfo = React.memo(({ selectedPackage }) => {
  if (!selectedPackage) return null;
  
  return (
    <div className="mt-2 text-sm text-indigo-600 bg-indigo-50 p-2 rounded-md flex items-center gap-2">
      <FiInfo className="w-4 h-4" />
      <span>
        Precios: L-J {formatCurrency(selectedPackage.precio_lunes_jueves)} | 
        V-D {formatCurrency(selectedPackage.precio_viernes_domingo)}
      </span>
    </div>
  );
});

PackageInfo.displayName = 'PackageInfo';

const PackageSelect = React.memo(({ field, options, packages, customStyles }) => {
  const selectedOption = useMemo(() => 
    options.find((option) => option.value === field.value),
    [options, field.value]
  );

  const selectedPackage = useMemo(() => 
    packages.find(p => p.id === field.value),
    [packages, field.value]
  );

  return (
    <div>
      <Select
        {...field}
        options={options}
        value={selectedOption}
        onChange={(option) => field.onChange(option ? option.value : null)}
        placeholder="Seleccionar paquete"
        className="react-select-container"
        classNamePrefix="react-select"
        styles={{
          ...customStyles,
          option: (base) => ({
            ...base,
            padding: '8px 12px',
            cursor: 'pointer'
          })
        }}
        components={{
          Option: ({ data, ...props }) => (
            <div {...props.innerProps}>
              <PackageOption pkg={packages.find(p => p.id === data.value)} />
            </div>
          )
        }}
        isClearable
      />
      <PackageInfo selectedPackage={selectedPackage} />
    </div>
  );
});

PackageSelect.displayName = 'PackageSelect';

const PackageSection = ({ control, packages, errors }) => {
  const packageOptions = useMemo(() => 
    packages.map((pkg) => ({
      value: pkg.id,
      label: pkg.nombre
    })),
    [packages]
  );

  return (
    <FormSection title="Información del Paquete" icon={FiPackage}>
      <div className="space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Selecciona tu Paquete
          </label>
          <div className="relative">
            <Controller
              name="id_paquete"
              control={control}
              rules={{ required: 'Paquete es requerido' }}
              render={({ field }) => (
                <PackageSelect
                  field={field}
                  options={packageOptions}
                  packages={packages}
                  customStyles={customSelectStyles}
                />
              )}
            />
            {errors.id_paquete && (
              <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                <FiAlertCircle className="w-4 h-4" />
                {errors.id_paquete.message}
              </p>
            )}
          </div>
        </div>
      </div>
    </FormSection>
  );
};

export default React.memo(PackageSection);\n\n
=== ./reservas/pages/customer/reservationform/ThemeSection.jsx ===
import React from 'react';
import { Controller } from 'react-hook-form';
import { FiStar, FiAlertCircle, FiInfo } from 'react-icons/fi';
import Select from 'react-select';
import FormSection from './FormSection';
import { customSelectStyles } from './styles';

const ThemeSelect = ({ field, options, error }) => {
  // Manejar tanto objeto complejo como ID directo
  const selectedValue = typeof field.value === 'object' 
    ? field.value // Ya es un objeto completo
    : options.find((option) => Number(option.value) === Number(field.value));
  
  return (
    <div>
      <Select
        options={options}
        value={selectedValue}
        onChange={(option) => {
          // En modo dashboard queremos preservar el objeto completo
          // En modo cliente solo el valor es suficiente
          // Usamos el valor directo para compatibilidad con ambos
          field.onChange(option ? option.value : null);
        }}
        placeholder="Seleccionar temática"
        className="react-select-container"
        classNamePrefix="react-select"
        styles={customSelectStyles}
        menuPortalTarget={document.body}
        isClearable={true}
      />
      {error && (
        <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
          <FiAlertCircle className="w-4 h-4" />
          {error.message}
        </p>
      )}
    </div>
  );
};

const ThemeSection = ({ control, errors, tematicas, setValue }) => {
  // Filtrar por temáticas activas y mapear a formato para select
  const themeOptions = tematicas
    .filter(tematica => tematica.activo) // Solo temáticas activas
    .map((tematica) => ({
      value: tematica.id,
      label: tematica.nombre,
      // Preservar propiedades importantes para compatibilidad
      descripcion: tematica.descripcion,
      foto: tematica.foto,
      // Datos completos para compatibilidad
      data: tematica
    }));

  return (
    <FormSection title="Temática del Evento" icon={FiStar}>
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Selecciona la Temática
          </label>
          <Controller
            name="id_tematica"
            control={control}
            rules={{ required: 'Temática es requerida' }}
            render={({ field }) => (
              <ThemeSelect
                field={field}
                options={themeOptions}
                error={errors.id_tematica}
              />
            )}
          />
          <p className="mt-1 text-xs text-gray-500">
            Tu selección de temática afectará las opciones de mampara disponibles.
          </p>
        </div>

        {/* Información adicional sobre las temáticas */}
        {themeOptions.length > 0 ? (
          <div className="mt-4 bg-indigo-50 p-3 rounded-lg">
            <div className="flex items-center gap-2 text-indigo-700 mb-2">
              <FiInfo className="w-4 h-4" />
              <span className="text-sm font-medium">Información sobre temáticas</span>
            </div>
            <p className="text-sm text-indigo-600">
              Selecciona la temática que mejor se adapte a tu celebración. 
              Cada temática incluye decoración y ambientación específica.
            </p>
          </div>
        ) : (
          <div className="text-center py-4 bg-gray-50 rounded-lg">
            <FiInfo className="mx-auto h-6 w-6 text-gray-400" />
            <p className="mt-2 text-sm text-gray-500">
              No hay temáticas disponibles en este momento
            </p>
          </div>
        )}
      </div>
    </FormSection>
  );
};

export default ThemeSection;
\n\n
=== ./reservas/pages/customer/reservationform/styles.js ===
// Common select styles for react-select components
export const customSelectStyles = {
  control: (provided) => ({
    ...provided,
    borderColor: '#E5E7EB',
    boxShadow: 'none',
    '&:hover': {
      borderColor: '#6366F1',
    },
  }),
  option: (provided, state) => ({
    ...provided,
    backgroundColor: state.isSelected ? '#6366F1' : 'white',
    color: state.isSelected ? 'white' : '#374151',
    '&:hover': {
      backgroundColor: '#E0E7FF',
    },
  }),
};

// Common currency formatter
export const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN',
  }).format(amount);
};

// Common input styles
export const inputStyles = `
  w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm 
  focus:outline-none focus:ring-indigo-500 focus:border-indigo-500
`;

// Common button styles
export const buttonStyles = {
  primary: `
    px-8 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 
    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 
    transition-colors duration-200 flex items-center gap-2 font-medium shadow-sm
  `,
  secondary: `
    px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 
    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 
    transition-colors duration-200 flex items-center gap-2
  `,
};

// Calendar styles
export const calendarStyles = {
  calendarContainer: `
    bg-white border border-gray-200 rounded-lg shadow-lg p-4
    font-sans
  `,
  monthYearWrapper: `
    flex items-center justify-between mb-4
    text-gray-800 font-semibold
  `,
  monthYear: `
    text-lg font-bold text-gray-900
  `,
  nextPrevButton: `
    p-2 rounded-full hover:bg-gray-100
    focus:outline-none focus:ring-2 focus:ring-indigo-500
    transition-colors duration-200
  `,
  weekDays: `
    grid grid-cols-7 gap-1 mb-2
    text-sm font-medium text-gray-600
  `,
  dayWrapper: `
    aspect-square flex items-center justify-center
    text-sm font-medium cursor-pointer
    transition-all duration-200
  `,
  selectedDay: `
    bg-indigo-600 text-white rounded-full
    hover:bg-indigo-700
  `,
  today: `
    border-2 border-indigo-500 rounded-full
    text-indigo-600
  `,
  disabledDay: `
    text-gray-300 cursor-not-allowed
    hover:bg-transparent
  `,
  normalDay: `
    hover:bg-gray-100 rounded-full
    text-gray-700
  `,
  weekend: `
    text-indigo-600 font-semibold
  `,
};

// Time slot styles
export const timeSlotStyles = {
  container: `
    mt-4 grid grid-cols-2 gap-2
  `,
  slot: `
    p-3 border rounded-lg text-center cursor-pointer
    transition-all duration-200
    hover:border-indigo-500 hover:bg-indigo-50
  `,
  slotSelected: `
    border-indigo-500 bg-indigo-50 text-indigo-700
    font-medium
  `,
  slotDisabled: `
    bg-gray-50 text-gray-400 cursor-not-allowed
    hover:border-gray-200 hover:bg-gray-50
  `,
  slotLabel: `
    text-sm font-medium
  `,
  slotTime: `
    text-xs text-gray-500 mt-1
  `,
};\n\n
=== ./reservas/pages/customer/reservationsteps/CelebrantStep.jsx ===
import React from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import { motion } from 'framer-motion';
import { 
  FiUser, 
  FiCalendar, 
  FiHeart, 
  FiInfo, 
  FiAlertCircle,
  FiMessageCircle,
  FiCheckCircle
} from 'react-icons/fi';

const FormField = ({ 
  icon: Icon, 
  label, 
  name, 
  required, 
  error, 
  children, 
  hint 
}) => {
  return (
    <div className="space-y-1">
      <label htmlFor={name} className="flex items-center gap-2 text-gray-700 dark:text-white font-medium">
        {Icon && <Icon className="text-indigo-600 w-5 h-5" />}
        <span>{label}</span>
        {required && <span className="text-red-500">*</span>}
      </label>
      
      {children}
      
      {hint && (
        <p className="text-xs text-gray-500 dark:text-gray-300 mt-1">{hint}</p>
      )}
      
      {error && (
        <p className="text-red-500 text-sm flex items-center gap-1 mt-1">
          <FiAlertCircle className="w-4 h-4 flex-shrink-0" />
          <span>{error}</span>
        </p>
      )}
    </div>
  );
};

const CelebrantStep = () => {
  const { 
    control, 
    formState: { errors, dirtyFields, isValid },
    watch 
  } = useFormContext();
  
  const watchedNombre = watch('nombre_festejado') || '';
  const watchedEdad = watch('edad_festejado') || '';
  const watchedSexo = watch('sexo_festejado') || '';
  const watchedColor = watch('color_favorito') || '';
  
  // Calcular progreso del formulario (campos completos / total de campos necesarios)
  const requiredFieldsCount = 2; // nombre y edad son obligatorios
  const completedRequiredFieldsCount = 
    (!!watchedNombre ? 1 : 0) + 
    (!!watchedEdad ? 1 : 0);
  
  const formProgress = (completedRequiredFieldsCount / requiredFieldsCount) * 100;

  // Animaciones
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { 
        staggerChildren: 0.05
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-3">Información del Festejado</h2>
        <p className="text-gray-600 dark:text-gray-200 max-w-2xl mx-auto">
          Cuéntanos sobre la persona que va a celebrar este día especial para que podamos personalizar tu evento.
        </p>
      </div>

      {/* Barra de progreso */}
      <div className="w-full bg-gray-200 rounded-full h-2.5 mb-6">
        <div 
          className="bg-indigo-600 h-2.5 rounded-full transition-all duration-500 ease-out"
          style={{ width: `${formProgress}%` }}
        ></div>
      </div>

      {/* Formulario de datos del festejado */}
      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <motion.div variants={itemVariants}>
            <FormField
              icon={FiUser}
              label="Nombre del Festejado"
              name="nombre_festejado"
              required={true}
              error={errors.nombre_festejado?.message}
            >
              <Controller
                name="nombre_festejado"
                control={control}
                rules={{ 
                  required: "El nombre del festejado es requerido",
                  minLength: {
                    value: 2,
                    message: "El nombre debe tener al menos 2 caracteres"
                  }
                }}
                render={({ field }) => (
                  <input
                    {...field}
                    id="nombre_festejado"
                    type="text"
                    placeholder="Ej. María Fernanda"
                    className={`w-full p-3 rounded-lg border focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 ${
                      errors.nombre_festejado
                        ? 'border-red-300 bg-red-50 dark:bg-red-900/20 dark:border-red-700'
                        : field.value
                          ? 'border-green-300 bg-green-50 dark:bg-green-900/20 dark:border-green-700'
                          : 'border-gray-300 dark:border-gray-600 dark:bg-gray-700'
                    }`}
                  />
                )}
              />
            </FormField>
          </motion.div>

          <motion.div variants={itemVariants}>
            <FormField
              icon={FiCalendar}
              label="Edad que Cumple"
              name="edad_festejado"
              required={true}
              error={errors.edad_festejado?.message}
            >
              <Controller
                name="edad_festejado"
                control={control}
                rules={{ 
                  required: "La edad es requerida",
                  min: {
                    value: 1,
                    message: "La edad debe ser mayor a 0"
                  },
                  max: {
                    value: 120,
                    message: "La edad debe ser menor a 120"
                  },
                  pattern: {
                    value: /^[0-9]+$/,
                    message: "Solo se permiten números"
                  }
                }}
                render={({ field }) => (
                  <input
                    {...field}
                    id="edad_festejado"
                    type="number"
                    min="1"
                    max="120"
                    placeholder="Ej. 7"
                    className={`w-full p-3 rounded-lg border focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 ${
                      errors.edad_festejado
                        ? 'border-red-300 bg-red-50 dark:bg-red-900/20 dark:border-red-700'
                        : field.value
                          ? 'border-green-300 bg-green-50 dark:bg-green-900/20 dark:border-green-700'
                          : 'border-gray-300 dark:border-gray-600 dark:bg-gray-700'
                    }`}
                  />
                )}
              />
            </FormField>
          </motion.div>

          <motion.div variants={itemVariants}>
            <FormField
              icon={FiUser}
              label="Sexo del Festejado"
              name="sexo_festejado"
              hint="Esta información nos ayuda a personalizar mejor la decoración"
            >
              <Controller
                name="sexo_festejado"
                control={control}
                render={({ field }) => (
                  <>
                    <div className="flex gap-4 mt-2">
                      <label className={`flex items-center gap-2 p-3 rounded-lg border cursor-pointer transition-colors ${
                        field.value === 'femenino'
                          ? 'bg-pink-50 border-pink-300 text-pink-700 dark:bg-pink-900/20 dark:border-pink-700 dark:text-pink-300'
                          : 'bg-white border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700'
                      }`}>
                        <input
                          {...field}
                          type="radio"
                          value="femenino"
                          className="hidden"
                          checked={field.value === 'femenino'}
                          onChange={() => field.onChange('femenino')}
                        />
                        <div className={`w-4 h-4 rounded-full border flex items-center justify-center ${
                          field.value === 'femenino'
                            ? 'border-pink-500 bg-white'
                            : 'border-gray-400'
                        }`}>
                          {field.value === 'femenino' && (
                            <div className="w-2 h-2 rounded-full bg-pink-500"></div>
                          )}
                        </div>
                        <span>Niña</span>
                      </label>
                      
                      <label className={`flex items-center gap-2 p-3 rounded-lg border cursor-pointer transition-colors ${
                        field.value === 'masculino'
                          ? 'bg-blue-50 border-blue-300 text-blue-700 dark:bg-blue-900/20 dark:border-blue-700 dark:text-blue-300'
                          : 'bg-white border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700'
                      }`}>
                        <input
                          {...field}
                          type="radio"
                          value="masculino"
                          className="hidden"
                          checked={field.value === 'masculino'}
                          onChange={() => field.onChange('masculino')}
                        />
                        <div className={`w-4 h-4 rounded-full border flex items-center justify-center ${
                          field.value === 'masculino'
                            ? 'border-blue-500 bg-white'
                            : 'border-gray-400'
                        }`}>
                          {field.value === 'masculino' && (
                            <div className="w-2 h-2 rounded-full bg-blue-500"></div>
                          )}
                        </div>
                        <span>Niño</span>
                      </label>

                      <label className={`flex items-center gap-2 p-3 rounded-lg border cursor-pointer transition-colors ${
                        field.value === 'otro'
                          ? 'bg-purple-50 border-purple-300 text-purple-700 dark:bg-purple-900/20 dark:border-purple-700 dark:text-purple-300'
                          : 'bg-white border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700'
                      }`}>
                        <input
                          {...field}
                          type="radio"
                          value="otro"
                          className="hidden"
                          checked={field.value === 'otro'}
                          onChange={() => field.onChange('otro')}
                        />
                        <div className={`w-4 h-4 rounded-full border flex items-center justify-center ${
                          field.value === 'otro'
                            ? 'border-purple-500 bg-white'
                            : 'border-gray-400'
                        }`}>
                          {field.value === 'otro' && (
                            <div className="w-2 h-2 rounded-full bg-purple-500"></div>
                          )}
                        </div>
                        <span>Otro</span>
                      </label>
                    </div>

                    {/* Campo de texto para "Otro" con animación */}
                    {field.value === 'otro' && (
                      <motion.div
                        initial={{ opacity: 0, y: -10, height: 0 }}
                        animate={{ opacity: 1, y: 0, height: 'auto' }}
                        exit={{ opacity: 0, y: -10, height: 0 }}
                        transition={{
                          duration: 0.3,
                          ease: "easeInOut",
                          opacity: { duration: 0.2 }
                        }}
                        className="mt-3 overflow-hidden"
                      >
                        <Controller
                          name="sexo_festejado_personalizado"
                          control={control}
                          render={({ field: customField }) => (
                            <input
                              {...customField}
                              type="text"
                              placeholder="Especifica el género"
                              className="w-full p-3 rounded-lg border border-purple-300 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 bg-purple-50 dark:bg-purple-900/20 dark:border-purple-700 transition-all duration-300"
                              onChange={(e) => {
                                customField.onChange(e.target.value);
                                // Ya no actualizamos el valor principal, mantenemos 'otro'
                              }}
                              autoFocus
                            />
                          )}
                        />
                      </motion.div>
                    )}
                  </>
                )}
              />
            </FormField>
          </motion.div>

          <motion.div variants={itemVariants}>
            <FormField
              icon={FiHeart}
              label="Color Favorito"
              name="color_favorito"
              hint="Nos ayuda a personalizar la decoración"
            >
              <Controller
                name="color_favorito"
                control={control}
                render={({ field }) => (
                  <input
                    {...field}
                    id="color_favorito"
                    type="text"
                    placeholder="Ej. Azul, Rosa, Verde"
                    className={`w-full p-3 rounded-lg border focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 ${
                      field.value
                        ? 'border-green-300 bg-green-50 dark:bg-green-900/20 dark:border-green-700'
                        : 'border-gray-300 dark:border-gray-600 dark:bg-gray-700'
                    }`}
                  />
                )}
              />
            </FormField>
          </motion.div>
        </div>

        <motion.div variants={itemVariants} className="mt-6">
          <FormField
            icon={FiMessageCircle}
            label="Detalles Adicionales o Peticiones Especiales"
            name="detalles_especiales"
            hint="¿Hay algo especial que deberíamos saber? Ej: alergias, preferencias, etc."
          >
            <Controller
              name="detalles_especiales"
              control={control}
              render={({ field }) => (
                <textarea
                  {...field}
                  id="detalles_especiales"
                  rows="3"
                  placeholder="Escribe aquí cualquier detalle o petición especial..."
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                />
              )}
            />
          </FormField>
        </motion.div>

        {/* Mensaje de campos requeridos */}
        <div className="mt-6 flex items-start gap-2 text-xs text-gray-500 dark:text-gray-300">
          <FiInfo className="w-4 h-4 flex-shrink-0 mt-0.5" />
          <p>Los campos marcados con <span className="text-red-500">*</span> son requeridos.</p>
        </div>
      </motion.div>

      {/* Consejos o información adicional */}
      <div className="bg-indigo-50 dark:bg-indigo-900/20 p-5 rounded-lg border border-indigo-100 dark:border-indigo-800">
        <div className="flex gap-3">
          <FiCheckCircle className="w-6 h-6 text-indigo-600 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-indigo-800 dark:text-indigo-300">¡Personaliza al máximo!</h4>
            <p className="text-indigo-700 dark:text-indigo-300 text-sm mt-1">
              Cuanta más información nos brindes sobre el festejado, mejor podremos personalizar tu evento para hacerlo inolvidable. 
              Toda información es confidencial y solo será utilizada para mejorar tu experiencia.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CelebrantStep;\n\n
=== ./reservas/pages/customer/reservationsteps/DateTimeStep.jsx ===
import React, { useState, useEffect } from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import DatePicker, { registerLocale } from 'react-datepicker';
import { motion, AnimatePresence } from 'framer-motion';
import { isTuesday, addDays, isAfter, isBefore, format, parseISO } from 'date-fns';
import { es } from 'date-fns/locale';
import {
  FiCalendar,
  FiClock,
  FiSun,
  FiMoon,
  FiAlertCircle,
  FiInfo,
  FiCheck,
  FiChevronRight,
  FiChevronLeft
} from 'react-icons/fi';
import 'react-datepicker/dist/react-datepicker.css';

// Registrar locale español para DatePicker
registerLocale('es', es);

// Constantes
const TIME_SLOTS = {
  MORNING: {
    label: 'Mañana (11:00 - 16:00)',
    value: 'mañana',
    start: '11:00:00',
    end: '16:00:00',
    icon: FiSun
  },
  AFTERNOON: {
    label: 'Tarde (17:00 - 22:00)',
    value: 'tarde',
    start: '17:00:00',
    end: '22:00:00',
    icon: FiMoon
  }
};

const TUESDAY_SURCHARGE = 500; // Cargo adicional por los martes

const DateTimeStep = ({ 
  unavailableDates = [], // Valor predeterminado para evitar el error
  existingReservations = [], // Valor predeterminado
  setIsTuesdayModalOpen,
  methods
}) => {
  const { control, setValue, watch, formState: { errors } } = useFormContext();
  const [isDatePickerOpen, setIsDatePickerOpen] = useState(false);
  const selectedDate = watch('fecha_reserva');
  const selectedTimeSlot = watch('hora_inicio');
  const tuesdayFee = watch('tuesdayFee') || 0;
  
  // Estados locales para gestión de UI
  const [showTuesdayWarning, setShowTuesdayWarning] = useState(false);
  const [unavailableTimeSlots, setUnavailableTimeSlots] = useState({
    morning: false,
    afternoon: false
  });

  // Calcular slots de tiempo no disponibles cuando cambia la fecha seleccionada
  useEffect(() => {
    if (selectedDate) {
      const dateString = format(selectedDate, 'yyyy-MM-dd');
      const reservationsOnSelectedDate = existingReservations.filter(
        reservation => reservation.fecha_reserva.split('T')[0] === dateString
      );

      const morning = reservationsOnSelectedDate.some(
        reservation => reservation.hora_inicio === TIME_SLOTS.MORNING.start
      );
      
      const afternoon = reservationsOnSelectedDate.some(
        reservation => reservation.hora_inicio === TIME_SLOTS.AFTERNOON.start
      );

      setUnavailableTimeSlots({ morning, afternoon });
      
      // Verificar si es martes para mostrar advertencia
      if (isTuesday(selectedDate)) {
        setShowTuesdayWarning(true);
        setValue('tuesdayFee', TUESDAY_SURCHARGE);
      } else {
        setShowTuesdayWarning(false);
        setValue('tuesdayFee', 0);
      }
      
      // Reiniciar timeSlot si el seleccionado ya no está disponible
      if (selectedTimeSlot) {
        const timeSlotValue = 
          typeof selectedTimeSlot === 'object' ? selectedTimeSlot.value : selectedTimeSlot;
          
        if ((timeSlotValue === 'mañana' && morning) || 
            (timeSlotValue === 'tarde' && afternoon)) {
          setValue('hora_inicio', null);
        }
      }
    }
  }, [selectedDate, existingReservations, setValue, selectedTimeSlot]);

  // Función para filtrar fechas disponibles en el DatePicker
  const filterAvailableDates = (date) => {
    // No permitir fechas en el pasado
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    if (isBefore(date, today)) return false;
    
    // No permitir fechas muy futuras (6 meses)
    const sixMonthsFromNow = addDays(today, 180);
    if (isAfter(date, sixMonthsFromNow)) return false;
    
    // Verificar si la fecha está en la lista de fechas no disponibles (con verificación segura)
    if (!Array.isArray(unavailableDates) || unavailableDates.length === 0) {
      return true; // Si no hay fechas no disponibles, todas están disponibles
    }
    
    return !unavailableDates.some(unavailableDate => {
      const unavailableDateTime = new Date(unavailableDate);
      return (
        unavailableDateTime.getDate() === date.getDate() &&
        unavailableDateTime.getMonth() === date.getMonth() &&
        unavailableDateTime.getFullYear() === date.getFullYear()
      );
    });
  };

  // Componente personalizado para las cabeceras del DatePicker
  const CustomHeader = ({
    date,
    decreaseMonth,
    increaseMonth,
    prevMonthButtonDisabled,
    nextMonthButtonDisabled
  }) => (
    <div className="flex items-center justify-between p-3 bg-indigo-50 rounded-t-lg">
      <button
        onClick={decreaseMonth}
        disabled={prevMonthButtonDisabled}
        type="button"
        className={`p-2 rounded-full transition-all duration-200 ${
          prevMonthButtonDisabled
            ? 'text-gray-300 cursor-not-allowed'
            : 'text-indigo-600 hover:bg-indigo-100'
        }`}
        aria-label="Mes anterior"
      >
        <FiChevronLeft className="w-5 h-5" />
      </button>
      
      <h2 className="text-lg font-semibold text-indigo-800 capitalize">
        {format(date, 'MMMM yyyy', { locale: es })}
      </h2>
      
      <button
        onClick={increaseMonth}
        disabled={nextMonthButtonDisabled}
        type="button"
        className={`p-2 rounded-full transition-all duration-200 ${
          nextMonthButtonDisabled
            ? 'text-gray-300 cursor-not-allowed'
            : 'text-indigo-600 hover:bg-indigo-100'
        }`}
        aria-label="Mes siguiente"
      >
        <FiChevronRight className="w-5 h-5" />
      </button>
    </div>
  );

  // Renderizar un time slot
  const renderTimeSlot = (timeSlotKey, timeSlot, isDisabled) => {
    const TimeIcon = timeSlot.icon;
    const isSelected = selectedTimeSlot && 
      (typeof selectedTimeSlot === 'object' 
        ? selectedTimeSlot.value === timeSlot.value 
        : selectedTimeSlot === timeSlot.value);

    return (
      <motion.div
        whileHover={isDisabled ? {} : { scale: 1.02 }}
        whileTap={isDisabled ? {} : { scale: 0.98 }}
        className="relative"
      >
        <button
          type="button"
          onClick={() => {
            if (!isDisabled) {
              setValue('hora_inicio', {
                label: timeSlot.label,
                value: timeSlot.value
              });
            }
          }}
          disabled={isDisabled}
          className={`w-full p-4 rounded-lg border-2 transition-all duration-300 ${
            isDisabled
              ? 'bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed opacity-60'
              : isSelected
                ? 'bg-indigo-50 border-indigo-500 text-indigo-800'
                : 'bg-white border-gray-200 hover:border-indigo-300 text-gray-800'
          }`}
        >
          <div className="flex items-center gap-3">
            <div
              className={`p-3 rounded-full ${
                isSelected
                  ? 'bg-indigo-100 text-indigo-600'
                  : isDisabled
                    ? 'bg-gray-200 text-gray-400'
                    : 'bg-gray-100 text-gray-600'
              }`}
            >
              <TimeIcon className="w-5 h-5" />
            </div>
            <div className="text-left">
              <h3 className={`font-medium ${isSelected ? 'text-indigo-600' : ''}`}>
                {timeSlot.label}
              </h3>
            </div>
          </div>
        </button>
        
        {isDisabled && (
          <div className="absolute top-1 right-1 bg-red-100 text-red-600 text-xs font-medium px-2 py-1 rounded-full">
            No disponible
          </div>
        )}
        
        {isSelected && (
          <div className="absolute top-1 right-1 bg-indigo-100 text-indigo-600 text-xs font-medium px-2 py-1 rounded-full flex items-center gap-1">
            <FiCheck className="w-3 h-3" />
            Seleccionado
          </div>
        )}
      </motion.div>
    );
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-3xl font-bold text-indigo-900 mb-3 leading-tight">Selecciona Fecha y Hora</h2>
        <p className="text-indigo-600 max-w-2xl mx-auto opacity-80">
          Elige el día y horario perfecto para tu evento especial
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-10">
        {/* Selector de Fecha */}
        <div className="space-y-4">
          <div className="flex items-center gap-2 mb-3">
            <div className="bg-indigo-100 p-2 rounded-md">
              <FiCalendar className="text-indigo-600 w-5 h-5" />
            </div>
            <h3 className="font-semibold text-indigo-800 text-lg">Fecha de la Reserva</h3>
          </div>
          
          <Controller
            control={control}
            name="fecha_reserva"
            rules={{ required: "La fecha es requerida" }}
            render={({ field }) => (
              <div className="relative">
                <DatePicker
                  selected={field.value}
                  onChange={(date) => {
                    field.onChange(date);
                    if (isTuesday(date) && !tuesdayFee) {
                      setIsTuesdayModalOpen(true);
                    }
                  }}
                  onCalendarOpen={() => setIsDatePickerOpen(true)}
                  onCalendarClose={() => setIsDatePickerOpen(false)}
                  filterDate={filterAvailableDates}
                  locale="es"
                  dateFormat="dd 'de' MMMM 'de' yyyy"
                  placeholderText="Selecciona una fecha"
                  minDate={new Date()}
                  maxDate={addDays(new Date(), 180)}
                  renderCustomHeader={CustomHeader}
                  calendarClassName="bg-white shadow-xl rounded-lg border-0 overflow-hidden"
                  inline={false}
                  showIcon
                  className={`w-full p-4 rounded-lg transition-all duration-200 shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 ${
                    errors.fecha_reserva
                      ? 'border-red-300 bg-red-50 border-2'
                      : isDatePickerOpen
                        ? 'border-indigo-300 bg-indigo-50 border-2'
                        : 'border border-gray-300 bg-white hover:border-indigo-300'
                  }`}
                  dayClassName={date => 
                    date.getDay() === 0 || date.getDay() === 6 
                      ? "bg-blue-50 text-blue-800 rounded-full hover:bg-blue-100"
                      : date.getDay() === 2 
                        ? "bg-amber-50 text-amber-800 rounded-full hover:bg-amber-100"
                        : "rounded-full hover:bg-indigo-100"
                  }
                />
                
                <div className="absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none">
                  <FiCalendar className={`w-5 h-5 ${
                    errors.fecha_reserva
                      ? 'text-red-400'
                      : isDatePickerOpen
                        ? 'text-indigo-500'
                        : 'text-gray-400'
                  }`} />
                </div>
                
                {errors.fecha_reserva && (
                  <p className="mt-2 text-red-600 text-sm flex items-center gap-1">
                    <FiAlertCircle className="w-4 h-4 flex-shrink-0" />
                    <span>{errors.fecha_reserva.message}</span>
                  </p>
                )}
              </div>
            )}
          />
          
          {/* Advertencia de Martes */}
          <AnimatePresence>
            {showTuesdayWarning && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="bg-amber-50 border border-amber-200 rounded-lg p-3 mt-3"
              >
                <div className="flex gap-2">
                  <FiInfo className="text-amber-500 w-5 h-5 flex-shrink-0" />
                  <div>
                    <p className="text-amber-800 text-sm">
                      Has seleccionado un martes. Aplicamos un cargo adicional de{' '}
                      <span className="font-medium">{new Intl.NumberFormat('es-MX', {
                        style: 'currency',
                        currency: 'MXN'
                      }).format(TUESDAY_SURCHARGE)}</span>{' '}
                      para reservas en este día.
                    </p>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Selector de Horario */}
        <div className="space-y-4">
          <div className="flex items-center gap-2 mb-3">
            <div className="bg-indigo-100 p-2 rounded-md">
              <FiClock className="text-indigo-600 w-5 h-5" />
            </div>
            <h3 className="font-semibold text-indigo-800 text-lg">Horario</h3>
          </div>
          
          <Controller
            control={control}
            name="hora_inicio"
            rules={{ required: "El horario es requerido" }}
            render={({ field }) => (
              <div className="space-y-4">
                <div className="space-y-4">
                  {/* Horario Mañana */}
                  {renderTimeSlot(
                    'morning',
                    TIME_SLOTS.MORNING,
                    selectedDate ? unavailableTimeSlots.morning : true
                  )}
                  
                  {/* Horario Tarde */}
                  {renderTimeSlot(
                    'afternoon',
                    TIME_SLOTS.AFTERNOON,
                    selectedDate ? unavailableTimeSlots.afternoon : true
                  )}
                </div>
                
                {errors.hora_inicio && (
                  <p className="mt-2 text-red-600 text-sm flex items-center gap-1">
                    <FiAlertCircle className="w-4 h-4 flex-shrink-0" />
                    <span>{errors.hora_inicio.message}</span>
                  </p>
                )}
              </div>
            )}
          />
          
          {selectedDate && unavailableTimeSlots.morning && unavailableTimeSlots.afternoon && (
            <motion.div 
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
              className="mt-4 bg-red-50 border-l-4 border-red-500 rounded-lg p-4 shadow-sm"
            >
              <div className="flex gap-3">
                <FiAlertCircle className="text-red-500 w-6 h-6 flex-shrink-0" />
                <div>
                  <p className="text-red-700 font-semibold">Fecha no disponible</p>
                  <p className="text-red-600 text-sm mt-1">
                    Ambos horarios están ocupados para esta fecha. Por favor, selecciona otra fecha.
                  </p>
                </div>
              </div>
            </motion.div>
          )}
          
          {!selectedDate && (
            <motion.div 
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
              className="mt-4 bg-blue-50 border-l-4 border-blue-500 rounded-lg p-4 shadow-sm"
            >
              <div className="flex gap-3">
                <FiInfo className="text-blue-500 w-6 h-6 flex-shrink-0" />
                <p className="text-blue-700">
                  Por favor, selecciona primero una fecha para ver los horarios disponibles.
                </p>
              </div>
            </motion.div>
          )}
        </div>
      </div>

      {/* Información adicional */}
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.3, duration: 0.5 }}
        className="mt-8 bg-indigo-50 p-6 rounded-xl border border-indigo-100 shadow-sm"
      >
        <div className="flex gap-4">
          <FiInfo className="w-7 h-7 text-indigo-600 flex-shrink-0" />
          <div>
            <h4 className="font-semibold text-indigo-900 text-lg">Información importante</h4>
            <ul className="mt-3 space-y-3 text-indigo-800">
              <li className="flex items-start gap-2">
                <FiCheck className="w-4 h-4 text-green-500 mt-0.5" />
                <span>
                  Las reservas están disponibles de hasta 6 meses en adelante.
                </span>
              </li>
              <li className="flex items-start gap-2">
                <FiCheck className="w-4 h-4 text-green-500 mt-0.5" />
                <span>
                  Horario de mañana: 11:00 AM - 4:00 PM
                </span>
              </li>
              <li className="flex items-start gap-2">
                <FiCheck className="w-4 h-4 text-green-500 mt-0.5" />
                <span>
                  Horario de tarde: 5:00 PM - 10:00 PM
                </span>
              </li>
              <li className="flex items-start gap-2">
                <FiAlertCircle className="w-4 h-4 text-amber-500 mt-0.5" />
                <span>
                  Los martes tienen un cargo adicional de {new Intl.NumberFormat('es-MX', {
                    style: 'currency',
                    currency: 'MXN'
                  }).format(TUESDAY_SURCHARGE)}.
                </span>
              </li>
            </ul>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default DateTimeStep;\n\n
=== ./reservas/pages/customer/reservationsteps/ExtrasStep.jsx ===
import React, { useEffect, useState } from 'react';
import { useFormContext, useWatch } from 'react-hook-form';
import { motion, AnimatePresence } from 'framer-motion';
import {
  FiShoppingCart,
  FiDollarSign,
  FiPlus,
  FiMinus,
  FiCheck,
  FiInfo,
  FiFilter,
  FiSearch,
  FiX
} from 'react-icons/fi';

// Función para formatear moneda
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount || 0);
};

// Categorías para filtrar extras
const CATEGORIES = [
  { id: 'all', label: 'Todos' },
  { id: 'food', label: 'Alimentos' },
  { id: 'decoration', label: 'Decoración' },
  { id: 'entertainment', label: 'Entretenimiento' },
  { id: 'services', label: 'Servicios' }
];

const ExtrasStep = ({ extras = [] }) => {
  const { control, setValue } = useFormContext();
  const selectedExtras = useWatch({
    control,
    name: 'extras',
    defaultValue: []
  });

  // Estados para búsqueda y filtrado
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [filteredExtras, setFilteredExtras] = useState([]);
  const [showFilters, setShowFilters] = useState(false);

  // Función para procesar y eliminar duplicados de extras
  const processExtras = (selectedItems) => {
    if (!selectedItems) return [];
    
    // Crear un mapa con ID como clave para eliminar duplicados
    const uniqueExtras = selectedItems.reduce((acc, item) => {
      acc[item.id] = item;
      return acc;
    }, {});
    
    return Object.values(uniqueExtras);
  };

  // Efecto para procesar extras y eliminar duplicados al inicializar
  useEffect(() => {
    if (selectedExtras && selectedExtras.length > 0) {
      const processedExtras = processExtras(selectedExtras);
      if (JSON.stringify(processedExtras) !== JSON.stringify(selectedExtras)) {
        setValue('extras', processedExtras);
      }
    }
  }, []);

  // Filtrar extras activos, por categoría y por búsqueda
  useEffect(() => {
    // Verificar que extras sea un array válido
    if (!Array.isArray(extras) || extras.length === 0) {
      setFilteredExtras([]);
      return;
    }
    
    let filtered = extras.filter(extra => extra.activo);
    
    // Filtrar por categoría
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(extra => extra.categoria === selectedCategory);
    }
    
    // Filtrar por búsqueda
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase().trim();
      filtered = filtered.filter(extra =>
        extra.nombre.toLowerCase().includes(query) ||
        (extra.descripcion && extra.descripcion.toLowerCase().includes(query))
      );
    }
    
    // Ordenar por categoría y nombre
    filtered.sort((a, b) => {
      if (a.categoria !== b.categoria) {
        return a.categoria.localeCompare(b.categoria);
      }
      return a.nombre.localeCompare(b.nombre);
    });
    
    setFilteredExtras(filtered);
  }, [extras, selectedCategory, searchQuery]);

  // Calcular el total de extras seleccionados
  const calculateExtrasTotal = () => {
    if (!selectedExtras?.length) return 0;
    
    return selectedExtras.reduce((total, extra) => {
      const extraInfo = extras.find(e => e.id === extra.id);
      if (extraInfo?.precio && extra.cantidad) {
        return total + (parseFloat(extraInfo.precio) * parseInt(extra.cantidad));
      }
      return total;
    }, 0);
  };

  // Manejar la activación/desactivación de un extra
  const handleExtraToggle = (extra) => {
    const currentExtras = selectedExtras || [];
    const existingIndex = currentExtras.findIndex((item) => item.id === extra.id);
    
    if (existingIndex === -1) {
      // Añadir extra con cantidad 1
      setValue('extras', [...currentExtras, { 
        id: extra.id, 
        cantidad: 1,
        nombre: extra.nombre,
        precio: extra.precio
      }]);
    } else {
      // Eliminar extra
      setValue('extras', currentExtras.filter((_, index) => index !== existingIndex));
    }
  };

  // Manejar cambio de cantidad de un extra
  const handleQuantityChange = (extraId, newQuantity) => {
    const currentExtras = selectedExtras || [];
    const existingIndex = currentExtras.findIndex((item) => item.id === extraId);
    
    if (newQuantity < 1) {
      // Eliminar extra si la cantidad es menor a 1
      setValue('extras', currentExtras.filter((_, index) => index !== existingIndex));
    } else {
      // Actualizar cantidad
      const updatedExtras = [...currentExtras];
      updatedExtras[existingIndex] = { 
        ...updatedExtras[existingIndex], 
        cantidad: newQuantity 
      };
      setValue('extras', updatedExtras);
    }
  };

  // Renderizar controles de cantidad
  const renderQuantityControls = (extraId, cantidad) => (
    <div className="flex items-center gap-2 bg-white p-1 rounded-lg border border-gray-200 shadow-sm">
      <button
        type="button"
        onClick={(e) => {
          e.stopPropagation();
          handleQuantityChange(extraId, cantidad - 1);
        }}
        className="p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Disminuir cantidad"
      >
        <FiMinus className="w-3 h-3" />
      </button>
      <input
        type="number"
        value={cantidad}
        min="1"
        onChange={(e) => {
          e.stopPropagation();
          handleQuantityChange(extraId, parseInt(e.target.value) || 1);
        }}
        onClick={(e) => e.stopPropagation()}
        className="w-14 text-center border border-gray-300 rounded-md p-1 text-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        aria-label="Cantidad"
      />
      <button
        type="button"
        onClick={(e) => {
          e.stopPropagation();
          handleQuantityChange(extraId, cantidad + 1);
        }}
        className="p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Aumentar cantidad"
      >
        <FiPlus className="w-3 h-3" />
      </button>
    </div>
  );

  // Contar extras seleccionados
  const selectedCount = selectedExtras?.length || 0;

  // Variantes para animaciones
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { 
        staggerChildren: 0.05
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-3xl font-bold text-indigo-900 mb-3 leading-tight">Personaliza tu Evento con Extras</h2>
        <p className="text-indigo-600 max-w-2xl mx-auto opacity-80">
          Añade elementos adicionales para hacer tu celebración aún más especial. Selecciona tantos como desees.
        </p>
      </div>

      {/* Panel de búsqueda y filtros */}
      <div className="bg-white p-5 rounded-xl shadow-sm border border-gray-200">
        <div className="flex flex-col md:flex-row gap-4">
          {/* Buscador */}
          <div className="relative flex-1">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              className="block w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Buscar extras..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
            {searchQuery && (
              <button
                type="button"
                onClick={() => setSearchQuery('')}
                className="absolute inset-y-0 right-0 pr-3 flex items-center"
              >
                <FiX className="h-5 w-5 text-gray-400 hover:text-gray-600" />
              </button>
            )}
          </div>

          {/* Botón de filtros en móvil */}
          <div className="md:hidden">
            <button
              type="button"
              onClick={() => setShowFilters(!showFilters)}
              className="w-full flex items-center justify-center gap-2 py-2 px-4 bg-indigo-50 text-indigo-700 rounded-lg hover:bg-indigo-100 transition-colors"
            >
              <FiFilter className="w-4 h-4" />
              <span>Filtrar por categoría</span>
              {selectedCategory !== 'all' && (
                <span className="bg-indigo-100 text-indigo-800 text-xs font-medium px-2 py-0.5 rounded-full">
                  1
                </span>
              )}
            </button>
          </div>

          {/* Filtros desktop */}
          <div className="hidden md:flex items-center gap-2">
            <span className="text-gray-500 text-sm">Filtrar:</span>
            <div className="flex flex-wrap gap-2">
              {CATEGORIES.map(category => (
                <button
                  key={category.id}
                  type="button"
                  onClick={() => setSelectedCategory(category.id)}
                  className={`py-1 px-3 rounded-full text-sm font-medium transition-colors ${
                    selectedCategory === category.id
                      ? 'bg-indigo-600 text-white'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  {category.label}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Filtros móvil expandibles */}
        <AnimatePresence>
          {showFilters && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: 'auto', opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="mt-4 overflow-hidden"
            >
              <div className="flex flex-wrap gap-2">
                {CATEGORIES.map(category => (
                  <button
                    key={category.id}
                    type="button"
                    onClick={() => setSelectedCategory(category.id)}
                    className={`py-1 px-3 rounded-full text-sm font-medium transition-colors ${
                      selectedCategory === category.id
                        ? 'bg-indigo-600 text-white'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    {category.label}
                  </button>
                ))}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Contador de seleccionados */}
      {selectedCount > 0 && (
        <motion.div 
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
          className="bg-indigo-50 p-5 rounded-xl border border-indigo-100 shadow-sm"
        >
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
            <div className="flex items-center gap-3">
              <div className="bg-indigo-100 p-2 rounded-md">
                <FiShoppingCart className="text-indigo-600 w-5 h-5" />
              </div>
              <span className="font-semibold text-indigo-800 text-lg">
                {selectedCount} extra{selectedCount !== 1 ? 's' : ''} seleccionado{selectedCount !== 1 ? 's' : ''}
              </span>
            </div>
            <div className="bg-indigo-100 px-4 py-2 rounded-lg text-indigo-700 font-semibold">
              Total: {formatCurrency(calculateExtrasTotal())}
            </div>
          </div>
        </motion.div>
      )}

      {/* Grid de Extras */}
      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        className="grid grid-cols-1 md:grid-cols-2 gap-5"
      >
        {filteredExtras.length > 0 ? (
          filteredExtras.map((extra) => {
            const existingExtra = selectedExtras?.find((item) => item.id === extra.id);
            const isSelected = !!existingExtra;

            return (
              <motion.div
                key={extra.id}
                variants={itemVariants}
                onClick={() => handleExtraToggle(extra)}
                className={`group p-4 rounded-lg border transition-all duration-300 cursor-pointer ${
                  isSelected
                    ? 'border-indigo-500 bg-indigo-50 shadow-md'
                    : 'border-gray-200 hover:border-indigo-300 hover:shadow-sm'
                }`}
              >
                <div className="flex justify-between items-start mb-3">
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <h4 className={`font-medium ${isSelected ? 'text-indigo-700' : 'text-gray-900'}`}>
                        {extra.nombre}
                      </h4>
                      {isSelected && (
                        <span className="flex items-center gap-1 text-xs bg-indigo-500 text-white px-2 py-0.5 rounded-full">
                          <FiCheck className="w-3 h-3" />
                          Seleccionado
                        </span>
                      )}
                    </div>
                    {extra.descripcion && (
                      <p className={`text-sm mt-1 ${isSelected ? 'text-indigo-600' : 'text-gray-600'}`}>
                        {extra.descripcion}
                      </p>
                    )}
                    
                    {extra.categoria && (
                      <div className="mt-2">
                        <span className="inline-block bg-gray-100 text-gray-600 text-xs px-2 py-0.5 rounded-full">
                          {extra.categoria}
                        </span>
                      </div>
                    )}
                  </div>
                  <button
                    type="button"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleExtraToggle(extra);
                    }}
                    className={`p-2 rounded-full transition-all duration-200 ${
                      isSelected
                        ? 'bg-indigo-500 text-white hover:bg-indigo-600'
                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                    } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                    aria-label={isSelected ? 'Remover extra' : 'Agregar extra'}
                  >
                    {isSelected ? <FiMinus /> : <FiPlus />}
                  </button>
                </div>

                <div className="flex justify-between items-center mt-3">
                  <div className="flex items-center gap-2">
                    <FiDollarSign className={`${isSelected ? 'text-indigo-600' : 'text-gray-600'} w-4 h-4`} />
                    <span className={`text-lg font-semibold ${isSelected ? 'text-indigo-600' : 'text-gray-800'}`}>
                      {formatCurrency(extra.precio)}
                    </span>
                    <span className="text-sm text-gray-500">por unidad</span>
                  </div>

                  {isSelected && renderQuantityControls(
                    extra.id, 
                    existingExtra.cantidad || 1
                  )}
                </div>
              </motion.div>
            );
          })
        ) : (
          <div className="col-span-full text-center py-10 bg-gray-50 rounded-lg border border-dashed border-gray-300">
            <FiInfo className="w-10 h-10 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-500">
              {searchQuery || selectedCategory !== 'all'
                ? 'No se encontraron extras que coincidan con tu búsqueda o filtro'
                : 'No hay extras disponibles en este momento'}
            </p>
            {(searchQuery || selectedCategory !== 'all') && (
              <button
                className="mt-4 text-indigo-600 hover:text-indigo-800 font-medium"
                onClick={() => {
                  setSearchQuery('');
                  setSelectedCategory('all');
                }}
              >
                Limpiar filtros
              </button>
            )}
          </div>
        )}
      </motion.div>

      {/* Información adicional */}
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.3, duration: 0.5 }}
        className="mt-8 bg-indigo-50 p-6 rounded-xl border border-indigo-100 shadow-sm"
      >
        <div className="flex gap-4">
          <FiInfo className="w-7 h-7 text-indigo-600 flex-shrink-0" />
          <div>
            <h4 className="font-semibold text-indigo-900 text-lg">Información sobre extras</h4>
            <p className="text-indigo-700 mt-2">
              Los extras son completamente opcionales y tienen un costo adicional que se sumará al total de tu reserva.
              Puedes seleccionar múltiples extras y especificar la cantidad deseada de cada uno.
            </p>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default ExtrasStep;\n\n
=== ./reservas/pages/customer/reservationsteps/FoodOptionsStep.jsx ===
import React, { useEffect, useState } from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import { motion } from 'framer-motion';
import {
  FiCoffee,
  FiDollarSign,
  FiCheck,
  FiInfo,
  FiShoppingBag,
  FiUsers,
  FiPlus,
  FiMinus
} from 'react-icons/fi';

// Función para formatear moneda
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount || 0);
};

const FoodOptionsStep = ({ foodOptions }) => {
  const { control, setValue, watch, formState: { errors } } = useFormContext();
  const selectedFoodOptionId = watch('id_opcion_alimento');
  const [activeFoodOptions, setActiveFoodOptions] = useState([]);
  
  // Filtrar opciones activas
  useEffect(() => {
    const active = foodOptions.filter(option => option.activo);
    // Ordenar por precio ascendente
    const sorted = [...active].sort((a, b) => parseFloat(a.precio_extra) - parseFloat(b.precio_extra));
    setActiveFoodOptions(sorted);
  }, [foodOptions]);

  // Poder omitir la selección (es opcional)
  const handleSkip = () => {
    setValue('id_opcion_alimento', null);
    // Avanzar al siguiente paso (lo maneja el componente padre)
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-3">Opciones de Alimentos</h2>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Selecciona una opción de alimentos para complementar tu evento. Puedes personalizar la experiencia culinaria de tus invitados.
        </p>
      </div>

      {/* Grid de opciones de alimentos */}
      <Controller
        control={control}
        name="id_opcion_alimento"
        render={({ field }) => (
          <div className="space-y-6">
            {activeFoodOptions.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {activeFoodOptions.map((option) => {
                  const isSelected = field.value === option.id;
                  
                  return (
                    <motion.div
                      key={option.id}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => field.onChange(isSelected ? null : option.id)}
                      className={`relative rounded-xl overflow-hidden border-2 transition-all duration-300 cursor-pointer ${
                        isSelected
                          ? 'border-indigo-500 bg-indigo-50 shadow-lg'
                          : 'border-gray-200 bg-white hover:border-indigo-300 hover:shadow-md'
                      }`}
                    >
                      <div className="p-6">
                        {/* Encabezado */}
                        <div className="flex items-start justify-between mb-4">
                          <div className="flex items-center gap-3">
                            <div className={`p-3 rounded-full ${
                              isSelected ? 'bg-indigo-100 text-indigo-600' : 'bg-gray-100 text-gray-600'
                            }`}>
                              <FiCoffee className="w-6 h-6" />
                            </div>
                            <div>
                              <h3 className={`text-lg font-semibold ${isSelected ? 'text-indigo-700' : 'text-gray-900'}`}>
                                {option.nombre}
                              </h3>
                            </div>
                          </div>
                          
                          {isSelected && (
                            <div className="ml-auto flex items-center justify-center w-6 h-6 bg-indigo-600 text-white rounded-full">
                              <FiCheck className="w-4 h-4" />
                            </div>
                          )}
                        </div>
                        
                        {/* Precio */}
                        <div className="flex items-center gap-2 mb-4">
                          <FiDollarSign className="text-indigo-600 w-5 h-5" />
                          <span className="text-lg font-semibold text-indigo-600">
                            {formatCurrency(option.precio_extra)}
                          </span>
                        </div>
                        
                        {/* Descripción */}
                        {option.descripcion && (
                          <p className="text-sm text-gray-600 mb-4">
                            {option.descripcion}
                          </p>
                        )}
                        
                        {/* Detalles principales */}
                        <div className="space-y-2 mt-4">
                          {option.cantidad_platos && (
                            <div className="flex items-center gap-2 text-sm text-gray-700">
                              <FiShoppingBag className="w-4 h-4 text-indigo-500" />
                              <span>{option.cantidad_platos} platos incluidos</span>
                            </div>
                          )}
                          
                          {option.para_personas && (
                            <div className="flex items-center gap-2 text-sm text-gray-700">
                              <FiUsers className="w-4 h-4 text-indigo-500" />
                              <span>Para {option.para_personas} personas</span>
                            </div>
                          )}
                          
                          {/* Botones de incrementar/decrementar platillos (opcional para futuras versiones) */}
                          {/* <div className="flex items-center gap-2 mt-4">
                            <button
                              type="button"
                              className="p-1 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200"
                            >
                              <FiMinus className="w-4 h-4" />
                            </button>
                            <span className="font-medium">1</span>
                            <button
                              type="button"
                              className="p-1 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200"
                            >
                              <FiPlus className="w-4 h-4" />
                            </button>
                          </div> */}
                        </div>
                      </div>
                      
                      {/* Botón de selección (alternativa al clic en tarjeta) */}
                      <div className="p-4 border-t border-gray-200 bg-gray-50">
                        <button
                          type="button"
                          onClick={(e) => {
                            e.stopPropagation();
                            field.onChange(isSelected ? null : option.id);
                          }}
                          className={`w-full py-2 rounded-lg font-medium ${
                            isSelected
                              ? 'bg-indigo-100 text-indigo-700 border border-indigo-500'
                              : 'bg-white text-indigo-600 border border-indigo-600 hover:bg-indigo-50'
                          }`}
                        >
                          {isSelected ? 'Seleccionado' : 'Seleccionar'}
                        </button>
                      </div>
                    </motion.div>
                  );
                })}
              </div>
            ) : (
              <div className="text-center py-10 bg-gray-50 rounded-lg border border-dashed border-gray-300">
                <FiInfo className="w-10 h-10 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500">
                  No hay opciones de alimentos disponibles en este momento
                </p>
              </div>
            )}
          </div>
        )}
      />

      {/* Opción para omitir */}
      {activeFoodOptions.length > 0 && (
        <div className="flex justify-center">
          <button
            type="button"
            onClick={handleSkip}
            className="text-gray-500 hover:text-gray-700 font-medium underline"
          >
            Continuar sin seleccionar opción de alimentos
          </button>
        </div>
      )}

      {/* Información adicional */}
      <div className="mt-6 bg-indigo-50 p-5 rounded-lg">
        <div className="flex gap-3">
          <FiInfo className="w-6 h-6 text-indigo-600 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-indigo-800">Información sobre alimentos</h4>
            <p className="text-indigo-700 text-sm mt-1">
              Las opciones de alimentos tienen un costo adicional que se sumará al total de tu reserva.
              Puedes complementar estas opciones con extras adicionales en el siguiente paso.
              Si tienes alguna necesidad dietética especial, puedes mencionarla en la sección de comentarios.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FoodOptionsStep;\n\n
=== ./reservas/pages/customer/reservationsteps/MamparaStep.jsx ===
import React, { useState, useEffect } from 'react';
import { useFormContext, Controller, useWatch } from 'react-hook-form';
import { motion, AnimatePresence } from 'framer-motion';
import { FiImage, FiDollarSign, FiInfo, FiX, FiCheck, FiZoomIn, FiFilter } from 'react-icons/fi';

// Función para formatear moneda
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount || 0);
};

// Optimizador de URL de Cloudinary
const optimizeCloudinaryUrl = (url, options = {}) => {
  if (!url || !url.includes('cloudinary.com')) return url;
  
  const { width = 400, height = 300, quality = 'auto' } = options;
  
  try {
    // Extraer la URL base y las transformaciones
    const urlObj = new URL(url);
    const pathSegments = urlObj.pathname.split('/');
    
    // Encontrar el índice donde empiezan los segmentos de imagen (después de upload)
    let uploadIndex = pathSegments.findIndex(segment => segment === 'upload');
    
    if (uploadIndex !== -1) {
      // Crear nuevas transformaciones
      const transformations = `c_fill,g_auto,f_auto,q_${quality},w_${width},h_${height}`;
      
      // Insertar transformaciones justo después de 'upload'
      pathSegments.splice(uploadIndex + 1, 0, transformations);
      
      // Reconstruir la URL
      urlObj.pathname = pathSegments.join('/');
      return urlObj.toString();
    }
    
    return url;
  } catch (error) {
    console.error('Error optimizando URL de Cloudinary:', error);
    return url;
  }
};

// Componente modal para vista ampliada de imagen
const ImageModal = ({ isOpen, onClose, mampara }) => {
  if (!isOpen || !mampara) return null;
  
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75 transition-opacity duration-300">
      <div className="relative w-full max-w-3xl p-4">
        {/* Botón para cerrar */}
        <button 
          onClick={onClose}
          className="absolute top-4 right-4 p-2 rounded-full bg-white text-gray-800 hover:bg-gray-200 transition-colors z-10"
          aria-label="Cerrar"
        >
          <FiX className="w-6 h-6" />
        </button>
        
        <div className="bg-white rounded-xl overflow-hidden shadow-2xl animate-scaleIn">
          {/* Imagen */}
          <div className="relative">
            {mampara.foto ? (
              <img 
                src={optimizeCloudinaryUrl(mampara.foto, { width: 1200, height: 800, quality: 'auto:best' })}
                alt={`Mampara de ${mampara.piezas} piezas`}
                className="w-full object-cover"
                style={{ maxHeight: 'calc(80vh - 120px)' }}
              />
            ) : (
              <div className="bg-gray-200 w-full h-64 flex items-center justify-center">
                <FiImage className="w-12 h-12 text-gray-400" />
              </div>
            )}
          </div>
          
          {/* Información */}
          <div className="p-6">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-xl font-bold text-gray-900">Mampara de {mampara.piezas} piezas</h3>
              <div className="flex items-center gap-1 text-indigo-600 font-medium">
                <FiDollarSign className="w-4 h-4" />
                <span>{formatCurrency(mampara.precio)}</span>
              </div>
            </div>
            
            {mampara.descripcion && (
              <p className="text-gray-700 mt-2">{mampara.descripcion}</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

const MamparaStep = ({ mamparas, tematicas }) => {
  const { control, setValue, watch, formState: { errors } } = useFormContext();
  const selectedMamparaId = watch('id_mampara');
  const selectedThemeId = watch('id_tematica');
  const [viewingMampara, setViewingMampara] = useState(null);
  const [filteredMamparas, setFilteredMamparas] = useState([]);
  const [showNoThemeWarning, setShowNoThemeWarning] = useState(false);
  
  // Obtener el nombre de la temática seleccionada
  const selectedThemeName = tematicas.find(t => t.id === selectedThemeId)?.nombre || '';
  
  // Filtrar mamparas por la temática seleccionada
  useEffect(() => {
    if (selectedThemeId) {
      setShowNoThemeWarning(false);
      const filtered = mamparas.filter(mampara => 
        mampara.activo && mampara.id_tematica === selectedThemeId
      );
      setFilteredMamparas(filtered);
      
      // Si hay una mampara seleccionada que ya no está en las filtradas, limpiar la selección
      if (selectedMamparaId && !filtered.some(m => m.id === selectedMamparaId)) {
        setValue('id_mampara', null);
      }
    } else {
      setShowNoThemeWarning(true);
      setFilteredMamparas([]);
    }
  }, [mamparas, selectedThemeId, selectedMamparaId, setValue]);

  // Manejar la apertura de vista detallada
  const handleViewDetails = (mampara) => {
    setViewingMampara(mampara);
  };

  // Poder omitir la selección de mampara (es opcional)
  const handleSkip = () => {
    setValue('id_mampara', null);
    // Avanzar al siguiente paso (lo maneja el contenedor)
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-3">Elige tu Mampara</h2>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Selecciona la mampara que complementará la decoración de tu evento
          {selectedThemeName && (
            <span className="font-medium text-indigo-600"> con la temática de {selectedThemeName}</span>
          )}
        </p>
      </div>

      {/* Alerta si no se ha seleccionado una temática */}
      {showNoThemeWarning && (
        <div className="bg-amber-50 border border-amber-200 rounded-lg p-5">
          <div className="flex gap-3">
            <FiInfo className="w-6 h-6 text-amber-500 flex-shrink-0" />
            <div>
              <h4 className="font-medium text-amber-800">Selecciona una temática primero</h4>
              <p className="text-amber-700 text-sm mt-1">
                Debes seleccionar una temática en el paso anterior para ver las mamparas disponibles. 
                Las mamparas están relacionadas con cada temática específica.
              </p>
              <button
                type="button"
                onClick={() => {
                  // Regresar al paso de temáticas se maneja desde el componente padre
                }}
                className="mt-3 text-amber-700 font-medium underline hover:text-amber-800"
              >
                Volver al paso de selección de temática
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Grid de Mamparas */}
      <Controller
        control={control}
        name="id_mampara"
        render={({ field }) => (
          <div className="space-y-4">
            {filteredMamparas.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
                {filteredMamparas.map((mampara) => {
                  const isSelected = field.value === mampara.id;
                  
                  return (
                    <motion.div
                      key={mampara.id}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      className={`rounded-xl overflow-hidden shadow-lg transition-all duration-300 ${
                        isSelected
                          ? 'ring-4 ring-indigo-500 transform scale-[1.02]'
                          : 'hover:shadow-xl'
                      }`}
                    >
                      <div className={`border h-full flex flex-col rounded-xl overflow-hidden ${
                        isSelected ? 'border-indigo-500' : 'border-gray-200'
                      }`}>
                        {/* Imagen de la mampara */}
                        <div className="relative group">
                          {mampara.foto ? (
                            <div className="relative overflow-hidden h-48 bg-gray-100">
                              <img
                                src={optimizeCloudinaryUrl(mampara.foto, { width: 500, height: 300 })}
                                alt={`Mampara de ${mampara.piezas} piezas`}
                                className="w-full h-full object-cover"
                                loading="lazy"
                              />
                              <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-300 flex items-center justify-center">
                                <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                  <button
                                    type="button"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleViewDetails(mampara);
                                    }}
                                    className="p-2 bg-white rounded-full shadow-lg hover:bg-indigo-100"
                                    aria-label="Ver imagen ampliada"
                                  >
                                    <FiZoomIn className="w-5 h-5 text-indigo-600" />
                                  </button>
                                </div>
                              </div>
                            </div>
                          ) : (
                            <div className="h-48 bg-gray-200 flex items-center justify-center">
                              <FiImage className="w-12 h-12 text-gray-400" />
                            </div>
                          )}
                          
                          {isSelected && (
                            <div className="absolute top-2 right-2 bg-white text-indigo-600 text-xs font-bold px-3 py-1 rounded-full flex items-center gap-1 shadow-md">
                              <FiCheck className="w-3 h-3" />
                              Seleccionada
                            </div>
                          )}
                        </div>
                        
                        {/* Información de la mampara */}
                        <div className="p-4 flex-1 flex flex-col">
                          <div className="flex items-start justify-between">
                            <h3 className="text-lg font-semibold text-gray-900">{mampara.piezas} Piezas</h3>
                            <div className="flex items-center gap-1 text-indigo-600 font-medium text-sm">
                              <FiDollarSign className="w-4 h-4" />
                              <span>{formatCurrency(mampara.precio)}</span>
                            </div>
                          </div>
                          
                          {mampara.descripcion && (
                            <p className="text-sm text-gray-600 mt-2 line-clamp-2">
                              {mampara.descripcion}
                            </p>
                          )}
                          
                          <div className="mt-auto pt-4">
                            <button
                              type="button"
                              onClick={() => field.onChange(mampara.id)}
                              className={`w-full py-2 px-4 rounded-lg font-medium transition-colors ${
                                isSelected
                                  ? 'bg-indigo-100 text-indigo-700 border-2 border-indigo-600'
                                  : 'bg-indigo-600 text-white hover:bg-indigo-700'
                              }`}
                            >
                              {isSelected ? 'Mampara Seleccionada' : 'Seleccionar Mampara'}
                            </button>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  );
                })}
              </div>
            ) : selectedThemeId ? (
              <div className="text-center py-10 bg-gray-50 rounded-lg border border-dashed border-gray-300">
                <FiInfo className="w-10 h-10 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500">
                  No hay mamparas disponibles para la temática seleccionada
                </p>
              </div>
            ) : null}
          </div>
        )}
      />

      {/* Modal para vista ampliada */}
      <AnimatePresence>
        {viewingMampara && (
          <ImageModal
            isOpen={!!viewingMampara}
            onClose={() => setViewingMampara(null)}
            mampara={viewingMampara}
          />
        )}
      </AnimatePresence>

      {/* Opción para omitir */}
      {filteredMamparas.length > 0 && (
        <div className="flex justify-center">
          <button
            type="button"
            onClick={handleSkip}
            className="text-gray-500 hover:text-gray-700 font-medium underline"
          >
            Continuar sin seleccionar mampara
          </button>
        </div>
      )}

      {/* Información adicional */}
      <div className="mt-6 bg-indigo-50 p-5 rounded-lg">
        <div className="flex gap-3">
          <FiInfo className="w-6 h-6 text-indigo-600 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-indigo-800">¿Qué es una mampara?</h4>
            <p className="text-indigo-700 text-sm mt-1">
              Las mamparas son paneles decorativos para personalizar el fondo del espacio de tu evento.
              Cada mampara está diseñada para complementar una temática específica y tiene un costo adicional.
              La selección de mampara es opcional.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MamparaStep;\n\n
=== ./reservas/pages/customer/reservationsteps/PackageStep.jsx ===
import React, { useState, useEffect } from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import { motion } from 'framer-motion';
import { FiPackage, FiDollarSign, FiUsers, FiCheck, FiInfo } from 'react-icons/fi';

// Función para formatear moneda
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount || 0);
};

const PackageStep = ({ packages, nextStep }) => {
  const { control, setValue, watch, formState: { errors } } = useFormContext();
  const selectedPackageId = watch('id_paquete');
  const [expandedDetails, setExpandedDetails] = useState(null);

  // Ordenar paquetes por precio
  const sortedPackages = [...packages].sort((a, b) => {
    return parseFloat(a.precio_lunes_jueves) - parseFloat(b.precio_lunes_jueves);
  });

  // Establecer valor predeterminado si no hay selección y hay paquetes disponibles
  useEffect(() => {
    if (!selectedPackageId && sortedPackages.length > 0) {
      // No seleccionar automáticamente, dejar que el usuario elija
    }
  }, [selectedPackageId, sortedPackages]);

  // Función para alternar detalles expandidos
  const toggleDetails = (packageId) => {
    setExpandedDetails(expandedDetails === packageId ? null : packageId);
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-3">Selecciona tu Paquete</h2>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Elige el paquete que más se adapte a tus necesidades para tu celebración especial
        </p>
      </div>

      <Controller
        control={control}
        name="id_paquete"
        rules={{ required: "Por favor selecciona un paquete" }}
        render={({ field }) => (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
              {sortedPackages.map((pkg) => {
                const isSelected = field.value === pkg.id;
                const isExpanded = expandedDetails === pkg.id;

                return (
                  <motion.div
                    key={pkg.id}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    className={`rounded-xl overflow-hidden shadow-lg transition-all duration-300 ${
                      isSelected
                        ? 'ring-4 ring-indigo-500 transform scale-[1.02]'
                        : 'hover:shadow-xl'
                    }`}
                  >
                    <div
                      className={`border h-full flex flex-col rounded-xl overflow-hidden ${
                        isSelected ? 'border-indigo-500' : 'border-gray-200'
                      }`}
                    >
                      {/* Encabezado del paquete */}
                      <div
                        className={`p-5 ${
                          isSelected ? 'bg-indigo-600 text-white' : 'bg-gray-50'
                        }`}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex items-center gap-2">
                            <FiPackage
                              className={`w-6 h-6 ${isSelected ? 'text-white' : 'text-indigo-600'}`}
                            />
                            <h3 className="text-lg font-semibold">{pkg.nombre}</h3>
                          </div>
                          {isSelected && (
                            <div className="flex items-center gap-1 bg-white text-indigo-600 px-2 py-1 rounded-full text-xs font-medium">
                              <FiCheck className="w-3 h-3" />
                              Seleccionado
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Cuerpo del paquete */}
                      <div className="p-5 flex-1 flex flex-col">
                        {/* Precios */}
                        <div className="flex justify-between mb-4">
                          <div>
                            <div className="text-gray-500 text-sm">Lunes - Jueves</div>
                            <div className="text-indigo-600 font-semibold text-lg">
                              {formatCurrency(pkg.precio_lunes_jueves)}
                            </div>
                          </div>
                          <div className="text-right">
                            <div className="text-gray-500 text-sm">Viernes - Domingo</div>
                            <div className="text-indigo-600 font-semibold text-lg">
                              {formatCurrency(pkg.precio_viernes_domingo)}
                            </div>
                          </div>
                        </div>

                        {/* Capacidad */}
                        <div className="flex items-center gap-2 mb-3">
                          <FiUsers className="text-gray-500" />
                          <span className="text-gray-700">
                            {pkg.min_invitados} - {pkg.max_invitados} invitados
                          </span>
                        </div>

                        {/* Características del paquete (sólo si expande) */}
                        <div className={`mt-2 space-y-2 ${isExpanded ? 'block' : 'hidden'}`}>
                          {pkg.descripcion && (
                            <div className="text-gray-700 text-sm">{pkg.descripcion}</div>
                          )}
                          {/* Aquí se pueden agregar más características específicas del paquete */}
                        </div>

                        {/* Botón para expandir/colapsar detalles */}
                        <button
                          type="button"
                          onClick={() => toggleDetails(pkg.id)}
                          className="mt-auto text-indigo-600 hover:text-indigo-800 text-sm font-medium"
                        >
                          {isExpanded ? 'Ver menos detalles' : 'Ver más detalles'}
                        </button>
                      </div>

                      {/* Pie de paquete con botón de selección */}
                      <div className="p-4 border-t border-gray-200">
                        <button
                          type="button"
                          onClick={() => {
                            field.onChange(pkg.id);
                            setTimeout(() => {
                              // Permitir que la selección visual ocurra antes de avanzar
                              // nextStep();
                            }, 500);
                          }}
                          className={`w-full py-2.5 px-4 rounded-lg font-medium transition-colors ${
                            isSelected
                              ? 'bg-indigo-100 text-indigo-700 border-2 border-indigo-600'
                              : 'bg-indigo-600 text-white hover:bg-indigo-700'
                          }`}
                        >
                          {isSelected ? 'Paquete Seleccionado' : 'Seleccionar este Paquete'}
                        </button>
                      </div>
                    </div>
                  </motion.div>
                );
              })}
            </div>

            {errors.id_paquete && (
              <p className="text-red-500 flex items-center gap-1 text-sm mt-2">
                <FiInfo className="w-4 h-4 flex-shrink-0" />
                <span>{errors.id_paquete.message}</span>
              </p>
            )}
          </div>
        )}
      />

      {sortedPackages.length === 0 && (
        <div className="text-center py-10 bg-gray-50 rounded-lg border border-dashed border-gray-300">
          <FiInfo className="w-10 h-10 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-500">No hay paquetes disponibles en este momento</p>
        </div>
      )}

      <div className="mt-6 bg-blue-50 p-4 rounded-lg">
        <div className="flex gap-3">
          <FiInfo className="w-6 h-6 text-blue-600 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-blue-800">¿No encuentras lo que buscas?</h4>
            <p className="text-blue-700 text-sm mt-1">
              Todos nuestros paquetes son personalizables. Selecciona el más cercano a tus
              necesidades y después podrás ajustarlo con extras.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PackageStep;\n\n
=== ./reservas/pages/customer/reservationsteps/ReviewStep.jsx ===
import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import { motion } from 'framer-motion';
import {
  FiPackage,
  FiCalendar,
  FiClock,
  FiDollarSign,
  FiUser,
  FiImage,
  FiList,
  FiMessageCircle,
  FiCoffee,
  FiChevronDown,
  FiChevronUp,
  FiEdit,
  FiCheckCircle,
  FiAlertTriangle
} from 'react-icons/fi';

// Función para formatear moneda
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount || 0);
};

// Componente para una sección individual del resumen
const SummarySection = ({ 
  title, 
  icon: Icon, 
  children, 
  editAction, 
  stepIndex, 
  goToStep, 
  className = "", 
  isExpandable = false 
}) => {
  const [isExpanded, setIsExpanded] = useState(true);
  
  return (
    <div className={`bg-white rounded-xl overflow-hidden shadow-sm border border-gray-200 ${className}`}>
      <div className="flex items-center justify-between p-5 bg-gray-50 border-b border-gray-200">
        <div className="flex items-center gap-3">
          {Icon && <Icon className="text-indigo-600 w-5 h-5" />}
          <h3 className="font-semibold text-gray-900">{title}</h3>
        </div>
        <div className="flex items-center gap-2">
          {editAction && (
            <button
              type="button"
              onClick={() => goToStep(stepIndex)}
              className="text-indigo-600 hover:text-indigo-800 p-1.5 rounded-full hover:bg-indigo-50 transition-colors"
              aria-label={`Editar ${title}`}
            >
              <FiEdit className="w-4 h-4" />
            </button>
          )}
          
          {isExpandable && (
            <button
              type="button"
              onClick={() => setIsExpanded(!isExpanded)}
              className="text-gray-500 hover:text-gray-700 p-1.5 rounded-full hover:bg-gray-100 transition-colors"
              aria-label={isExpanded ? 'Colapsar' : 'Expandir'}
            >
              {isExpanded ? <FiChevronUp className="w-4 h-4" /> : <FiChevronDown className="w-4 h-4" />}
            </button>
          )}
        </div>
      </div>
      
      {(!isExpandable || isExpanded) && (
        <div className="p-5">
          {children}
        </div>
      )}
    </div>
  );
};

// Componente para un ítem individual del resumen
const SummaryItem = ({ label, value, icon: Icon }) => (
  <div className="flex items-start py-2 border-b border-gray-100 last:border-0">
    <div className="flex items-center gap-2 w-1/3 text-gray-600">
      {Icon && <Icon className="w-4 h-4 flex-shrink-0" />}
      <span>{label}:</span>
    </div>
    <div className="w-2/3 font-medium text-gray-900">
      {value || <span className="text-gray-400 italic">No seleccionado</span>}
    </div>
  </div>
);

const ReviewStep = ({ 
  packages, 
  foodOptions, 
  tematicas, 
  mamparas, 
  extras, 
  goToStep 
}) => {
  const { watch } = useFormContext();
  const formValues = watch();
  
  // Datos seleccionados
  const selectedPackage = packages.find(pkg => pkg.id === formValues.id_paquete);
  const selectedFoodOption = foodOptions.find(food => food.id === formValues.id_opcion_alimento);
  const selectedTematica = tematicas.find(tema => tema.id === formValues.id_tematica);
  const selectedMampara = mamparas.find(mampara => mampara.id === formValues.id_mampara);
  const selectedExtras = formValues.extras || [];
  
  // Formatear fecha
  const formatDate = (date) => {
    try {
      if (!date || !(date instanceof Date) || isNaN(date.getTime())) {
        return 'No seleccionada';
      }
  
      return new Intl.DateTimeFormat('es-MX', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }).format(date);
    } catch (error) {
      console.error('Error al formatear la fecha:', error);
      return 'Fecha inválida';
    }
  };
  
  // Obtener el horario formateado
  const getFormattedTimeSlot = () => {
    if (!formValues.hora_inicio) return 'No seleccionada';
    
    if (typeof formValues.hora_inicio === 'object') {
      return formValues.hora_inicio.label || 'No seleccionada';
    }
    
    return formValues.hora_inicio === 'mañana' 
      ? 'Mañana (11:00 - 16:00)' 
      : 'Tarde (17:00 - 22:00)';
  };
  
  // Descripción de extras seleccionados
  const getExtrasDescription = () => {
    if (!selectedExtras.length) return null;
    
    return (
      <div className="space-y-2 py-2">
        {selectedExtras.map((extra, index) => {
          const extraInfo = extras.find(e => e.id === extra.id);
          if (!extraInfo) return null;
          
          const cantidad = parseInt(extra.cantidad) || 1;
          const extraPrice = (parseFloat(extraInfo.precio) || 0) * cantidad;
          
          return (
            <div key={index} className="flex justify-between items-center">
              <div>
                <span className="font-medium">{extraInfo.nombre}</span>
                {cantidad > 1 && <span className="text-gray-500"> (x{cantidad})</span>}
              </div>
              <div className="text-indigo-600 font-medium">
                {formatCurrency(extraPrice)}
              </div>
            </div>
          );
        })}
      </div>
    );
  };

  // Cálculo del total
  const calculateTotal = () => {
    let total = 0;
    
    // Precio del paquete
    if (selectedPackage) {
      const packagePrice = formValues.packagePrice || 0;
      total += packagePrice;
    }
    
    // Precio de la opción de alimento
    if (selectedFoodOption) {
      total += parseFloat(selectedFoodOption.precio_extra) || 0;
    }
    
    // Precio de la mampara
    if (selectedMampara) {
      total += parseFloat(selectedMampara.precio) || 0;
    }
    
    // Recargo por martes
    total += parseFloat(formValues.tuesdayFee) || 0;
    
    // Precio de extras
    selectedExtras.forEach(extra => {
      const extraInfo = extras.find(e => e.id === extra.id);
      if (extraInfo && extra.cantidad) {
        total += (parseFloat(extraInfo.precio) || 0) * (parseInt(extra.cantidad) || 1);
      }
    });
    
    return total;
  };

  // Verificar si hay información suficiente para continuar
  const canProceed = () => {
    const requiredFields = [
      'id_paquete',
      'fecha_reserva',
      'hora_inicio',
      'id_tematica',
      'nombre_festejado',
      'edad_festejado'
    ];
    
    return requiredFields.every(field => !!formValues[field]);
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-3">Revisa tu Reserva</h2>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Por favor verifica que todos los detalles de tu reserva sean correctos antes de continuar.
        </p>
      </div>

      {/* Status Banner */}
      {canProceed() ? (
        <div className="bg-green-50 border border-green-200 p-4 rounded-lg flex items-center gap-3 mb-6">
          <FiCheckCircle className="text-green-500 w-6 h-6 flex-shrink-0" />
          <div>
            <h3 className="font-medium text-green-800">¡Todo listo para confirmar!</h3>
            <p className="text-green-700 text-sm">
              Has completado toda la información necesaria. Revisa los detalles y haz clic en continuar cuando estés listo.
            </p>
          </div>
        </div>
      ) : (
        <div className="bg-amber-50 border border-amber-200 p-4 rounded-lg flex items-center gap-3 mb-6">
          <FiAlertTriangle className="text-amber-500 w-6 h-6 flex-shrink-0" />
          <div>
            <h3 className="font-medium text-amber-800">Falta información requerida</h3>
            <p className="text-amber-700 text-sm">
              Debes completar todos los campos requeridos para poder confirmar tu reserva. Revisa las secciones marcadas con un botón de editar.
            </p>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Paquete */}
        <SummarySection 
          title="Paquete" 
          icon={FiPackage} 
          editAction={true}
          stepIndex={0}
          goToStep={goToStep}
        >
          {selectedPackage ? (
            <div className="space-y-3">
              <div className="flex justify-between">
                <h4 className="font-medium text-lg">{selectedPackage.nombre}</h4>
                <span className="text-indigo-600 font-bold">{formatCurrency(formValues.packagePrice || 0)}</span>
              </div>
              
              <p className="text-gray-600 text-sm">
                {selectedPackage.min_invitados} - {selectedPackage.max_invitados} invitados
              </p>
              
              {selectedPackage.descripcion && (
                <p className="text-gray-600 text-sm">{selectedPackage.descripcion}</p>
              )}
            </div>
          ) : (
            <div className="py-4 text-amber-600 flex items-center gap-2">
              <FiAlertTriangle className="w-5 h-5" />
              <span>Este campo es requerido. Por favor selecciona un paquete.</span>
            </div>
          )}
        </SummarySection>

        {/* Fecha y Hora */}
        <SummarySection 
          title="Fecha y Hora" 
          icon={FiCalendar}
          editAction={true}
          stepIndex={1}
          goToStep={goToStep}
        >
          <div className="space-y-4">
            <SummaryItem 
              label="Fecha" 
              value={formatDate(formValues.fecha_reserva)}
              icon={FiCalendar}
            />
            <SummaryItem 
              label="Horario" 
              value={getFormattedTimeSlot()}
              icon={FiClock}
            />
            
            {formValues.tuesdayFee > 0 && (
              <div className="flex justify-between items-center mt-2 pt-2 border-t border-dashed border-gray-200">
                <span className="text-amber-600 font-medium flex items-center gap-1">
                  <FiAlertTriangle className="w-4 h-4" />
                  Cargo adicional por martes
                </span>
                <span className="text-amber-600 font-medium">
                  {formatCurrency(formValues.tuesdayFee)}
                </span>
              </div>
            )}
          </div>
        </SummarySection>

        {/* Temática */}
        <SummarySection 
          title="Temática" 
          icon={FiImage}
          editAction={true}
          stepIndex={2}
          goToStep={goToStep}
        >
          {selectedTematica ? (
            <div className="space-y-3">
              <div className="flex justify-between">
                <h4 className="font-medium text-lg">{selectedTematica.nombre}</h4>
                {selectedTematica.precio > 0 && (
                  <span className="text-indigo-600 font-bold">{formatCurrency(selectedTematica.precio)}</span>
                )}
              </div>
              
              {selectedTematica.descripcion && (
                <p className="text-gray-600 text-sm">{selectedTematica.descripcion}</p>
              )}
            </div>
          ) : (
            <div className="py-4 text-amber-600 flex items-center gap-2">
              <FiAlertTriangle className="w-5 h-5" />
              <span>Este campo es requerido. Por favor selecciona una temática.</span>
            </div>
          )}
        </SummarySection>

        {/* Mampara */}
        <SummarySection 
          title="Mampara" 
          icon={FiImage}
          editAction={true}
          stepIndex={3}
          goToStep={goToStep}
        >
          {selectedMampara ? (
            <div className="space-y-3">
              <div className="flex justify-between">
                <h4 className="font-medium text-lg">Mampara de {selectedMampara.piezas} piezas</h4>
                <span className="text-indigo-600 font-bold">{formatCurrency(selectedMampara.precio)}</span>
              </div>
              
              {selectedMampara.descripcion && (
                <p className="text-gray-600 text-sm">{selectedMampara.descripcion}</p>
              )}
            </div>
          ) : (
            <div className="text-gray-500 italic">
              No seleccionada (opcional)
            </div>
          )}
        </SummarySection>

        {/* Opción de Alimentos */}
        <SummarySection 
          title="Opción de Alimentos" 
          icon={FiCoffee}
          editAction={true}
          stepIndex={4}
          goToStep={goToStep}
        >
          {selectedFoodOption ? (
            <div className="space-y-3">
              <div className="flex justify-between">
                <h4 className="font-medium text-lg">{selectedFoodOption.nombre}</h4>
                <span className="text-indigo-600 font-bold">{formatCurrency(selectedFoodOption.precio_extra)}</span>
              </div>
              
              {selectedFoodOption.descripcion && (
                <p className="text-gray-600 text-sm">{selectedFoodOption.descripcion}</p>
              )}
            </div>
          ) : (
            <div className="text-gray-500 italic">
              No seleccionada (opcional)
            </div>
          )}
        </SummarySection>

        {/* Extras */}
        <SummarySection 
          title="Extras" 
          icon={FiList}
          editAction={true}
          stepIndex={5}
          goToStep={goToStep}
          isExpandable={selectedExtras.length > 3}
        >
          {selectedExtras.length > 0 ? (
            getExtrasDescription()
          ) : (
            <div className="text-gray-500 italic">
              No seleccionados (opcional)
            </div>
          )}
        </SummarySection>

        {/* Festejado */}
        <SummarySection 
          title="Información del Festejado" 
          icon={FiUser}
          editAction={true}
          stepIndex={6}
          goToStep={goToStep}
        >
          {formValues.nombre_festejado && formValues.edad_festejado ? (
            <div className="space-y-4">
              <SummaryItem 
                label="Nombre" 
                value={formValues.nombre_festejado}
                icon={FiUser}
              />
              <SummaryItem 
                label="Edad" 
                value={formValues.edad_festejado}
                icon={FiCalendar}
              />
              {formValues.sexo_festejado && (
                <SummaryItem 
                  label="Sexo" 
                  value={formValues.sexo_festejado === 'femenino' ? 'Niña' : 'Niño'}
                  icon={FiUser}
                />
              )}
              {formValues.color_favorito && (
                <SummaryItem 
                  label="Color favorito" 
                  value={formValues.color_favorito}
                  icon={FiImage}
                />
              )}
            </div>
          ) : (
            <div className="py-4 text-amber-600 flex items-center gap-2">
              <FiAlertTriangle className="w-5 h-5" />
              <span>Este campo es requerido. Por favor completa la información del festejado.</span>
            </div>
          )}
        </SummarySection>

        {/* Comentarios */}
        <SummarySection 
          title="Comentarios o Peticiones Especiales" 
          icon={FiMessageCircle}
          editAction={true}
          stepIndex={6}
          goToStep={goToStep}
        >
          {formValues.detalles_especiales ? (
            <p className="text-gray-700">{formValues.detalles_especiales}</p>
          ) : (
            <div className="text-gray-500 italic">
              No se proporcionaron comentarios adicionales (opcional)
            </div>
          )}
        </SummarySection>
      </div>

      {/* Total */}
      <div className="bg-indigo-50 p-5 rounded-lg border border-indigo-100">
        <div className="flex justify-between items-center">
          <div className="flex items-center gap-2">
            <FiDollarSign className="text-indigo-600 w-6 h-6" />
            <span className="text-xl font-bold text-indigo-800">Total a Pagar:</span>
          </div>
          <span className="text-2xl font-bold text-indigo-600">
            {formatCurrency(calculateTotal())}
          </span>
        </div>
      </div>
    </div>
  );
};

export default ReviewStep;\n\n
=== ./reservas/pages/customer/reservationsteps/ThemeStep.jsx ===
import React, { useState, useEffect } from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import { motion, AnimatePresence } from 'framer-motion';
import { FiImage, FiDollarSign, FiSearch, FiInfo, FiX, FiCheck, FiZoomIn } from 'react-icons/fi';

// Función para formatear moneda
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount || 0);
};

// Optimizador de URL de Cloudinary
const optimizeCloudinaryUrl = (url, options = {}) => {
  if (!url || !url.includes('cloudinary.com')) return url;
  
  const { width = 400, height = 300, quality = 'auto' } = options;
  
  try {
    // Extraer la URL base y las transformaciones
    const urlObj = new URL(url);
    const pathSegments = urlObj.pathname.split('/');
    
    // Encontrar el índice donde empiezan los segmentos de imagen (después de upload)
    let uploadIndex = pathSegments.findIndex(segment => segment === 'upload');
    
    if (uploadIndex !== -1) {
      // Crear nuevas transformaciones
      const transformations = `c_fill,g_auto,f_auto,q_${quality},w_${width},h_${height}`;
      
      // Insertar transformaciones justo después de 'upload'
      pathSegments.splice(uploadIndex + 1, 0, transformations);
      
      // Reconstruir la URL
      urlObj.pathname = pathSegments.join('/');
      return urlObj.toString();
    }
    
    return url;
  } catch (error) {
    console.error('Error optimizando URL de Cloudinary:', error);
    return url;
  }
};

// Componente modal para vista ampliada de imagen
const ImageModal = ({ isOpen, onClose, tematica }) => {
  if (!isOpen || !tematica) return null;
  
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75 transition-opacity duration-300">
      <div className="relative w-full max-w-3xl p-4">
        {/* Botón para cerrar */}
        <button 
          onClick={onClose}
          className="absolute top-4 right-4 p-2 rounded-full bg-white text-gray-800 hover:bg-gray-200 transition-colors z-10"
          aria-label="Cerrar"
        >
          <FiX className="w-6 h-6" />
        </button>
        
        <div className="bg-white rounded-xl overflow-hidden shadow-2xl animate-scaleIn">
          {/* Imagen */}
          <div className="relative">
            {tematica.foto ? (
              <img 
                src={optimizeCloudinaryUrl(tematica.foto, { width: 1200, height: 800, quality: 'auto:best' })}
                alt={tematica.nombre}
                className="w-full object-cover"
                style={{ maxHeight: 'calc(80vh - 120px)' }}
              />
            ) : (
              <div className="bg-gray-200 w-full h-64 flex items-center justify-center">
                <FiImage className="w-12 h-12 text-gray-400" />
              </div>
            )}
          </div>
          
          {/* Información */}
          <div className="p-6">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-xl font-bold text-gray-900">{tematica.nombre}</h3>
              {tematica.precio > 0 && (
                <div className="flex items-center gap-1 text-indigo-600 font-medium">
                  <FiDollarSign className="w-4 h-4" />
                  <span>{formatCurrency(tematica.precio)}</span>
                </div>
              )}
            </div>
            
            {tematica.descripcion && (
              <p className="text-gray-700 mt-2">{tematica.descripcion}</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

const ThemeStep = ({ tematicas }) => {
  const { control, watch, formState: { errors } } = useFormContext();
  const selectedThemeId = watch('id_tematica');
  const [searchQuery, setSearchQuery] = useState('');
  const [viewingTematica, setViewingTematica] = useState(null);
  const [filteredTematicas, setFilteredTematicas] = useState([]);
  
  // Filtrar temáticas activas
  useEffect(() => {
    const activeTematicas = tematicas.filter(tematica => tematica.activo);
    
    if (searchQuery.trim()) {
      const normalizedQuery = searchQuery.toLowerCase().trim();
      const filtered = activeTematicas.filter(tematica => 
        tematica.nombre.toLowerCase().includes(normalizedQuery) ||
        (tematica.descripcion && tematica.descripcion.toLowerCase().includes(normalizedQuery))
      );
      setFilteredTematicas(filtered);
    } else {
      setFilteredTematicas(activeTematicas);
    }
  }, [tematicas, searchQuery]);

  // Ordenar temáticas (primero las destacadas, luego por nombre)
  const sortedTematicas = [...filteredTematicas].sort((a, b) => {
    if (a.destacado && !b.destacado) return -1;
    if (!a.destacado && b.destacado) return 1;
    return a.nombre.localeCompare(b.nombre);
  });

  // Manejar la apertura de vista detallada
  const handleViewDetails = (tematica) => {
    setViewingTematica(tematica);
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-3">Elige tu Temática</h2>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Selecciona el tema que hará mágico tu evento. Puedes personalizar tu espacio con uno de nuestros diseños de temáticas
        </p>
      </div>

      {/* Buscador */}
      <div className="relative">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <FiSearch className="h-5 w-5 text-gray-400" />
        </div>
        <input
          type="text"
          className="block w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 shadow-sm"
          placeholder="Buscar temáticas por nombre..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        {searchQuery && (
          <button
            type="button"
            onClick={() => setSearchQuery('')}
            className="absolute inset-y-0 right-0 pr-3 flex items-center"
          >
            <FiX className="h-5 w-5 text-gray-400 hover:text-gray-600" />
          </button>
        )}
      </div>

      {/* Grid de Temáticas */}
      <Controller
        control={control}
        name="id_tematica"
        rules={{ required: "Por favor selecciona una temática" }}
        render={({ field }) => (
          <div className="space-y-4">
            {sortedTematicas.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
                {sortedTematicas.map((tematica) => {
                  const isSelected = field.value === tematica.id;
                  
                  return (
                    <motion.div
                      key={tematica.id}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      className={`rounded-xl overflow-hidden shadow-lg transition-all duration-300 ${
                        isSelected
                          ? 'ring-4 ring-indigo-500 transform scale-[1.02]'
                          : 'hover:shadow-xl'
                      }`}
                    >
                      <div className={`border h-full flex flex-col rounded-xl overflow-hidden ${
                        isSelected ? 'border-indigo-500' : 'border-gray-200'
                      }`}>
                        {/* Imagen de la temática */}
                        <div className="relative group">
                          {tematica.foto ? (
                            <div className="relative overflow-hidden h-48 bg-gray-100">
                              <img
                                src={optimizeCloudinaryUrl(tematica.foto, { width: 500, height: 300 })}
                                alt={tematica.nombre}
                                className="w-full h-full object-cover"
                                loading="lazy"
                              />
                              <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-300 flex items-center justify-center">
                                <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                  <button
                                    type="button"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleViewDetails(tematica);
                                    }}
                                    className="p-2 bg-white rounded-full shadow-lg hover:bg-indigo-100"
                                    aria-label="Ver imagen ampliada"
                                  >
                                    <FiZoomIn className="w-5 h-5 text-indigo-600" />
                                  </button>
                                </div>
                              </div>
                            </div>
                          ) : (
                            <div className="h-48 bg-gray-200 flex items-center justify-center">
                              <FiImage className="w-12 h-12 text-gray-400" />
                            </div>
                          )}
                          
                          {tematica.destacado && (
                            <div className="absolute top-2 left-2 bg-indigo-600 text-white text-xs font-bold px-3 py-1 rounded-full">
                              Destacado
                            </div>
                          )}
                          
                          {isSelected && (
                            <div className="absolute top-2 right-2 bg-white text-indigo-600 text-xs font-bold px-3 py-1 rounded-full flex items-center gap-1 shadow-md">
                              <FiCheck className="w-3 h-3" />
                              Seleccionado
                            </div>
                          )}
                        </div>
                        
                        {/* Información de la temática */}
                        <div className="p-4 flex-1 flex flex-col">
                          <div className="flex items-start justify-between">
                            <h3 className="text-lg font-semibold text-gray-900">{tematica.nombre}</h3>
                            {tematica.precio > 0 && (
                              <div className="flex items-center gap-1 text-indigo-600 font-medium text-sm">
                                <FiDollarSign className="w-4 h-4" />
                                <span>{formatCurrency(tematica.precio)}</span>
                              </div>
                            )}
                          </div>
                          
                          {tematica.descripcion && (
                            <p className="text-sm text-gray-600 mt-2 line-clamp-2">
                              {tematica.descripcion}
                            </p>
                          )}
                          
                          <div className="mt-auto pt-4">
                            <button
                              type="button"
                              onClick={() => field.onChange(tematica.id)}
                              className={`w-full py-2 px-4 rounded-lg font-medium transition-colors ${
                                isSelected
                                  ? 'bg-indigo-100 text-indigo-700 border-2 border-indigo-600'
                                  : 'bg-indigo-600 text-white hover:bg-indigo-700'
                              }`}
                            >
                              {isSelected ? 'Temática Seleccionada' : 'Seleccionar Temática'}
                            </button>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  );
                })}
              </div>
            ) : (
              <div className="text-center py-10 bg-gray-50 rounded-lg border border-dashed border-gray-300">
                <FiInfo className="w-10 h-10 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500">
                  {searchQuery
                    ? 'No se encontraron temáticas que coincidan con tu búsqueda'
                    : 'No hay temáticas disponibles en este momento'}
                </p>
                {searchQuery && (
                  <button
                    className="mt-4 text-indigo-600 hover:text-indigo-800 font-medium"
                    onClick={() => setSearchQuery('')}
                  >
                    Limpiar búsqueda
                  </button>
                )}
              </div>
            )}
            
            {errors.id_tematica && (
              <p className="text-red-500 flex items-center gap-1 text-sm mt-2">
                <FiInfo className="w-4 h-4 flex-shrink-0" />
                <span>{errors.id_tematica.message}</span>
              </p>
            )}
          </div>
        )}
      />

      {/* Modal para vista ampliada */}
      <AnimatePresence>
        {viewingTematica && (
          <ImageModal
            isOpen={!!viewingTematica}
            onClose={() => setViewingTematica(null)}
            tematica={viewingTematica}
          />
        )}
      </AnimatePresence>

      {/* Información adicional */}
      <div className="mt-6 bg-indigo-50 p-5 rounded-lg">
        <div className="flex gap-3">
          <FiInfo className="w-6 h-6 text-indigo-600 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-indigo-800">Personalización de Temáticas</h4>
            <p className="text-indigo-700 text-sm mt-1">
              La temática define el aspecto visual de tu evento. Algunas temáticas tienen un costo adicional
              por los materiales y decoración especializada que requieren.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ThemeStep;\n\n
=== ./reservas/pages/customer/reservationsteps/index.js ===
/**
 * index.js
 * Punto de entrada para los componentes de pasos de reservación
 * Centraliza las importaciones y exportaciones de componentes para un uso más limpio
 */

// Importar todos los componentes de pasos
import PackageStep from './PackageStep';
import DateTimeStep from './DateTimeStep';
import ThemeStep from './ThemeStep';
import MamparaStep from './MamparaStep';
import FoodOptionsStep from './FoodOptionsStep';
import ExtrasStep from './ExtrasStep';
import CelebrantStep from './CelebrantStep';
import ReviewStep from './ReviewStep';

// Exportar todos los componentes individualmente
export {
  PackageStep,
  DateTimeStep,
  ThemeStep,
  MamparaStep,
  FoodOptionsStep,
  ExtrasStep,
  CelebrantStep,
  ReviewStep
};

/**
 * Definición de los pasos con sus respectivos componentes y metadatos
 * Esto proporciona una estructura centralizada para gestionar los pasos
 * @typedef {Object} Step
 * @property {string} id - Identificador único del paso
 * @property {string} label - Etiqueta visible para el paso
 * @property {React.Component} component - Componente a renderizar para este paso
 * @property {string[]} required - Campos requeridos para completar este paso
 * @property {React.Component} icon - Componente de icono para este paso
 */

/**
 * Configuración de pasos disponibles para importar
 * @type {Step[]}
 */
const STEPS = [
  {
    id: 'package',
    label: 'Paquete',
    component: PackageStep,
    required: ['id_paquete'],
    description: 'Selecciona el paquete base para tu evento'
  },
  {
    id: 'datetime',
    label: 'Fecha y Hora',
    component: DateTimeStep,
    required: ['fecha_reserva', 'hora_inicio'],
    description: 'Elige el día y horario para tu celebración'
  },
  {
    id: 'theme',
    label: 'Temática',
    component: ThemeStep,
    required: ['id_tematica'],
    description: 'Personaliza la temática de tu evento'
  },
  {
    id: 'mampara',
    label: 'Mampara',
    component: MamparaStep,
    required: [],
    description: 'Selecciona la mampara decorativa (opcional)'
  },
  {
    id: 'food',
    label: 'Alimentos',
    component: FoodOptionsStep,
    required: [],
    description: 'Elige opciones de alimentos para tus invitados'
  },
  {
    id: 'extras',
    label: 'Extras',
    component: ExtrasStep,
    required: [],
    description: 'Agrega elementos adicionales a tu evento'
  },
  {
    id: 'celebrant',
    label: 'Festejado',
    component: CelebrantStep,
    required: ['nombre_festejado', 'edad_festejado'],
    description: 'Información sobre el/la festejado/a'
  },
  {
    id: 'review',
    label: 'Revisar',
    component: ReviewStep,
    required: [],
    description: 'Revisa los detalles de tu reservación'
  }
];

// Exportar la configuración de pasos como default
export default STEPS;

/**
 * Función para obtener un paso específico por su ID
 * @param {string} stepId - ID del paso a buscar
 * @returns {Step|undefined} - El paso encontrado o undefined
 */
export const getStepById = (stepId) => {
  return STEPS.find(step => step.id === stepId);
};

/**
 * Función para verificar si un paso es válido basado en los valores del formulario
 * @param {Step} step - El paso a validar
 * @param {Object} formValues - Valores actuales del formulario
 * @returns {boolean} - true si todos los campos requeridos tienen valor
 */
export const isStepValid = (step, formValues) => {
  if (!step.required || step.required.length === 0) return true;
  
  return step.required.every(field => {
    const value = formValues[field];
    return value !== null && value !== undefined && value !== '';
  });
};

/**
 * Función para verificar si todos los pasos requeridos están completos
 * @param {Object} formValues - Valores actuales del formulario
 * @returns {boolean} - true si todos los pasos requeridos están completos
 */
export const areAllRequiredStepsValid = (formValues) => {
  const allRequiredFields = STEPS.flatMap(step => step.required);
  
  return allRequiredFields.every(field => {
    const value = formValues[field];
    return value !== null && value !== undefined && value !== '';
  });
};

/**
 * Función para obtener el índice del próximo paso inválido
 * @param {number} currentIndex - Índice actual
 * @param {Object} formValues - Valores actuales del formulario
 * @returns {number} - Índice del próximo paso inválido o -1 si no hay
 */
export const getNextInvalidStepIndex = (currentIndex, formValues) => {
  for (let i = currentIndex + 1; i < STEPS.length; i++) {
    if (!isStepValid(STEPS[i], formValues)) {
      return i;
    }
  }
  return -1;
};\n\n
=== ./reservas/pages/customer/styles/StepComponents.module.css ===
/* 
  StepComponents.module.css
  Estilos para los componentes de cada paso de reservación
*/

/* ==========================================================================
   ESTILOS COMUNES PARA TODOS LOS PASOS
   ========================================================================== */
.stepContainer {
  @apply w-full mb-8;
}

.stepTitle {
  @apply text-xl font-bold text-gray-900 dark:text-white mb-6;
}

.stepDescription {
  @apply text-gray-600 dark:text-gray-300 mb-6;
}

.stepSection {
  @apply mb-8 last:mb-0;
}

.sectionTitle {
  @apply text-base font-medium text-gray-900 dark:text-white mb-3;
}

.sectionDescription {
  @apply text-sm text-gray-600 dark:text-gray-400 mb-4;
}

/* Formularios y campos */
.formRow {
  @apply flex flex-col md:flex-row gap-4 mb-6;
}

.formGroup {
  @apply flex flex-col gap-2 w-full;
}

.formLabel {
  @apply text-sm font-medium text-gray-700 dark:text-gray-300;
}

.formHelper {
  @apply text-xs text-gray-500 dark:text-gray-400 mt-1;
}

.formError {
  @apply text-xs text-red-600 dark:text-red-400 mt-1;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE PAQUETE (PackageStep)
   ========================================================================== */
.packageCard {
  @apply relative border rounded-xl p-6 transition-all duration-200 cursor-pointer;
}

.packageCardDefault {
  @apply border-gray-200 dark:border-gray-700 hover:border-indigo-200 dark:hover:border-indigo-800 hover:bg-indigo-50 dark:hover:bg-indigo-900/30;
}

.packageCardSelected {
  @apply border-indigo-500 bg-indigo-50 dark:bg-indigo-900/30 dark:border-indigo-700;
}

.packagePrice {
  @apply text-xl font-bold text-indigo-600 dark:text-indigo-400;
}

.packageDetails {
  @apply mt-3 text-sm text-gray-600 dark:text-gray-400;
}

.packageFeatures {
  @apply mt-4 space-y-2;
}

.packageFeatureItem {
  @apply flex items-start gap-2 text-sm;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE FECHA Y HORA (DateTimeStep)
   ========================================================================== */
.calendar {
  @apply bg-white dark:bg-gray-800 rounded-xl shadow-sm p-4 overflow-hidden;
}

.timeSelection {
  @apply grid grid-cols-2 gap-4 mt-6;
}

.timeCard {
  @apply flex flex-col items-center justify-center p-4 border rounded-xl transition-all duration-200 cursor-pointer;
}

.timeCardDefault {
  @apply border-gray-200 dark:border-gray-700 hover:border-indigo-200 dark:hover:border-indigo-800 hover:bg-indigo-50 dark:hover:bg-indigo-900/30;
}

.timeCardSelected {
  @apply border-indigo-500 bg-indigo-50 dark:bg-indigo-900/30 dark:border-indigo-700;
}

.dateInfo {
  @apply mt-4 p-4 bg-blue-50 dark:bg-blue-900/30 rounded-lg border border-blue-200 dark:border-blue-800;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE TEMÁTICA (ThemeStep)
   ========================================================================== */
.themeGrid {
  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6;
}

.themeCard {
  @apply relative border rounded-xl overflow-hidden transition-all duration-200 cursor-pointer;
}

.themeCardDefault {
  @apply border-gray-200 dark:border-gray-700 hover:border-indigo-300 dark:hover:border-indigo-700;
}

.themeCardSelected {
  @apply border-indigo-500 dark:border-indigo-600 ring-2 ring-indigo-500 dark:ring-indigo-600;
}

.themeImage {
  @apply w-full h-48 object-cover object-center;
}

.themeContent {
  @apply p-4;
}

.themeName {
  @apply text-lg font-medium text-gray-900 dark:text-white;
}

.themeDescription {
  @apply text-sm text-gray-600 dark:text-gray-400 mt-1 line-clamp-2;
}

.themePrice {
  @apply text-indigo-600 dark:text-indigo-400 font-medium mt-2;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE MAMPARA (MamparaStep)
   ========================================================================== */
.mamparaGrid {
  @apply grid grid-cols-1 md:grid-cols-2 gap-6;
}

.mamparaCard {
  @apply relative border rounded-xl overflow-hidden transition-all duration-200 cursor-pointer;
}

.mamparaCardDefault {
  @apply border-gray-200 dark:border-gray-700 hover:border-indigo-300 dark:hover:border-indigo-700;
}

.mamparaCardSelected {
  @apply border-indigo-500 dark:border-indigo-600 ring-2 ring-indigo-500 dark:ring-indigo-600;
}

.mamparaImage {
  @apply w-full h-64 object-cover object-center;
}

.mamparaContent {
  @apply p-4;
}

.mamparaName {
  @apply text-lg font-medium text-gray-900 dark:text-white;
}

.mamparaDescription {
  @apply text-sm text-gray-600 dark:text-gray-400 mt-1;
}

.mamparaPrice {
  @apply text-indigo-600 dark:text-indigo-400 font-medium mt-2;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE ALIMENTOS (FoodOptionsStep)
   ========================================================================== */
.foodGrid {
  @apply space-y-6;
}

.foodCard {
  @apply relative border rounded-xl p-5 transition-all duration-200 cursor-pointer;
}

.foodCardDefault {
  @apply border-gray-200 dark:border-gray-700 hover:border-indigo-200 dark:hover:border-indigo-800 hover:bg-indigo-50 dark:hover:bg-indigo-900/30;
}

.foodCardSelected {
  @apply border-indigo-500 bg-indigo-50 dark:bg-indigo-900/30 dark:border-indigo-700;
}

.foodName {
  @apply text-lg font-medium text-gray-900 dark:text-white;
}

.foodDescription {
  @apply text-sm text-gray-600 dark:text-gray-400 mt-2;
}

.foodOptions {
  @apply mt-4 space-y-3 text-sm;
}

.foodPrice {
  @apply text-indigo-600 dark:text-indigo-400 font-medium mt-4;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE EXTRAS (ExtrasStep)
   ========================================================================== */
.extrasGrid {
  @apply grid grid-cols-1 md:grid-cols-2 gap-6;
}

.extraCard {
  @apply border rounded-xl p-5 transition-all duration-200;
}

.extraName {
  @apply text-lg font-medium text-gray-900 dark:text-white;
}

.extraDescription {
  @apply text-sm text-gray-600 dark:text-gray-400 mt-2;
}

.extraPrice {
  @apply text-indigo-600 dark:text-indigo-400 font-medium mt-2;
}

.extraControls {
  @apply flex items-center justify-between mt-4;
}

.extraQuantity {
  @apply flex items-center gap-3;
}

.quantityButton {
  @apply w-8 h-8 flex items-center justify-center rounded-full bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-indigo-100 dark:hover:bg-indigo-900 transition-colors;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE FESTEJADO (CelebrantStep)
   ========================================================================== */
.celebrantForm {
  @apply space-y-6;
}

.colorPicker {
  @apply mt-6;
}

.colorGrid {
  @apply grid grid-cols-6 sm:grid-cols-8 gap-3 mt-3;
}

.colorSwatch {
  @apply w-8 h-8 rounded-full cursor-pointer transition-transform hover:scale-110;
}

.colorSwatchSelected {
  @apply ring-2 ring-offset-2 ring-indigo-600 dark:ring-offset-gray-800;
}

.colorCustom {
  @apply mt-4;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE REVISIÓN (ReviewStep)
   ========================================================================== */
.reviewContainer {
  @apply space-y-8;
}

.reviewSection {
  @apply border-b border-gray-200 dark:border-gray-700 pb-6 last:border-0;
}

.reviewSectionTitle {
  @apply flex items-center justify-between;
}

.reviewSectionHeading {
  @apply text-lg font-medium text-gray-900 dark:text-white;
}

.editButton {
  @apply text-sm text-indigo-600 dark:text-indigo-400 hover:text-indigo-700 dark:hover:text-indigo-300 font-medium;
}

.reviewDetail {
  @apply mt-4 space-y-4 text-gray-600 dark:text-gray-400;
}

.reviewItem {
  @apply flex items-start gap-3;
}

.reviewItemLabel {
  @apply font-medium text-gray-700 dark:text-gray-300;
}

.reviewItemValue {
  @apply text-gray-600 dark:text-gray-400;
}

.alert {
  @apply p-4 rounded-lg mt-6;
}

.alertWarning {
  @apply bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800;
}

.alertSuccess {
  @apply bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800;
}

.alertError {
  @apply bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800;
}\n\n
=== ./reservas/pages/customer/styles/StepperReservation.module.css ===
/* 
  StepperReservation.module.css
  Sistema organizado de estilos para el componente StepperReservation 
*/

/* ==========================================================================
   VARIABLES DE ESTILO
   ========================================================================== */
:root {
  --color-primary: #4f46e5; /* indigo-600 */
  --color-primary-dark: #4338ca; /* indigo-700 */
  --color-primary-light: #6366f1; /* indigo-500 */
  --color-primary-lightest: #eef2ff; /* indigo-50 */
  
  --color-success: #22c55e; /* green-500 */
  --color-success-dark: #16a34a; /* green-600 */
  
  --color-danger: #ef4444; /* red-500 */
  --color-danger-dark: #dc2626; /* red-600 */
  
  --color-warning: #f59e0b; /* amber-500 */

  --color-info: #3b82f6; /* blue-500 */
  
  --color-gray-50: #f9fafb;
  --color-gray-100: #f3f4f6;
  --color-gray-200: #e5e7eb;
  --color-gray-300: #d1d5db;
  --color-gray-500: #6b7280;
  --color-gray-600: #4b5563;
  --color-gray-700: #374151;
  --color-gray-800: #1f2937;
  --color-gray-900: #111827;
  
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  
  --radius-md: 0.375rem; /* 6px */
  --radius-lg: 0.5rem; /* 8px */
  --radius-xl: 0.75rem; /* 12px */
  --radius-2xl: 1rem; /* 16px */
  --radius-full: 9999px;
  
  --transition-fast: 200ms;
  --transition-normal: 300ms;
}

/* ==========================================================================
   LAYOUT BASE
   ========================================================================== */
.container {
  @apply container mx-auto px-0 sm:px-4 max-w-7xl;
}

.pageBackground {
  @apply bg-gradient-to-b from-indigo-50 to-gray-50 dark:from-gray-900 dark:to-black min-h-screen transition-all duration-300;
}

.pageBackgroundFullscreen {
  @apply fixed inset-0 z-50;
}

.header {
  @apply bg-white dark:bg-gray-800 shadow-sm p-4 md:rounded-lg md:mt-4 sticky top-0 z-30 border-b md:border border-gray-200 dark:border-gray-700;
}

.contentGrid {
  @apply md:mt-8 md:px-4 relative md:grid md:grid-cols-3 md:gap-8 lg:grid-cols-4;
}

.stepContent {
  @apply md:col-span-3 bg-white dark:bg-gray-800 md:rounded-xl shadow-sm;
}

.contentPadding {
  @apply p-4 md:p-8;
}

.infoSection {
  @apply p-4 md:mt-8 md:mb-12;
}

/* ==========================================================================
   COMPONENTES
   ========================================================================== */

/* Botones */
.buttonPrimary {
  @apply flex items-center gap-2 px-6 py-2.5 rounded-lg font-medium bg-gradient-to-r from-indigo-500 to-indigo-600 text-white hover:shadow-lg hover:from-indigo-600 hover:to-indigo-700 transition-all duration-200;
}

.buttonSuccess {
  @apply flex items-center gap-2 px-6 py-2.5 rounded-lg font-medium bg-gradient-to-r from-green-500 to-green-600 text-white hover:shadow-lg hover:from-green-600 hover:to-green-700 transition-all duration-200;
}

.buttonDisabled {
  @apply bg-gray-200 text-gray-500 cursor-not-allowed flex items-center gap-2 px-6 py-2.5 rounded-lg font-medium transition-all duration-200;
}

.buttonGhost {
  @apply text-gray-500 hover:text-gray-700 px-4 py-2 hover:bg-gray-100 rounded-lg transition-colors;
}

.buttonNav {
  @apply flex items-center gap-2 px-5 py-2.5 rounded-lg transition-all duration-200;
}

.buttonNavActive {
  @apply text-gray-700 hover:bg-gray-100;
}

.buttonNavDisabled {
  @apply text-gray-400 cursor-not-allowed;
}

.buttonIcon {
  @apply p-2 text-gray-700 dark:text-gray-300 hover:text-indigo-700 dark:hover:text-indigo-400 rounded-full hover:bg-indigo-100 dark:hover:bg-indigo-900 transition-colors;
}

.buttonFloating {
  @apply fixed bottom-4 right-4 z-20 flex items-center gap-2 px-4 py-3 rounded-full shadow-lg bg-indigo-600 dark:bg-indigo-700 text-white;
}

/* Navegación */
.desktopStepsNav {
  @apply hidden md:block my-6 px-4;
}

.mobileProgress {
  @apply p-4 md:hidden;
}

.progressBar {
  @apply h-1.5 bg-gray-200 rounded-full overflow-hidden;
}

.progressFill {
  @apply h-full bg-gradient-to-r from-indigo-500 to-indigo-600 rounded-full;
}

.controlsContainer {
  @apply flex justify-between mt-8 pt-4 border-t border-gray-200;
}

/* Tarjetas y Contenedores */
.card {
  @apply bg-white shadow-lg rounded-xl overflow-hidden;
}

.infoBox {
  @apply bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900 dark:to-indigo-900 p-4 rounded-xl border border-blue-200 dark:border-blue-800 shadow-sm;
}

.alertBox {
  @apply bg-red-50 p-4 rounded-lg border border-red-200;
}

.warningModal {
  @apply fixed inset-0 bg-gray-900/70 backdrop-blur-sm flex items-center justify-center z-50;
}

.errorToast {
  @apply fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-red-50 dark:bg-red-900 border border-red-300 dark:border-red-700 p-4 rounded-xl shadow-lg max-w-sm w-full;
}

/* Resumen lateral */
.summarySidebar {
  @apply hidden lg:block lg:col-span-1 transition-all duration-300 ease-in-out;
}

.summarySidebarMobile {
  @apply fixed inset-0 z-40 bg-gray-900/50 backdrop-blur-sm transition-all duration-300 ease-in-out;
}

.summarySidebarContent {
  @apply bg-white shadow-lg h-full overflow-y-auto w-full max-w-md;
}

.summarySidebarDesktop {
  @apply lg:h-auto lg:sticky lg:top-24 lg:rounded-xl lg:shadow-sm;
}

.summarySidebarMobileHeader {
  @apply flex justify-between items-center p-4 border-b border-gray-200;
}

/* Indicadores */
.loadingIndicator {
  @apply flex items-center justify-center h-64;
}

.loadingSpinner {
  @apply animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500;
}

.buttonLoadingSpinner {
  @apply w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin;
}

/* ==========================================================================
   ANIMACIONES
   ========================================================================== */
@keyframes slideInRight {
  from { transform: translateX(100%); }
  to { transform: translateX(0); }
}

@keyframes slideUp {
  from { transform: translate(-50%, 100%); opacity: 0; }
  to { transform: translate(-50%, 0); opacity: 1; }
}

@keyframes zoomIn {
  from { transform: scale(0.9); opacity: 0; }
  to { transform: scale(1); opacity: 1; }
}

@keyframes bounceSubtle {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-5px); }
}

.animateSlideInRight {
  animation: slideInRight 0.3s ease-out forwards;
}

.animateSlideUp {
  animation: slideUp 0.3s ease-out forwards;
}

.animateZoomIn {
  animation: zoomIn 0.3s ease-out forwards;
}

.animateBounceSubtle {
  animation: bounceSubtle 2s infinite;
}

/* ==========================================================================
   TEMA OSCURO - Ajustes específicos
   ========================================================================== */
.darkText {
  @apply dark:text-white;
}

.darkCard {
  @apply dark:bg-gray-800;
}

.darkBorder {
  @apply dark:border-gray-700;
}

/* ==========================================================================
   RESPONSIVIDAD - Ajustes específicos
   ========================================================================== */
.mobileOnly {
  @apply block md:hidden;
}

.desktopOnly {
  @apply hidden md:block;
}

.lgDesktopOnly {
  @apply hidden lg:block;
}

.mobileHidden {
  @apply hidden sm:inline;
}

.mobileFlexHidden {
  @apply hidden sm:flex;
}\n\n
=== ./reservas/pages/customer/styles/UI.module.css ===
/* 
  UI.module.css
  Componentes de interfaz reutilizables para el módulo de reservación
*/

/* ==========================================================================
   BOTONES
   ========================================================================== */
.button {
  @apply inline-flex items-center justify-center rounded-lg font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
}

.buttonSm {
  @apply px-3 py-1.5 text-sm;
}

.buttonMd {
  @apply px-4 py-2;
}

.buttonLg {
  @apply px-6 py-2.5 text-base;
}

.buttonPrimary {
  @apply bg-gradient-to-r from-indigo-500 to-indigo-600 text-white hover:shadow-md hover:from-indigo-600 hover:to-indigo-700 focus:ring-indigo-500;
}

.buttonSecondary {
  @apply bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-gray-500 dark:bg-gray-700 dark:text-gray-200 dark:border-gray-600 dark:hover:bg-gray-600;
}

.buttonSuccess {
  @apply bg-gradient-to-r from-green-500 to-green-600 text-white hover:shadow-md hover:from-green-600 hover:to-green-700 focus:ring-green-500;
}

.buttonDanger {
  @apply bg-gradient-to-r from-red-500 to-red-600 text-white hover:shadow-md hover:from-red-600 hover:to-red-700 focus:ring-red-500;
}

.buttonWarning {
  @apply bg-gradient-to-r from-amber-500 to-amber-600 text-white hover:shadow-md hover:from-amber-600 hover:to-amber-700 focus:ring-amber-500;
}

.buttonInfo {
  @apply bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:shadow-md hover:from-blue-600 hover:to-blue-700 focus:ring-blue-500;
}

.buttonGhost {
  @apply bg-transparent text-gray-700 hover:bg-gray-100 focus:ring-gray-500 dark:text-gray-300 dark:hover:bg-gray-800;
}

.buttonLink {
  @apply bg-transparent text-indigo-600 hover:text-indigo-700 hover:underline focus:ring-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300;
}

.buttonIcon {
  @apply p-2 rounded-full;
}

.buttonDisabled {
  @apply opacity-60 cursor-not-allowed bg-gray-200 text-gray-500 hover:shadow-none;
}

.buttonFullWidth {
  @apply w-full;
}

.buttonGroup {
  @apply inline-flex;
}

.buttonGroupItem {
  @apply rounded-none first:rounded-l-lg last:rounded-r-lg -ml-px first:ml-0 border-l-0 first:border-l;
}

/* ==========================================================================
   FORMULARIOS
   ========================================================================== */
.formGroup {
  @apply mb-4;
}

.formLabel {
  @apply block text-sm font-medium text-gray-700 mb-1 dark:text-gray-300;
}

.formInput {
  @apply block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white;
}

.formInputSm {
  @apply py-1.5 text-sm;
}

.formInputMd {
  @apply py-2;
}

.formInputLg {
  @apply py-2.5 text-base;
}

.formInputInvalid {
  @apply border-red-300 focus:border-red-500 focus:ring-red-500;
}

.formHelper {
  @apply mt-1 text-xs text-gray-500 dark:text-gray-400;
}

.formError {
  @apply mt-1 text-xs text-red-600 dark:text-red-400;
}

.formSelect {
  @apply block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white;
}

.formCheckboxLabel {
  @apply inline-flex items-center;
}

.formCheckbox {
  @apply h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 dark:border-gray-700 dark:bg-gray-800;
}

.formRadioLabel {
  @apply inline-flex items-center;
}

.formRadio {
  @apply h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-500 dark:border-gray-700 dark:bg-gray-800;
}

.formTextarea {
  @apply block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white;
}

/* ==========================================================================
   TARJETAS
   ========================================================================== */
.card {
  @apply bg-white rounded-xl shadow-sm dark:bg-gray-800 dark:border dark:border-gray-700 overflow-hidden;
}

.cardHeader {
  @apply px-6 py-4 border-b border-gray-200 dark:border-gray-700;
}

.cardTitle {
  @apply text-lg font-medium text-gray-900 dark:text-white;
}

.cardBody {
  @apply px-6 py-5;
}

.cardFooter {
  @apply px-6 py-4 border-t border-gray-200 dark:border-gray-700;
}

.cardHover {
  @apply transition-shadow hover:shadow-md;
}

.cardPrimary {
  @apply border-l-4 border-indigo-500;
}

.cardSuccess {
  @apply border-l-4 border-green-500;
}

.cardWarning {
  @apply border-l-4 border-amber-500;
}

.cardDanger {
  @apply border-l-4 border-red-500;
}

.cardInfo {
  @apply border-l-4 border-blue-500;
}

/* ==========================================================================
   ALERTAS Y NOTIFICACIONES
   ========================================================================== */
.alert {
  @apply rounded-lg p-4 mb-4;
}

.alertPrimary {
  @apply bg-indigo-50 text-indigo-700 border border-indigo-200 dark:bg-indigo-900/30 dark:text-indigo-300 dark:border-indigo-800;
}

.alertSuccess {
  @apply bg-green-50 text-green-700 border border-green-200 dark:bg-green-900/30 dark:text-green-300 dark:border-green-800;
}

.alertWarning {
  @apply bg-amber-50 text-amber-700 border border-amber-200 dark:bg-amber-900/30 dark:text-amber-300 dark:border-amber-800;
}

.alertDanger {
  @apply bg-red-50 text-red-700 border border-red-200 dark:bg-red-900/30 dark:text-red-300 dark:border-red-800;
}

.alertInfo {
  @apply bg-blue-50 text-blue-700 border border-blue-200 dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-800;
}

.alertIcon {
  @apply h-5 w-5 mr-2 inline;
}

.toast {
  @apply fixed p-4 rounded-lg shadow-lg max-w-sm w-full bg-white dark:bg-gray-800 border dark:border-gray-700;
}

.toastBottom {
  @apply bottom-4 left-1/2 transform -translate-x-1/2;
}

.toastTopRight {
  @apply top-4 right-4;
}

.badge {
  @apply inline-flex items-center rounded-full px-2.5 py-1 text-xs font-medium;
}

.badgePrimary {
  @apply bg-indigo-100 text-indigo-800 dark:bg-indigo-800 dark:text-indigo-100;
}

.badgeSuccess {
  @apply bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100;
}

.badgeWarning {
  @apply bg-amber-100 text-amber-800 dark:bg-amber-800 dark:text-amber-100;
}

.badgeDanger {
  @apply bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100;
}

.badgeInfo {
  @apply bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100;
}

/* ==========================================================================
   NAVEGACIÓN
   ========================================================================== */
.nav {
  @apply flex;
}

.navVertical {
  @apply flex-col;
}

.navHorizontal {
  @apply flex-row;
}

.navItem {
  @apply px-4 py-2 text-gray-700 hover:text-indigo-600 hover:bg-indigo-50 rounded-lg font-medium transition-colors dark:text-gray-300 dark:hover:text-indigo-400 dark:hover:bg-indigo-900/30;
}

.navItemActive {
  @apply text-indigo-600 bg-indigo-50 dark:text-indigo-400 dark:bg-indigo-900/50;
}

.navTabs {
  @apply flex border-b border-gray-200 dark:border-gray-700;
}

.navTab {
  @apply px-4 py-2 font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 transition-colors dark:text-gray-400 dark:hover:text-gray-200 dark:hover:border-gray-600;
}

.navTabActive {
  @apply border-indigo-500 text-indigo-600 dark:border-indigo-400 dark:text-indigo-400;
}

/* ==========================================================================
   MODALES Y OVERLAYS
   ========================================================================== */
.modalBackdrop {
  @apply fixed inset-0 bg-gray-900/70 backdrop-blur-sm flex items-center justify-center z-50;
}

.modal {
  @apply bg-white dark:bg-gray-800 rounded-2xl p-6 max-w-md w-full mx-4 shadow-2xl;
}

.modalHeader {
  @apply flex items-center justify-between mb-4;
}

.modalTitle {
  @apply text-lg font-bold text-gray-900 dark:text-white;
}

.modalBody {
  @apply mb-6;
}

.modalFooter {
  @apply flex justify-end gap-3;
}

.tooltip {
  @apply absolute z-10 px-3 py-2 text-sm font-medium text-white bg-gray-900 rounded-lg shadow-sm dark:bg-gray-700;
}

.tooltipArrow {
  @apply absolute w-3 h-3 bg-gray-900 dark:bg-gray-700 transform rotate-45;
}

.popover {
  @apply absolute z-10 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700;
}

/* ==========================================================================
   LOADERS
   ========================================================================== */
.loader {
  @apply animate-spin;
}

.loaderSm {
  @apply h-4 w-4;
}

.loaderMd {
  @apply h-6 w-6;
}

.loaderLg {
  @apply h-8 w-8;
}

.loaderSpinner {
  @apply rounded-full border-2 border-t-transparent;
}

.loaderPrimary {
  @apply border-indigo-500;
}

.loaderWhite {
  @apply border-white;
}

.skeleton {
  @apply animate-pulse bg-gray-200 dark:bg-gray-700 rounded;
}

/* ==========================================================================
   LAYOUT HELPERS
   ========================================================================== */
.flexCenter {
  @apply flex items-center justify-center;
}

.flexBetween {
  @apply flex items-center justify-between;
}

.flexStart {
  @apply flex items-center justify-start;
}

.flexEnd {
  @apply flex items-center justify-end;
}

.grid2Cols {
  @apply grid grid-cols-1 md:grid-cols-2 gap-6;
}

.grid3Cols {
  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6;
}

.grid4Cols {
  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6;
}\n\n
=== ./reservas/pages/customer/styles/animations.css ===
/* 
  animations.css
  Animaciones reutilizables para el módulo de reservación
*/

/* ==========================================================================
   KEYFRAMES - Definiciones de animaciones
   ========================================================================== */

@keyframes fade-in {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes fade-out {
  from { opacity: 1; }
  to { opacity: 0; }
}

@keyframes slide-in-right {
  from { transform: translateX(100%); }
  to { transform: translateX(0); }
}

@keyframes slide-in-left {
  from { transform: translateX(-100%); }
  to { transform: translateX(0); }
}

@keyframes slide-up {
  from { 
    transform: translate(-50%, 100%); 
    opacity: 0; 
  }
  to { 
    transform: translate(-50%, 0); 
    opacity: 1; 
  }
}

@keyframes slide-down {
  from { 
    transform: translateY(-20px); 
    opacity: 0; 
  }
  to { 
    transform: translateY(0); 
    opacity: 1; 
  }
}

@keyframes zoom-in {
  from { 
    transform: scale(0.9); 
    opacity: 0; 
  }
  to { 
    transform: scale(1); 
    opacity: 1; 
  }
}

@keyframes zoom-out {
  from { 
    transform: scale(1); 
    opacity: 1; 
  }
  to { 
    transform: scale(0.9); 
    opacity: 0; 
  }
}

@keyframes bounce-subtle {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-5px); }
}

@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.5; }
  100% { opacity: 1; }
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* ==========================================================================
   CLASES DE ANIMACIÓN - Para aplicar animaciones a los elementos
   ========================================================================== */

.animate-fade-in {
  animation: fade-in 0.3s ease-out forwards;
}

.animate-fade-out {
  animation: fade-out 0.3s ease-out forwards;
}

.animate-slide-in-right {
  animation: slide-in-right 0.3s ease-out forwards;
}

.animate-slide-in-left {
  animation: slide-in-left 0.3s ease-out forwards;
}

.animate-slide-up {
  animation: slide-up 0.3s ease-out forwards;
}

.animate-slide-down {
  animation: slide-down 0.3s ease-out forwards;
}

.animate-zoom-in {
  animation: zoom-in 0.3s ease-out forwards;
}

.animate-zoom-out {
  animation: zoom-out 0.3s ease-out forwards;
}

.animate-bounce-subtle {
  animation: bounce-subtle 2s infinite;
}

.animate-pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

.animate-spin {
  animation: spin 1s linear infinite;
}

/* Variaciones de duración */
.duration-fast {
  animation-duration: 200ms;
}

.duration-normal {
  animation-duration: 300ms;
}

.duration-slow {
  animation-duration: 500ms;
}

/* Variaciones de retraso */
.delay-100 {
  animation-delay: 100ms;
}

.delay-200 {
  animation-delay: 200ms;
}

.delay-300 {
  animation-delay: 300ms;
}

/* Variaciones de curva de tiempo */
.ease-linear {
  animation-timing-function: linear;
}

.ease-in {
  animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
}

.ease-out {
  animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
}

.ease-in-out {
  animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}\n\n
=== ./reservas/pages/customer/styles/index.js ===
/**
 * index.js
 * Punto de entrada para todos los estilos del módulo de reservación
 * Centraliza las importaciones y exportaciones de estilos para un uso más fácil en los componentes
 */

// Importar estilos de módulos
import stepperStyles from './StepperReservation.module.css';
import stepComponentStyles from './StepComponents.module.css';
import uiStyles from './UI.module.css';

// Importar animaciones
import './animations.css';

// Importar variables
import variables from './variables';

/**
 * Objeto que contiene todos los estilos para el stepper de reservación
 */
const styles = {
  // Módulos principales
  stepper: stepperStyles,
  steps: stepComponentStyles,
  ui: uiStyles,
  
  // Variables y utilidades
  variables,
  
  // Acceso directo a variables comunes
  colors: variables.COLORS,
  breakpoints: variables.BREAKPOINTS,
  mediaQueries: variables.MEDIA_QUERIES,
  spacing: variables.SPACING,
  fontSizes: variables.FONT_SIZES,
  shadows: variables.SHADOWS,
  radius: variables.BORDER_RADIUS,
  zIndex: variables.Z_INDEX,
  
  // Utilidades
  createMediaQuery: variables.createMediaQuery,
  createCSSStyles: variables.createCSSStyles,
};

/**
 * Función auxiliar para combinar nombres de clase
 * @param  {...string} classes - Nombres de clase a combinar
 * @returns {string} - Clases combinadas
 */
export const cn = (...classes) => {
  return classes.filter(Boolean).join(' ');
};

/**
 * Función para crear estilos condicionales
 * @param {Object} conditions - Objeto con condiciones como clave y clases como valor
 * @returns {string} - Clases combinadas para condiciones que son verdaderas
 */
export const cond = (conditions) => {
  return Object.entries(conditions)
    .filter(([_, condition]) => Boolean(condition))
    .map(([className]) => className)
    .join(' ');
};

/**
 * Función para aplicar estilos responsivos basados en breakpoints
 * @param {Object} stylesObj - Objeto con breakpoints como clave y clases como valor
 * @returns {string} - Clases combinadas
 * 
 * Ejemplo:
 * responsive({
 *   base: 'text-sm',
 *   md: 'text-base',
 *   lg: 'text-lg'
 * })
 */
export const responsive = (stylesObj) => {
  if (!stylesObj || typeof stylesObj !== 'object') return '';
  
  // Crear clases para cada breakpoint
  const classes = [];
  
  // Clase base (sin media query)
  if (stylesObj.base) {
    classes.push(stylesObj.base);
  }
  
  // Clases para breakpoints
  Object.entries(stylesObj)
    .filter(([key]) => key !== 'base')
    .forEach(([key, value]) => {
      // Agregar clase con el prefijo del breakpoint
      classes.push(`${key}:${value}`);
    });
  
  return classes.join(' ');
};

/**
 * Función para generar estilos de variantes
 * @param {string} baseClass - Clase base
 * @param {string} variant - Nombre de la variante
 * @param {Object} variants - Objeto con las variantes disponibles
 * @returns {string} - Clase combinada
 * 
 * Ejemplo:
 * const buttonVariants = {
 *   primary: 'bg-blue-500 text-white',
 *   secondary: 'bg-gray-200 text-gray-800'
 * };
 * 
 * getVariant('button', 'primary', buttonVariants)
 * // Resultado: 'button button-primary bg-blue-500 text-white'
 */
export const getVariant = (baseClass, variant, variants) => {
  if (!variant || !variants || !variants[variant]) {
    return baseClass;
  }
  
  return `${baseClass} ${baseClass}-${variant} ${variants[variant]}`;
};

/**
 * Función para generar estilos de tamaño
 * @param {string} baseClass - Clase base
 * @param {string} size - Nombre del tamaño
 * @param {Object} sizes - Objeto con los tamaños disponibles
 * @returns {string} - Clase combinada
 * 
 * Ejemplo:
 * const buttonSizes = {
 *   sm: 'text-sm px-2 py-1',
 *   md: 'text-base px-4 py-2',
 *   lg: 'text-lg px-6 py-3'
 * };
 * 
 * getSize('button', 'md', buttonSizes)
 * // Resultado: 'button button-md text-base px-4 py-2'
 */
export const getSize = (baseClass, size, sizes) => {
  if (!size || !sizes || !sizes[size]) {
    return baseClass;
  }
  
  return `${baseClass} ${baseClass}-${size} ${sizes[size]}`;
};

// Exportar estilos como default
export default styles;

// Exportar módulos individuales para uso específico
export {
  stepperStyles,
  stepComponentStyles,
  uiStyles,
  variables
};\n\n
=== ./reservas/pages/customer/styles/variables.js ===
/**
 * variables.js
 * Variables y constantes de estilo centralizadas para el módulo de reservación
 */

// ==========================================================================
// VARIABLES DE TEMA
// ==========================================================================

/**
 * Paleta de colores principal
 */
export const COLORS = {
  // Colores de marca
  primary: {
    50: '#eef2ff',
    100: '#e0e7ff',
    200: '#c7d2fe',
    300: '#a5b4fc',
    400: '#818cf8',
    500: '#6366f1', // indigo-500
    600: '#4f46e5', // indigo-600
    700: '#4338ca', // indigo-700
    800: '#3730a3',
    900: '#312e81',
    950: '#1e1b4b',
  },
  
  success: {
    500: '#22c55e', // green-500
    600: '#16a34a', // green-600
    700: '#15803d',
  },
  
  danger: {
    500: '#ef4444', // red-500
    600: '#dc2626', // red-600
    700: '#b91c1c',
  },
  
  warning: {
    500: '#f59e0b', // amber-500
    600: '#d97706', // amber-600
    700: '#b45309',
  },
  
  info: {
    500: '#3b82f6', // blue-500
    600: '#2563eb', // blue-600
    700: '#1d4ed8',
  },
  
  // Escala de grises
  gray: {
    50: '#f9fafb',
    100: '#f3f4f6',
    200: '#e5e7eb',
    300: '#d1d5db',
    400: '#9ca3af',
    500: '#6b7280',
    600: '#4b5563',
    700: '#374151',
    800: '#1f2937',
    900: '#111827',
    950: '#030712',
  },
};

/**
 * Valores de sombra
 */
export const SHADOWS = {
  sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
  DEFAULT: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1)',
  md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)',
  lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)',
  xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1)',
  '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
  inner: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.05)',
};

/**
 * Valores de border radius
 */
export const BORDER_RADIUS = {
  none: '0',
  sm: '0.125rem', // 2px
  DEFAULT: '0.25rem', // 4px
  md: '0.375rem', // 6px
  lg: '0.5rem', // 8px
  xl: '0.75rem', // 12px
  '2xl': '1rem', // 16px
  '3xl': '1.5rem', // 24px
  full: '9999px',
};

/**
 * Valores de espaciado
 */
export const SPACING = {
  px: '1px',
  0: '0',
  0.5: '0.125rem', // 2px
  1: '0.25rem', // 4px
  1.5: '0.375rem', // 6px
  2: '0.5rem', // 8px
  2.5: '0.625rem', // 10px
  3: '0.75rem', // 12px
  3.5: '0.875rem', // 14px
  4: '1rem', // 16px
  5: '1.25rem', // 20px
  6: '1.5rem', // 24px
  7: '1.75rem', // 28px
  8: '2rem', // 32px
  9: '2.25rem', // 36px
  10: '2.5rem', // 40px
  11: '2.75rem', // 44px
  12: '3rem', // 48px
  14: '3.5rem', // 56px
  16: '4rem', // 64px
  20: '5rem', // 80px
  24: '6rem', // 96px
  28: '7rem', // 112px
  32: '8rem', // 128px
  36: '9rem', // 144px
  40: '10rem', // 160px
  44: '11rem', // 176px
  48: '12rem', // 192px
  52: '13rem', // 208px
  56: '14rem', // 224px
  60: '15rem', // 240px
  64: '16rem', // 256px
  72: '18rem', // 288px
  80: '20rem', // 320px
  96: '24rem', // 384px
};

/**
 * Valores de tipografía (tamaños de fuente)
 */
export const FONT_SIZES = {
  xs: '0.75rem', // 12px
  sm: '0.875rem', // 14px
  base: '1rem', // 16px
  lg: '1.125rem', // 18px
  xl: '1.25rem', // 20px
  '2xl': '1.5rem', // 24px
  '3xl': '1.875rem', // 30px
  '4xl': '2.25rem', // 36px
  '5xl': '3rem', // 48px
  '6xl': '3.75rem', // 60px
  '7xl': '4.5rem', // 72px
  '8xl': '6rem', // 96px
  '9xl': '8rem', // 128px
};

/**
 * Valores de font-weight
 */
export const FONT_WEIGHTS = {
  thin: '100',
  extralight: '200',
  light: '300',
  normal: '400',
  medium: '500',
  semibold: '600',
  bold: '700',
  extrabold: '800',
  black: '900',
};

/**
 * Valores de line-height
 */
export const LINE_HEIGHTS = {
  none: '1',
  tight: '1.25',
  snug: '1.375',
  normal: '1.5',
  relaxed: '1.625',
  loose: '2',
};

// ==========================================================================
// MEDIA QUERIES
// ==========================================================================

/**
 * Breakpoints para media queries
 */
export const BREAKPOINTS = {
  xs: '320px',
  sm: '640px',
  md: '768px',
  lg: '1024px',
  xl: '1280px',
  '2xl': '1536px',
};

/**
 * Media queries predefinidos
 */
export const MEDIA_QUERIES = {
  xs: `(min-width: ${BREAKPOINTS.xs})`,
  sm: `(min-width: ${BREAKPOINTS.sm})`,
  md: `(min-width: ${BREAKPOINTS.md})`,
  lg: `(min-width: ${BREAKPOINTS.lg})`,
  xl: `(min-width: ${BREAKPOINTS.xl})`,
  '2xl': `(min-width: ${BREAKPOINTS['2xl']})`,
  
  xsDown: `(max-width: ${parseFloat(BREAKPOINTS.sm) - 0.1}px)`,
  smDown: `(max-width: ${parseFloat(BREAKPOINTS.md) - 0.1}px)`,
  mdDown: `(max-width: ${parseFloat(BREAKPOINTS.lg) - 0.1}px)`,
  lgDown: `(max-width: ${parseFloat(BREAKPOINTS.xl) - 0.1}px)`,
  xlDown: `(max-width: ${parseFloat(BREAKPOINTS['2xl']) - 0.1}px)`,
  
  dark: '(prefers-color-scheme: dark)',
  light: '(prefers-color-scheme: light)',
  
  motion: '(prefers-reduced-motion: no-preference)',
  reducedMotion: '(prefers-reduced-motion: reduce)',
  
  portrait: '(orientation: portrait)',
  landscape: '(orientation: landscape)',
};

// ==========================================================================
// ANIMACIONES
// ==========================================================================

/**
 * Duraciones de animación
 */
export const ANIMATION_DURATIONS = {
  fastest: '100ms',
  fast: '200ms',
  normal: '300ms',
  slow: '500ms',
  slowest: '700ms',
};

/**
 * Curvas de tiempo (timing functions)
 */
export const ANIMATION_TIMING_FUNCTIONS = {
  linear: 'linear',
  in: 'cubic-bezier(0.4, 0, 1, 1)',
  out: 'cubic-bezier(0, 0, 0.2, 1)',
  inOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
};

/**
 * Valores de z-index
 */
export const Z_INDEX = {
  0: '0',
  10: '10',
  20: '20',
  30: '30',
  40: '40',
  50: '50',
  auto: 'auto',
  dropdown: '1000',
  sticky: '1020',
  fixed: '1030',
  modalBackdrop: '1040',
  modal: '1050',
  popover: '1060',
  tooltip: '1070',
};

// ==========================================================================
// UTILIDADES
// ==========================================================================

/**
 * Función para generar estilos CSS personalizados
 * @param {Object} styles - Objeto de estilos
 * @returns {string} - Cadena de estilos CSS
 */
export const createCSSStyles = (styles) => {
  return Object.entries(styles)
    .map(([property, value]) => `${property}: ${value};`)
    .join(' ');
};

/**
 * Función para generar estilos CSS para media queries
 * @param {string} mediaQuery - Media query a aplicar
 * @param {Object} styles - Objeto de estilos
 * @returns {string} - Cadena de media query con estilos CSS
 */
export const createMediaQuery = (mediaQuery, styles) => {
  const cssStyles = createCSSStyles(styles);
  return `@media ${mediaQuery} { ${cssStyles} }`;
};

/**
 * Variables de tema CSS globales (como referencia)
 * Estas variables están definidas en :root en CSS pero se incluyen aquí como referencia
 */
export const CSS_VARIABLES = {
  // Colores
  '--color-primary': COLORS.primary[600],
  '--color-primary-dark': COLORS.primary[700],
  '--color-primary-light': COLORS.primary[500],
  '--color-primary-lightest': COLORS.primary[50],
  
  '--color-success': COLORS.success[500],
  '--color-success-dark': COLORS.success[600],
  
  '--color-danger': COLORS.danger[500],
  '--color-danger-dark': COLORS.danger[600],
  
  '--color-warning': COLORS.warning[500],
  
  '--color-info': COLORS.info[500],
  
  // Grises
  '--color-gray-50': COLORS.gray[50],
  '--color-gray-100': COLORS.gray[100],
  '--color-gray-200': COLORS.gray[200],
  '--color-gray-300': COLORS.gray[300],
  '--color-gray-500': COLORS.gray[500],
  '--color-gray-600': COLORS.gray[600],
  '--color-gray-700': COLORS.gray[700],
  '--color-gray-800': COLORS.gray[800],
  '--color-gray-900': COLORS.gray[900],
  
  // Sombras
  '--shadow-sm': SHADOWS.sm,
  '--shadow-md': SHADOWS.md,
  '--shadow-lg': SHADOWS.lg,
  
  // Border radius
  '--radius-md': BORDER_RADIUS.md,
  '--radius-lg': BORDER_RADIUS.lg,
  '--radius-xl': BORDER_RADIUS.xl,
  '--radius-2xl': BORDER_RADIUS['2xl'],
  '--radius-full': BORDER_RADIUS.full,
  
  // Transiciones
  '--transition-fast': ANIMATION_DURATIONS.fast,
  '--transition-normal': ANIMATION_DURATIONS.normal,
};

export default {
  COLORS,
  SHADOWS,
  BORDER_RADIUS,
  SPACING,
  FONT_SIZES,
  FONT_WEIGHTS,
  LINE_HEIGHTS,
  BREAKPOINTS,
  MEDIA_QUERIES,
  ANIMATION_DURATIONS,
  ANIMATION_TIMING_FUNCTIONS,
  Z_INDEX,
  CSS_VARIABLES,
};\n\n
=== ./reservas/pages/index.js ===
// Exportar todos los componentes de reservas/pages
\n\n
=== ./reservas/services/index.js ===
// Exportar todos los componentes de reservas/services
export { default as preReservasService } from './preReservas.service.js';
\n\n
=== ./reservas/services/preReservas.service.js ===
﻿import { create } from 'zustand';
import axiosInstance from '@shared/utils/axiosConfig';

/**
 * Store para gestionar las pre-reservas y el flujo de pago-primero
 */
// FunciÃ³n para generar un cÃ³digo de seguimiento de exactamente 10 caracteres
const generateTrackingCode = () => {
  // Obtener fecha actual
  const now = new Date();
  
  // Extraer componentes de fecha (2 dÃ­gitos del aÃ±o, mes y dÃ­a)
  const year = now.getFullYear().toString().slice(2); // 2 dÃ­gitos
  const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 2 dÃ­gitos
  const day = now.getDate().toString().padStart(2, '0'); // 2 dÃ­gitos
  
  // Generar parte aleatoria (4 dÃ­gitos para completar 10 caracteres en total)
  const randomPart = Math.floor(1000 + Math.random() * 9000);
  
  // Construir cÃ³digo: YYMMDDXXXX (exactamente 10 caracteres)
  return `${year}${month}${day}${randomPart}`;
};

const usePreReservasStore = create((set, get) => ({
  preReserva: null,
  pagoEnProceso: null,
  loading: false,
  error: null,
  
  /**
   * Inicia el proceso de pago creando una pre-reserva y obteniendo los datos para el procesador de pago
   * @param {Object} datosReserva - Datos completos de la reserva
   * @param {string} metodoPago - MÃ©todo de pago seleccionado
   * @returns {Promise<Object>} - Datos para procesar el pago
   */
  iniciarProcesoPago: async (datosReserva, metodoPago) => {
    set({ loading: true, error: null });
    
    try {
      // Normalizar el mÃ©todo de pago para asegurar compatibilidad
      let metodoNormalizado;
      switch(metodoPago) {
        case 'transfer':
          metodoNormalizado = 'transferencia';
          break;
        case 'cash':
          metodoNormalizado = 'efectivo';
          break;
        case 'credit':
          metodoNormalizado = 'tarjeta_credito';
          break;
        case 'debit':
          metodoNormalizado = 'tarjeta_debito';
          break;
        default:
          metodoNormalizado = metodoPago;
      }
      
      // Formatear la fecha en formato YYYY-MM-DD
      if (datosReserva.fecha_reserva) {
        if (datosReserva.fecha_reserva instanceof Date) {
          datosReserva.fecha_reserva = datosReserva.fecha_reserva.toISOString().split('T')[0]; // Formato YYYY-MM-DD
        }
      }
      
      // Asegurarse de que datosReserva tenga hora_fin si tiene hora_inicio
      if (datosReserva.hora_inicio && !datosReserva.hora_fin) {
        // Convertir hora_inicio a formato correcto si es "tarde" o "maÃ±ana"
        let horaInicio = typeof datosReserva.hora_inicio === 'object' ?
          datosReserva.hora_inicio.value : datosReserva.hora_inicio;
          
        if (horaInicio === 'tarde') {
          horaInicio = '14:00:00';
        } else if (horaInicio === 'maÃ±ana' || horaInicio === 'manana') {
          horaInicio = '10:00:00';
        }
        
        // Calcular hora_fin (3 horas despuÃ©s de hora_inicio)
        const [horas, minutos, segundos] = horaInicio.split(':').map(Number);
        const horaFin = `${String(horas + 3).padStart(2, '0')}:${String(minutos).padStart(2, '0')}:${String(segundos).padStart(2, '0')}`;
        
        datosReserva.hora_inicio = horaInicio;
        datosReserva.hora_fin = horaFin;
      }
      
      // Convertir edad_festejado a nÃºmero si es string
      if (datosReserva.edad_festejado && typeof datosReserva.edad_festejado === 'string') {
        datosReserva.edad_festejado = parseInt(datosReserva.edad_festejado, 10);
      }
      
      // Combinar campos adicionales en comentarios
      let comentarios = '';
      if (datosReserva.sexo_festejado) {
        comentarios += `Sexo: ${datosReserva.sexo_festejado}. `;
        delete datosReserva.sexo_festejado;
      }
      if (datosReserva.color_favorito) {
        comentarios += `Color favorito: ${datosReserva.color_favorito}. `;
        delete datosReserva.color_favorito;
      }
      if (datosReserva.detalles_especiales) {
        comentarios += `Detalles especiales: ${datosReserva.detalles_especiales}`;
        delete datosReserva.detalles_especiales;
      }
      
      if (comentarios.trim()) {
        datosReserva.comentarios = comentarios.trim();
      }
      
      // Asegurarse de que haya un cÃ³digo de seguimiento
      if (!datosReserva.codigo_seguimiento) {
        datosReserva.codigo_seguimiento = generateTrackingCode();
      }
      
      const response = await axios.post('/api/pagos/iniciar', {
        datosReserva,
        metodo_pago: metodoNormalizado
      });
      
      set({
        preReserva: {
          ...datosReserva,
          id: response.data.pago.id_pre_reserva
        },
        pagoEnProceso: response.data.pago,
        loading: false
      });
      
      return response.data;
    } catch (error) {
      console.error('Error al iniciar el proceso de pago:', error);
      set({ 
        error: error.response?.data?.message || 'Error al iniciar el proceso de pago', 
        loading: false 
      });
      throw error;
    }
  },
  
  /**
   * Confirma un pago y completa la pre-reserva convirtiÃ©ndola en reserva
   * @param {Object} datosPago - Datos del procesador de pago (token, etc)
   * @returns {Promise<Object>} - Datos de la reserva creada
   */
  confirmarPago: async (datosPago) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axios.post('/api/pagos/confirmar', {
        id_pago: get().pagoEnProceso.id,
        ...datosPago
      });
      
      // Limpiar el estado despuÃ©s de confirmar exitosamente
      set({ loading: false, preReserva: null, pagoEnProceso: null });
      return response.data;
    } catch (error) {
      console.error('Error al confirmar el pago:', error);
      set({ 
        error: error.response?.data?.message || 'Error al confirmar el pago', 
        loading: false 
      });
      throw error;
    }
  },
  
  /**
   * Obtiene informaciÃ³n de un pago asociado a una pre-reserva
   * @param {number} idPreReserva - ID de la pre-reserva
   * @returns {Promise<Object>} - Datos del pago
   */
  obtenerPagoPorPreReserva: async (idPreReserva) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axios.get(`/api/pagos/pre-reserva/${idPreReserva}`);
      set({ 
        pagoEnProceso: response.data.pago,
        loading: false 
      });
      return response.data.pago;
    } catch (error) {
      console.error('Error al obtener pago de pre-reserva:', error);
      set({ 
        error: error.response?.data?.message || 'Error al obtener informaciÃ³n del pago', 
        loading: false 
      });
      throw error;
    }
  },
  
  /**
   * Verifica si la pre-reserva actual ha expirado
   * @returns {boolean} - true si ha expirado
   */
  haExpirado: () => {
    const { pagoEnProceso } = get();
    if (!pagoEnProceso || !pagoEnProceso.expiracion) return false;
    
    return new Date() > new Date(pagoEnProceso.expiracion);
  },
  
  /**
   * Limpia los datos de pre-reserva y pago
   */
  limpiarPreReserva: () => {
    set({ preReserva: null, pagoEnProceso: null, error: null });
  }
}));

export default usePreReservasStore;
\n\n
=== ./reservas/services/preReservasStore.js ===
import { create } from 'zustand';
import axios from '../components/axiosConfig';

/**
 * Store para gestionar las pre-reservas y el flujo de pago-primero
 */
// Función para generar un código de seguimiento de exactamente 10 caracteres
const generateTrackingCode = () => {
  // Obtener fecha actual
  const now = new Date();
  
  // Extraer componentes de fecha (2 dígitos del año, mes y día)
  const year = now.getFullYear().toString().slice(2); // 2 dígitos
  const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 2 dígitos
  const day = now.getDate().toString().padStart(2, '0'); // 2 dígitos
  
  // Generar parte aleatoria (4 dígitos para completar 10 caracteres en total)
  const randomPart = Math.floor(1000 + Math.random() * 9000);
  
  // Construir código: YYMMDDXXXX (exactamente 10 caracteres)
  return `${year}${month}${day}${randomPart}`;
};

const usePreReservasStore = create((set, get) => ({
  preReserva: null,
  pagoEnProceso: null,
  loading: false,
  error: null,
  
  /**
   * Inicia el proceso de pago creando una pre-reserva y obteniendo los datos para el procesador de pago
   * @param {Object} datosReserva - Datos completos de la reserva
   * @param {string} metodoPago - Método de pago seleccionado
   * @returns {Promise<Object>} - Datos para procesar el pago
   */
  iniciarProcesoPago: async (datosReserva, metodoPago) => {
    set({ loading: true, error: null });
    
    try {
      // Normalizar el método de pago para asegurar compatibilidad
      let metodoNormalizado;
      switch(metodoPago) {
        case 'transfer':
          metodoNormalizado = 'transferencia';
          break;
        case 'cash':
          metodoNormalizado = 'efectivo';
          break;
        case 'credit':
          metodoNormalizado = 'tarjeta_credito';
          break;
        case 'debit':
          metodoNormalizado = 'tarjeta_debito';
          break;
        default:
          metodoNormalizado = metodoPago;
      }
      
      // Formatear la fecha en formato YYYY-MM-DD
      if (datosReserva.fecha_reserva) {
        if (datosReserva.fecha_reserva instanceof Date) {
          datosReserva.fecha_reserva = datosReserva.fecha_reserva.toISOString().split('T')[0]; // Formato YYYY-MM-DD
        }
      }
      
      // Asegurarse de que datosReserva tenga hora_fin si tiene hora_inicio
      if (datosReserva.hora_inicio && !datosReserva.hora_fin) {
        // Convertir hora_inicio a formato correcto si es "tarde" o "mañana"
        let horaInicio = typeof datosReserva.hora_inicio === 'object' ?
          datosReserva.hora_inicio.value : datosReserva.hora_inicio;
          
        if (horaInicio === 'tarde') {
          horaInicio = '14:00:00';
        } else if (horaInicio === 'mañana' || horaInicio === 'manana') {
          horaInicio = '10:00:00';
        }
        
        // Calcular hora_fin (3 horas después de hora_inicio)
        const [horas, minutos, segundos] = horaInicio.split(':').map(Number);
        const horaFin = `${String(horas + 3).padStart(2, '0')}:${String(minutos).padStart(2, '0')}:${String(segundos).padStart(2, '0')}`;
        
        datosReserva.hora_inicio = horaInicio;
        datosReserva.hora_fin = horaFin;
      }
      
      // Convertir edad_festejado a número si es string
      if (datosReserva.edad_festejado && typeof datosReserva.edad_festejado === 'string') {
        datosReserva.edad_festejado = parseInt(datosReserva.edad_festejado, 10);
      }
      
      // Combinar campos adicionales en comentarios
      let comentarios = '';
      if (datosReserva.sexo_festejado) {
        comentarios += `Sexo: ${datosReserva.sexo_festejado}. `;
        delete datosReserva.sexo_festejado;
      }
      if (datosReserva.color_favorito) {
        comentarios += `Color favorito: ${datosReserva.color_favorito}. `;
        delete datosReserva.color_favorito;
      }
      if (datosReserva.detalles_especiales) {
        comentarios += `Detalles especiales: ${datosReserva.detalles_especiales}`;
        delete datosReserva.detalles_especiales;
      }
      
      if (comentarios.trim()) {
        datosReserva.comentarios = comentarios.trim();
      }
      
      // Asegurarse de que haya un código de seguimiento
      if (!datosReserva.codigo_seguimiento) {
        datosReserva.codigo_seguimiento = generateTrackingCode();
      }
      
      const response = await axios.post('/api/pagos/iniciar', {
        datosReserva,
        metodo_pago: metodoNormalizado
      });
      
      set({
        preReserva: {
          ...datosReserva,
          id: response.data.pago.id_pre_reserva
        },
        pagoEnProceso: response.data.pago,
        loading: false
      });
      
      return response.data;
    } catch (error) {
      console.error('Error al iniciar el proceso de pago:', error);
      set({ 
        error: error.response?.data?.message || 'Error al iniciar el proceso de pago', 
        loading: false 
      });
      throw error;
    }
  },
  
  /**
   * Confirma un pago y completa la pre-reserva convirtiéndola en reserva
   * @param {Object} datosPago - Datos del procesador de pago (token, etc)
   * @returns {Promise<Object>} - Datos de la reserva creada
   */
  confirmarPago: async (datosPago) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axios.post('/api/pagos/confirmar', {
        id_pago: get().pagoEnProceso.id,
        ...datosPago
      });
      
      // Limpiar el estado después de confirmar exitosamente
      set({ loading: false, preReserva: null, pagoEnProceso: null });
      return response.data;
    } catch (error) {
      console.error('Error al confirmar el pago:', error);
      set({ 
        error: error.response?.data?.message || 'Error al confirmar el pago', 
        loading: false 
      });
      throw error;
    }
  },
  
  /**
   * Obtiene información de un pago asociado a una pre-reserva
   * @param {number} idPreReserva - ID de la pre-reserva
   * @returns {Promise<Object>} - Datos del pago
   */
  obtenerPagoPorPreReserva: async (idPreReserva) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axios.get(`/api/pagos/pre-reserva/${idPreReserva}`);
      set({ 
        pagoEnProceso: response.data.pago,
        loading: false 
      });
      return response.data.pago;
    } catch (error) {
      console.error('Error al obtener pago de pre-reserva:', error);
      set({ 
        error: error.response?.data?.message || 'Error al obtener información del pago', 
        loading: false 
      });
      throw error;
    }
  },
  
  /**
   * Verifica si la pre-reserva actual ha expirado
   * @returns {boolean} - true si ha expirado
   */
  haExpirado: () => {
    const { pagoEnProceso } = get();
    if (!pagoEnProceso || !pagoEnProceso.expiracion) return false;
    
    return new Date() > new Date(pagoEnProceso.expiracion);
  },
  
  /**
   * Limpia los datos de pre-reserva y pago
   */
  limpiarPreReserva: () => {
    set({ preReserva: null, pagoEnProceso: null, error: null });
  }
}));

export default usePreReservasStore;\n\n
=== ./reservas/services/reservationService.js ===
import { axiosInstance } from '@/components/axiosConfig';

// Ruta base para las API de reservas
const API_PATH = '/api/reservas';

/**
 * Inicia el proceso de reserva obteniendo un ID provisional
 * @returns {Promise<Object>} Objeto con el ID de reserva provisional
 */
export const initiateReservation = async () => {
  try {
    const response = await axiosInstance.post(`${API_PATH}/initiate`);
    return response.data;
  } catch (error) {
    console.error('Error al iniciar el proceso de reserva:', error);
    throw error;
  }
};

/**
 * Procesa el pago de una reserva
 * @param {Object} paymentData Datos del pago
 * @param {number} paymentData.reservationId ID de la reserva
 * @param {number} paymentData.amount Monto del pago
 * @param {string} paymentData.paymentMethod Método de pago
 * @returns {Promise<Object>} Resultado del procesamiento del pago
 */
export const processPayment = async ({ reservationId, amount, paymentMethod }) => {
  try {
    // Normalizar el método de pago para asegurar compatibilidad
    let metodoPagoNormalizado;
    
    // Verificar si el método de pago ya está normalizado
    if (['transferencia', 'efectivo', 'tarjeta_credito', 'tarjeta_debito'].includes(paymentMethod)) {
      metodoPagoNormalizado = paymentMethod;
    } else {
      // Normalizar desde valores en inglés
      switch(paymentMethod) {
        case 'transfer':
          metodoPagoNormalizado = 'transferencia';
          break;
        case 'cash':
          metodoPagoNormalizado = 'efectivo';
          break;
        case 'credit':
          metodoPagoNormalizado = 'tarjeta_credito';
          break;
        case 'debit':
          metodoPagoNormalizado = 'tarjeta_debito';
          break;
        default:
          metodoPagoNormalizado = 'transferencia'; // Valor por defecto
      }
    }
    
    const response = await axiosInstance.post('/api/pagos', {
      id_reserva: reservationId,
      monto: amount,
      fecha_pago: new Date().toISOString().split('T')[0],
      metodo_pago: metodoPagoNormalizado,
      estado: 'completado'
    });
    return response.data;
  } catch (error) {
    console.error('Error al procesar el pago:', error);
    throw error;
  }
};

/**
 * Confirma una reserva después de que el pago ha sido procesado
 * @param {Object} reservationData Datos completos de la reserva
 * @returns {Promise<Object>} Reserva confirmada
 */
export const confirmReservation = async (reservationData) => {
  try {
    // Verificar que el código de seguimiento esté presente
    if (!reservationData.codigo_seguimiento || reservationData.codigo_seguimiento.length !== 10) {
      // Generar un código de seguimiento si no existe o no es válido
      reservationData.codigo_seguimiento = generateTrackingCode();
    }
    
    const response = await axiosInstance.post(`${API_PATH}/confirm`, reservationData);
    return response.data;
  } catch (error) {
    console.error('Error al confirmar la reserva:', error);
    throw error;
  }
};

/**
 * Genera un código de seguimiento de 10 caracteres
 * @returns {string} Código de seguimiento
 */
const generateTrackingCode = () => {
  // Obtener fecha actual
  const now = new Date();
  
  // Extraer componentes de fecha (2 dígitos del año, mes y día)
  const year = now.getFullYear().toString().slice(2); // 2 dígitos
  const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 2 dígitos
  const day = now.getDate().toString().padStart(2, '0'); // 2 dígitos
  
  // Generar parte aleatoria (4 dígitos para completar 10 caracteres en total)
  const randomPart = Math.floor(1000 + Math.random() * 9000);
  
  // Construir código: YYMMDDXXXX (exactamente 10 caracteres)
  return `${year}${month}${day}${randomPart}`;
};

/**
 * Obtiene todas las reservas
 * @returns {Promise<Array>} Lista de reservas
 */
export const getAllReservations = async () => {
  try {
    const response = await axiosInstance.get(API_PATH);
    return response.data;
  } catch (error) {
    console.error('Error al obtener las reservas:', error);
    throw error;
  }
};

/**
 * Obtiene una reserva por su ID
 * @param {number} id ID de la reserva
 * @returns {Promise<Object>} Datos de la reserva
 */
export const getReservationById = async (id) => {
  try {
    const response = await axiosInstance.get(`${API_PATH}/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error al obtener la reserva con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene las reservas del usuario autenticado
 * @returns {Promise<Array>} Lista de reservas del usuario
 */
export const getUserReservations = async () => {
  try {
    const response = await axiosInstance.get(`${API_PATH}/user`);
    return response.data;
  } catch (error) {
    console.error('Error al obtener las reservas del usuario:', error);
    throw error;
  }
};

/**
 * Actualiza una reserva existente
 * @param {number} id ID de la reserva
 * @param {Object} reservationData Datos actualizados de la reserva
 * @returns {Promise<Object>} Reserva actualizada
 */
export const updateReservation = async (id, reservationData) => {
  try {
    const response = await axiosInstance.put(`${API_PATH}/${id}`, reservationData);
    return response.data;
  } catch (error) {
    console.error(`Error al actualizar la reserva con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Cancela una reserva
 * @param {number} id ID de la reserva
 * @returns {Promise<Object>} Resultado de la cancelación
 */
export const cancelReservation = async (id) => {
  try {
    const response = await axiosInstance.delete(`${API_PATH}/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error al cancelar la reserva con ID ${id}:`, error);
    throw error;
  }
};

export default {
  initiateReservation,
  processPayment,
  confirmReservation,
  getAllReservations,
  getReservationById,
  getUserReservations,
  updateReservation,
  cancelReservation
};\n\n
=== ./reservas/services/reservationsStore.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'
import * as socketService from '@/services/socketService'

const useReservationsStore = create((set, get) => ({
  // Estado
  reservations: [],
  selectedReservation: null,
  
  // Acciones
  fetchReservations: async () => {
    try {
      const response = await axiosInstance.get('/reservas')
      set({ reservations: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar reservaciones:', error)
      toast.error('Error al cargar las reservaciones')
      throw error
    }
  },
  
  addReservation: async (reservationData) => {
    try {
      // Asegurarse de que id_usuario sea un número
      if (reservationData.id_usuario) {
        reservationData.id_usuario = Number(reservationData.id_usuario)
      }
      
      const response = await axiosInstance.post('/reservas', reservationData)
      set(state => ({ reservations: [...state.reservations, response.data] }))
      toast.success('Reserva creada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al crear reservación:', error)
      toast.error('Error al crear la reservación')
      throw error
    }
  },
  
  updateReservation: async (id, reservationData) => {
    try {
      // Asegurarse de que id_usuario sea un número
      if (reservationData.id_usuario) {
        reservationData.id_usuario = Number(reservationData.id_usuario)
      }
      
      const response = await axiosInstance.put(`/reservas/${id}`, reservationData)
      set(state => ({
        reservations: state.reservations.map(reservation => 
          reservation.id === id ? { ...reservation, ...response.data } : reservation
        )
      }))
      toast.success('Reserva actualizada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar reservación:', error)
      toast.error('Error al actualizar la reservación')
      throw error
    }
  },
  
  deleteReservation: async (id) => {
    try {
      await axiosInstance.delete(`/reservas/${id}`)
      set(state => ({
        reservations: state.reservations.filter(reservation => reservation.id !== id)
      }))
      toast.success('Reserva desactivada con éxito')
    } catch (error) {
      console.error('Error al desactivar reservación:', error)
      toast.error('Error al desactivar la reservación')
      throw error
    }
  },
  
  setSelectedReservation: (reservation) => set({ selectedReservation: reservation }),
  
  updateReservationStatus: async (id, newStatus) => {
    try {
      const response = await axiosInstance.put(`/reservas/${id}/status`, { estado: newStatus })
      set(state => ({
        reservations: state.reservations.map(reservation => 
          reservation.id === id ? { ...reservation, estado: newStatus } : reservation
        )
      }))
      toast.success('Estado de la reserva actualizado exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar estado de la reservación:', error)
      toast.error('Error al actualizar el estado de la reservación')
      throw error
    }
  },
  
  // Socket.io integration
  initSocketListeners: () => {
    const socket = socketService.initSocket()
    
    socketService.subscribe('reserva_creada', (nuevaReserva) => {
      console.log('Reserva creada recibida vía Socket.IO:', nuevaReserva)
      set(state => {
        // Verificar si la reserva ya existe para evitar duplicados
        const existe = state.reservations.some(r => r.id === nuevaReserva.id)
        if (!existe) {
          toast.success(`Nueva reserva #${nuevaReserva.id} creada`)
          return { reservations: [...state.reservations, nuevaReserva] }
        }
        return state
      })
    })
    
    socketService.subscribe('reserva_actualizada', (reservaActualizada) => {
      console.log('Reserva actualizada recibida vía Socket.IO:', reservaActualizada)
      set(state => ({ 
        reservations: state.reservations.map(reserva => 
          reserva.id === reservaActualizada.id ? reservaActualizada : reserva
        )
      }))
    })
    
    socketService.subscribe('reserva_eliminada', (data) => {
      console.log('Reserva eliminada recibida vía Socket.IO:', data)
      set(state => ({ 
        reservations: state.reservations.filter(reserva => reserva.id !== data.id)
      }))
    })
    
    socketService.subscribe('fechas_bloqueadas', (data) => {
      console.log('Fechas bloqueadas recibidas vía Socket.IO:', data)
      if (data.reservas && Array.isArray(data.reservas)) {
        set(state => {
          const nuevasReservas = [...state.reservations]
          data.reservas.forEach(nuevaReserva => {
            if (!nuevasReservas.some(r => r.id === nuevaReserva.id)) {
              nuevasReservas.push(nuevaReserva)
            }
          })
          return { reservations: nuevasReservas }
        })
      } else {
        // Si no tenemos datos completos, es más seguro recargar todo
        get().fetchReservations()
      }
    })
    
    return () => socketService.disconnect()
  },
  
  // Selectores
  getFilteredReservations: (search) => {
    const { reservations } = get()
    return reservations.filter(
      reservation =>
        reservation.id.toString().includes(search) ||
        (reservation.nombre_festejado &&
          reservation.nombre_festejado
            .toLowerCase()
            .includes(search.toLowerCase()))
    )
  },
  
  getReservationsByMonth: (month, year) => {
    const { reservations } = get()
    return reservations.filter(reservation => {
      // Verificar que la reserva y el campo de fecha existen
      if (!reservation || !reservation.fecha_reserva) return false
      
      // Convertir a objeto Date
      const reservationDate = new Date(reservation.fecha_reserva)
      
      // Asegurarse de que la fecha es válida
      if (isNaN(reservationDate.getTime())) return false
      
      // Comparar tanto mes como año
      return reservationDate.getMonth() === month && 
             reservationDate.getFullYear() === year
    })
  },
  
  // Función para desuscribirse de todos los eventos de socket
  cleanupSocketListeners: () => {
    // Desuscribirse de todos los eventos de socket
    socketService.unsubscribe('reserva_creada');
    socketService.unsubscribe('reserva_actualizada');
    socketService.unsubscribe('reserva_eliminada');
    socketService.unsubscribe('fechas_bloqueadas');
  }
}))

export default useReservationsStore\n\n
=== ./usuario/components/index.js ===
// Exportar todos los componentes de usuario/components
\n\n
=== ./usuario/hooks/index.js ===
// Exportar todos los componentes de usuario/hooks
\n\n
=== ./usuario/index.js ===
export * from './components';
export * from './pages';
export * from './services';
export * from './hooks';\n\n
=== ./usuario/pages/UserForm.jsx ===
import { FiUser, FiMail, FiPhone, FiMapPin, FiKey, FiHash, FiUserCheck, FiLock, FiRefreshCw } from 'react-icons/fi';
import withValidation from '@shared/components/withValidation';

const Input = withValidation('input');
const Select = withValidation('select');

const UserForm = ({ editingItem, generatedPassword, generateRandomPassword, onSave, activeTab }) => {
    console.log('UserForm', editingItem);
    
    const handleSubmit = (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData.entries());

        const errors = {};

        if (!data.nombre) errors.nombre = 'El nombre es requerido';
        if (!data.email) errors.email = 'El email es requerido';
        if (!data.tipo_usuario) errors.tipo_usuario = 'El tipo de usuario es requerido';
        if (!editingItem && !data.clave && !generatedPassword) errors.clave = 'La contraseña es requerida para nuevos usuarios';


        if (Object.keys(errors).length > 0) {
            console.log(errors);
            return;
        }

        if (generatedPassword) {
            data.clave = generatedPassword;
        }

        onSave(data);
    };


    return (
        <form id={activeTab + 'Form'} onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="col-span-1 md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
                <div className="relative">
                    <FiUser className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <Input
                        name="nombre"
                        placeholder="Nombre completo"
                        defaultValue={editingItem?.nombre || ''}
                        className="w-full pl-10 pr-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        isRequired
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                <div className="relative">
                    <FiMail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <Input
                        name="email"
                        type="email"
                        placeholder="correo@ejemplo.com"
                        defaultValue={editingItem?.email || ''}
                        className="w-full pl-10 pr-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        isRequired
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Teléfono</label>
                <div className="relative">
                    <FiPhone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <Input
                        name="telefono"
                        placeholder="Número de teléfono"
                        defaultValue={editingItem?.telefono || ''}
                        className="w-full pl-10 pr-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    />
                </div>
            </div>

            <div className="col-span-1 md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">Dirección</label>
                <div className="relative">
                    <FiMapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <Input
                        name="direccion"
                        placeholder="Dirección completa"
                        defaultValue={editingItem?.direccion || ''}
                        className="w-full pl-10 pr-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">ID Personalizado</label>
                <div className="relative">
                    <FiHash className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <Input
                        name="id_personalizado"
                        placeholder="ID único"
                        defaultValue={editingItem?.id_personalizado || ''}
                        className="w-full pl-10 pr-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Tipo de Usuario</label>
                <div className="relative">
                    <FiUserCheck className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <Select
                        name="tipo_usuario"
                        defaultValue={editingItem?.tipo_usuario || ''}
                        className="w-full pl-10 pr-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 appearance-none"
                        isRequired
                    >
                        <option value="">Seleccionar tipo de usuario</option>
                        <option value="cliente">Cliente</option>
                        <option value="admin">Administrador</option>
                    </Select>
                </div>
            </div>

            <div className="col-span-1 md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">Contraseña</label>
                <div className="relative">
                    <FiLock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <Input
                        name="clave"
                        type="password"
                        placeholder="Contraseña"
                        defaultValue={generatedPassword || editingItem?.clave || ''}
                        className="w-full pl-10 pr-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        isRequired={!editingItem}
                    />
                </div>
            </div>

            <div className="col-span-1 md:col-span-2">
                <button
                    type="button"
                    onClick={generateRandomPassword}
                    className="w-full bg-gray-200 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-300 transition duration-300 flex items-center justify-center"
                >
                    <FiRefreshCw className="mr-2" />
                    Generar contraseña aleatoria
                </button>
            </div>

            {generatedPassword && (
                <div className="col-span-1 md:col-span-2 mt-2 p-2 bg-green-100 border border-green-300 rounded-md">
                    <p className="text-green-800 flex items-center">
                        <FiKey className="mr-2" />
                        Contraseña generada: <strong className="ml-2">{generatedPassword}</strong>
                    </p>
                </div>
            )}
        </form>
    );
};

export default UserForm;\n\n
=== ./usuario/pages/UserModal.jsx ===
import React, { useEffect } from 'react';
import { motion } from 'framer-motion';
import {
    FiUser, FiMail, FiPhone, FiMapPin, FiCalendar,
    FiLock, FiPrinter, FiEdit, FiXCircle, FiPackage,
    FiDollarSign, FiClock, FiList, 
} from 'react-icons/fi';

// Componente para la versión imprimible
const PrintableUser = ({ user, reservations }) => {
    // Calcular estadísticas de reservas
    const totalReservations = reservations.length;
    const totalSpent = reservations.reduce((sum, res) => sum + res.total, 0);
    const lastReservation = reservations.length > 0 ? new Date(Math.max(...reservations.map(r => new Date(r.fecha_reserva)))) : null;

    return (
        <div style={{ fontFamily: 'Arial, sans-serif', padding: '20px', maxWidth: '800px', margin: '0 auto' }}>
            <h1 style={{ textAlign: 'center', borderBottom: '2px solid #333', paddingBottom: '10px', marginBottom: '20px' }}>
                Detalles del Usuario
            </h1>
            
            <div style={{ marginBottom: '20px' }}>
                <h2 style={{ borderBottom: '1px solid #ddd', paddingBottom: '5px' }}>Información Personal</h2>
                <p><strong>Nombre:</strong> {user.nombre}</p>
                <p><strong>Email:</strong> {user.email}</p>
                <p><strong>Teléfono:</strong> {user.telefono || 'No especificado'}</p>
                <p><strong>Dirección:</strong> {user.direccion || 'No especificada'}</p>
            </div>
            
            <div style={{ marginBottom: '20px' }}>
                <h2 style={{ borderBottom: '1px solid #ddd', paddingBottom: '5px' }}>Detalles de la Cuenta</h2>
                <p><strong>Fecha de registro:</strong> {new Date(user.fecha_registro).toLocaleDateString()}</p>
                <p><strong>Tipo de usuario:</strong> {user.tipo_usuario}</p>
                <p><strong>ID Personalizado:</strong> {user.id_personalizado || 'No asignado'}</p>
            </div>
            
            <div style={{ marginBottom: '20px' }}>
                <h2 style={{ borderBottom: '1px solid #ddd', paddingBottom: '5px' }}>Resumen de Reservas</h2>
                <p><strong>Total de Reservas:</strong> {totalReservations}</p>
                <p><strong>Total Gastado:</strong> ${totalSpent.toFixed(2)}</p>
                <p><strong>Última Reserva:</strong> {lastReservation ? lastReservation.toLocaleDateString() : 'N/A'}</p>
            </div>
            
            {reservations.length > 0 && (
                <div>
                    <h2 style={{ borderBottom: '1px solid #ddd', paddingBottom: '5px' }}>Últimas Reservas</h2>
                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                        <thead>
                            <tr style={{ backgroundColor: '#f3f4f6' }}>
                                <th style={{ border: '1px solid #ddd', padding: '8px', textAlign: 'left' }}>Reserva #</th>
                                <th style={{ border: '1px solid #ddd', padding: '8px', textAlign: 'left' }}>Fecha</th>
                                <th style={{ border: '1px solid #ddd', padding: '8px', textAlign: 'left' }}>Paquete</th>
                                <th style={{ border: '1px solid #ddd', padding: '8px', textAlign: 'left' }}>Estado</th>
                                <th style={{ border: '1px solid #ddd', padding: '8px', textAlign: 'left' }}>Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            {reservations.slice(0, 5).map((reservation) => (
                                <tr key={reservation.id}>
                                    <td style={{ border: '1px solid #ddd', padding: '8px' }}>{reservation.id}</td>
                                    <td style={{ border: '1px solid #ddd', padding: '8px' }}>{new Date(reservation.fecha_reserva).toLocaleDateString()}</td>
                                    <td style={{ border: '1px solid #ddd', padding: '8px' }}>{reservation.nombre_paquete}</td>
                                    <td style={{ border: '1px solid #ddd', padding: '8px' }}>{reservation.estado}</td>
                                    <td style={{ border: '1px solid #ddd', padding: '8px' }}>${reservation.total}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}
            
            <div style={{ marginTop: '30px', textAlign: 'center', fontSize: '12px', color: '#666' }}>
                <p>Documento generado el {new Date().toLocaleString()}</p>
                <p>TRAMBOORY - Sistema de Administración</p>
            </div>
        </div>
    );
};



const UserModal = ({ user, reservations, onClose, onEdit, onSendEmail }) => {
    if (!user) return null;
    
    // Add event listener for escape key
    useEffect(() => {
        const handleEscKey = (event) => {
            if (event.key === 'Escape') {
                onClose();
            }
        };

        // Add event listener
        document.addEventListener('keydown', handleEscKey);

        // Cleanup function
        return () => {
            document.removeEventListener('keydown', handleEscKey);
        };
    }, [onClose]);

    const handlePrint = () => {
        const printContent = document.getElementById('printable-user');
        const winPrint = window.open('', '', 'left=0,top=0,width=800,height=900,toolbar=0,scrollbars=0,status=0');
        winPrint.document.write(printContent.innerHTML);
        winPrint.document.close();
        winPrint.focus();
        winPrint.print();
        winPrint.close();
    };

    const IconWrapper = ({ icon: Icon, text, color = "text-gray-700" }) => (
        <div className={`flex items-center mb-3 ${color}`}>
            <Icon className="mr-2 text-xl" />
            <span className="text-sm">{text}</span>
        </div>
    );

    // Calcular estadísticas de reservas
    const totalReservations = reservations.length;
    const totalSpent = reservations.reduce((sum, res) => sum + res.total, 0);
    const lastReservation = reservations.length > 0 ? new Date(Math.max(...reservations.map(r => new Date(r.fecha_reserva)))) : null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 overflow-y-auto">
            <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                className="bg-white rounded-lg shadow-xl w-full max-w-4xl my-8"
            >
                <div className="sticky top-0 bg-white z-10 px-6 py-4 border-b flex justify-between items-center">
                    <h2 className="text-2xl font-semibold text-gray-800">Detalles del Usuario</h2>
                    <button onClick={onClose} className="text-gray-500 hover:text-gray-700 transition duration-300">
                        <FiXCircle size={24} />
                    </button>
                </div>

                <div className="px-6 py-4 max-h-[calc(100vh-200px)] overflow-y-auto">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div className="space-y-6">
                            <div>
                                <h3 className="text-lg font-medium text-gray-900 mb-3">Información Personal</h3>
                                <div className="bg-gray-50 p-4 rounded-lg">
                                    <IconWrapper icon={FiUser} text={`Nombre: ${user.nombre}`} />
                                    <IconWrapper icon={FiMail} text={`Email: ${user.email}`} />
                                    <IconWrapper icon={FiPhone} text={`Teléfono: ${user.telefono || 'No especificado'}`} />
                                    <IconWrapper icon={FiMapPin} text={`Dirección: ${user.direccion || 'No especificada'}`} />
                                </div>
                            </div>
                        </div>
                        <div className="space-y-6">
                            <div>
                                <h3 className="text-lg font-medium text-gray-900 mb-3">Detalles de la Cuenta</h3>
                                <div className="bg-gray-50 p-4 rounded-lg">
                                    <IconWrapper icon={FiCalendar} text={`Fecha de registro: ${new Date(user.fecha_registro).toLocaleDateString()}`} />
                                    <IconWrapper icon={FiLock} text={`Tipo de usuario: ${user.tipo_usuario}`} />
                                    <IconWrapper icon={FiUser} text={`ID Personalizado: ${user.id_personalizado || 'No asignado'}`} />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div className="mb-6">
                        <h3 className="text-lg font-medium text-gray-900 mb-3">Resumen de Reservas</h3>
                        <div className="bg-gray-50 p-4 rounded-lg grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <IconWrapper icon={FiList} text={`Total de Reservas: ${totalReservations}`} color="text-blue-600" />
                            </div>
                            <div>
                                <IconWrapper icon={FiDollarSign} text={`Total Gastado: $${totalSpent.toFixed(2)}`} color="text-green-600" />
                            </div>
                            <div>
                                <IconWrapper icon={FiCalendar} text={`Última Reserva: ${lastReservation ? lastReservation.toLocaleDateString() : 'N/A'}`} color="text-purple-600" />
                            </div>
                        </div>
                    </div>

                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">Últimas Reservas</h3>
                        <div className="bg-white shadow overflow-hidden sm:rounded-md">
                            <ul className="divide-y divide-gray-200">
                                {reservations.slice(0, 5).map((reservation) => (
                                    <li key={reservation.id} className="px-4 py-4 sm:px-6">
                                        <div className="flex items-center justify-between">
                                            <p className="text-sm font-medium text-indigo-600 truncate">
                                                Reserva #{reservation.id}
                                            </p>
                                            <div className="ml-2 flex-shrink-0 flex">
                                                <p className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                                    reservation.estado === 'confirmada' ? 'bg-green-100 text-green-800' :
                                                        reservation.estado === 'pendiente' ? 'bg-yellow-100 text-yellow-800' :
                                                            'bg-red-100 text-red-800'
                                                }`}>
                                                    {reservation.estado}
                                                </p>
                                            </div>
                                        </div>
                                        <div className="mt-2 sm:flex sm:justify-between">
                                            <div className="sm:flex">
                                                <p className="flex items-center text-sm text-gray-500">
                                                    <FiCalendar className="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" />
                                                    {new Date(reservation.fecha_reserva).toLocaleDateString()}
                                                </p>
                                                <p className="mt-2 flex items-center text-sm text-gray-500 sm:mt-0 sm:ml-6">
                                                    <FiPackage className="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" />
                                                    {reservation.nombre_paquete}
                                                </p>
                                            </div>
                                            <div className="mt-2 flex items-center text-sm text-gray-500 sm:mt-0">
                                                <FiDollarSign className="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" />
                                                <p>
                                                    ${reservation.total}
                                                </p>
                                            </div>
                                        </div>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    </div>
                </div>

                <div className="sticky bottom-0 bg-gray-50 px-6 py-4 border-t flex flex-wrap justify-end gap-4">
                    <button
                        onClick={handlePrint}
                        className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition duration-300 flex items-center text-sm"
                    >
                        <FiPrinter className="mr-2" />
                        Imprimir Detalles
                    </button>
                    <button
                        onClick={() => onEdit(user)}
                        className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition duration-300 flex items-center text-sm"
                    >
                        <FiEdit className="mr-2" />
                        Editar Usuario
                    </button>
                    <button
                        onClick={() => onSendEmail(user)}
                        className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition duration-300 flex items-center text-sm"
                    >
                        <FiMail className="mr-2" />
                        Enviar Correo
                    </button>
                </div>
            </motion.div>
            <div id="printable-user" className="hidden">
                <PrintableUser user={user} reservations={reservations} />
            </div>
        </div>
    );
};

export default UserModal;\n\n
=== ./usuario/pages/UserSummary.jsx ===
import { motion } from 'framer-motion';
import { FiUsers, FiUserPlus, FiUserCheck } from 'react-icons/fi';

const UserSummary = ({ users }) => {
    // Calcular estadísticas de usuarios
    const activeUsers = users.filter(user => user.activo).length;
    const adminUsers = users.filter(user => user.rol === 'admin').length;
    
    return (
        <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="h-full"
        >
            {/* Header con gradiente */}
            <div className="bg-gradient-to-r from-indigo-500 to-indigo-600 p-6">
                <div className="flex items-center justify-between">
                    <h2 className="text-xl font-semibold text-white">Usuarios</h2>
                    <div className="p-2 rounded-full bg-white/20 text-white">
                        <FiUsers className="w-5 h-5" />
                    </div>
                </div>
            </div>
            
            {/* Contenido */}
            <div className="p-4 md:p-6">
                <div className="flex flex-col items-center text-center mb-4 md:mb-6">
                    <p className="text-3xl md:text-4xl font-bold text-indigo-600">{users.length}</p>
                    <p className="text-xs md:text-sm font-medium text-gray-600 mt-1">usuarios registrados</p>
                </div>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-6">
                    <div className="bg-white rounded-lg p-3 md:p-4 shadow-sm border border-gray-100 text-center">
                        <div className="mx-auto w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-full bg-green-100 text-green-600 mb-2 md:mb-3">
                            <FiUserCheck className="w-4 h-4 md:w-5 md:h-5" />
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className="text-base md:text-xl font-bold text-gray-800">{activeUsers}</p>
                            <p className="text-xs md:text-sm font-medium text-gray-600 text-center">Activos</p>
                        </div>
                    </div>
                    <div className="bg-white rounded-lg p-3 md:p-4 shadow-sm border border-gray-100 text-center">
                        <div className="mx-auto w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-full bg-purple-100 text-purple-600 mb-2 md:mb-3">
                            <FiUserPlus className="w-4 h-4 md:w-5 md:h-5" />
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className="text-base md:text-xl font-bold text-gray-800">{adminUsers}</p>
                            <p className="text-xs md:text-sm font-medium text-gray-600 text-center">Administradores</p>
                        </div>
                    </div>
                </div>
            </div>
        </motion.div>
    );
};

export default UserSummary;
\n\n
=== ./usuario/pages/UserTable.jsx ===
import React from 'react';
import { FiEdit2, FiTrash2, FiEye } from 'react-icons/fi';

const UserTable = ({ users, userSearch, setUserSearch, handleEditItem, handleDeleteItem, handleViewUser }) => {
    return (
        <>
            <div className="mb-4">
                <input
                    type="text"
                    placeholder="Buscar usuario..."
                    value={userSearch}
                    onChange={(e) => setUserSearch(e.target.value)}
                    className="w-full p-2 border rounded"
                />
            </div>
            <div className="overflow-x-auto">
                <table className="min-w-full bg-white">
                    <thead className="bg-gray-100">
                    <tr>
                        <th className="px-4 py-2 text-left">ID Personalizado</th>
                        <th className="px-4 py-2 text-left">Nombre</th>
                        <th className="px-4 py-2 text-left">Email</th>
                        <th className="px-4 py-2 text-left">Tipo de Usuario</th>
                        <th className="px-4 py-2 text-left">Acciones</th>
                    </tr>
                    </thead>
                    <tbody>
                    {users.map((user) => (
                        <tr key={user.id} className="border-b border-gray-200 hover:bg-gray-50">
                            <td className="px-4 py-2">{user.id_personalizado || 'N/A'}</td>
                            <td className="px-4 py-2">{user.nombre}</td>
                            <td className="px-4 py-2">{user.email}</td>
                            <td className="px-4 py-2">
                  <span
                      className={`px-2 py-1 rounded-full text-xs font-semibold ${
                          user.tipo_usuario === 'admin'
                              ? 'bg-red-100 text-red-800'
                              : 'bg-green-100 text-green-800'
                      }`}
                  >
                    {user.tipo_usuario}
                  </span>
                            </td>
                            <td className="px-4 py-2">
                                <button
                                    onClick={() => handleViewUser(user)}
                                    className="text-blue-500 hover:text-blue-700 mr-2"
                                    title="Ver detalles"
                                >
                                    <FiEye />
                                </button>
                                <button
                                    onClick={() => handleEditItem(user)}
                                    className="text-green-500 hover:text-green-700 mr-2"
                                    title="Editar"
                                >
                                    <FiEdit2 />
                                </button>
                                <button
                                    onClick={() => handleDeleteItem(user.id)}
                                    className="text-red-500 hover:text-red-700"
                                    title="Eliminar"
                                >
                                    <FiTrash2 />
                                </button>
                            </td>
                        </tr>
                    ))}
                    </tbody>
                </table>
            </div>
        </>
    );
};

export default UserTable;\n\n
=== ./usuario/pages/costumer/ProfileForm.jsx ===
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { toast } from 'react-toastify';
import {
  FiUser,
  FiMail,
  FiPhone,
  FiMapPin,
  FiSave,
  FiX,
  FiEdit,
  FiLock,
  FiShield,
  FiCheckCircle,
  FiInfo,
  FiAlertCircle,
  FiEye,
  FiEyeOff
} from 'react-icons/fi';
import axiosInstance from '@shared/utils/axiosConfig';

// Esquema de validación corregido
const schema = yup.object().shape({
  nombre: yup.string()
    .required('El nombre es requerido')
    .min(2, 'El nombre debe tener al menos 2 caracteres')
    .matches(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$/, 'El nombre solo debe contener letras'),
  
  email: yup.string()
    .required('El email es requerido')
    .email('Email inválido'),
  
  telefono: yup.string()
    .matches(/^\d{10}$/, 'El teléfono debe tener 10 dígitos'),
  
  direccion: yup.string()
    .min(5, 'La dirección debe tener al menos 5 caracteres'),
  
  currentPassword: yup.string(),
  
  newPassword: yup.string()
    .test('passwordRequirements', 'La contraseña no cumple con los requisitos', function(value) {
      if (this.parent.currentPassword || value) {
        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
        if (!value) return false;
        if (!passwordRegex.test(value)) return false;
        if (value === this.parent.currentPassword) return false;
        return true;
      }
      return true;
    }),
  
  confirmPassword: yup.string()
    .test('passwordMatch', 'Las contraseñas deben coincidir', function(value) {
      return !this.parent.newPassword || value === this.parent.newPassword;
    })
});

// Componente InputField con forwardRef
const InputField = React.forwardRef(({ icon: Icon, error, disabled, type = "text", ...props }, ref) => {
  const [showPassword, setShowPassword] = useState(false);
  
  return (
    <div className="relative">
      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <Icon className={`${disabled ? 'text-gray-400' : 'text-indigo-500'}`} />
      </div>
      <input
        {...props}
        ref={ref}
        type={type === "password" && showPassword ? "text" : type}
        disabled={disabled}
        className={`
          block w-full pl-10 pr-10 py-2.5 
          border rounded-lg shadow-sm 
          transition-all duration-200
          ${error ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 
                   'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500'}
          ${disabled ? 'bg-gray-50 text-gray-500' : 'bg-white'}
          placeholder-gray-400
          focus:ring-2 focus:ring-opacity-50
        `}
      />
      {type === "password" && (
        <button
          type="button"
          onClick={() => setShowPassword(!showPassword)}
          className="absolute inset-y-0 right-0 pr-3 flex items-center"
        >
          {showPassword ? (
            <FiEyeOff className="text-gray-400 hover:text-gray-600" />
          ) : (
            <FiEye className="text-gray-400 hover:text-gray-600" />
          )}
        </button>
      )}
      {error && (
        <motion.p
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="mt-1 text-sm text-red-600 flex items-center"
        >
          <FiAlertCircle className="w-4 h-4 mr-1" />
          {error}
        </motion.p>
      )}
    </div>
  );
});

InputField.displayName = 'InputField';

// Componente de requisitos de contraseña
const PasswordRequirements = ({ password }) => {
  const requirements = [
    { 
      test: /.{8,}/, 
      text: 'Al menos 8 caracteres',
      icon: FiLock 
    },
    { 
      test: /[A-Z]/, 
      text: 'Una letra mayúscula',
      icon: FiCheckCircle 
    },
    { 
      test: /[a-z]/, 
      text: 'Una letra minúscula',
      icon: FiCheckCircle 
    },
    { 
      test: /[0-9]/, 
      text: 'Un número',
      icon: FiCheckCircle 
    },
    { 
      test: /[@$!%*?&]/, 
      text: 'Un carácter especial (@$!%*?&)',
      icon: FiCheckCircle 
    }
  ];

  return (
    <div className="mt-2 p-3 bg-gray-50 rounded-lg border border-gray-200">
      <h4 className="text-sm font-medium text-gray-700 mb-2">Requisitos de la contraseña:</h4>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
        {requirements.map((req, index) => {
          const isMet = password && req.test.test(password);
          return (
            <div
              key={index}
              className={`flex items-center text-sm ${
                isMet ? 'text-green-600' : 'text-gray-500'
              }`}
            >
              <req.icon className={`w-4 h-4 mr-2 ${
                isMet ? 'text-green-500' : 'text-gray-400'
              }`} />
              {req.text}
            </div>
          );
        })}
      </div>
    </div>
  );
};

// Componente principal ProfileForm
const ProfileForm = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [showPasswordFields, setShowPasswordFields] = useState(false);
  const [userData, setUserData] = useState(null);

  const {
    register,
    handleSubmit,
    reset,
    watch,
    formState: { errors }
  } = useForm({
    resolver: yupResolver(schema)
  });

  // Función fetchUserData mejorada
  const fetchUserData = async () => {
    try {
      console.log('Obteniendo datos del usuario...');
      const response = await axiosInstance.get('/auth/me');
      console.log('Datos recibidos:', response.data);
      
      if (response.data) {
        setUserData(response.data);
        const formData = {
          nombre: response.data.nombre || '',
          email: response.data.email || '',
          telefono: response.data.telefono || '',
          direccion: response.data.direccion || '',
        };
        console.log('Reseteando formulario con:', formData);
        reset(formData);
      }
    } catch (error) {
      console.error('Error al obtener datos del usuario:', error);
      if (error.response?.status === 401) {
        toast.error('Sesión expirada. Por favor, inicia sesión nuevamente');
        localStorage.removeItem('token');
        window.location.href = '/signin';
      } else {
        toast.error('Error al cargar los datos del usuario');
      }
    }
  };

  useEffect(() => {
    console.log('Componente montado, ejecutando fetchUserData');
    fetchUserData();
  }, []);

  // Función onSubmit mejorada
  const onSubmit = async (data) => {
    setIsLoading(true);
    try {
      const updateData = {
        nombre: data.nombre,
        email: data.email,
        telefono: data.telefono || null,
        direccion: data.direccion || null
      };

      if (data.currentPassword && data.newPassword) {
        updateData.currentPassword = data.currentPassword;
        updateData.newPassword = data.newPassword;
      }

      console.log('Enviando datos de actualización:', updateData);

      const response = await axiosInstance.put('/auth/profile', updateData);
      console.log('Respuesta del servidor:', response.data);

      toast.success('¡Perfil actualizado exitosamente!');

      if (data.newPassword) {
        toast.info('Se ha actualizado tu contraseña. Por favor, inicia sesión nuevamente.');
        setTimeout(() => {
          localStorage.removeItem('token');
          window.location.href = '/signin';
        }, 2000);
      } else {
        setIsEditing(false);
        setShowPasswordFields(false);
        await fetchUserData();
      }
    } catch (error) {
      console.error('Error al actualizar el perfil:', error);
      
      if (error.response?.status === 401) {
        toast.error('Sesión expirada o contraseña actual incorrecta');
      } else {
        toast.error(error.response?.data?.message || 'Error al actualizar el perfil');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 to-purple-50 py-12 px-4">
      <div className="max-w-4xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-2xl shadow-xl overflow-hidden"
        >
          {/* Header */}
          <div className="px-8 py-6 bg-gradient-to-r from-indigo-600 to-purple-600">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center">
                  <FiUser className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white">Mi Perfil</h2>
                  <p className="text-indigo-100">Gestiona tu información personal</p>
                </div>
              </div>
              {!isEditing ? (
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setIsEditing(true)}
                  className="px-4 py-2 bg-white/20 hover:bg-white/30 text-white rounded-lg 
                    flex items-center space-x-2 transition-colors duration-200"
                >
                  <FiEdit className="w-4 h-4" />
                  <span>Editar Perfil</span>
                </motion.button>
              ) : (
                <div className="flex items-center space-x-2">
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => {
                      setIsEditing(false);
                      setShowPasswordFields(false);
                      reset(userData);
                    }}
                    className="px-4 py-2 bg-white/20 hover:bg-white/30 text-white rounded-lg 
                      flex items-center space-x-2"
                  >
                    <FiX className="w-4 h-4" />
                    <span>Cancelar</span>
                  </motion.button>
                </div>
              )}
            </div>
          </div>

          {/* Form Content */}
          <form onSubmit={handleSubmit(onSubmit)} className="p-8">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Nombre Completo
                  </label>
                  <InputField
                    icon={FiUser}
                    {...register('nombre')}
                    type="text"
                    placeholder="Tu nombre completo"
                    disabled={!isEditing}
                    error={errors.nombre?.message}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Correo Electrónico
                  </label>
                  <InputField
                    icon={FiMail}
                    {...register('email')}
                    type="email"
                    placeholder="tu@email.com"
                    disabled={!isEditing}
                    error={errors.email?.message}
                  />
                </div>
              </div>

              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Teléfono
                  </label>
                  <InputField
                    icon={FiPhone}
                    {...register('telefono')}
                    type="tel"
                    placeholder="Tu número de teléfono"
                    disabled={!isEditing}
                    error={errors.telefono?.message}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Dirección
                  </label>
                  <InputField
                    icon={FiMapPin}
                    {...register('direccion')}
                    type="text"
                    placeholder="Tu dirección"
                    disabled={!isEditing}
                    error={errors.direccion?.message}
                  />
                </div>
              </div>
            </div>

            {/* Password Section */}
            {isEditing && (
              <div className="mt-8">
                <motion.button
                  type="button"
                  onClick={() => setShowPasswordFields(!showPasswordFields)}
                  className="inline-flex items-center px-4 py-2 rounded-lg text-sm font-medium
                    transition-colors duration-200 border-2 border-indigo-200 text-indigo-700
                    hover:bg-indigo-50"
                >
                  <FiLock className="w-4 h-4 mr-2" />
                  {showPasswordFields ? 'Cancelar cambio de contraseña' : 'Cambiar contraseña'}
                  </motion.button>

                <AnimatePresence>
                  {showPasswordFields && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                      className="mt-6 p-6 bg-gray-50 rounded-xl border border-gray-200"
                    >
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Contraseña Actual
                          </label>
                          <InputField
                            icon={FiShield}
                            {...register('currentPassword')}
                            type="password"
                            placeholder="••••••••"
                            error={errors.currentPassword?.message}
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Nueva Contraseña
                          </label>
                          <InputField
                            icon={FiLock}
                            {...register('newPassword')}
                            type="password"
                            placeholder="••••••••"
                            error={errors.newPassword?.message}
                          />
                        </div>

                        <div className="md:col-span-2">
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Confirmar Nueva Contraseña
                          </label>
                          <InputField
                            icon={FiCheckCircle}
                            {...register('confirmPassword')}
                            type="password"
                            placeholder="••••••••"
                            error={errors.confirmPassword?.message}
                          />
                        </div>

                        {/* Password Requirements */}
                        <div className="md:col-span-2">
                          <PasswordRequirements password={watch('newPassword')} />
                          
                          {/* Additional Password Warning */}
                          <motion.div
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            className="mt-4 p-3 bg-yellow-50 rounded-lg border border-yellow-200"
                          >
                            <div className="flex items-start">
                              <FiInfo className="w-5 h-5 text-yellow-500 mt-0.5 mr-2" />
                              <div className="text-sm text-yellow-700">
                                <p className="font-medium">Importante:</p>
                                <ul className="list-disc list-inside mt-1 space-y-1">
                                  <li>Al cambiar tu contraseña, se cerrará tu sesión actual</li>
                                  <li>Deberás iniciar sesión nuevamente con tu nueva contraseña</li>
                                  <li>Asegúrate de recordar la nueva contraseña</li>
                                </ul>
                              </div>
                            </div>
                          </motion.div>
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            )}

            {/* Action Buttons */}
            {isEditing && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="mt-8 flex justify-end space-x-4"
              >
                <motion.button
                  type="button"
                  onClick={() => {
                    setIsEditing(false);
                    setShowPasswordFields(false);
                    reset(userData);
                  }}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  className="px-6 py-2.5 border border-gray-300 text-gray-700 rounded-lg font-medium
                    hover:bg-gray-50 transition-colors duration-200 flex items-center space-x-2"
                >
                  <FiX className="w-4 h-4" />
                  <span>Cancelar</span>
                </motion.button>

                <motion.button
                  type="submit"
                  disabled={isLoading}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  className={`px-6 py-2.5 bg-indigo-600 text-white rounded-lg font-medium
                    hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2
                    transition-colors duration-200 flex items-center space-x-2
                    ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                >
                  <FiSave className="w-4 h-4" />
                  <span>{isLoading ? 'Guardando...' : 'Guardar Cambios'}</span>
                </motion.button>
              </motion.div>
            )}
          </form>

          {/* Feedback Message */}
          <AnimatePresence>
            {isLoading && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: 20 }}
                className="absolute bottom-4 right-4 bg-white p-4 rounded-lg shadow-lg
                  border border-indigo-200 flex items-center space-x-3"
              >
                <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-indigo-600" />
                <span className="text-sm text-gray-600">Actualizando tu perfil...</span>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>

        {/* Success Message After Save */}
        <AnimatePresence>
          {!isEditing && userData && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
              className="mt-4 p-4 bg-green-50 rounded-lg border border-green-200
                flex items-center justify-between"
            >
              <div className="flex items-center space-x-3">
                <FiCheckCircle className="w-5 h-5 text-green-500" />
                <span className="text-sm text-green-700">
                  Tu perfil está actualizado y seguro
                </span>
              </div>
              <span className="text-xs text-green-600">
                Última actualización: {new Date(userData.updatedAt).toLocaleString()}
              </span>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default ProfileForm;\n\n
=== ./usuario/pages/index.js ===
// Exportar todos los componentes de usuario/pages\n\n
=== ./usuario/services/index.js ===
// Exportar todos los componentes de usuario/services
\n\n
=== ./usuario/services/usuariosStore.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'

const useUsersStore = create((set, get) => ({
  // Estado
  users: [],
  selectedUser: null,
  
  // Acciones
  fetchUsers: async () => {
    try {
      const response = await axiosInstance.get('/usuarios')
      set({ users: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar usuarios:', error)
      toast.error('Error al cargar los usuarios')
      throw error
    }
  },
  
  addUser: async (userData) => {
    try {
      const response = await axiosInstance.post('/usuarios', userData)
      set(state => ({ users: [...state.users, response.data] }))
      toast.success('Usuario creado exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al crear usuario:', error)
      toast.error('Error al crear usuario')
      throw error
    }
  },
  
  updateUser: async (id, userData) => {
    try {
      const response = await axiosInstance.put(`/usuarios/${id}`, userData)
      set(state => ({
        users: state.users.map(user => 
          user.id === id ? { ...user, ...response.data } : user
        )
      }))
      toast.success('Usuario actualizado exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar usuario:', error)
      toast.error('Error al actualizar usuario')
      throw error
    }
  },
  
  deleteUser: async (id) => {
    try {
      await axiosInstance.delete(`/usuarios/${id}`)
      set(state => ({
        users: state.users.filter(user => user.id !== id)
      }))
      toast.success('Usuario desactivado con éxito')
    } catch (error) {
      console.error('Error al desactivar usuario:', error)
      toast.error('Error al desactivar usuario')
      throw error
    }
  },
  
  setSelectedUser: (user) => set({ selectedUser: user }),
  
  // Selectores
  getFilteredUsers: (search) => {
    const { users } = get()
    return users.filter(
      user =>
        user.nombre.toLowerCase().includes(search.toLowerCase()) ||
        user.email.toLowerCase().includes(search.toLowerCase()) ||
        (user.id_personalizado &&
          user.id_personalizado
            .toLowerCase()
            .includes(search.toLowerCase()))
    )
  }
}))

export default useUsersStore\n\n
