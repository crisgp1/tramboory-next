=== ./auth/components/index.js ===
// Exportar todos los componentes de auth/components
\n\n

=== ./auth/hooks/index.js ===
// Exportar todos los componentes de auth/hooks
\n\n

=== ./auth/hooks/useAuth.js ===
s// src/hooks/useAuth.js

import { useState, useEffect } from 'react';
import Cookies from 'js-cookie';
import { jwtDecode } from "jwt-decode";

export const useAuth = () => {
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [user, setUser] = useState(null);

    useEffect(() => {
        const verifyToken = () => {
            const token = Cookies.get('token');
            if (token) {
                try {
                    const decoded = jwtDecode(token);
                    console.log("Decoded token:", decoded);  // Para depuraciÃ³n

                    // Verifica si el token ha expirado
                    if (decoded.exp && decoded.exp > Date.now() / 1000) {
                        setIsAuthenticated(true);
                        setUser(decoded);  // Guarda la informaciÃ³n del usuario
                    } else {
                        console.log("Token expirado");
                        Cookies.remove('token');
                        setIsAuthenticated(false);
                        setUser(null);
                    }
                } catch (error) {
                    console.error('Error decoding token:', error);
                    Cookies.remove('token');
                    setIsAuthenticated(false);
                    setUser(null);
                }
            } else {
                setIsAuthenticated(false);
                setUser(null);
            }
            setIsLoading(false);
        };

        verifyToken();
    }, []);

    const login = (token) => {
        Cookies.set('token', token, { expires: 1 });  // Expira en 1 dÃ­a
        setIsAuthenticated(true);
        setUser(jwtDecode(token));
    };

    const logout = () => {
        Cookies.remove('token');
        setIsAuthenticated(false);
        setUser(null);
    };

    return { isAuthenticated, isLoading, user, login, logout };
};\n\n

=== ./auth/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n

=== ./auth/pages/ForgotPassword.jsx ===
import { useState } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import { motion } from 'framer-motion';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { FiMail } from 'react-icons/fi';

const schema = yup.object().shape({
    email: yup.string().email('Email invÃ¡lido').required('El email es requerido'),
});

export default function ForgotPassword() {
    const [loading, setLoading] = useState(false);

    const { register, handleSubmit, formState: { errors } } = useForm({
        resolver: yupResolver(schema)
    });

    const onSubmit = async (data) => {
        setLoading(true);
        try {
            await axios.post('/api/auth/forgot-password', data);
            toast.success('Se ha enviado un correo electrÃ³nico con las instrucciones para restablecer tu contraseÃ±a');
        } catch (error) {
            toast.error(error.response?.data?.message || "Hubo un problema al procesar tu solicitud. Intenta nuevamente mÃ¡s tarde.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="min-h-screen bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center p-4"
        >
            <ToastContainer position="top-right" autoClose={3000} hideProgressBar={false} newestOnTop closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover />
            <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">
                <h2 className="text-3xl font-bold mb-6 text-center text-indigo-700">Â¿Olvidaste tu contraseÃ±a?</h2>
                <p className="text-gray-600 mb-6">Ingresa tu direcciÃ³n de correo electrÃ³nico y te enviaremos un enlace para restablecer tu contraseÃ±a.</p>
                <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                    <div>
                        <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">Correo ElectrÃ³nico</label>
                        <div className="relative">
                            <FiMail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                            <input
                                {...register('email')}
                                type="email"
                                className="pl-10 w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                placeholder="tu@email.com"
                            />
                        </div>
                        {errors.email && <p className="mt-1 text-xs text-red-500">{errors.email.message}</p>}
                    </div>

                    <motion.button
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        type="submit"
                        className={`w-full bg-indigo-600 text-white p-3 rounded-md font-semibold hover:bg-indigo-700 transition duration-300 ${
                            loading ? 'opacity-50 cursor-not-allowed' : ''
                        }`}
                        disabled={loading}
                    >
                        {loading ? 'Enviando...' : 'Enviar enlace de restablecimiento'}
                    </motion.button>
                </form>
                <p className="mt-4 text-center text-sm text-gray-600">
                    Â¿Recordaste tu contraseÃ±a?{' '}
                    <Link to="/signin" className="font-medium text-indigo-600 hover:text-indigo-500">
                        Inicia SesiÃ³n
                    </Link>
                </p>
            </div>
        </motion.div>
    );
}\n\n

=== ./auth/pages/SignIn.jsx ===
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { FiMail, FiLock, FiEye, FiEyeOff, FiUser } from 'react-icons/fi';
import axiosInstance from '@shared/utils/axiosConfig.js';
import { useAuth } from '@shared/context/authContext';

const schema = yup.object().shape({
  email: yup.string().email('Email invÃ¡lido').required('El email es requerido'),
  password: yup.string().required('La contraseÃ±a es requerida'),
});

export default function SignIn() {
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);
  const navigate = useNavigate();
  const { login, user, userType } = useAuth();

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(schema),
  });

  const onSubmit = async (data) => {
    setLoading(true);
    try {
      // Usar directamente la funciÃ³n login del contexto
      await login(data.email, data.password);
      
      // Obtener el tipo de usuario desde el contexto o localStorage
      const currentUserType = userType || user?.tipo_usuario || localStorage.getItem('userType') || 'cliente';
      
      toast.success('Inicio de sesiÃ³n exitoso');

      if (currentUserType === 'admin') {
        navigate('/admin/dashboard');
      } else {
        try {
          const reservationsResponse = await axiosInstance.get('/reservas');
          // Obtener el ID del usuario actual
          const currentUserId = user?.id;
          const userReservations = reservationsResponse.data.filter(
            (reserva) => reserva.id_usuario === currentUserId
          );
          
          if (userReservations.length > 0) {
            navigate(`/reservation-status/${userReservations[0].id}`);
          } else {
            navigate('/reservations');
          }
        } catch (error) {
          console.error('Error fetching reservations:', error);
          navigate('/reservations');
        }
      }
    } catch (error) {
      console.error('Error during login:', error);
      if (error.response) {
        if (error.response.status === 401 || error.response.status === 404) {
          toast.error('Usuario no existe o credenciales invÃ¡lidas');
        } else if (error.response.status === 500) {
          toast.error('Error del servidor. Por favor, intenta de nuevo mÃ¡s tarde');
        } else {
          toast.error(error.response.data?.message || 'Error desconocido al intentar iniciar sesiÃ³n');
        }
      } else if (error.request) {
        toast.error('No se recibiÃ³ respuesta del servidor. Verifica tu conexiÃ³n a internet.');
      } else {
        toast.error('Error al configurar la solicitud. Por favor, intenta de nuevo.');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-indigo-50 to-purple-50 flex flex-col items-center justify-center p-4 relative overflow-hidden">
      {/* Elementos decorativos - formas geomÃ©tricas sutiles */}
      <div className="absolute top-0 right-0 w-64 h-64 bg-indigo-100 rounded-full -mr-32 -mt-32 opacity-70"></div>
      <div className="absolute bottom-0 left-0 w-80 h-80 bg-purple-100 rounded-full -ml-40 -mb-40 opacity-70"></div>
      <div className="absolute top-1/3 left-1/4 w-12 h-12 bg-indigo-200 rounded-full transform rotate-45 opacity-60"></div>
      <div className="absolute bottom-1/4 right-1/3 w-20 h-20 bg-purple-200 rounded-full transform rotate-12 opacity-60"></div>
      
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
      
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="relative z-10 w-full max-w-md"
      >
        <div className="bg-white rounded-3xl shadow-xl overflow-hidden">
          <div className="px-8 pt-8 pb-4">
            <div className="flex items-center justify-center mb-6">
              <div className="p-3 bg-indigo-100 rounded-2xl">
                <FiUser className="text-indigo-600 text-2xl" />
              </div>
            </div>
            <h1 className="text-3xl font-bold mb-2 text-center text-gray-800">
              Bienvenido de vuelta
            </h1>
            <p className="text-center text-gray-500 mb-8">Ingresa tus credenciales para continuar</p>
          </div>
          
          <div className="px-8 pb-8">
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
              <div className="space-y-2">
                <label htmlFor="email" className="text-sm font-medium text-gray-700 block">
                  Correo ElectrÃ³nico
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <FiMail className="text-indigo-500" />
                  </div>
                  <input
                    {...register('email')}
                    type="email"
                    className="w-full pl-11 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
                    placeholder="tu@email.com"
                  />
                </div>
                {errors.email && (
                  <motion.p 
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    className="text-xs text-red-500 mt-1"
                  >
                    {errors.email.message}
                  </motion.p>
                )}
              </div>

              <div className="space-y-2">
                <label htmlFor="password" className="text-sm font-medium text-gray-700 block">
                  ContraseÃ±a
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <FiLock className="text-indigo-500" />
                  </div>
                  <input
                    {...register('password')}
                    type={showPassword ? 'text' : 'password'}
                    className="w-full pl-11 pr-11 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
                    placeholder="Tu contraseÃ±a"
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-indigo-500 transition-all duration-200"
                  >
                    {showPassword ? <FiEyeOff size={18} /> : <FiEye size={18} />}
                  </button>
                </div>
                {errors.password && (
                  <motion.p 
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    className="text-xs text-red-500 mt-1"
                  >
                    {errors.password.message}
                  </motion.p>
                )}
              </div>

              <div className="flex items-center justify-between mt-6">
                <div className="flex items-center">
                  <input
                    id="rememberMe"
                    type="checkbox"
                    checked={rememberMe}
                    onChange={(e) => setRememberMe(e.target.checked)}
                    className="w-4 h-4 text-indigo-500 border-gray-300 rounded focus:ring-indigo-400"
                  />
                  <label htmlFor="rememberMe" className="ml-2 text-sm text-gray-600">
                    Recordarme
                  </label>
                </div>
                <Link to="/forgot-password" className="text-sm font-medium text-indigo-600 hover:text-indigo-500 transition-all duration-200">
                  Â¿Olvidaste tu contraseÃ±a?
                </Link>
              </div>

              <motion.button
                whileHover={{ scale: 1.01 }}
                whileTap={{ scale: 0.99 }}
                type="submit"
                className={`w-full py-3 mt-6 rounded-xl font-semibold text-white shadow-lg transition-all duration-300 ${
                  loading 
                    ? 'bg-indigo-400 cursor-not-allowed' 
                    : 'bg-indigo-600 hover:bg-indigo-700 shadow-indigo-200'
                }`}
                disabled={loading}
              >
                {loading ? (
                  <div className="flex items-center justify-center">
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Iniciando sesiÃ³n...
                  </div>
                ) : 'Iniciar SesiÃ³n'}
              </motion.button>
            </form>
            
            <div className="mt-8 text-center">
              <p className="text-sm text-gray-600">
                Â¿No tienes una cuenta?{' '}
                <Link to="/signup" className="font-medium text-indigo-600 hover:text-indigo-500 transition-all duration-200">
                  RegÃ­strate aquÃ­
                </Link>
              </p>
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  );
}\n\n

=== ./auth/pages/SignUp.jsx ===
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { motion } from 'framer-motion';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { FiEye, FiEyeOff, FiUser, FiMail, FiPhone, FiMapPin, FiLock } from 'react-icons/fi';

const schema = yup.object().shape({
  nombre: yup.string().required('El nombre es requerido'),
  email: yup.string().email('Email invÃ¡lido').required('El email es requerido'),
  telefono: yup.string(),
  direccion: yup.string(),
  password: yup.string()
    .min(8, 'La contraseÃ±a debe tener al menos 8 caracteres')
    .matches(/[A-Z]/, 'Debe contener al menos una mayÃºscula')
    .matches(/[a-z]/, 'Debe contener al menos una minÃºscula')
    .matches(/[0-9]/, 'Debe contener al menos un nÃºmero')
    .matches(/[!@#$%^&*]/, 'Debe contener al menos un caracter especial')
    .required('La contraseÃ±a es requerida'),
  confirmPassword: yup.string()
    .oneOf([yup.ref('password'), null], 'Las contraseÃ±as deben coincidir')
    .required('Confirma tu contraseÃ±a'),
});

export default function Signup() {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const { register, handleSubmit, watch, formState: { errors } } = useForm({
    resolver: yupResolver(schema)
  });

  const password = watch('password', '');

  const onSubmit = async (data) => {
    setLoading(true);
    try {
      const response = await axios.post('/api/auth/signup', data);
      toast.success(response.data.message || "Tu cuenta ha sido creada con Ã©xito");
      setTimeout(() => navigate('/signin'), 2000);
    } catch (error) {
      toast.error(error.response?.data?.message || "Hubo un problema al registrarte. Intenta nuevamente mÃ¡s tarde.");
    } finally {
      setLoading(false);
    }
  };

  const getPasswordStrength = () => {
    let strength = 0;
    if (password.length >= 8) strength++;
    if (/[A-Z]/.test(password)) strength++;
    if (/[a-z]/.test(password)) strength++;
    if (/[0-9]/.test(password)) strength++;
    if (/[!@#$%^&*]/.test(password)) strength++;
    return strength;
  };

  const strengthColors = ['bg-red-400', 'bg-orange-400', 'bg-yellow-400', 'bg-lime-400', 'bg-green-400'];

  const passwordCriteria = [
    { label: 'Al menos 8 caracteres', regex: /.{8,}/ },
    { label: 'Una letra mayÃºscula', regex: /[A-Z]/ },
    { label: 'Una letra minÃºscula', regex: /[a-z]/ },
    { label: 'Un nÃºmero', regex: /[0-9]/ },
    { label: 'Un caracter especial (!@#$%^&*)', regex: /[!@#$%^&*]/ },
  ];

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-indigo-50 to-purple-50 flex flex-col items-center justify-center p-4 relative overflow-hidden">
      {/* Elementos decorativos - formas geomÃ©tricas sutiles */}
      <div className="absolute top-0 right-0 w-64 h-64 bg-indigo-100 rounded-full -mr-32 -mt-32 opacity-70"></div>
      <div className="absolute bottom-0 left-0 w-80 h-80 bg-purple-100 rounded-full -ml-40 -mb-40 opacity-70"></div>
      <div className="absolute top-1/3 left-1/4 w-12 h-12 bg-indigo-200 rounded-full transform rotate-45 opacity-60"></div>
      <div className="absolute bottom-1/4 right-1/3 w-20 h-20 bg-purple-200 rounded-full transform rotate-12 opacity-60"></div>
      
      <ToastContainer position="top-right" autoClose={3000} hideProgressBar={false} newestOnTop closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover />
      
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="relative z-10 w-full max-w-2xl my-8"
      >
        <div className="bg-white rounded-3xl shadow-xl overflow-hidden">
          <div className="px-8 pt-8 pb-4">
            <div className="flex items-center justify-center mb-6">
              <div className="p-3 bg-indigo-100 rounded-2xl">
                <FiUser className="text-indigo-600 text-2xl" />
              </div>
            </div>
            <h1 className="text-3xl font-bold mb-2 text-center text-gray-800">
              Crear cuenta
            </h1>
            <p className="text-center text-gray-500 mb-6">Completa tus datos para registrarte</p>
          </div>
          
          <div className="px-6 sm:px-8 pb-8">
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
                <InputField
                  icon={<FiUser className="text-indigo-500" />}
                  label="Nombre Completo"
                  name="nombre"
                  type="text"
                  placeholder="Tu nombre completo"
                  register={register}
                  error={errors.nombre}
                />

                <InputField
                  icon={<FiMail className="text-indigo-500" />}
                  label="Correo ElectrÃ³nico"
                  name="email"
                  type="email"
                  placeholder="tu@email.com"
                  register={register}
                  error={errors.email}
                />

                <InputField
                  icon={<FiPhone className="text-indigo-500" />}
                  label="TelÃ©fono"
                  name="telefono"
                  type="tel"
                  placeholder="Tu nÃºmero de telÃ©fono"
                  register={register}
                  error={errors.telefono}
                />

                <InputField
                  icon={<FiMapPin className="text-indigo-500" />}
                  label="DirecciÃ³n"
                  name="direccion"
                  type="text"
                  placeholder="Tu direcciÃ³n"
                  register={register}
                  error={errors.direccion}
                />
              </div>

              <div className="mt-2">
                <PasswordField
                  label="ContraseÃ±a"
                  name="password"
                  register={register}
                  error={errors.password}
                  showPassword={showPassword}
                  setShowPassword={setShowPassword}
                />
              </div>

              <div className="bg-indigo-50 rounded-xl p-4 space-y-3 mt-2">
                {/* Indicador de fortaleza */}
                <div className="flex space-x-1">
                  {[0, 1, 2, 3, 4].map((index) => (
                    <motion.div
                      key={index}
                      initial={{ width: '20%', opacity: 0.3 }}
                      animate={{ 
                        opacity: index < getPasswordStrength() ? 1 : 0.3,
                      }}
                      transition={{ duration: 0.3 }}
                      className={`h-1.5 flex-grow rounded-full ${
                        index < getPasswordStrength() ? strengthColors[getPasswordStrength() - 1] : 'bg-gray-200'
                      }`}
                    ></motion.div>
                  ))}
                </div>
                
                {/* Criterios de contraseÃ±a */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {passwordCriteria.map((criterion, index) => (
                    <motion.div 
                      key={index}
                      initial={{ opacity: 0.5 }}
                      animate={{ 
                        opacity: 1,
                        scale: criterion.regex.test(password) ? [1, 1.05, 1] : 1
                      }}
                      transition={{ duration: 0.2 }}
                      className="flex items-center text-xs"
                    >
                      <div className={`w-4 h-4 mr-2 rounded-full flex items-center justify-center ${
                        criterion.regex.test(password) ? 'bg-green-100' : 'bg-gray-100'
                      }`}>
                        <div className={`w-2 h-2 rounded-full ${
                          criterion.regex.test(password) ? 'bg-green-500' : 'bg-gray-300'
                        }`}></div>
                      </div>
                      <span className={criterion.regex.test(password) ? 'text-gray-700' : 'text-gray-500'}>
                        {criterion.label}
                      </span>
                    </motion.div>
                  ))}
                </div>
              </div>

              <div className="mt-2">
                <PasswordField
                  label="Confirmar ContraseÃ±a"
                  name="confirmPassword"
                  register={register}
                  error={errors.confirmPassword}
                  showPassword={showConfirmPassword}
                  setShowPassword={setShowConfirmPassword}
                />
              </div>

              <motion.button
                whileHover={{ scale: 1.01 }}
                whileTap={{ scale: 0.99 }}
                type="submit"
                className={`w-full py-3 mt-6 rounded-xl font-semibold text-white shadow-lg transition-all duration-300 ${
                  loading 
                    ? 'bg-indigo-400 cursor-not-allowed' 
                    : 'bg-indigo-600 hover:bg-indigo-700 shadow-indigo-200'
                }`}
                disabled={loading}
              >
                {loading ? (
                  <div className="flex items-center justify-center">
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Registrando...
                  </div>
                ) : 'Crear Cuenta'}
              </motion.button>
            </form>
            
            <div className="mt-8 text-center">
              <p className="text-sm text-gray-600">
                Â¿Ya tienes cuenta?{' '}
                <Link to="/signin" className="font-medium text-indigo-600 hover:text-indigo-500 transition-all duration-200">
                  Inicia SesiÃ³n
                </Link>
              </p>
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  );
}

const InputField = ({ icon, label, name, type, placeholder, register, error }) => (
  <div className="space-y-2">
    <label htmlFor={name} className="text-sm font-medium text-gray-700 block">{label}</label>
    <div className="relative">
      <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
        {icon}
      </div>
      <input
        {...register(name)}
        type={type}
        className="w-full pl-11 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
        placeholder={placeholder}
      />
    </div>
    {error && (
      <motion.p 
        initial={{ opacity: 0, height: 0 }}
        animate={{ opacity: 1, height: 'auto' }}
        exit={{ opacity: 0, height: 0 }}
        className="text-xs text-red-500 mt-1"
      >
        {error.message}
      </motion.p>
    )}
  </div>
);

const PasswordField = ({ label, name, register, error, showPassword, setShowPassword }) => (
  <div className="space-y-2">
    <label htmlFor={name} className="text-sm font-medium text-gray-700 block">{label}</label>
    <div className="relative">
      <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
        <FiLock className="text-indigo-500" />
      </div>
      <input
        {...register(name)}
        type={showPassword ? 'text' : 'password'}
        className="w-full pl-11 pr-11 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
        placeholder="Tu contraseÃ±a"
      />
      <button
        type="button"
        onClick={() => setShowPassword(!showPassword)}
        className="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-indigo-500 transition-all duration-200"
      >
        {showPassword ? <FiEyeOff size={18} /> : <FiEye size={18} />}
      </button>
    </div>
    {error && (
      <motion.p 
        initial={{ opacity: 0, height: 0 }}
        animate={{ opacity: 1, height: 'auto' }}
        exit={{ opacity: 0, height: 0 }}
        className="text-xs text-red-500 mt-1"
      >
        {error.message}
      </motion.p>
    )}
  </div>
);\n\n

=== ./auth/pages/index.js ===
// Exportar todos los componentes de auth/pages
\n\n

=== ./auth/services/index.js ===
// Exportar todos los componentes de auth/services
\n\n


