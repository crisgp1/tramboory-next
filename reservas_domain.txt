=== ./reservas/components/AvailabilityAlert.jsx ===
// src/pages/reservation/components/AvailabilityAlert.jsx
import { motion, AnimatePresence } from 'framer-motion';
import { FiAlertCircle, FiX } from 'react-icons/fi';

const AvailabilityAlert = ({ message, onClose }) => {
  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: -50 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -50 }}
        className="fixed top-4 right-4 bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded shadow-lg"
      >
        <div className="flex items-center">
          <div className="flex-shrink-0">
            <FiAlertCircle className="h-5 w-5 text-yellow-400" />
          </div>
          <div className="ml-3">
            <p className="text-sm text-yellow-700">{message}</p>
          </div>
          <div className="ml-auto pl-3">
            <button
              onClick={onClose}
              className="inline-flex text-yellow-400 hover:text-yellow-500"
            >
              <FiX className="h-5 w-5" />
            </button>
          </div>
        </div>
      </motion.div>
    </AnimatePresence>
  );
};

export default AvailabilityAlert;\n\n

=== ./reservas/components/PrintableReservation.jsx ===
import React from 'react';

const PrintableReservation = ({ reservation }) => {
    return (
        <div className="p-8">
            <style type="text/css" media="print">{`
        @page { size: auto; margin: 20mm; }
        body { font-family: Arial, sans-serif; }
        .page-break { page-break-after: always; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
      `}</style>
            <h1 className="text-2xl font-bold mb-6">Detalles de la Reserva</h1>
            <table>
                <tbody>
                <tr>
                    <th>NÃºmero de Reserva</th>
                    <td>{reservation.id}</td>
                </tr>
                <tr>
                    <th>Fecha</th>
                    <td>{new Date(reservation.fecha_reserva).toLocaleDateString()}</td>
                </tr>
                <tr>
                    <th>Hora</th>
                    <td>{reservation.hora_inicio}</td>
                </tr>
                <tr>
                    <th>Cliente</th>
                    <td>{reservation.nombre_cliente}</td>
                </tr>
                <tr>
                    <th>TelÃ©fono</th>
                    <td>{reservation.telefono_cliente || 'No especificado'}</td>
                </tr>
                <tr>
                    <th>Email</th>
                    <td>{reservation.email_cliente || 'No especificado'}</td>
                </tr>
                <tr>
                    <th>Paquete</th>
                    <td>{reservation.nombre_paquete}</td>
                </tr>
                <tr>
                    <th>Total</th>
                    <td>${reservation.total}</td>
                </tr>
                <tr>
                    <th>Festejado</th>
                    <td>{reservation.nombre_festejado}</td>
                </tr>
                <tr>
                    <th>Edad</th>
                    <td>{reservation.edad_festejado} aÃ±os</td>
                </tr>
                <tr>
                    <th>TemÃ¡tica</th>
                    <td>{reservation.tematica || 'No especificada'}</td>
                </tr>
                <tr>
                    <th>Extras</th>
                    <td>
                        Cupcake: {reservation.cupcake ? 'SÃ­' : 'No'}<br />
                        Mampara: {reservation.mampara ? 'SÃ­' : 'No'}<br />
                        PiÃ±ata: {reservation.piÃ±ata ? 'SÃ­' : 'No'}
                    </td>
                </tr>
                </tbody>
            </table>
            <div className="mt-6">
                <h2 className="text-xl font-bold mb-2">Comentarios</h2>
                <p>{reservation.comentarios || 'Sin comentarios'}</p>
            </div>
        </div>
    );
};

export default PrintableReservation;\n\n

=== ./reservas/components/ReservationDateTime.jsx ===
import { useState, useEffect, useCallback } from 'react';
import { Controller } from 'react-hook-form';
import { FiAlertCircle, FiCalendar, FiInfo } from 'react-icons/fi';
import { toast } from 'react-toastify';
import DatePicker from 'react-datepicker';
import Select from 'react-select';

// Constants
const RESERVATION_STATES = {
  PENDING: 'pendiente',
  CONFIRMED: 'confirmada',
  CANCELLED: 'cancelada'
};

const TIME_SLOTS = {
  MORNING: {
    value: 'maÃ±ana',
    label: 'Matutino (9:00 - 14:00)',
    startTime: '09:00',
    endTime: '14:00'
  },
  AFTERNOON: {
    value: 'tarde',
    label: 'Vespertino (15:00 - 20:00)',
    startTime: '15:00',
    endTime: '20:00'
  }
};

const ReservationDateTime = ({
  control,
  setValue,
  watch,
  errors,
  packages = [],
  existingReservations = [],
  unavailableDates = [],
  setIsTuesdayModalOpen
}) => {
  const [loading, setLoading] = useState(false);
  const [availableSlots, setAvailableSlots] = useState({
    morning: true,
    afternoon: true
  });
  const watchedFields = watch();

  const { subscribeToDate, unsubscribeFromDate } = useReservationSocket(
    handleAvailabilityUpdate
  );


  // Helper function to check if a reservation is active
  const isActiveReservation = (reservation) => {
    return reservation.estado === RESERVATION_STATES.PENDING || 
           reservation.estado === RESERVATION_STATES.CONFIRMED;
  };

  const handleAvailabilityUpdate = useCallback(
    ({ date, availability }) => {
      const selectedDate = watchedFields.fecha_reserva;
      if (!selectedDate) return;

      const selectedDateStr = selectedDate.toISOString().split('T')[0];
      if (selectedDateStr === date) {
        setAvailableSlots(availability);

        // Si el horario seleccionado ya no estÃ¡ disponible
        if (watchedFields.hora_inicio) {
          const isCurrentSlotAvailable =
            (watchedFields.hora_inicio === 'maÃ±ana' && availability.morning) ||
            (watchedFields.hora_inicio === 'tarde' && availability.afternoon);

          if (!isCurrentSlotAvailable) {
            setValue('hora_inicio', null);
            toast.warn('El horario seleccionado ya no estÃ¡ disponible');
          }
        }
      }
    },
    [watchedFields.fecha_reserva, watchedFields.hora_inicio, setValue]
  );

  // Function to check if a specific time slot is available
  const isTimeSlotAvailable = useCallback((date, timeSlot) => {
    if (!date) return false;

    const dateStr = date.toISOString().split('T')[0];
    const reservationsForDate = existingReservations.filter(reservation => {
      const resDate = new Date(reservation.fecha_reserva).toISOString().split('T')[0];
      return resDate === dateStr && isActiveReservation(reservation);
    });

    return !reservationsForDate.some(r => r.hora_inicio === timeSlot);
  }, [existingReservations]);

  // Function to update availability of time slots
  const updateAvailability = useCallback((date) => {
    if (!date) {
      setAvailableSlots({ morning: true, afternoon: true });
      return;
    }

    setLoading(true);
    try {
      const morningAvailable = isTimeSlotAvailable(date, TIME_SLOTS.MORNING.value);
      const afternoonAvailable = isTimeSlotAvailable(date, TIME_SLOTS.AFTERNOON.value);

      setAvailableSlots({
        morning: morningAvailable,
        afternoon: afternoonAvailable
      });

      // Clear selected time if it's no longer available
      const currentTime = watchedFields.hora_inicio;
      if (currentTime) {
        const isMorning = currentTime === TIME_SLOTS.MORNING.value;
        if ((isMorning && !morningAvailable) || (!isMorning && !afternoonAvailable)) {
          setValue('hora_inicio', null);
          toast.warning('El horario seleccionado ya no estÃ¡ disponible');
        }
      }
    } catch (error) {
      console.error('Error al actualizar disponibilidad:', error);
      toast.error('Error al verificar disponibilidad de horarios');
    } finally {
      setLoading(false);
    }
  }, [watchedFields.hora_inicio, setValue, isTimeSlotAvailable]);

  // Update availability when date changes
  useEffect(() => {
    const selectedDate = watchedFields.fecha_reserva;
    if (selectedDate) {
      const dateStr = selectedDate.toISOString().split('T')[0];
      subscribeToDate(dateStr);
      return () => unsubscribeFromDate(dateStr);
    }
  }, [watchedFields.fecha_reserva, subscribeToDate, unsubscribeFromDate]);

  // Function to get available time slot options
  const getTimeOptions = useCallback(() => {
    const options = [];
    
    if (availableSlots.morning) {
      options.push({
        value: TIME_SLOTS.MORNING.value,
        label: TIME_SLOTS.MORNING.label,
      });
    }
    
    if (availableSlots.afternoon) {
      options.push({
        value: TIME_SLOTS.AFTERNOON.value,
        label: TIME_SLOTS.AFTERNOON.label,
      });
    }

    return options;
  }, [availableSlots]);

  // Function to handle date selection
  const handleDateChange = (date) => {
    if (!date) {
      setValue('fecha_reserva', null);
      setValue('hora_inicio', null);
      return;
    }

    setValue('fecha_reserva', date);
    
    // Check if it's Tuesday
    if (date.getDay() === 2) {
      setValue('tuesdayFee', 1500);
      setIsTuesdayModalOpen(true);
    } else {
      setValue('tuesdayFee', 0);
    }

    // Update time slots availability
    updateAvailability(date);
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* Date Picker */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Fecha de Reserva
        </label>
        <div className="relative">
          <Controller
            control={control}
            name="fecha_reserva"
            rules={{ required: 'Fecha de reserva es requerida' }}
            render={({ field }) => (
              <DatePicker
                selected={field.value}
                onChange={handleDateChange}
                className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                placeholderText="Seleccionar fecha"
                dateFormat="dd/MM/yyyy"
                minDate={new Date()}
                excludeDates={unavailableDates}
                disabled={loading}
              />
            )}
          />
          {errors.fecha_reserva && (
            <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
              <FiAlertCircle className="w-4 h-4" />
              {errors.fecha_reserva.message}
            </p>
          )}
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiCalendar className="h-5 w-5 text-gray-400" />
          </div>
        </div>
      </div>

      {/* Time Slot Selector */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Horario Disponible
        </label>
        <div className="relative">
          <Controller
            name="hora_inicio"
            control={control}
            rules={{ required: 'Horario es requerido' }}
            render={({ field }) => {
              const timeOptions = getTimeOptions();
              const selectedOption = timeOptions.find(
                option => option.value === field.value
              );

              return (
                <div>
                  <Select
                    options={timeOptions}
                    value={selectedOption}
                    onChange={(option) => field.onChange(option.value)}
                    isDisabled={!watchedFields.fecha_reserva || loading}
                    placeholder={
                      !watchedFields.fecha_reserva
                        ? 'Primero selecciona una fecha'
                        : loading
                        ? 'Verificando disponibilidad...'
                        : timeOptions.length === 0
                        ? 'No hay horarios disponibles'
                        : 'Selecciona un horario'
                    }
                    className="react-select-container"
                    classNamePrefix="react-select"
                  />
                  {watchedFields.fecha_reserva && !loading && timeOptions.length === 0 && (
                    <div className="mt-2 text-sm text-red-600 bg-red-50 p-2 rounded-md flex items-center gap-2">
                      <FiAlertCircle className="w-4 h-4" />
                      <span>No hay horarios disponibles para esta fecha</span>
                    </div>
                  )}
                  {loading && (
                    <div className="mt-2 text-sm text-blue-600 bg-blue-50 p-2 rounded-md flex items-center gap-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600" />
                      <span>Verificando disponibilidad...</span>
                    </div>
                  )}
                </div>
              );
            }}
          />
          {errors.hora_inicio && (
            <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
              <FiAlertCircle className="w-4 h-4" />
              {errors.hora_inicio.message}
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

export default ReservationDateTime;\n\n

=== ./reservas/components/index.js ===
// Exportar todos los componentes de reservas/components
\n\n

=== ./reservas/hooks/index.js ===
// Exportar todos los componentes de reservas/hooks
\n\n

=== ./reservas/hooks/useReservationData.js ===
import { useState, useEffect } from 'react';
import { toast } from 'react-toastify';
import { useNavigate } from 'react-router-dom';
import axiosInstance from '../components/axiosConfig';

export const useReservationData = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [data, setData] = useState({
    packages: [],
    tematicas: [],
    extrasData: [],
    mamparas: [],
    userData: null,
    foodOptions: [],
    existingReservations: [],
    userReservations: [],
    hasReservations: false
  });

  const fetchData = async () => {
    setIsLoading(true);
    setError(null);

    try {
      // Primero obtenemos los datos del usuario ya que lo necesitamos para las reservaciones
      const userResponse = await axiosInstance.get('/usuarios/me'); // Cambiado de '/auth/me' a '/usuarios/me' para mantener consistencia
      const userData = userResponse.data;

      // Hacemos todas las demÃ¡s peticiones en paralelo
      const [
        packagesRes,
        tematicasRes,
        extrasRes,
        mamparasRes,
        foodOptionsRes,
        reservationsRes,
        userReservationsRes
      ] = await Promise.all([
        axiosInstance.get('/paquetes'),
        axiosInstance.get('/tematicas'),
        axiosInstance.get('/extras'),
        axiosInstance.get('/mamparas'),
        axiosInstance.get('/opciones-alimentos'),
        axiosInstance.get('/reservas'),
        axiosInstance.get('/reservas/user')
      ]);

      setData({
        packages: packagesRes.data,
        tematicas: tematicasRes.data,
        extrasData: extrasRes.data,
        mamparas: mamparasRes.data,
        userData: userData,
        foodOptions: foodOptionsRes.data,
        existingReservations: reservationsRes.data,
        userReservations: userReservationsRes.data,
        hasReservations: userReservationsRes.data.length > 0
      });
    } catch (error) {
      console.error('Error fetching reservation data:', error);
      
      // Convertimos el error a un mensaje de texto para evitar errores de renderizado
      const errorMessage = error?.response?.data?.message || 
                          error?.message || 
                          'Error desconocido al cargar datos';
      
      setError(errorMessage); // Guardamos solo el mensaje de error, no el objeto completo
      
      if (error.response?.status === 401) {
        toast.error('SesiÃ³n expirada. Por favor, inicia sesiÃ³n nuevamente.');
        navigate('/signin');
        return;
      }
      
      toast.error('Error al cargar los datos necesarios. Por favor, intenta nuevamente.');
    } finally {
      setIsLoading(false);
    }
  };

  // FunciÃ³n para crear una reserva de manera segura
  const createReservation = async (reservationData) => {
    try {
      const response = await axiosInstance.post('/reservas', reservationData);
      return { success: true, data: response.data };
    } catch (error) {
      console.error('Error creating reservation:', error);
      
      // Convertimos el error a un mensaje de texto
      const errorMessage = error?.response?.data?.message || 
                          error?.message || 
                          'Error desconocido al crear la reserva';
      
      return { success: false, message: errorMessage };
    }
  };

  // FunciÃ³n para recargar los datos
  const refreshData = () => {
    fetchData();
  };

  useEffect(() => {
    fetchData();
  }, []);

  return {
    ...data,
    isLoading,
    error,
    refreshData,
    createReservation // AÃ±adimos la funciÃ³n para crear reservas
  };
};

// Also export a context provider for reservation data
export const setReservationData = (data) => {
  // This is a temporary function that will be replaced by the context provider
  console.log('Setting reservation data:', data);
  return data;
};\n\n

=== ./reservas/index.js ===
export * from './components';
export * from './pages';
export * from './services';
export * from './hooks';\n\n

=== ./reservas/pages/admin/ReservationForm.jsx ===
import React, { useCallback, useEffect, useState, useRef, useMemo } from 'react';
import { useForm, useWatch } from 'react-hook-form';
import { isWeekend, isTuesday } from 'date-fns';
import { 
  TIME_SLOTS, 
  formatReservationForApi, 
  formatReservationForEditing 
} from '@shared/utils/reservationUtils';
import axiosInstance from '@shared/utils/axiosConfig';
import { FiX, FiSearch } from 'react-icons/fi';
import { toast } from 'react-hot-toast';

// Importar las secciones restantes (sin UserSection, porque lo reemplazamos):
import PackageSection from './reservationform-components/PackageSection.jsx';
import FoodOptionsSection from './reservationform-components/FoodOptionsSection.jsx';
import DateTimeSection from './reservationform-components/DateTimeSection.jsx';
import ThemeSection from './reservationform-components/ThemeSection.jsx';
import MamparaSection from './reservationform-components/MamparaSection.jsx';
import ExtrasSection from './reservationform-components/ExtrasSection.jsx';
import CelebrantSection from './reservationform-components/CelebrantSection.jsx';
import CommentsSection from './reservationform-components/CommentsSection.jsx';
import GenderSelector from '@shared/components/form/GenderSelector';


const ReservationForm = ({
  editingItem,
  users,
  packages,
  foodOptions = [],
  extras = [],
  tematicas = [],
  mamparas = [],
  onSave,
  activeTab,
  existingReservations = [],
  onClose,
}) => {
  const [manualTotal, setManualTotal] = useState(false);
  const [total, setTotal] = useState('0.00');
  const [calculationLogs, setCalculationLogs] = useState([]);
  const [showTuesdayModal, setShowTuesdayModal] = useState(false);
  const [savedReservation, setSavedReservation] = useState(null);
  const formRef = useRef(null);

  // ----------- ESTADOS Y LÃ“GICA PARA EL BUSCADOR DE USUARIOS -----------
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredUsers, setFilteredUsers] = useState(users);
  const [showUserSuggestions, setShowUserSuggestions] = useState(false);
  // ---------------------------------------------------------------------

  const {
    register,
    control,
    handleSubmit,
    setValue,
    reset,
    getValues,
    watch,
    formState: { errors },
  } = useForm({
    defaultValues: {
      id_usuario: '',
      id_paquete: '',
      id_opcion_alimento: null,
      id_tematica: null,
      id_mampara: null,
      extras: [],
      fecha_reserva: null,
      hora_inicio: null,
      nombre_festejado: '',
      edad_festejado: '',
      comentarios: '',
      total: '0.00',
      activo: true,
      tuesdayFee: 0,
    },
  });

  const watchedFields = useWatch({
    control,
    name: [
      'id_paquete',
      'id_opcion_alimento',
      'id_mampara',
      'extras',
      'fecha_reserva',
      'id_tematica',
      'tuesdayFee',
    ],
  });

  // ---------------------------------------------------------------------
  // Funciones de LOG (opcional, para debug)
  // ---------------------------------------------------------------------
  const sanitizeLogData = (data) => {
    if (!data) return null;
    if (typeof data === 'number' || typeof data === 'string') return data;
    if (Array.isArray(data)) return '[Array]';
    if (typeof data === 'object') return '[Object]';
    return String(data);
  };

  const addLog = useCallback((message, data = null) => {
    const sanitizedData = sanitizeLogData(data);
    console.log(`[ReservationForm] ${message}`, sanitizedData);
    setCalculationLogs((prev) => [
      ...prev.slice(-4),
      {
        message,
        data: sanitizedData,
        timestamp: new Date().toISOString(),
      },
    ]);
  }, []);

  // ---------------------------------------------------------------------
  // LÃ³gica para calcular el total de la reserva
  // ---------------------------------------------------------------------
  const calculateTotal = useCallback(() => {
    let newTotal = 0;
    addLog('Iniciando cÃ¡lculo del total');

    const paqueteId = getValues('id_paquete');
    const fecha = getValues('fecha_reserva');
    const tuesdayFee = getValues('tuesdayFee') || 0;

    if (paqueteId && fecha) {
      const paquete = packages.find((p) => Number(p.id) === Number(paqueteId));
      if (paquete) {
        const precio = isWeekend(fecha)
          ? parseFloat(paquete.precio_viernes_domingo)
          : parseFloat(paquete.precio_lunes_jueves);
        
        newTotal += precio;
        addLog(
          `Precio del paquete (${isWeekend(fecha) ? 'fin de semana' : 'entre semana'})`,
          precio
        );

        if (isTuesday(fecha)) {
          newTotal += tuesdayFee;
          addLog('Cargo adicional por martes', tuesdayFee);
        }
      }
    }

    const alimentoValue = getValues('id_opcion_alimento');
    if (alimentoValue?.value) {
      const selectedFood = foodOptions.find(
        (f) => f.id === Number(alimentoValue.value)
      );
      if (selectedFood?.precio_extra) {
        const precioAlimento = parseFloat(selectedFood.precio_extra);
        newTotal += precioAlimento;
        addLog('Precio extra por alimento', precioAlimento);
      }
    }

    const mamparaValue = getValues('id_mampara');
    if (mamparaValue?.value) {
      const selectedMampara = mamparas.find(
        (m) => m.id === Number(mamparaValue.value)
      );
      if (selectedMampara?.precio) {
        const precioMampara = parseFloat(selectedMampara.precio);
        newTotal += precioMampara;
        addLog('Precio de mampara', precioMampara);
      }
    }

    const tematicaValue = getValues('id_tematica');
    if (tematicaValue?.value) {
      const selectedTematica = tematicas.find(
        (t) => t.id === Number(tematicaValue.value)
      );
      if (selectedTematica?.precio) {
        const precioTematica = parseFloat(selectedTematica.precio);
        newTotal += precioTematica;
        addLog('Precio de temÃ¡tica', precioTematica);
      }
    }

    const selectedExtras = getValues('extras') || [];
    let extrasTotal = 0;
    const uniqueExtras = Array.from(new Set(selectedExtras.map((e) => e.id))).map(
      (id) => {
        const extra = selectedExtras.find((e) => e.id === id);
        return extra;
      }
    );

    uniqueExtras.forEach((extra) => {
      const extraInfo = extras.find((e) => Number(e.id) === Number(extra.id));
      if (extraInfo?.precio && extra.cantidad) {
        const extraPrecio =
          parseFloat(extraInfo.precio) * parseInt(extra.cantidad);
        if (!isNaN(extraPrecio)) {
          extrasTotal += extraPrecio;
          addLog(`Extra ${extraInfo.nombre} (${extra.cantidad}x)`, extraPrecio);
        }
      }
    });
    newTotal += extrasTotal;
    addLog('Total de extras', extrasTotal);
    addLog('Total final calculado', newTotal);

    return parseFloat(newTotal).toFixed(2);
  }, [
    getValues,
    packages,
    foodOptions,
    mamparas,
    tematicas,
    extras,
    addLog
  ]);

  // ---------------------------------------------------------------------
  // Efecto para inicializar el formulario en modo ediciÃ³n
  // ---------------------------------------------------------------------
  useEffect(() => {
    if (editingItem) {
      addLog('Inicializando datos de ediciÃ³n');
      
      // Usar la funciÃ³n bidireccional para formatear datos para ediciÃ³n
      const formattedData = formatReservationForEditing(
        editingItem, 
        foodOptions, 
        tematicas, 
        mamparas
      );

      reset(formattedData);
      setTotal(formattedData.total);
      addLog('Datos de ediciÃ³n cargados');

      // TambiÃ©n podrÃ­amos setear el tÃ©rmino de bÃºsqueda si queremos mostrar
      // el nombre en el input directamente:
      const editingUser = users.find(u => u.id === editingItem.id_usuario);
      if (editingUser) {
        setSearchTerm(`${editingUser.nombre} ${editingUser.apellido}`);
      }
    }
  }, [editingItem, reset, addLog, users, foodOptions, tematicas, mamparas]);

  // ---------------------------------------------------------------------
  // Efecto para recalcular el total cuando cambian campos relevantes
  // ---------------------------------------------------------------------
  useEffect(() => {
    if (!manualTotal) {
      addLog('Actualizando total automÃ¡ticamente');
      const newTotal = calculateTotal();
      setTotal(newTotal);
      setValue('total', newTotal);
    }
  }, [watchedFields, manualTotal, calculateTotal, setValue, addLog]);

  // ---------------------------------------------------------------------
  // useMemo para filtrar mamparas segÃºn la temÃ¡tica
  // ---------------------------------------------------------------------
  const filteredMamparas = useMemo(() => {
    const selectedTheme = watchedFields[5];
    return selectedTheme
      ? mamparas.filter(
          (m) =>
            Number(m.id_tematica) === Number(selectedTheme.value) && m.activo
        )
      : [];
  }, [watchedFields, mamparas]);

  // ---------------------------------------------------------------------
  // FunciÃ³n para limpiar los datos antes de guardar
  // ---------------------------------------------------------------------

  // ---------------------------------------------------------------------
  // onSubmit para guardar la reserva
  // ---------------------------------------------------------------------
  const onSubmit = useCallback(
    async (data) => {
      try {
        addLog('Preparando datos para guardar');
        // Ensure extras[] is properly formatted
        const cleanedData = {
          ...data,
          extras: data.extras || []
        };
        
        const formattedData = formatReservationForApi(cleanedData);
        addLog('Datos formateados para guardar');

        try {
          const reservation = await onSave(formattedData);
          addLog('Reserva guardada');

          if (reservation?.id) {
            setSavedReservation(reservation);
            
            // Crear pago pendiente automÃ¡ticamente
            const paymentData = {
              id_reserva: reservation.id,
              monto: formattedData.total,
              fecha_pago: new Date(),
              metodo_pago: 'pendiente',
              estado: 'pendiente',
            };

            await axiosInstance.post('/api/pagos', paymentData);
            addLog('Entrada de pagos creada como pendiente');
            toast.success('Â¡ReservaciÃ³n creada exitosamente!');
            onClose();
          }
        } catch (error) {
          console.error('Error al crear el pago:', error);
          // Si falla la creaciÃ³n del pago, eliminamos la reserva para mantener consistencia
          if (savedReservation?.id) {
            await axiosInstance.delete(`/api/reservas/${savedReservation.id}`);
            addLog('Reserva eliminada debido a error en creaciÃ³n de pago');
          }
          throw error;
        }
      } catch (error) {
        console.error('Error al guardar la reserva:', error);
        addLog('Error al guardar la reserva');
        toast.error('Error al crear la reservaciÃ³n');
      }
    },
    [onSave, addLog, onClose]
  );

  // ---------------------------------------------------------------------
  // Efecto para filtrar usuarios segÃºn searchTerm
  // ---------------------------------------------------------------------
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredUsers(users);
    } else {
      const term = searchTerm.toLowerCase();
      const filtered = users.filter((user) => {
        const fullName = `${user.nombre} ${user.apellido}`.toLowerCase();
        return (
          fullName.includes(term) ||
          user.id.toString() === term
        );
      });
      setFilteredUsers(filtered);
    }
  }, [searchTerm, users]);

  // ---------------------------------------------------------------------
  // Manejador para seleccionar un usuario del autocompletado
  // ---------------------------------------------------------------------
  const handleSelectUser = (user) => {
    // Mostramos el nombre del usuario en el input
    setSearchTerm(`${user.nombre} ${user.apellido}`);
    // Guardamos en react-hook-form el ID del usuario
    setValue('id_usuario', user.id);
    // Ocultamos las sugerencias
    setShowUserSuggestions(false);
    // Log de depuraciÃ³n
    addLog(`Usuario seleccionado: ${user.id} - ${user.nombre}`);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl relative">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 focus:outline-none"
        >
          <FiX className="w-6 h-6" />
        </button>

        <div className="p-6">
          <h2 className="text-2xl font-semibold text-gray-800 mb-6">
            {editingItem ? 'Editar ReservaciÃ³n' : 'Nueva ReservaciÃ³n'}
          </h2>

          <form
            ref={formRef}
            id={activeTab + 'Form'}
            onSubmit={handleSubmit(onSubmit)}
            className="space-y-6 max-h-[calc(100vh-16rem)] overflow-y-auto px-2"
          >
            {/*
              --------------------------------------------------------------------------------
              Reemplazamos el componente <UserSection> por nuestro buscador de usuarios inline
              --------------------------------------------------------------------------------
            */}
            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <div className="mb-4 relative">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Usuario
                </label>

                {/* Campo de bÃºsqueda */}
                <div className="flex items-center bg-gray-50 rounded-md p-2">
                  <FiSearch className="mr-2 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Buscar usuario por nombre o ID..."
                    value={searchTerm}
                    onChange={(e) => {
                      setSearchTerm(e.target.value);
                      setShowUserSuggestions(true);
                    }}
                    className="bg-transparent w-full focus:outline-none"
                  />
                </div>

                {/* Lista de sugerencias */}
                {showUserSuggestions && filteredUsers.length > 0 && (
                  <ul className="absolute z-10 mt-1 bg-white border border-gray-200 rounded-md w-full max-h-60 overflow-auto shadow-lg">
                    {filteredUsers.map((user) => (
                      <li
                        key={user.id}
                        className="px-4 py-2 cursor-pointer hover:bg-gray-100"
                        onClick={() => handleSelectUser(user)}
                      >
                        {user.nombre} {user.apellido} (ID: {user.id})
                      </li>
                    ))}
                  </ul>
                )}

                {/* Si hay error en el id_usuario, lo mostramos */}
                {errors.id_usuario && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.id_usuario.message}
                  </p>
                )}
                
                {/* Registramos manualmente el campo id_usuario */}
                <input
                  type="hidden"
                  {...register('id_usuario', { required: 'El usuario es requerido' })}
                />
              </div>
            </div>
            {/*
              --------------------------------------------------------------------------------
              FIN DE SECCIÃ“N PARA EL BUSCADOR DE USUARIOS
              --------------------------------------------------------------------------------
            */}


            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <PackageSection
                control={control}
                packages={packages}
                errors={errors}
                setValue={setValue}
              />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <FoodOptionsSection
                control={control}
                errors={errors}
                foodOptions={foodOptions}
                setValue={setValue}
              />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <DateTimeSection
                control={control}
                errors={errors}
                setValue={setValue}
                getValues={getValues}
                existingReservations={existingReservations.filter(r => r.estado !== 'cancelada')}
                packages={packages}
                showTuesdayModal={showTuesdayModal}
                setShowTuesdayModal={setShowTuesdayModal}
              />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <ThemeSection
                control={control}
                errors={errors}
                tematicas={tematicas}
                setValue={setValue}
              />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <MamparaSection
                control={control}
                errors={errors}
                filteredMamparas={filteredMamparas}
                setValue={setValue}
                getValues={getValues}
              />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <ExtrasSection
                extras={extras}
                control={control}
                setValue={setValue}
              />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <CelebrantSection control={control} errors={errors} />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <GenderSelector control={control} errors={errors} />
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <CommentsSection control={control} />
            </div>

            {/* SECCIÃ“N PARA MOSTRAR/MODIFICAR EL TOTAL */}
            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <label className="text-lg font-medium text-gray-700">
                  Total
                </label>
                <div className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={manualTotal}
                    onChange={(e) => {
                      setManualTotal(e.target.checked);
                      if (!e.target.checked) {
                        const newTotal = calculateTotal();
                        setTotal(newTotal);
                        setValue('total', newTotal);
                        addLog('Total actualizado automÃ¡ticamente');
                      } else {
                        addLog('Modo manual activado');
                      }
                    }}
                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                  />
                  <span className="text-sm text-gray-500">
                    Editar manualmente
                  </span>
                </div>
              </div>
              <div className="mt-2 flex gap-4">
                <input
                  type="text"
                  value={total}
                  onChange={(e) => {
                    if (manualTotal) {
                      const value = e.target.value.replace(/[^0-9.]/g, '');
                      setTotal(value);
                      setValue('total', value);
                      addLog('Total actualizado manualmente');
                    }
                  }}
                  readOnly={!manualTotal}
                  className="flex-1 px-3 py-2 text-lg font-medium text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                />
                <button
                  type="button"
                  onClick={() => {
                    const newTotal = calculateTotal();
                    setTotal(newTotal);
                    setValue('total', newTotal);
                    addLog('Total recalculado');
                  }}
                  className="px-4 py-2 bg-indigo-600 text-white font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                >
                  Calcular
                </button>
              </div>

              <div className="mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200 max-h-40 overflow-y-auto">
                <h4 className="text-sm font-medium text-gray-700 mb-2">
                  Logs de cÃ¡lculo:
                </h4>
                {calculationLogs.map((log, index) => (
                  <div key={index} className="text-xs text-gray-600 mb-1">
                    {new Date(log.timestamp).toLocaleTimeString()}:{' '}
                    {log.message}
                    {log.data !== null && (
                      <span className="text-indigo-600"> {log.data}</span>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </form>

          {/* Botones de acciÃ³n */}
          <div className="mt-6 flex justify-end gap-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
            >
              Cancelar
            </button>
            <button
              type="submit"
              form={activeTab + 'Form'}
              className="px-6 py-2 font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 bg-indigo-600 hover:bg-indigo-700 text-white focus:ring-indigo-500"
            >
              {editingItem ? 'Actualizar' : 'Crear'} ReservaciÃ³n
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReservationForm;\n\n

=== ./reservas/pages/admin/ReservationModal.jsx ===
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
// Usar el alias @ para garantizar resoluciÃ³n correcta en Docker
import axiosInstance from '@shared/utils/axiosConfig';
import { toast } from 'react-hot-toast';
import {
  FiCalendar,
  FiClock,
  FiDollarSign,
  FiUser,
  FiPackage,
  FiMail,
  FiPhone,
  FiCheckCircle,
  FiXCircle,
  FiPrinter,
  FiAlertCircle,
  FiTag,
  FiGift,
  FiImage,
} from 'react-icons/fi';
import PrintableReservation from '@domains/reservas/components/PrintableReservation';

const ReservationModal = ({
  reservation,
  onClose,
  onSendEmail,
  onContactUser
}) => {
  const [modalHeight, setModalHeight] = useState('100vh');
  const [isUpdatingPayment, setIsUpdatingPayment] = useState(false);
  const [isUpdatingStatus, setIsUpdatingStatus] = useState(false);

  const handleUpdateReservationStatus = async (newStatus) => {
    if (isUpdatingStatus) return;
    setIsUpdatingStatus(true);
    try {
      await axiosInstance.put(`/api/reservas/${reservation.id}/status`, {
        estado: newStatus
      });
      toast.success('Estado de la reservaciÃ³n actualizado');
      window.dispatchEvent(new CustomEvent('reservationsUpdated'));
    } catch (error) {
      console.error('Error al actualizar el estado de la reservaciÃ³n:', error);
      toast.error('Error al actualizar el estado de la reservaciÃ³n');
    } finally {
      setIsUpdatingStatus(false);
    }
  };

  const handleUpdatePaymentStatus = async (pagoId, newStatus) => {
    setIsUpdatingPayment(true);
    try {
      await axiosInstance.put(`/api/pagos/${pagoId}/status`, {
        estado: newStatus
      });
      toast.success('Estado del pago actualizado');
      window.dispatchEvent(new CustomEvent('reservationsUpdated'));
    } catch (error) {
      console.error('Error al actualizar el estado del pago:', error);
      toast.error('Error al actualizar el estado del pago');
    } finally {
      setIsUpdatingPayment(false);
    }
  };

  useEffect(() => {
    const updateModalHeight = () => {
      const vh = window.innerHeight;
      setModalHeight(`${vh}px`);
    };

    updateModalHeight();
    window.addEventListener('resize', updateModalHeight);

    return () => window.removeEventListener('resize', updateModalHeight);
  }, []);

  // Add event listener for escape key
  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    // Add event listener
    document.addEventListener('keydown', handleEscKey);

    // Cleanup function
    return () => {
      document.removeEventListener('keydown', handleEscKey);
    };
  }, [onClose]);

  if (!reservation) return null;

  const handlePrint = () => {
    const printContent = document.getElementById('printable-reservation');
    const winPrint = window.open(
      '',
      '',
      'left=0,top=0,width=800,height=900,toolbar=0,scrollbars=0,status=0'
    );
    winPrint.document.write(printContent.innerHTML);
    winPrint.document.close();
    winPrint.focus();
    winPrint.print();
    winPrint.close();
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pendiente':
        return 'text-yellow-500';
      case 'confirmada':
        return 'text-green-500';
      case 'cancelada':
        return 'text-red-500';
      default:
        return 'text-gray-500';
    }
  };

  const IconWrapper = ({ icon: Icon, text, color = 'text-gray-700', className = '' }) => (
    <div className={`flex items-center mb-3 ${color} ${className}`}>
      <Icon className="mr-2 text-xl" />
      <span className="text-sm">{text}</span>
    </div>
  );

  return (
    <AnimatePresence>
      <div 
        className="fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center z-50 overflow-hidden"
        style={{ height: modalHeight }}
      >
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 20 }}
          transition={{ type: "spring", stiffness: 300, damping: 30 }}
          className="bg-white rounded-lg shadow-xl w-full max-w-4xl my-4 flex flex-col"
          style={{ maxHeight: 'calc(100vh - 2rem)' }}
        >
          {/* Header */}
          <div className="sticky top-0 bg-white z-10 px-6 py-4 border-b flex justify-between items-center rounded-t-lg">
            <h2 className="text-2xl font-semibold text-gray-800">
              Detalles de la Reserva
            </h2>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 transition duration-300"
            >
              <FiXCircle size={24} />
            </button>
          </div>

          {/* Content */}
          <div className="flex-1 overflow-y-auto px-6 py-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-6">
                {/* General Information */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">
                    InformaciÃ³n General
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <IconWrapper
                      icon={FiCalendar}
                      text={`Fecha: ${new Date(
                        reservation.fecha_reserva
                      ).toLocaleDateString()}`}
                    />
                    <IconWrapper
                      icon={FiClock}
                      text={`Hora: ${reservation.hora_inicio}`}
                    />
                    <IconWrapper
                      icon={FiDollarSign}
                      text={`Total: $${reservation.total}`}
                    />
                    <IconWrapper
                      icon={FiPackage}
                      text={`Paquete: ${
                        reservation.paquete?.nombre || 'No especificado'
                      }`}
                    />
                    <IconWrapper
                      icon={FiTag}
                      text={`OpciÃ³n de Alimento: ${
                        reservation.opcionAlimento?.nombre || 'No especificada'
                      }`}
                    />
                    <IconWrapper
                      icon={FiAlertCircle}
                      text={`Estado: ${
                        reservation.estado.charAt(0).toUpperCase() + reservation.estado.slice(1)
                      }`}
                      color={getStatusColor(reservation.estado)}
                    />
                  </div>
                </div>

                {/* Payment Information */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">
                    InformaciÃ³n de Pagos
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    {reservation.pagos && reservation.pagos.length > 0 ? (
                      <div className="space-y-4">
                        {reservation.pagos.map((pago, index) => (
                          <div key={pago.id} className="bg-white p-3 rounded-lg shadow-sm">
                            <div className="flex justify-between items-center mb-2">
                              <span className="text-sm font-medium">
                                Pago #{index + 1}
                              </span>
                              <span className="text-sm text-gray-500">
                                {new Date(pago.fecha_pago).toLocaleDateString()}
                              </span>
                            </div>
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-sm text-gray-600">
                                  MÃ©todo: {pago.metodo_pago}
                                </p>
                                <p className="text-sm font-medium">
                                  Monto: ${pago.monto}
                                </p>
                              </div>
                              <select
                                value={pago.estado}
                                onChange={(e) => handleUpdatePaymentStatus(pago.id, e.target.value)}
                                disabled={isUpdatingPayment}
                                className={`ml-2 rounded-full px-3 py-1 text-sm font-medium border-0 focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 ${
                                  pago.estado === 'completado'
                                    ? 'bg-green-100 text-green-800'
                                    : pago.estado === 'fallido'
                                    ? 'bg-red-100 text-red-800'
                                    : 'bg-yellow-100 text-yellow-800'
                                }`}
                              >
                                <option value="pendiente">Pendiente</option>
                                <option value="completado">Completado</option>
                                <option value="fallido">Fallido</option>
                              </select>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <p className="text-gray-500 text-sm">No hay pagos registrados</p>
                    )}
                  </div>
                </div>

                {/* Client Details */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">
                    Detalles del Cliente
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <IconWrapper
                      icon={FiUser}
                      text={`Cliente: ${
                        reservation.usuario?.nombre || 'No especificado'
                      }`}
                    />
                    <IconWrapper
                      icon={FiPhone}
                      text={`TelÃ©fono: ${
                        reservation.usuario?.telefono || 'No especificado'
                      }`}
                    />
                    <IconWrapper
                      icon={FiMail}
                      text={`Email: ${
                        reservation.usuario?.email || 'No especificado'
                      }`}
                    />
                  </div>
                </div>
              </div>

              <div className="space-y-6">
                {/* Event Details */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">
                    Detalles del Evento
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <IconWrapper
                      icon={FiUser}
                      text={`Festejado: ${reservation.nombre_festejado}`}
                    />
                    <IconWrapper
                      icon={FiUser}
                      text={`Edad: ${reservation.edad_festejado} aÃ±os`}
                    />
                    <IconWrapper
                      icon={FiGift}
                      text={`TemÃ¡tica: ${
                        reservation.tematicaReserva?.nombre || 'No especificada'
                      }`}
                    />
                    {/* Mampara Section */}
                    <div className="mt-3 p-3 bg-white rounded-md shadow-sm">
                      <h4 className="text-sm font-medium text-gray-900 mb-2">Detalles de la Mampara</h4>
                      {reservation.mampara ? (
                        <>
                          <IconWrapper
                            icon={FiImage}
                            text={`Piezas: ${reservation.mampara.piezas}`}
                            className="mb-1"
                          />
                          <IconWrapper
                            icon={FiDollarSign}
                            text={`Precio: $${reservation.mampara.precio}`}
                            className="mb-1"
                          />
                          {reservation.mampara.tematica && (
                            <IconWrapper
                              icon={FiGift}
                              text={`TemÃ¡tica: ${reservation.mampara.tematica.nombre}`}
                            />
                          )}
                        </>
                      ) : (
                        <p className="text-gray-500 text-sm">No se seleccionÃ³ mampara</p>
                      )}
                    </div>
                  </div>
                </div>

                {/* Extras */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">
                    Extras
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    {reservation.extras && reservation.extras.length > 0 ? (
                      <ul>
                        {reservation.extras.map((extra) => {
                          const cantidad = extra.ReservaExtra?.cantidad || 1;
                          return (
                            <li key={extra.id} className="flex items-center mb-2">
                              <FiCheckCircle className="text-green-600 mr-2" />
                              <span>
                                {`${extra.nombre} (x${cantidad}) - $${extra.precio * cantidad}`}
                              </span>
                            </li>
                          );
                        })}
                      </ul>
                    ) : (
                      <p className="text-gray-500">
                        No se seleccionaron extras.
                      </p>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Comments */}
            <div className="mt-6">
              <h3 className="text-lg font-medium text-gray-900 mb-3">
                Comentarios
              </h3>
              <div className="bg-gray-50 p-4 rounded-lg">
                <p className="text-gray-700 text-sm">
                  {reservation.comentarios || 'Sin comentarios'}
                </p>
              </div>
            </div>
          </div>

          {/* Status Change Section */}
          <div className="bg-white px-6 py-4 border-b">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Estado de la ReservaciÃ³n</h3>
            <div className="flex flex-wrap gap-4">
              <button
                onClick={() => handleUpdateReservationStatus('pendiente')}
                disabled={isUpdatingStatus || reservation.estado === 'pendiente'}
                className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${
                  reservation.estado === 'pendiente'
                    ? 'bg-yellow-500 text-white cursor-default'
                    : 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200'
                }`}
              >
                <FiClock className="mr-2" />
                Pendiente
              </button>
              <button
                onClick={() => handleUpdateReservationStatus('confirmada')}
                disabled={isUpdatingStatus || reservation.estado === 'confirmada'}
                className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${
                  reservation.estado === 'confirmada'
                    ? 'bg-green-500 text-white cursor-default'
                    : 'bg-green-100 text-green-800 hover:bg-green-200'
                }`}
              >
                <FiCheckCircle className="mr-2" />
                Confirmada
              </button>
              <button
                onClick={() => handleUpdateReservationStatus('cancelada')}
                disabled={isUpdatingStatus || reservation.estado === 'cancelada'}
                className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${
                  reservation.estado === 'cancelada'
                    ? 'bg-red-500 text-white cursor-default'
                    : 'bg-red-100 text-red-800 hover:bg-red-200'
                }`}
              >
                <FiXCircle className="mr-2" />
                Cancelada
              </button>
            </div>
          </div>

          {/* Footer */}
          <div className="sticky bottom-0 bg-gray-50 px-6 py-4 border-t rounded-b-lg">

            {/* Action Buttons */}
            <div className="flex flex-wrap justify-end gap-4">
              <button
                onClick={handlePrint}
                className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition duration-300 flex items-center text-sm"
              >
                <FiPrinter className="mr-2" />
                Imprimir Reserva
              </button>
              <button
                onClick={() => onSendEmail(reservation)}
                className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition duration-300 flex items-center text-sm"
              >
                <FiMail className="mr-2" />
                Enviar por Correo
              </button>
              <button
                onClick={() => onContactUser(reservation)}
                className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition duration-300 flex items-center text-sm"
              >
                <FiPhone className="mr-2" />
                Contactar Cliente
              </button>
            </div>
          </div>
        </motion.div>

        {/* Printable Content */}
        <div id="printable-reservation" className="hidden">
          <PrintableReservation reservation={reservation} />
        </div>
      </div>
    </AnimatePresence>
  );
};

export default ReservationModal;\n\n

=== ./reservas/pages/admin/ReservationPreviewModal.jsx ===
import React from 'react';
import PropTypes from 'prop-types';
// Usar el alias @ para garantizar resoluciÃ³n correcta en Docker
import Modal from '@shared/components/Modal';
import { 
    FiCalendar, FiUser, FiPhone, FiMail, FiPackage, 
    FiClock, FiDollarSign, FiImage, FiInfo, FiCoffee 
} from 'react-icons/fi';
import { formatDate, formatTime, formatNumber } from '@shared/utils/formatters';

const ReservationPreviewModal = ({ reservation, onClose }) => {
    const InfoItem = ({ icon: Icon, label, value, color = "text-gray-500" }) => (
        <div className="flex items-center mb-3 last:mb-0 group">
            <div className={`flex items-center justify-center w-8 h-8 rounded-lg ${color} bg-opacity-10 mr-3 group-hover:scale-110 transition-transform duration-200`}>
                <Icon className={`w-4 h-4 ${color}`} />
            </div>
            <div className="flex flex-col">
                <span className="text-xs text-gray-500">{label}</span>
                <span className="text-sm font-medium text-gray-900">{value}</span>
            </div>
        </div>
    );

    const Section = ({ title, children, icon: Icon }) => (
        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-200">
            <div className="flex items-center mb-3">
                <Icon className="w-5 h-5 text-indigo-500 mr-2" />
                <h3 className="text-sm font-medium text-gray-900">{title}</h3>
            </div>
            <div className="space-y-2">
                {children}
            </div>
        </div>
    );

    return (
        <Modal
            isOpen={true}
            onClose={onClose}
            title={`Vista RÃ¡pida - Reserva #${reservation.id}`}
            size="md"
            className="animate-modalEntry"
            overlayClassName="backdrop-blur-sm bg-black/30 animate-fadeIn"
        >
            <style jsx global>{`
                @keyframes modalEntry {
                    from {
                        opacity: 0;
                        transform: scale(0.95) translateY(-10px);
                        box-shadow: 0 0 0 rgba(0, 0, 0, 0);
                    }
                    to {
                        opacity: 1;
                        transform: scale(1) translateY(0);
                        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                    }
                }
                
                @keyframes fadeIn {
                    from {
                        opacity: 0;
                        backdrop-filter: blur(0px);
                    }
                    to {
                        opacity: 1;
                        backdrop-filter: blur(8px);
                    }
                }
                
                .animate-modalEntry {
                    animation: modalEntry 0.4s cubic-bezier(0.16, 1, 0.3, 1);
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                }
                
                .animate-fadeIn {
                    animation: fadeIn 0.4s ease-out forwards;
                }
            `}</style>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* InformaciÃ³n del Evento */}
                <Section title="InformaciÃ³n del Evento" icon={FiCalendar}>
                    <InfoItem 
                        icon={FiUser} 
                        label="Festejado"
                        value={`${reservation.nombre_festejado} (${reservation.edad_festejado} aÃ±os)`}
                        color="text-blue-500"
                    />
                    <InfoItem 
                        icon={FiCalendar} 
                        label="Fecha"
                        value={formatDate(reservation.fecha_reserva)}
                        color="text-purple-500"
                    />
                    <InfoItem 
                        icon={FiClock} 
                        label="Horario"
                        value={`${formatTime(reservation.hora_inicio)} - ${formatTime(reservation.hora_fin)}`}
                        color="text-green-500"
                    />
                    <InfoItem 
                        icon={FiDollarSign} 
                        label="Total"
                        value={formatNumber(reservation.total)}
                        color="text-emerald-500"
                    />
                </Section>

                {/* Detalles del Paquete */}
                <Section title="Detalles del Paquete" icon={FiPackage}>
                    <InfoItem 
                        icon={FiPackage} 
                        label="Paquete"
                        value={reservation.paquete?.nombre || 'No especificado'}
                        color="text-orange-500"
                    />
                    <InfoItem 
                        icon={FiImage} 
                        label="TemÃ¡tica"
                        value={reservation.tematica?.nombre || 'No especificada'}
                        color="text-pink-500"
                    />
                    {reservation.opcion_alimento && (
                        <InfoItem 
                            icon={FiCoffee} 
                            label="OpciÃ³n de Alimentos"
                            value={reservation.opcion_alimento.nombre}
                            color="text-yellow-500"
                        />
                    )}
                </Section>

                {/* Estado y Comentarios */}
                <div className="md:col-span-2">
                    <Section title="Estado y Comentarios" icon={FiInfo}>
                        <div className="flex items-center mb-3">
                            <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                                !reservation.estado ? 'bg-gray-100 text-gray-800' :
                                reservation.estado === 'confirmada' ? 'bg-green-100 text-green-800' :
                                reservation.estado === 'pendiente' ? 'bg-yellow-100 text-yellow-800' :
                                'bg-red-100 text-red-800'
                            }`}>
                                {reservation.estado ? 
                                    (reservation.estado.charAt(0).toUpperCase() + reservation.estado.slice(1)) :
                                    'No especificado'
                                }
                            </span>
                        </div>
                        {reservation.comentarios && (
                            <p className="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
                                {reservation.comentarios}
                            </p>
                        )}
                    </Section>
                </div>
            </div>
        </Modal>
    );
};

ReservationPreviewModal.propTypes = {
    reservation: PropTypes.shape({
        id: PropTypes.number.isRequired,
        nombre_festejado: PropTypes.string.isRequired,
        edad_festejado: PropTypes.number.isRequired,
        fecha_reserva: PropTypes.string.isRequired,
        hora_inicio: PropTypes.string.isRequired,
        hora_fin: PropTypes.string.isRequired,
        estado: PropTypes.oneOf(['pendiente', 'confirmada', 'cancelada']),
        total: PropTypes.number.isRequired,
        comentarios: PropTypes.string,
        paquete: PropTypes.shape({
            nombre: PropTypes.string,
            descripcion: PropTypes.string
        }),
        tematica: PropTypes.shape({
            nombre: PropTypes.string
        }),
        opcion_alimento: PropTypes.shape({
            nombre: PropTypes.string
        })
    }).isRequired,
    onClose: PropTypes.func.isRequired
};

export default ReservationPreviewModal;\n\n

=== ./reservas/pages/admin/ReservationSummary.jsx ===
import { motion } from 'framer-motion';
import { FiCalendar, FiClock, FiCheck, FiAlertTriangle, FiTrendingUp, FiTrendingDown } from 'react-icons/fi';
import { useTheme } from '@shared/context/ThemeContext';

const ReservationSummary = ({ reservations, filterDataByMonth }) => {
    const { theme } = useTheme();
    const isDark = theme === 'dark';
    
    const currentMonth = new Date().toLocaleString('es-ES', { month: 'long' });
    const capitalizedMonth = currentMonth.charAt(0).toUpperCase() + currentMonth.slice(1);

    const filteredReservations = filterDataByMonth(reservations, 'fecha_reserva');
    const reservationsCount = filteredReservations.length;
    
    // Calcular estadÃ­sticas
    const confirmedReservations = filteredReservations.filter(r => r.estado === 'confirmada').length;
    const pendingReservations = filteredReservations.filter(r => r.estado === 'pendiente').length;
    const cancelledReservations = filteredReservations.filter(r => r.estado === 'cancelada').length;
    
    // Calcular porcentajes
    const confirmedPercentage = reservationsCount > 0 ? Math.round((confirmedReservations / reservationsCount) * 100) : 0;
    const pendingPercentage = reservationsCount > 0 ? Math.round((pendingReservations / reservationsCount) * 100) : 0;

    return (
        <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            className="h-full"
        >
            {/* Header */}
            <div className={`p-6 ${
                isDark 
                    ? "bg-gradient-to-r from-green-800 to-emerald-900" 
                    : "bg-gradient-to-r from-green-500 to-emerald-600"
            }`}>
                <div className="flex items-center justify-between">
                    <h2 className="text-xl font-semibold text-white">Reservas</h2>
                    <div className="p-3 rounded-full bg-white/20 text-white shadow-lg">
                        <FiCalendar className="w-6 h-6" />
                    </div>
                </div>
            </div>
            
            {/* Content */}
            <div className="p-4 md:p-6" style={{ 
                backgroundColor: isDark ? 'var(--panel-bg)' : 'white',
                color: isDark ? 'var(--color-text-primary)' : 'inherit'
            }}>
                {/* Summary Stats */}
                <div className="flex flex-col items-center text-center mb-6">
                    <span className={`text-xs md:text-sm font-medium px-4 py-2 rounded-full mb-3 ${
                        isDark 
                            ? 'bg-gray-800 text-gray-100 border border-gray-700' 
                            : 'bg-gray-100 text-gray-600'
                    }`}>
                        {capitalizedMonth}
                    </span>
                    <p className={`text-4xl md:text-5xl font-bold ${
                        isDark ? 'text-green-400' : 'text-green-600'
                    }`} style={{ 
                        background: isDark ? 'linear-gradient(135deg, #10b981, #06d6a0)' : 'linear-gradient(135deg, #059669, #10b981)',
                        WebkitBackgroundClip: 'text',
                        WebkitTextFillColor: 'transparent',
                        backgroundClip: 'text'
                    }}>
                        {reservationsCount}
                    </p>
                    <p className={`text-sm md:text-base font-medium mt-2 ${
                        isDark ? 'text-gray-300' : 'text-gray-600'
                    }`}>
                        {reservationsCount === 1 ? 'reserva' : 'reservas'} este mes
                    </p>
                </div>
                
                {/* Quick Overview */}
                {reservationsCount > 0 && (
                    <div className={`p-4 rounded-lg mb-6 border ${
                        isDark ? 'bg-gray-800 border-gray-700' : 'bg-gray-50 border-gray-200'
                    }`}>
                        <div className="flex items-center justify-between">
                            <span className={`text-sm font-medium ${
                                isDark ? 'text-gray-300' : 'text-gray-600'
                            }`}>
                                Tasa de confirmaciÃ³n
                            </span>
                            <span className={`text-lg font-bold ${
                                isDark ? 'text-green-400' : 'text-green-600'
                            }`}>
                                {confirmedPercentage}%
                            </span>
                        </div>
                    </div>
                )}
                
                {/* Detailed Cards */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-6">
                    {/* Confirmed Reservations */}
                    <motion.div 
                        whileHover={{ scale: 1.02 }}
                        className={`rounded-lg p-4 shadow-sm border text-center transition-all duration-300 ${
                            isDark ? 'bg-gray-800 border-gray-700 hover:bg-gray-750' : 'bg-white border-gray-100 hover:shadow-md'
                        }`}
                    >
                        <div className={`mx-auto w-10 h-10 md:w-12 md:h-12 flex items-center justify-center rounded-full mb-3 ${
                            isDark ? 'bg-green-900 text-green-400' : 'bg-green-100 text-green-600'
                        }`}>
                            <FiCheck className="w-5 h-5 md:w-6 md:h-6" />
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className={`text-xl md:text-2xl font-bold ${
                                isDark ? 'text-white' : 'text-gray-800'
                            }`}>
                                {confirmedReservations}
                            </p>
                            <p className={`text-xs md:text-sm font-medium text-center ${
                                isDark ? 'text-gray-300' : 'text-gray-600'
                            }`}>
                                Confirmadas
                            </p>
                            {reservationsCount > 0 && (
                                <p className={`text-xs mt-1 ${
                                    isDark ? 'text-green-400' : 'text-green-600'
                                }`}>
                                    {confirmedPercentage}%
                                </p>
                            )}
                        </div>
                    </motion.div>
                    
                    {/* Pending Reservations */}
                    <motion.div 
                        whileHover={{ scale: 1.02 }}
                        className={`rounded-lg p-4 shadow-sm border text-center transition-all duration-300 ${
                            isDark ? 'bg-gray-800 border-gray-700 hover:bg-gray-750' : 'bg-white border-gray-100 hover:shadow-md'
                        }`}
                    >
                        <div className={`mx-auto w-10 h-10 md:w-12 md:h-12 flex items-center justify-center rounded-full mb-3 ${
                            isDark ? 'bg-amber-900 text-amber-400' : 'bg-amber-100 text-amber-600'
                        }`}>
                            <FiClock className="w-5 h-5 md:w-6 md:h-6" />
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className={`text-xl md:text-2xl font-bold ${
                                isDark ? 'text-white' : 'text-gray-800'
                            }`}>
                                {pendingReservations}
                            </p>
                            <p className={`text-xs md:text-sm font-medium text-center ${
                                isDark ? 'text-gray-300' : 'text-gray-600'
                            }`}>
                                Pendientes
                            </p>
                            {reservationsCount > 0 && (
                                <p className={`text-xs mt-1 ${
                                    isDark ? 'text-amber-400' : 'text-amber-600'
                                }`}>
                                    {pendingPercentage}%
                                </p>
                            )}
                        </div>
                    </motion.div>
                </div>
                
                {/* Additional Stats */}
                {(cancelledReservations > 0 || reservationsCount === 0) && (
                    <div className="mt-6">
                        <div className={`rounded-lg p-4 border ${
                            isDark ? 'bg-gray-800 border-gray-700' : 'bg-gray-50 border-gray-200'
                        }`}>
                            {cancelledReservations > 0 && (
                                <div className="flex items-center justify-between">
                                    <span className={`text-sm font-medium ${
                                        isDark ? 'text-gray-300' : 'text-gray-600'
                                    }`}>
                                        Canceladas
                                    </span>
                                    <span className={`text-lg font-bold ${
                                        isDark ? 'text-red-400' : 'text-red-600'
                                    }`}>
                                        {cancelledReservations}
                                    </span>
                                </div>
                            )}
                            {reservationsCount === 0 && (
                                <div className="text-center">
                                    <FiCalendar className={`mx-auto w-8 h-8 mb-2 ${
                                        isDark ? 'text-gray-500' : 'text-gray-400'
                                    }`} />
                                    <p className={`text-sm ${
                                        isDark ? 'text-gray-400' : 'text-gray-500'
                                    }`}>
                                        No hay reservas este mes
                                    </p>
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </div>
        </motion.div>
    );
};

export default ReservationSummary;\n\n

=== ./reservas/pages/admin/ReservationTable.jsx ===
ï»¿import React, { useState, useCallback, useMemo } from 'react';
import { FiEdit2, FiEye, FiTrash2, FiSearch, FiFilter, FiX, FiDollarSign } from 'react-icons/fi';
// ImportaciÃƒÂ³n con ruta relativa desde src/
import PaymentModal from '@shared/@domains/dashboard/pages/Dashboard/payment-service/PaymentModal';
import { formatDate, formatTime } from '@shared/utils/formatters';
import axiosInstance from '@shared/utils/axiosConfig';
import { toast } from 'react-hot-toast';

const ReservationTable = ({
  reservations,
  reservationSearch,
  setReservationSearch,
  handleViewReservation,
  handleEditItem,
  handleDeleteItem,
  selectedMonth,
}) => {
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState({
    estado: '',
    fecha_inicio: '',
    fecha_fin: '',
    paquete: '',
    opcion_alimento: '',
    tematica: '',
    hora: ''
  });

  const uniqueValues = useMemo(() => ({
    estados: [...new Set(reservations.map(r => r.estado))],
    paquetes: [...new Set(reservations.map(r => r.paquete?.nombre).filter(Boolean))],
    opcionesAlimento: [...new Set(reservations.map(r => r.opcionAlimento?.nombre).filter(Boolean))],
    tematicas: [...new Set(reservations.map(r => r.tematicaReserva?.nombre).filter(Boolean))],
    horas: [...new Set(reservations.map(r => r.hora_inicio))]
  }), [reservations]);

  const calculateTotalPaid = (pagos) => {
    if (!pagos || !Array.isArray(pagos)) return 0;
    return pagos
      .filter(p => p.estado === 'completado')
      .reduce((sum, p) => sum + (p.monto || 0), 0);
  };

  const getPaymentStatus = (reservation) => {
    if (!reservation.pagos) return { status: 'pendiente', style: 'bg-yellow-100 text-yellow-800' };
    
    const totalPaid = calculateTotalPaid(reservation.pagos);
    
    if (totalPaid >= reservation.total) {
      return { status: 'Pagado', style: 'bg-green-100 text-green-800' };
    } else if (totalPaid > 0) {
      return { status: 'Pago Parcial', style: 'bg-blue-100 text-blue-800' };
    }
    return { status: 'Pendiente', style: 'bg-yellow-100 text-yellow-800' };
  };

  const renderStatus = (estado) => {
    const statusStyles = {
      confirmada: 'bg-green-100 text-green-800',
      cancelada: 'bg-red-100 text-red-800',
      pendiente: 'bg-yellow-100 text-yellow-800'
    };

    return (
      <span
        className={`px-2 py-1 rounded-full text-xs font-semibold ${
          statusStyles[estado] || statusStyles.pendiente
        }`}
      >
        {estado.charAt(0).toUpperCase() + estado.slice(1)}
      </span>
    );
  };

  const handleFilterChange = useCallback((name, value) => {
    setFilters(prev => ({
      ...prev,
      [name]: value
    }));
  }, []);

  const clearFilters = useCallback(() => {
    setFilters({
      estado: '',
      fecha_inicio: '',
      fecha_fin: '',
      paquete: '',
      opcion_alimento: '',
      tematica: '',
      hora: ''
    });
  }, []);

  const filteredReservations = useMemo(() => {
    return reservations.filter(reservation => {
      const searchTerm = reservationSearch.toLowerCase();
      const matchesSearch = 
        reservation.id.toString().includes(searchTerm) ||
        reservation.usuario?.nombre?.toLowerCase().includes(searchTerm) ||
        reservation.paquete?.nombre?.toLowerCase().includes(searchTerm);

      const matchesEstado = !filters.estado || reservation.estado === filters.estado;
      const matchesPaquete = !filters.paquete || reservation.paquete?.nombre === filters.paquete;
      const matchesOpcionAlimento = !filters.opcion_alimento || 
        reservation.opcionAlimento?.nombre === filters.opcion_alimento;
      const matchesTematica = !filters.tematica || 
        reservation.tematicaReserva?.nombre === filters.tematica;
      const matchesHora = !filters.hora || reservation.hora_inicio === filters.hora;

      const reservationDate = new Date(reservation.fecha_reserva);
      const matchesFechaInicio = !filters.fecha_inicio || 
        reservationDate >= new Date(filters.fecha_inicio);
      const matchesFechaFin = !filters.fecha_fin || 
        reservationDate <= new Date(filters.fecha_fin);

      const matchesMonth = reservationDate.getMonth() === selectedMonth;

      return matchesSearch && matchesEstado && matchesPaquete && 
             matchesOpcionAlimento && matchesTematica && matchesHora && 
             matchesFechaInicio && matchesFechaFin && matchesMonth;
    });
  }, [reservations, reservationSearch, filters, selectedMonth]);

  const renderWithFallback = (value, fallback = 'No especificado') => {
    return value || fallback;
  };

  const renderMampara = (mampara) => {
    if (!mampara) return 'No especificada';
    return `${mampara.piezas} pieza(s) - $${mampara.precio}`;
  };

  const FilterPanel = () => (
    <div className="bg-white p-4 border-b border-gray-200">
      <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Estado
          </label>
          <select
            value={filters.estado}
            onChange={(e) => handleFilterChange('estado', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todos</option>
            {uniqueValues.estados.map(estado => (
              <option key={estado} value={estado}>
                {estado.charAt(0).toUpperCase() + estado.slice(1)}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha Inicio
          </label>
          <input
            type="date"
            value={filters.fecha_inicio}
            onChange={(e) => handleFilterChange('fecha_inicio', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha Fin
          </label>
          <input
            type="date"
            value={filters.fecha_fin}
            onChange={(e) => handleFilterChange('fecha_fin', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Paquete
          </label>
          <select
            value={filters.paquete}
            onChange={(e) => handleFilterChange('paquete', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todos</option>
            {uniqueValues.paquetes.map(paquete => (
              <option key={paquete} value={paquete}>{paquete}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            OpciÃƒÂ³n de Alimento
          </label>
          <select
            value={filters.opcion_alimento}
            onChange={(e) => handleFilterChange('opcion_alimento', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {uniqueValues.opcionesAlimento.map(opcion => (
              <option key={opcion} value={opcion}>{opcion}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            TemÃƒÂ¡tica
          </label>
          <select
            value={filters.tematica}
            onChange={(e) => handleFilterChange('tematica', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {uniqueValues.tematicas.map(tematica => (
              <option key={tematica} value={tematica}>{tematica}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Hora
          </label>
          <select
            value={filters.hora}
            onChange={(e) => handleFilterChange('hora', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {uniqueValues.horas.map(hora => (
              <option key={hora} value={hora}>{hora}</option>
            ))}
          </select>
        </div>
      </div>

      <div className="mt-4 flex justify-end space-x-2">
        <button
          onClick={clearFilters}
          className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Limpiar Filtros
        </button>
        <button
          onClick={() => setShowFilters(false)}
          className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          <FiX className="mr-2" />
          Cerrar Filtros
        </button>
      </div>
    </div>
  );

  return (
    <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
      <div className="bg-white p-4 border-b border-gray-200">
        <div className="flex items-center justify-between flex-wrap gap-4">
          <div className="flex-1 min-w-0 relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              placeholder="Buscar reserva..."
              value={reservationSearch}
              onChange={(e) => setReservationSearch(e.target.value)}
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          <button
            type="button"
            onClick={() => setShowFilters(!showFilters)}
            className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <FiFilter className="h-5 w-5 mr-2" />
            {showFilters ? 'Ocultar Filtros' : 'Mostrar Filtros'}
          </button>
        </div>
      </div>

      {showFilters && <FilterPanel />}

      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-300">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                NÃ‚Âº Reserva
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Cliente
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Fecha
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Hora
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Paquete
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                OpciÃƒÂ³n Alimento
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                TemÃƒÂ¡tica
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Mampara
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredReservations.map((reservation) => {
              const paymentStatus = getPaymentStatus(reservation);
              const totalPaid = calculateTotalPaid(reservation.pagos);
              return (
                <tr key={reservation.id} className="hover:bg-gray-50">
                  <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                    {reservation.id}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.usuario?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {formatDate(reservation.fecha_reserva)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {formatTime(reservation.hora_inicio)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.paquete?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.opcionAlimento?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.tematicaReserva?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderMampara(reservation.mampara)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm">
                    {renderStatus(reservation.estado)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => handleViewReservation(reservation)}
                        className="text-blue-600 hover:text-blue-900 transition-colors duration-200"
                        title="Ver detalles"
                      >
                        <FiEye className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => handleEditItem(reservation)}
                        className="text-green-600 hover:text-green-900 transition-colors duration-200"
                        title="Editar reserva"
                      >
                        <FiEdit2 className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => handleDeleteItem(reservation.id)}
                        className="text-red-600 hover:text-red-900 transition-colors duration-200"
                        title="Eliminar reserva"
                      >
                        <FiTrash2 className="h-5 w-5" />
                      </button>
                      {totalPaid < reservation.total && (
                        <button
                          onClick={() => {
                            setSelectedReservation(reservation);
                            setShowPaymentModal(true);
                          }}
                          className="text-indigo-600 hover:text-indigo-900 transition-colors duration-200"
                          title="Procesar pago"
                        >
                          <FiDollarSign className="h-5 w-5" />
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {filteredReservations.length === 0 && (
        <div className="text-center py-8 bg-white">
          <p className="text-gray-500 text-sm">No se encontraron reservaciones para el mes seleccionado</p>
        </div>
      )}

      {/* Modal de Pago */}
      {showPaymentModal && selectedReservation && (
        <PaymentModal
          reservationData={selectedReservation}
          onCancel={() => {
            setShowPaymentModal(false);
            setSelectedReservation(null);
          }}
          onConfirm={async (paymentData) => {
            try {
              const response = await axiosInstance.post('/api/pagos', {
                ...paymentData,
                id_reserva: selectedReservation.id
              });

              if (response.data) {
                toast.success('Pago registrado exitosamente');
                setShowPaymentModal(false);
                setSelectedReservation(null);
              }
              return response;
            } catch (error) {
              console.error('Error al crear el pago:', error);
              toast.error('Error al registrar el pago');
            }
          }}
        />
      )}
    </div>
  );
};

export default ReservationTable;

\n\n

=== ./reservas/pages/admin/ReservationTable.jsx.pre-legacy-fix.20250521220728 ===
import React, { useState, useCallback, useMemo } from 'react';
import { FiEdit2, FiEye, FiTrash2, FiSearch, FiFilter, FiX, FiDollarSign } from 'react-icons/fi';
// ImportaciÃ³n con ruta relativa desde src/
import PaymentModal from '@shared/pages/admin/dashboard/payment-service/PaymentModal';
import { formatDate, formatTime } from '@shared/utils/formatters';
import axiosInstance from '@shared/utils/axiosConfig';
import { toast } from 'react-hot-toast';

const ReservationTable = ({
  reservations,
  reservationSearch,
  setReservationSearch,
  handleViewReservation,
  handleEditItem,
  handleDeleteItem,
  selectedMonth,
}) => {
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState({
    estado: '',
    fecha_inicio: '',
    fecha_fin: '',
    paquete: '',
    opcion_alimento: '',
    tematica: '',
    hora: ''
  });

  const uniqueValues = useMemo(() => ({
    estados: [...new Set(reservations.map(r => r.estado))],
    paquetes: [...new Set(reservations.map(r => r.paquete?.nombre).filter(Boolean))],
    opcionesAlimento: [...new Set(reservations.map(r => r.opcionAlimento?.nombre).filter(Boolean))],
    tematicas: [...new Set(reservations.map(r => r.tematicaReserva?.nombre).filter(Boolean))],
    horas: [...new Set(reservations.map(r => r.hora_inicio))]
  }), [reservations]);

  const calculateTotalPaid = (pagos) => {
    if (!pagos || !Array.isArray(pagos)) return 0;
    return pagos
      .filter(p => p.estado === 'completado')
      .reduce((sum, p) => sum + (p.monto || 0), 0);
  };

  const getPaymentStatus = (reservation) => {
    if (!reservation.pagos) return { status: 'pendiente', style: 'bg-yellow-100 text-yellow-800' };
    
    const totalPaid = calculateTotalPaid(reservation.pagos);
    
    if (totalPaid >= reservation.total) {
      return { status: 'Pagado', style: 'bg-green-100 text-green-800' };
    } else if (totalPaid > 0) {
      return { status: 'Pago Parcial', style: 'bg-blue-100 text-blue-800' };
    }
    return { status: 'Pendiente', style: 'bg-yellow-100 text-yellow-800' };
  };

  const renderStatus = (estado) => {
    const statusStyles = {
      confirmada: 'bg-green-100 text-green-800',
      cancelada: 'bg-red-100 text-red-800',
      pendiente: 'bg-yellow-100 text-yellow-800'
    };

    return (
      <span
        className={`px-2 py-1 rounded-full text-xs font-semibold ${
          statusStyles[estado] || statusStyles.pendiente
        }`}
      >
        {estado.charAt(0).toUpperCase() + estado.slice(1)}
      </span>
    );
  };

  const handleFilterChange = useCallback((name, value) => {
    setFilters(prev => ({
      ...prev,
      [name]: value
    }));
  }, []);

  const clearFilters = useCallback(() => {
    setFilters({
      estado: '',
      fecha_inicio: '',
      fecha_fin: '',
      paquete: '',
      opcion_alimento: '',
      tematica: '',
      hora: ''
    });
  }, []);

  const filteredReservations = useMemo(() => {
    return reservations.filter(reservation => {
      const searchTerm = reservationSearch.toLowerCase();
      const matchesSearch = 
        reservation.id.toString().includes(searchTerm) ||
        reservation.usuario?.nombre?.toLowerCase().includes(searchTerm) ||
        reservation.paquete?.nombre?.toLowerCase().includes(searchTerm);

      const matchesEstado = !filters.estado || reservation.estado === filters.estado;
      const matchesPaquete = !filters.paquete || reservation.paquete?.nombre === filters.paquete;
      const matchesOpcionAlimento = !filters.opcion_alimento || 
        reservation.opcionAlimento?.nombre === filters.opcion_alimento;
      const matchesTematica = !filters.tematica || 
        reservation.tematicaReserva?.nombre === filters.tematica;
      const matchesHora = !filters.hora || reservation.hora_inicio === filters.hora;

      const reservationDate = new Date(reservation.fecha_reserva);
      const matchesFechaInicio = !filters.fecha_inicio || 
        reservationDate >= new Date(filters.fecha_inicio);
      const matchesFechaFin = !filters.fecha_fin || 
        reservationDate <= new Date(filters.fecha_fin);

      const matchesMonth = reservationDate.getMonth() === selectedMonth;

      return matchesSearch && matchesEstado && matchesPaquete && 
             matchesOpcionAlimento && matchesTematica && matchesHora && 
             matchesFechaInicio && matchesFechaFin && matchesMonth;
    });
  }, [reservations, reservationSearch, filters, selectedMonth]);

  const renderWithFallback = (value, fallback = 'No especificado') => {
    return value || fallback;
  };

  const renderMampara = (mampara) => {
    if (!mampara) return 'No especificada';
    return `${mampara.piezas} pieza(s) - $${mampara.precio}`;
  };

  const FilterPanel = () => (
    <div className="bg-white p-4 border-b border-gray-200">
      <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Estado
          </label>
          <select
            value={filters.estado}
            onChange={(e) => handleFilterChange('estado', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todos</option>
            {uniqueValues.estados.map(estado => (
              <option key={estado} value={estado}>
                {estado.charAt(0).toUpperCase() + estado.slice(1)}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha Inicio
          </label>
          <input
            type="date"
            value={filters.fecha_inicio}
            onChange={(e) => handleFilterChange('fecha_inicio', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha Fin
          </label>
          <input
            type="date"
            value={filters.fecha_fin}
            onChange={(e) => handleFilterChange('fecha_fin', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Paquete
          </label>
          <select
            value={filters.paquete}
            onChange={(e) => handleFilterChange('paquete', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todos</option>
            {uniqueValues.paquetes.map(paquete => (
              <option key={paquete} value={paquete}>{paquete}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            OpciÃ³n de Alimento
          </label>
          <select
            value={filters.opcion_alimento}
            onChange={(e) => handleFilterChange('opcion_alimento', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {uniqueValues.opcionesAlimento.map(opcion => (
              <option key={opcion} value={opcion}>{opcion}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            TemÃ¡tica
          </label>
          <select
            value={filters.tematica}
            onChange={(e) => handleFilterChange('tematica', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {uniqueValues.tematicas.map(tematica => (
              <option key={tematica} value={tematica}>{tematica}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Hora
          </label>
          <select
            value={filters.hora}
            onChange={(e) => handleFilterChange('hora', e.target.value)}
            className="w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {uniqueValues.horas.map(hora => (
              <option key={hora} value={hora}>{hora}</option>
            ))}
          </select>
        </div>
      </div>

      <div className="mt-4 flex justify-end space-x-2">
        <button
          onClick={clearFilters}
          className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Limpiar Filtros
        </button>
        <button
          onClick={() => setShowFilters(false)}
          className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          <FiX className="mr-2" />
          Cerrar Filtros
        </button>
      </div>
    </div>
  );

  return (
    <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
      <div className="bg-white p-4 border-b border-gray-200">
        <div className="flex items-center justify-between flex-wrap gap-4">
          <div className="flex-1 min-w-0 relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              placeholder="Buscar reserva..."
              value={reservationSearch}
              onChange={(e) => setReservationSearch(e.target.value)}
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          <button
            type="button"
            onClick={() => setShowFilters(!showFilters)}
            className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <FiFilter className="h-5 w-5 mr-2" />
            {showFilters ? 'Ocultar Filtros' : 'Mostrar Filtros'}
          </button>
        </div>
      </div>

      {showFilters && <FilterPanel />}

      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-300">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                NÂº Reserva
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Cliente
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Fecha
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Hora
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Paquete
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                OpciÃ³n Alimento
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                TemÃ¡tica
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Mampara
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredReservations.map((reservation) => {
              const paymentStatus = getPaymentStatus(reservation);
              const totalPaid = calculateTotalPaid(reservation.pagos);
              return (
                <tr key={reservation.id} className="hover:bg-gray-50">
                  <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                    {reservation.id}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.usuario?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {formatDate(reservation.fecha_reserva)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {formatTime(reservation.hora_inicio)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.paquete?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.opcionAlimento?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderWithFallback(reservation.tematicaReserva?.nombre)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    {renderMampara(reservation.mampara)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm">
                    {renderStatus(reservation.estado)}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => handleViewReservation(reservation)}
                        className="text-blue-600 hover:text-blue-900 transition-colors duration-200"
                        title="Ver detalles"
                      >
                        <FiEye className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => handleEditItem(reservation)}
                        className="text-green-600 hover:text-green-900 transition-colors duration-200"
                        title="Editar reserva"
                      >
                        <FiEdit2 className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => handleDeleteItem(reservation.id)}
                        className="text-red-600 hover:text-red-900 transition-colors duration-200"
                        title="Eliminar reserva"
                      >
                        <FiTrash2 className="h-5 w-5" />
                      </button>
                      {totalPaid < reservation.total && (
                        <button
                          onClick={() => {
                            setSelectedReservation(reservation);
                            setShowPaymentModal(true);
                          }}
                          className="text-indigo-600 hover:text-indigo-900 transition-colors duration-200"
                          title="Procesar pago"
                        >
                          <FiDollarSign className="h-5 w-5" />
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {filteredReservations.length === 0 && (
        <div className="text-center py-8 bg-white">
          <p className="text-gray-500 text-sm">No se encontraron reservaciones para el mes seleccionado</p>
        </div>
      )}

      {/* Modal de Pago */}
      {showPaymentModal && selectedReservation && (
        <PaymentModal
          reservationData={selectedReservation}
          onCancel={() => {
            setShowPaymentModal(false);
            setSelectedReservation(null);
          }}
          onConfirm={async (paymentData) => {
            try {
              const response = await axiosInstance.post('/api/pagos', {
                ...paymentData,
                id_reserva: selectedReservation.id
              });

              if (response.data) {
                toast.success('Pago registrado exitosamente');
                setShowPaymentModal(false);
                setSelectedReservation(null);
              }
              return response;
            } catch (error) {
              console.error('Error al crear el pago:', error);
              toast.error('Error al registrar el pago');
            }
          }}
        />
      )}
    </div>
  );
};

export default ReservationTable;
\n\n

=== ./reservas/pages/admin/reservationform-components/CelebrantSection.jsx ===
import React from 'react';
import { Controller } from 'react-hook-form';
import { FiUser } from 'react-icons/fi';

const CelebrantSection = ({ control, errors }) => {
  return (
    <div className="space-y-4">
      <div className="flex items-center gap-2 mb-4">
        <FiUser className="text-indigo-600 w-5 h-5" />
        <h3 className="text-lg font-semibold text-gray-900">Datos del Festejado</h3>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* Nombre del Festejado */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Nombre del Festejado
          </label>
          <Controller
            name="nombre_festejado"
            control={control}
            rules={{
              required: 'El nombre del festejado es requerido',
              minLength: {
                value: 2,
                message: 'El nombre debe tener al menos 2 caracteres'
              }
            }}
            render={({ field }) => (
              <div>
                <input
                  {...field}
                  type="text"
                  className={`w-full pl-3 pr-10 py-2 text-sm text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 ${
                    errors.nombre_festejado ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Nombre completo"
                />
                {errors.nombre_festejado && (
                  <p className="mt-1 text-xs text-red-500">
                    {errors.nombre_festejado.message}
                  </p>
                )}
              </div>
            )}
          />
        </div>

        {/* Edad del Festejado */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Edad del Festejado
          </label>
          <Controller
            name="edad_festejado"
            control={control}
            rules={{
              required: 'La edad es requerida',
              min: {
                value: 1,
                message: 'La edad debe ser mayor a 0'
              },
              max: {
                value: 100,
                message: 'La edad debe ser menor a 100'
              }
            }}
            render={({ field }) => (
              <div>
                <input
                  {...field}
                  type="number"
                  min="1"
                  max="100"
                  className={`w-full pl-3 pr-10 py-2 text-sm text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 ${
                    errors.edad_festejado ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Edad"
                  onChange={(e) => {
                    const value = e.target.value;
                    if (value === '' || (parseInt(value) >= 1 && parseInt(value) <= 100)) {
                      field.onChange(value);
                    }
                  }}
                />
                {errors.edad_festejado && (
                  <p className="mt-1 text-xs text-red-500">
                    {errors.edad_festejado.message}
                  </p>
                )}
              </div>
            )}
          />
        </div>
      </div>

      {/* InformaciÃ³n adicional */}
      <div className="mt-4 bg-gray-50 p-4 rounded-lg border border-gray-200">
        <div className="flex items-center gap-2 mb-2">
          <FiUser className="text-indigo-600 w-4 h-4" />
          <h4 className="font-medium text-gray-900">InformaciÃ³n importante:</h4>
        </div>
        <ul className="list-disc list-inside space-y-1 text-sm text-gray-600">
          <li>El nombre debe ser el nombre completo del festejado</li>
          <li>La edad debe ser un nÃºmero entre 1 y 100 aÃ±os</li>
          <li>Estos datos serÃ¡n utilizados para personalizar la experiencia</li>
        </ul>
      </div>
    </div>
  );
};

export default CelebrantSection;\n\n

=== ./reservas/pages/admin/reservationform-components/CommentsSection.jsx ===
import React from 'react';
import { Controller } from 'react-hook-form';
import { FiMessageSquare } from 'react-icons/fi';

const CommentsSection = ({ control }) => {
  return (
    <div className="space-y-4">
      <div className="flex items-center gap-2 mb-4">
        <FiMessageSquare className="text-indigo-600 w-5 h-5" />
        <h3 className="text-lg font-semibold text-gray-900">Comentarios</h3>
      </div>

      <Controller
        name="comentarios"
        control={control}
        render={({ field }) => (
          <div>
            <textarea
              {...field}
              rows={4}
              className="w-full pl-3 pr-10 py-2 text-sm text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Agrega cualquier comentario o instrucciÃ³n especial para la reserva..."
            />
            <p className="mt-2 text-sm text-gray-500">
              Puedes incluir detalles adicionales como:
            </p>
            <ul className="mt-1 list-disc list-inside text-sm text-gray-500 space-y-1">
              <li>Requerimientos especiales</li>
              <li>Alergias o restricciones alimenticias</li>
              <li>Instrucciones especÃ­ficas para la decoraciÃ³n</li>
              <li>Cualquier otra informaciÃ³n relevante</li>
            </ul>
          </div>
        )}
      />

      {/* Panel informativo */}
      <div className="mt-4 bg-gray-50 p-4 rounded-lg border border-gray-200">
        <div className="flex items-center gap-2 mb-2">
          <FiMessageSquare className="text-indigo-600 w-4 h-4" />
          <h4 className="font-medium text-gray-900">InformaciÃ³n importante:</h4>
        </div>
        <ul className="list-disc list-inside space-y-1 text-sm text-gray-600">
          <li>Los comentarios son visibles para el personal del establecimiento</li>
          <li>SerÃ¡n considerados durante la preparaciÃ³n del evento</li>
          <li>No incluyas informaciÃ³n sensible o confidencial</li>
        </ul>
      </div>

      {/* Contador de caracteres */}
      <Controller
        name="comentarios"
        control={control}
        render={({ field }) => (
          <div className="flex justify-end">
            <span className="text-sm text-gray-500">
              {field.value?.length || 0} caracteres
            </span>
          </div>
        )}
      />
    </div>
  );
};

export default CommentsSection;\n\n

=== ./reservas/pages/admin/reservationform-components/DateTimeSection.jsx ===
import React, { useCallback, useMemo, useState, useEffect } from 'react';
import { Controller, useWatch } from 'react-hook-form';
import { FiCalendar, FiClock, FiAlertCircle, FiInfo } from 'react-icons/fi';
import DatePicker, { registerLocale } from 'react-datepicker';
import es from 'date-fns/locale/es';
import { format, isWeekend, isTuesday, addDays, isBefore, startOfDay } from 'date-fns';
import "react-datepicker/dist/react-datepicker.css";
import Select from 'react-select';

registerLocale('es', es);

const TIME_SLOTS = {
  MORNING: {
    label: 'MaÃ±ana (11:00 - 16:00)',
    value: 'maÃ±ana',
    start: '11:00:00',
    end: '16:00:00',
    icon: 'ðŸŒ…'
  },
  AFTERNOON: {
    label: 'Tarde (17:00 - 22:00)',
    value: 'tarde',
    start: '17:00:00',
    end: '22:00:00',
    icon: 'ðŸŒ‡'
  }
};

const DateTimeSection = ({
  control,
  errors,
  setValue,
  unavailableDates = [],
  existingReservations = [],
  packages = [],
  showTuesdayModal,
  setShowTuesdayModal
}) => {
  const [selectedDate, setSelectedDate] = useState(null);
  const [hasShownTuesdayModal, setHasShownTuesdayModal] = useState(false);

  const selectedPackage = useWatch({
    control,
    name: 'id_paquete'
  });

  useEffect(() => {
    if (selectedPackage && selectedDate instanceof Date) {
      const pkg = packages.find((p) => p.id === selectedPackage);
      if (pkg) {
        const dayOfWeek = selectedDate.getDay();
        const newPrice =
          dayOfWeek >= 1 && dayOfWeek <= 4
            ? parseFloat(pkg.precio_lunes_jueves)
            : parseFloat(pkg.precio_viernes_domingo);
        setValue('packagePrice', newPrice, { shouldValidate: false });

        if (dayOfWeek === 2 && !hasShownTuesdayModal) {
          setValue('tuesdayFee', 1500, { shouldValidate: false });
          setShowTuesdayModal(true);
          setHasShownTuesdayModal(true);
        } else if (dayOfWeek !== 2) {
          setValue('tuesdayFee', 0, { shouldValidate: false });
          setHasShownTuesdayModal(false);
        }
      }
    }
  }, [selectedPackage, selectedDate, packages, setValue, setShowTuesdayModal, hasShownTuesdayModal]);

  const getDateAvailability = useCallback((date) => {
    if (!date) return 'available';

    // Check if date is in the past or within one week
    const today = startOfDay(new Date());
    const oneWeekFromNow = addDays(today, 7);
    if (isBefore(date, oneWeekFromNow)) {
      return 'unavailable';
    }

    const reservationsOnDate = existingReservations.filter(
      (reservation) =>
        new Date(reservation.fecha_reserva).toDateString() === date.toDateString() &&
        reservation.estado !== 'cancelada'
    );

    const morningReserved = reservationsOnDate.some(r => r.hora_inicio === TIME_SLOTS.MORNING.start);
    const afternoonReserved = reservationsOnDate.some(r => r.hora_inicio === TIME_SLOTS.AFTERNOON.start);

    if (morningReserved && afternoonReserved) return 'unavailable';
    if (morningReserved || afternoonReserved) return 'partial';
    return 'available';
  }, [existingReservations]);

  const isTimeSlotAvailable = useCallback((date, timeSlot) => {
    if (!date) return true;

    const reservationsOnDate = existingReservations.filter(
      (reservation) =>
        new Date(reservation.fecha_reserva).toDateString() === date.toDateString()
    );

    return !reservationsOnDate.some(
      (reservation) => reservation.hora_inicio === timeSlot.start
    );
  }, [existingReservations]);

  const availableTimeSlots = useMemo(() => {
    if (!selectedDate) return [];
    return Object.values(TIME_SLOTS).filter((slot) =>
      isTimeSlotAvailable(selectedDate, slot)
    );
  }, [selectedDate, isTimeSlotAvailable]);

  const timeSlotOptions = useMemo(() =>
    availableTimeSlots.map((slot) => ({
      value: slot.value,
      label: slot.label,
      icon: slot.icon,
      hora_inicio: slot.start,
      hora_fin: slot.end,
      data: slot
    })),
    [availableTimeSlots]
  );

  const formatOptionLabel = useCallback(({ label, icon, value }) => (
    <div key={`time-slot-${value}`} className="flex items-center gap-2">
      <span>{icon}</span>
      <span>{label}</span>
    </div>
  ), []);

  const customSelectStyles = {
    control: (base, state) => ({
      ...base,
      borderColor: errors.hora_inicio ? '#ef4444' : state.isFocused ? '#6366f1' : '#e5e7eb',
      boxShadow: state.isFocused ? '0 0 0 1px #6366f1' : 'none',
      transition: 'all 0.2s ease',
      '&:hover': {
        borderColor: state.isFocused ? '#6366f1' : '#e5e7eb'
      }
    }),
    option: (base, state) => ({
      ...base,
      backgroundColor: state.isSelected ? '#6366f1' : state.isFocused ? '#e0e7ff' : 'white',
      color: state.isSelected ? 'white' : '#374151',
      transition: 'all 0.2s ease',
      '&:active': {
        backgroundColor: '#6366f1'
      }
    }),
    menu: (base) => ({
      ...base,
      zIndex: 50
    })
  };

  const getDatePriceInfo = useCallback((date) => {
    if (!selectedPackage || !packages.length) return '';
    
    const pkg = packages.find((p) => p.id === selectedPackage);
    if (!pkg) return '';

    const dayOfWeek = date.getDay();
    const basePrice = dayOfWeek >= 1 && dayOfWeek <= 4
      ? pkg.precio_lunes_jueves
      : pkg.precio_viernes_domingo;

    const isTuesdayDate = date.getDay() === 2;
    const priceInfo = `Precio: $${basePrice}${isTuesdayDate ? ' + $1,500 (Martes)' : ''}`;
    
    return priceInfo;
  }, [selectedPackage, packages]);

  const getDayClassName = useCallback((date) => {
    const today = startOfDay(new Date());
    const oneWeekFromNow = addDays(today, 7);
    const availability = getDateAvailability(date);
    const isWeekendDay = isWeekend(date);
    const isPastDate = isBefore(date, today);
    const isWithinFirstWeek = isBefore(date, oneWeekFromNow);
    const isToday = date.getTime() === today.getTime();
    let className = 'w-full h-full flex items-center justify-center hover:bg-opacity-80 transition-all duration-200 ';

    if (isToday) {
      className += 'bg-blue-100 text-blue-800 font-bold ring-2 ring-blue-400 ';
    } else if (isPastDate || isWithinFirstWeek) {
      className += 'bg-gray-100 text-gray-400 cursor-not-allowed ';
    } else if (availability === 'unavailable') {
      className += 'bg-red-100 text-red-800 cursor-not-allowed ';
    } else if (availability === 'partial') {
      className += 'bg-yellow-100 text-yellow-800 ';
    } else if (availability === 'available') {
      className += 'bg-green-100 text-green-800 ';
    }

    if (isWeekendDay && !isToday) {
      className += 'font-medium';
    }

    return className;
  }, [getDateAvailability]);

  const renderDateHeader = useCallback((date) => {
    const isWeekendDay = isWeekend(date);
    return (
      <div className={`text-center py-1 ${isWeekendDay ? 'bg-indigo-50' : ''}`}>
        {format(date, 'EEE', { locale: es })}
      </div>
    );
  }, []);

  const filterDate = useCallback((date) => {
    const today = startOfDay(new Date());
    const oneWeekFromNow = addDays(today, 7);
    const availability = getDateAvailability(date);
    return !isBefore(date, oneWeekFromNow) && availability !== 'unavailable';
  }, []);

  // Usar useWatch para observar el valor del horario
  const currentTimeSlot = useWatch({
    control,
    name: 'hora_inicio'
  });

  const handleDateChange = useCallback((date) => {
    if (!date) {
      setSelectedDate(null);
      setValue('fecha_reserva', null);
      setValue('packagePrice', 0, { shouldValidate: false });
      setValue('tuesdayFee', 0, { shouldValidate: false });
      setHasShownTuesdayModal(false);
      setValue('hora_inicio', null);
      return;
    }

    setSelectedDate(date);
    setValue('fecha_reserva', date);
    
    // Solo mantener el horario si existe y estÃ¡ disponible
    if (!currentTimeSlot || !isTimeSlotAvailable(date, currentTimeSlot.data)) {
      setValue('hora_inicio', null);
    }
  }, [setValue, currentTimeSlot, isTimeSlotAvailable]);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FiCalendar className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">Fecha y Hora</h3>
        </div>
        {selectedDate && (
          <span className="text-sm text-indigo-600 bg-indigo-50 px-4 py-2 rounded-full">
            {format(selectedDate, "EEEE d 'de' MMMM", { locale: es })}
          </span>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700">
            Fecha de la Reserva
          </label>
          <Controller
            name="fecha_reserva"
            control={control}
            rules={{ required: 'La fecha es requerida' }}
            render={({ field }) => (
              <div>
                <DatePicker
                  selected={field.value}
                  onChange={handleDateChange}
                  locale="es"
                  dateFormat="dd/MM/yyyy"
                  minDate={addDays(new Date(), 7)}
                  filterDate={filterDate}
                  renderDayContents={(day, date) => (
                    <div className="relative group">
                      <div 
                        className={getDayClassName(date)}
                        aria-label={
                          date.getTime() === startOfDay(new Date()).getTime() 
                            ? "DÃ­a actual" 
                            : getDatePriceInfo(date)
                        }
                      >
                        {day}
                      </div>
                      <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 hidden group-hover:block">
                        <div className="bg-gray-900 text-white text-xs rounded py-1 px-2 whitespace-nowrap">
                          {date.getTime() === startOfDay(new Date()).getTime() 
                            ? "DÃ­a actual" 
                            : getDatePriceInfo(date)}
                        </div>
                      </div>
                    </div>
                  )}
                  renderCustomHeader={({
                    date,
                    decreaseMonth,
                    increaseMonth,
                    prevMonthButtonDisabled,
                    nextMonthButtonDisabled
                  }) => (
                    <div className="flex items-center justify-between px-2 py-2">
                      <button
                        onClick={decreaseMonth}
                        disabled={prevMonthButtonDisabled}
                        type="button"
                        className="p-1 hover:bg-gray-100 rounded-full disabled:opacity-50"
                      >
                        â†
                      </button>
                      <div className="text-lg font-semibold">
                        {format(date, 'MMMM yyyy', { locale: es })}
                      </div>
                      <button
                        onClick={increaseMonth}
                        disabled={nextMonthButtonDisabled}
                        type="button"
                        className="p-1 hover:bg-gray-100 rounded-full disabled:opacity-50"
                      >
                        â†’
                      </button>
                    </div>
                  )}
                  renderWeekdayShort={(day) => renderDateHeader(new Date(day))}
                  className="w-full px-3 py-2 text-sm text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  calendarClassName="border border-gray-200 rounded-lg shadow-lg"
                />
                {errors.fecha_reserva && (
                  <p className="mt-1 text-xs text-red-500 flex items-center gap-1">
                    <FiAlertCircle className="w-3 h-3" />
                    {errors.fecha_reserva.message}
                  </p>
                )}
              </div>
            )}
          />
        </div>

        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700">
            Horario
          </label>
          <Controller
            name="hora_inicio"
            control={control}
            rules={{ required: 'El horario es requerido' }}
            render={({ field }) => (
              <div>
                <Select
                  {...field}
                  isDisabled={!selectedDate}
                  options={timeSlotOptions}
                  placeholder={
                    selectedDate
                      ? "Selecciona un horario"
                      : "Primero selecciona una fecha"
                  }
                  className="react-select-container"
                  classNamePrefix="react-select"
                  styles={customSelectStyles}
                  formatOptionLabel={formatOptionLabel}
                  noOptionsMessage={() => "No hay horarios disponibles"}
                />
                {errors.hora_inicio && (
                  <p className="mt-1 text-xs text-red-500 flex items-center gap-1">
                    <FiAlertCircle className="w-3 h-3" />
                    {errors.hora_inicio.message}
                  </p>
                )}
              </div>
            )}
          />
        </div>
      </div>

      <div className="bg-white p-4 rounded-lg border border-indigo-100 shadow-sm space-y-4">
        <div className="grid grid-cols-3 gap-2">
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-green-100"></div>
            <span>Ambos horarios disponibles</span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-yellow-100"></div>
            <span>Un horario disponible</span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-red-100"></div>
            <span>Sin disponibilidad</span>
          </div>
        </div>
        <div className="flex items-center gap-2 mb-3">
          <FiInfo className="text-indigo-600" />
          <h4 className="font-medium text-gray-900">InformaciÃ³n de Horarios</h4>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {Object.values(TIME_SLOTS).map((slot) => (
            <div
              key={`time-slot-info-${slot.value}`}
              className="flex items-center gap-3 bg-gray-50 p-3 rounded-md"
            >
              <span className="text-xl">{slot.icon}</span>
              <div>
                <div className="font-medium text-gray-900">{slot.label}</div>
                <div className="text-sm text-gray-600">
                  DuraciÃ³n: 5 horas
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {selectedDate && availableTimeSlots.length === 0 && (
        <div className="flex items-start gap-3 p-4 bg-amber-50 text-amber-700 rounded-lg border border-amber-200">
          <FiAlertCircle className="w-5 h-5 mt-0.5 flex-shrink-0" />
          <div>
            <p className="font-medium">No hay horarios disponibles</p>
            <p className="text-sm mt-1">
              Todos los horarios para esta fecha estÃ¡n reservados.
              Por favor, selecciona otra fecha.
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default DateTimeSection;
\n\n

=== ./reservas/pages/admin/reservationform-components/ExtrasSection.jsx ===
import React, { useCallback, useMemo } from 'react';
import { Controller, useFieldArray } from 'react-hook-form';
import { FiPlus, FiMinus, FiPackage, FiCheck, FiDollarSign, FiShoppingCart, FiInfo } from 'react-icons/fi';

const ExtrasSection = ({ extras, control, setValue }) => {
  const { fields, append, remove, update } = useFieldArray({
    control,
    name: 'extras',
  });

  const handleExtraToggle = useCallback((extra) => {
    console.log('[ExtrasSection] Toggling extra:', extra);
    const existingIndex = fields.findIndex((field) => field.id === extra.id);
    if (existingIndex === -1) {
      console.log('[ExtrasSection] Adding extra with quantity 1');
      append({ 
        id: extra.id, 
        cantidad: 1,
        nombre: extra.nombre,
        precio: extra.precio 
      });
    } else {
      console.log('[ExtrasSection] Removing extra');
      remove(existingIndex);
    }
  }, [fields, append, remove]);

  const handleQuantityChange = useCallback((index, newQuantity) => {
    console.log('[ExtrasSection] Changing quantity:', { index, newQuantity });
    const validQuantity = Math.max(1, parseInt(newQuantity) || 1);
    
    if (validQuantity < 1) {
      console.log('[ExtrasSection] Removing extra due to quantity < 1');
      remove(index);
    } else {
      const currentField = fields[index];
      const extraInfo = extras.find(e => e.id === currentField.id);
      
      if (extraInfo) {
        console.log('[ExtrasSection] Updating quantity to:', validQuantity);
        const updatedExtra = {
          id: currentField.id,
          cantidad: validQuantity,
          nombre: extraInfo.nombre,
          precio: extraInfo.precio
        };
        
        update(index, updatedExtra);
        setValue(`extras.${index}`, updatedExtra);
      }
    }
  }, [fields, remove, update, setValue, extras]);

  const selectedExtras = useMemo(() => 
    fields.map(field => ({
      ...field,
      extra: extras.find(e => e.id === field.id)
    })).filter(item => item.extra),
    [fields, extras]
  );

  const renderQuantityControls = useCallback((index, cantidad) => (
    <div className="flex items-center gap-2 bg-white p-1 rounded-lg border border-gray-200 shadow-sm">
      <button
        type="button"
        onClick={() => handleQuantityChange(index, Math.max(1, cantidad - 1))}
        className="p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Disminuir cantidad"
      >
        <FiMinus className="w-3 h-3" />
      </button>
      <Controller
        name={`extras.${index}.cantidad`}
        control={control}
        defaultValue={1}
        render={({ field }) => (
          <input
            type="number"
            {...field}
            value={field.value || 1}
            min="1"
            className="w-16 text-center border border-gray-300 rounded-md p-1 text-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            onChange={(e) => {
              const value = parseInt(e.target.value) || 1;
              field.onChange(value);
              handleQuantityChange(index, value);
            }}
            onBlur={(e) => {
              const value = parseInt(e.target.value) || 1;
              field.onChange(value);
              handleQuantityChange(index, value);
            }}
            aria-label="Cantidad"
          />
        )}
      />
      <button
        type="button"
        onClick={() => handleQuantityChange(index, cantidad + 1)}
        className="p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Aumentar cantidad"
      >
        <FiPlus className="w-3 h-3" />
      </button>
    </div>
  ), [control, handleQuantityChange]);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FiShoppingCart className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">Extras</h3>
        </div>
        {fields.length > 0 && (
          <span className="bg-indigo-100 text-indigo-800 text-sm font-medium px-3 py-1 rounded-full">
            {fields.length} seleccionado{fields.length !== 1 ? 's' : ''}
          </span>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {extras.map((extra) => {
          const existingExtra = fields.find((field) => field.id === extra.id);
          const isSelected = !!existingExtra;
          const extraIndex = fields.findIndex((field) => field.id === extra.id);

          return (
            <div
              key={extra.id}
              className={`group p-4 rounded-lg border transition-all duration-300 transform ${
                isSelected
                  ? 'border-indigo-500 bg-indigo-50 shadow-md scale-[1.02]'
                  : 'border-gray-200 hover:border-indigo-300 hover:shadow-sm hover:scale-[1.01]'
              }`}
            >
              <div className="flex justify-between items-start mb-3">
                <div className="flex-1">
                  <div className="flex items-center gap-2">
                    <h4 className="font-medium text-gray-900">{extra.nombre}</h4>
                    {isSelected && (
                      <span className="flex items-center gap-1 text-xs bg-indigo-500 text-white px-2 py-0.5 rounded-full">
                        <FiCheck className="w-3 h-3" />
                        Seleccionado
                      </span>
                    )}
                  </div>
                  {extra.descripcion && (
                    <p className="text-sm text-gray-600 mt-1 group-hover:text-gray-700">
                      {extra.descripcion}
                    </p>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => handleExtraToggle(extra)}
                  className={`p-2 rounded-full transition-all duration-200 ${
                    isSelected
                      ? 'bg-indigo-500 text-white hover:bg-indigo-600'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                  aria-label={isSelected ? 'Remover extra' : 'Agregar extra'}
                >
                  {isSelected ? <FiMinus /> : <FiPlus />}
                </button>
              </div>

              <div className="flex justify-between items-center mt-3">
                <div className="flex items-center gap-2">
                  <FiDollarSign className="text-indigo-600 w-4 h-4" />
                  <span className="text-lg font-semibold text-indigo-600">
                    ${Number(extra.precio).toFixed(2)}
                  </span>
                </div>

                {isSelected && renderQuantityControls(extraIndex, existingExtra.cantidad)}
              </div>
            </div>
          );
        })}
      </div>

      {extras.length === 0 && (
        <div className="flex items-center justify-center gap-2 py-8 text-gray-500 bg-gray-50 rounded-lg border border-dashed border-gray-300">
          <FiInfo className="w-5 h-5" />
          <span>No hay extras disponibles</span>
        </div>
      )}

      {selectedExtras.length > 0 && (
        <div className="mt-6 p-4 bg-white rounded-lg border border-indigo-200 shadow-sm">
          <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
            <FiPackage className="text-indigo-600" />
            Extras seleccionados
          </h4>
          <div className="space-y-2">
            {selectedExtras.map(({ id, cantidad, extra }) => (
              <div
                key={id}
                className="flex justify-between items-center text-sm bg-gray-50 p-2.5 rounded-md transition-colors duration-200 hover:bg-gray-100"
              >
                <div className="flex items-center gap-2">
                  <FiCheck className="text-indigo-500" />
                  <span className="font-medium">{extra.nombre}</span>
                  <span className="text-gray-500">
                    (x{cantidad})
                  </span>
                </div>
                <span className="font-medium text-indigo-600">
                  ${(parseFloat(extra.precio) * cantidad).toFixed(2)}
                </span>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ExtrasSection;\n\n

=== ./reservas/pages/admin/reservationform-components/FoodOptionsSection.jsx ===
import React, { useCallback, useMemo } from 'react';
import { Controller } from 'react-hook-form';
import { FiCoffee, FiDollarSign, FiUsers, FiClock, FiAlertCircle, FiInfo } from 'react-icons/fi';
import Select from 'react-select';

const FoodOptionsSection = ({ control, errors, foodOptions }) => {
  const formatFoodOption = useCallback((option) => ({
    value: option.id,
    label: `${option.nombre} - $${option.precio_extra}`,
    data: option,
  }), []);

  const foodOptionsList = useMemo(() => 
    foodOptions.map(formatFoodOption),
    [foodOptions, formatFoodOption]
  );

  const customSelectStyles = {
    control: (base, state) => ({
      ...base,
      borderColor: errors.id_opcion_alimento ? '#ef4444' : state.isFocused ? '#6366f1' : '#e5e7eb',
      boxShadow: state.isFocused ? '0 0 0 1px #6366f1' : 'none',
      transition: 'all 0.2s ease',
      '&:hover': {
        borderColor: state.isFocused ? '#6366f1' : '#e5e7eb'
      }
    }),
    option: (base, state) => ({
      ...base,
      backgroundColor: state.isSelected ? '#6366f1' : state.isFocused ? '#e0e7ff' : 'white',
      color: state.isSelected ? 'white' : '#374151',
      transition: 'all 0.2s ease',
      '&:active': {
        backgroundColor: '#6366f1'
      }
    }),
    menu: (base) => ({
      ...base,
      zIndex: 50
    })
  };

  const renderOptionDetails = useCallback((option) => {
    if (!option) return null;

    const details = [
      { 
        icon: FiUsers,
        title: 'Platillo Adulto',
        value: option.platillo_adulto,
        price: option.precio_adulto,
        highlight: true
      },
      { 
        icon: FiUsers,
        title: 'Platillo NiÃ±o',
        value: option.platillo_nino,
        price: option.precio_nino,
        highlight: true
      },
      { 
        icon: FiDollarSign,
        title: 'Precio Extra',
        value: `$${option.precio_extra}`,
        isPrice: true
      },
      { 
        icon: FiClock,
        title: 'Turno',
        value: option.turno.charAt(0).toUpperCase() + option.turno.slice(1)
      }
    ];

    return (
      <div className="mt-4 bg-white p-4 rounded-lg border border-indigo-100 shadow-sm">
        <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
          <FiInfo className="text-indigo-600" />
          Detalles de la opciÃ³n seleccionada
        </h4>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {details.map(({ icon: Icon, title, value, price, highlight, isPrice }) => (
            <div
              key={title}
              className={`flex items-start gap-3 bg-gray-50 p-3 rounded-md ${
                highlight ? 'col-span-full' : ''
              }`}
            >
              <Icon className={`w-5 h-5 mt-0.5 ${isPrice ? 'text-indigo-600' : 'text-gray-500'}`} />
              <div className="flex-1">
                <span className="text-sm text-gray-600">{title}:</span>
                <div className="font-medium text-gray-900">
                  {value}
                  {price && (
                    <span className="ml-2 text-indigo-600">
                      (${price})
                    </span>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>

        {option.opcion_papas && (
          <div className="mt-4 bg-green-50 p-3 rounded-md border border-green-100">
            <div className="flex items-center gap-2">
              <FiInfo className="text-green-600" />
              <div>
                <span className="font-medium text-green-800">OpciÃ³n de Papas Disponible</span>
                <span className="ml-2 text-green-600">+${option.precio_papas}</span>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  }, []);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FiCoffee className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">OpciÃ³n de Alimentos</h3>
        </div>
        {foodOptionsList.length > 0 && (
          <span className="text-sm text-indigo-600 bg-indigo-50 px-4 py-2 rounded-full">
            {foodOptionsList.length} opciones disponibles
          </span>
        )}
      </div>

      <Controller
        name="id_opcion_alimento"
        control={control}
        rules={{ required: 'Debes seleccionar una opciÃ³n de alimentos' }}
        render={({ field }) => (
          <div>
            <Select
              {...field}
              isClearable
              placeholder="Selecciona una opciÃ³n de alimentos"
              options={foodOptionsList}
              className="react-select-container"
              classNamePrefix="react-select"
              styles={customSelectStyles}
              noOptionsMessage={() => "No hay opciones disponibles"}
            />
            {errors.id_opcion_alimento && (
              <p className="mt-1 text-xs text-red-500 flex items-center gap-1">
                <FiAlertCircle className="w-3 h-3" />
                {errors.id_opcion_alimento.message}
              </p>
            )}
          </div>
        )}
      />

      <Controller
        name="id_opcion_alimento"
        control={control}
        render={({ field }) => renderOptionDetails(field.value?.data)}
      />

      {foodOptionsList.length === 0 && (
        <div className="flex items-center justify-center gap-2 py-8 text-gray-500 bg-gray-50 rounded-lg border border-dashed border-gray-300">
          <FiInfo className="w-5 h-5" />
          <span>No hay opciones de alimentos disponibles</span>
        </div>
      )}
    </div>
  );
};

export default FoodOptionsSection;\n\n

=== ./reservas/pages/admin/reservationform-components/MamparaSection.jsx ===
import React, { useCallback, useEffect, useMemo } from 'react';
import { Controller, useWatch } from 'react-hook-form';
import { FiLayout, FiAlertCircle, FiImage, FiDollarSign, FiLayers } from 'react-icons/fi';
import Select from 'react-select';

const MamparaSection = ({ control, errors, filteredMamparas, setValue, getValues }) => {
  // Usar useWatch para observar los cambios en los campos relevantes
  const selectedTheme = useWatch({
    control,
    name: 'id_tematica',
  });

  const selectedMampara = useWatch({
    control,
    name: 'id_mampara',
  });

  const formatMamparaOption = useCallback((mampara) => {
    console.log('[MamparaSection] Formatting mampara option:', mampara);
    return {
      value: mampara.id,
      label: `${mampara.piezas} pieza(s) - ${new Intl.NumberFormat('es-MX', {
        style: 'currency',
        currency: 'MXN'
      }).format(parseFloat(mampara.precio) || 0)}`,
      piezas: mampara.piezas,
      precio: mampara.precio,
      foto: mampara.foto,
    };
  }, []);

  const isThemeSelected = useMemo(() => {
    const hasTheme = Boolean(selectedTheme?.value);
    console.log('[MamparaSection] Theme selected:', hasTheme, selectedTheme);
    return hasTheme;
  }, [selectedTheme]);

  const mamparaOptions = useMemo(() => {
    const options = filteredMamparas.map(formatMamparaOption);
    console.log('[MamparaSection] Available mampara options:', options);
    return options;
  }, [filteredMamparas, formatMamparaOption]);

  // Efecto para validar la mampara cuando cambia la temÃ¡tica
  useEffect(() => {
    console.log('[MamparaSection] Theme changed:', selectedTheme);
    const currentMampara = getValues('id_mampara');
    
    // Solo validar si hay una mampara seleccionada
    if (currentMampara) {
      // Verificar si la mampara actual es vÃ¡lida para la nueva temÃ¡tica
      const isMamparaValid = filteredMamparas.some(
        m => m.id === currentMampara.value
      );
      
      if (!isMamparaValid) {
        console.log('[MamparaSection] Current mampara is not valid for new theme');
        setValue('id_mampara', null);
      } else {
        console.log('[MamparaSection] Current mampara is valid for new theme');
      }
    }
  }, [selectedTheme, filteredMamparas, setValue, getValues]);

  // Efecto para notificar cambios en la mampara
  useEffect(() => {
    if (selectedMampara) {
      console.log('[MamparaSection] Mampara changed:', selectedMampara);
    }
  }, [selectedMampara]);

  const customSelectStyles = {
    control: (base, state) => ({
      ...base,
      borderColor: errors.id_mampara ? '#ef4444' : state.isFocused ? '#6366f1' : '#e5e7eb',
      boxShadow: state.isFocused ? '0 0 0 1px #6366f1' : 'none',
      backgroundColor: !isThemeSelected ? '#f9fafb' : 'white',
      transition: 'all 0.2s ease',
      '&:hover': {
        borderColor: state.isFocused ? '#6366f1' : '#e5e7eb'
      }
    }),
    option: (base, state) => ({
      ...base,
      backgroundColor: state.isSelected ? '#6366f1' : state.isFocused ? '#e0e7ff' : 'white',
      color: state.isSelected ? 'white' : '#374151',
      transition: 'all 0.2s ease',
      '&:active': {
        backgroundColor: '#6366f1'
      }
    }),
    placeholder: (base) => ({
      ...base,
      color: !isThemeSelected ? '#9ca3af' : '#6b7280'
    }),
    menu: (base) => ({
      ...base,
      zIndex: 50
    })
  };

  const renderMamparaDetails = useCallback((mampara) => {
    if (!mampara) return null;
    console.log('[MamparaSection] Rendering details for mampara:', mampara);

    const details = [
      { icon: FiLayers, label: 'Piezas', value: mampara.piezas },
      { 
        icon: FiDollarSign, 
        label: 'Precio', 
        value: new Intl.NumberFormat('es-MX', {
          style: 'currency',
          currency: 'MXN'
        }).format(parseFloat(mampara.precio) || 0),
        highlight: true 
      }
    ];

    return (
      <div className="mt-4 bg-white p-4 rounded-lg border border-indigo-100 shadow-sm">
        <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
          <FiLayout className="text-indigo-600" />
          Detalles de la mampara
        </h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          {details.map(({ icon: Icon, label, value, highlight }) => (
            <div key={label} className="flex items-center gap-3 bg-gray-50 p-3 rounded-md">
              <Icon className={`w-5 h-5 ${highlight ? 'text-indigo-600' : 'text-gray-500'}`} />
              <div>
                <span className="text-sm text-gray-600">{label}:</span>
                <span className={`ml-2 font-medium ${highlight ? 'text-indigo-600' : 'text-gray-900'}`}>
                  {value}
                </span>
              </div>
            </div>
          ))}
        </div>
        {mampara.foto && (
          <div className="mt-4">
            <div className="flex items-center gap-2 text-sm text-gray-600 mb-2">
              <FiImage className="text-indigo-600" />
              <span>Imagen de referencia</span>
            </div>
            <div className="relative group">
              <img
                src={mampara.foto}
                alt={`Mampara de ${mampara.piezas} piezas`}
                className="w-full max-w-md rounded-lg shadow-sm group-hover:shadow-md transition-shadow duration-200"
              />
              <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-opacity duration-200 rounded-lg"></div>
            </div>
          </div>
        )}
      </div>
    );
  }, []);

  const handleMamparaChange = useCallback((selectedOption, onChange) => {
    console.log('[MamparaSection] Mampara selection changed:', selectedOption);
    onChange(selectedOption);
    // Forzar actualizaciÃ³n del total
    setValue('total', null, { shouldValidate: true });
  }, [setValue]);

  return (
    <div className="space-y-4">
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3 mb-4">
        <div className="flex items-center gap-2">
          <FiLayout className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">Mampara</h3>
        </div>
        {isThemeSelected && selectedTheme?.label && (
          <div className="flex items-center gap-2 text-sm text-indigo-600 bg-indigo-50 px-4 py-2 rounded-full">
            <span className="font-medium">TemÃ¡tica:</span>
            <span>{selectedTheme.label}</span>
          </div>
        )}
      </div>

      <div className={`transition-all duration-300 ${!isThemeSelected ? 'opacity-50' : ''}`}>
        <Controller
          name="id_mampara"
          control={control}
          render={({ field }) => (
            <div>
              <Select
                {...field}
                isClearable
                isDisabled={!isThemeSelected}
                placeholder={
                  isThemeSelected
                    ? "Selecciona una mampara"
                    : "Primero selecciona una temÃ¡tica"
                }
                options={mamparaOptions}
                className="react-select-container"
                classNamePrefix="react-select"
                styles={customSelectStyles}
                noOptionsMessage={() => "No hay mamparas disponibles"}
                onChange={(selectedOption) => handleMamparaChange(selectedOption, field.onChange)}
                onBlur={() => {
                  console.log('[MamparaSection] Mampara selection blurred');
                  field.onBlur();
                }}
              />
              {errors.id_mampara && (
                <p className="mt-1 text-xs text-red-500 flex items-center gap-1">
                  <FiAlertCircle className="w-3 h-3" />
                  {errors.id_mampara.message}
                </p>
              )}
            </div>
          )}
        />
      </div>

      <Controller
        name="id_mampara"
        control={control}
        render={({ field }) => renderMamparaDetails(field.value)}
      />

      {!isThemeSelected && (
        <div className="flex items-start gap-3 p-4 bg-amber-50 text-amber-700 rounded-lg border border-amber-200">
          <FiAlertCircle className="w-5 h-5 mt-0.5 flex-shrink-0" />
          <div>
            <p className="font-medium">SelecciÃ³n de temÃ¡tica requerida</p>
            <p className="text-sm mt-1">
              Para ver las mamparas disponibles, primero debes seleccionar una temÃ¡tica en la secciÃ³n anterior.
            </p>
          </div>
        </div>
      )}

      {isThemeSelected && mamparaOptions.length === 0 && (
        <div className="flex items-start gap-3 p-4 bg-amber-50 text-amber-700 rounded-lg border border-amber-200">
          <FiAlertCircle className="w-5 h-5 mt-0.5 flex-shrink-0" />
          <div>
            <p className="font-medium">No hay mamparas disponibles</p>
            <p className="text-sm mt-1">
              No se encontraron mamparas disponibles para la temÃ¡tica seleccionada.
              Por favor, selecciona otra temÃ¡tica o contacta al administrador.
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default MamparaSection;\n\n

=== ./reservas/pages/admin/reservationform-components/PackageSection.jsx ===
import React, { useCallback, useMemo } from 'react';
import { Controller } from 'react-hook-form';
import { FiPackage, FiCalendar, FiDollarSign, FiAlertCircle, FiCheck, FiInfo } from 'react-icons/fi';

const PackageSection = ({ control, packages, errors }) => {
  const renderPriceInfo = useCallback((pkg) => (
    <div className="grid grid-cols-2 gap-3 mt-3">
      <div className="flex flex-col bg-gray-50 p-2 rounded-md">
        <div className="flex items-center gap-1 text-sm text-gray-600">
          <FiCalendar className="w-4 h-4" />
          <span>L-J</span>
        </div>
        <div className="flex items-center gap-1 mt-1">
          <FiDollarSign className="w-4 h-4 text-indigo-600" />
          <span className="text-lg font-semibold text-indigo-600">
            {pkg.precio_lunes_jueves}
          </span>
        </div>
      </div>
      <div className="flex flex-col bg-gray-50 p-2 rounded-md">
        <div className="flex items-center gap-1 text-sm text-gray-600">
          <FiCalendar className="w-4 h-4" />
          <span>V-D</span>
        </div>
        <div className="flex items-center gap-1 mt-1">
          <FiDollarSign className="w-4 h-4 text-indigo-600" />
          <span className="text-lg font-semibold text-indigo-600">
            {pkg.precio_viernes_domingo}
          </span>
        </div>
      </div>
    </div>
  ), []);

  const packagesList = useMemo(() => 
    packages.filter(pkg => pkg.activo),
    [packages]
  );

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FiPackage className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">SelecciÃ³n de Paquete</h3>
        </div>
        {packagesList.length > 0 && (
          <span className="text-sm text-indigo-600 bg-indigo-50 px-4 py-2 rounded-full">
            {packagesList.length} paquetes disponibles
          </span>
        )}
      </div>

      <Controller
        name="id_paquete"
        control={control}
        rules={{ required: 'Debes seleccionar un paquete' }}
        render={({ field }) => (
          <div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {packagesList.map((pkg) => {
                const isSelected = field.value === pkg.id;
                return (
                  <div
                    key={pkg.id}
                    className={`relative p-4 rounded-lg border transition-all duration-300 transform cursor-pointer ${
                      isSelected
                        ? 'border-indigo-500 bg-indigo-50 shadow-md scale-[1.02]'
                        : 'border-gray-200 hover:border-indigo-300 hover:shadow-sm hover:scale-[1.01]'
                    }`}
                    onClick={() => field.onChange(pkg.id)}
                    role="button"
                    tabIndex={0}
                    onKeyPress={(e) => {
                      if (e.key === 'Enter' || e.key === ' ') {
                        field.onChange(pkg.id);
                      }
                    }}
                    aria-pressed={isSelected}
                    aria-label={`Seleccionar paquete ${pkg.nombre}`}
                  >
                    <div className="flex flex-col h-full">
                      <div className="flex-1">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="text-lg font-medium text-gray-900">
                            {pkg.nombre}
                          </h4>
                          {isSelected && (
                            <span className="flex items-center gap-1 text-xs bg-indigo-500 text-white px-2 py-0.5 rounded-full">
                              <FiCheck className="w-3 h-3" />
                              Seleccionado
                            </span>
                          )}
                        </div>
                        <p className="text-sm text-gray-600 mb-4">
                          {pkg.descripcion}
                        </p>
                      </div>
                      {renderPriceInfo(pkg)}
                    </div>

                    {pkg.caracteristicas && (
                      <div className="mt-4 pt-4 border-t border-gray-200">
                        <div className="flex items-center gap-2 mb-2">
                          <FiInfo className="text-indigo-600 w-4 h-4" />
                          <span className="text-sm font-medium text-gray-700">
                            CaracterÃ­sticas
                          </span>
                        </div>
                        <ul className="space-y-1">
                          {pkg.caracteristicas.split(',').map((caracteristica, index) => (
                            <li
                              key={index}
                              className="flex items-center gap-2 text-sm text-gray-600"
                            >
                              <FiCheck className="w-3 h-3 text-green-500" />
                              {caracteristica.trim()}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
            {errors.id_paquete && (
              <p className="mt-2 text-sm text-red-500 flex items-center gap-1">
                <FiAlertCircle className="w-4 h-4" />
                {errors.id_paquete.message}
              </p>
            )}
          </div>
        )}
      />

      {packagesList.length === 0 && (
        <div className="flex items-center justify-center gap-2 py-8 text-gray-500 bg-gray-50 rounded-lg border border-dashed border-gray-300">
          <FiInfo className="w-5 h-5" />
          <span>No hay paquetes disponibles</span>
        </div>
      )}
    </div>
  );
};

export default PackageSection;\n\n

=== ./reservas/pages/admin/reservationform-components/StatusSection.jsx ===
import React from 'react';

const StatusSection = ({ register }) => {
  return (
    <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Estado Activo
        </label>
        <div className="flex items-center">
          <input
            type="checkbox"
            {...register('activo')}
            className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
          />
          <span className="ml-2 text-sm text-gray-600">
            ReservaciÃ³n activa
          </span>
        </div>
      </div>
    </div>
  );
};

export default StatusSection;\n\n

=== ./reservas/pages/admin/reservationform-components/ThemeSection.jsx ===
import React, { useCallback, useMemo } from 'react';
import { Controller } from 'react-hook-form';
import { FiImage, FiAlertCircle, FiInfo, FiTag, FiFileText } from 'react-icons/fi';
import Select from 'react-select';

const ThemeSection = ({ control, errors, tematicas, setValue }) => {
  const formatThemeOption = useCallback((tematica) => ({
    value: tematica.id,
    label: tematica.nombre,
    descripcion: tematica.descripcion || '',
    foto: tematica.foto || null,
    key: `theme-${tematica.id}`
  }), []);

  const formatOptionLabel = useCallback(({ label, value }) => (
    <div key={`theme-label-${value}`} className="flex items-center gap-2">
      <FiImage className="w-4 h-4 text-gray-500" />
      <span>{label}</span>
    </div>
  ), []);

  const themeOptions = useMemo(() => {
    const options = tematicas
      .filter(tematica => tematica.activo)
      .map(formatThemeOption);
    console.log('[ThemeSection] Available theme options:', options);
    return options;
  }, [tematicas, formatThemeOption]);

  const customSelectStyles = {
    control: (base, state) => ({
      ...base,
      borderColor: errors.id_tematica ? '#ef4444' : state.isFocused ? '#6366f1' : '#e5e7eb',
      boxShadow: state.isFocused ? '0 0 0 1px #6366f1' : 'none',
      transition: 'all 0.2s ease',
      '&:hover': {
        borderColor: state.isFocused ? '#6366f1' : '#e5e7eb'
      }
    }),
    option: (base, state) => ({
      ...base,
      backgroundColor: state.isSelected ? '#6366f1' : state.isFocused ? '#e0e7ff' : 'white',
      color: state.isSelected ? 'white' : '#374151',
      transition: 'all 0.2s ease',
      '&:active': {
        backgroundColor: '#6366f1'
      }
    }),
    menu: (base) => ({
      ...base,
      zIndex: 50
    })
  };

  const renderThemeDetails = useCallback((theme) => {
    if (!theme) return null;
    console.log('[ThemeSection] Rendering details for theme:', theme);

    const details = [
      { icon: FiTag, label: 'Nombre', value: theme.label },
      ...(theme.descripcion ? [{ 
        icon: FiFileText, 
        label: 'DescripciÃ³n', 
        value: theme.descripcion,
        fullWidth: true 
      }] : [])
    ];

    return (
      <div className="mt-4 bg-white p-4 rounded-lg border border-indigo-100 shadow-sm">
        <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
          <FiInfo className="text-indigo-600" />
          Detalles de la temÃ¡tica
        </h4>
        <div className="grid grid-cols-1 gap-3">
          {details.map(({ icon: Icon, label, value, fullWidth }) => (
            <div 
              key={`theme-detail-${label}-${value}`}
              className={`flex items-start gap-3 bg-gray-50 p-3 rounded-md ${
                fullWidth ? 'col-span-full' : ''
              }`}
            >
              <Icon className="w-5 h-5 mt-0.5 text-gray-500" />
              <div className="flex-1">
                <span className="text-sm text-gray-600">{label}:</span>
                <div className={`${fullWidth ? 'mt-1' : 'ml-1 inline'} font-medium text-gray-900`}>
                  {value}
                </div>
              </div>
            </div>
          ))}
        </div>
        {theme.foto && (
          <div className="mt-4">
            <div className="flex items-center gap-2 text-sm text-gray-600 mb-2">
              <FiImage className="text-indigo-600" />
              <span>Imagen de referencia</span>
            </div>
            <div className="relative group">
              <img
                src={theme.foto}
                alt={theme.label}
                className="w-full max-w-md rounded-lg shadow-sm group-hover:shadow-md transition-shadow duration-200"
              />
              <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-opacity duration-200 rounded-lg"></div>
            </div>
          </div>
        )}
      </div>
    );
  }, []);

  const handleThemeChange = useCallback((selectedOption, onChange) => {
    console.log('[ThemeSection] Theme selection changed:', selectedOption);
    const currentTheme = control._formValues.id_tematica;
    
    // Solo limpiar la mampara si realmente cambia la temÃ¡tica
    if (!selectedOption || !currentTheme || selectedOption.value !== currentTheme.value) {
      console.log('[ThemeSection] Clearing mampara due to theme change');
      setValue('id_mampara', null);
    } else {
      console.log('[ThemeSection] Preserving mampara as theme remains the same');
    }
    
    onChange(selectedOption);
  }, [setValue, control._formValues.id_tematica]);

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <FiImage className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">TemÃ¡tica</h3>
        </div>
        {themeOptions.length > 0 && (
          <span className="text-sm text-indigo-600 bg-indigo-50 px-4 py-2 rounded-full">
            {themeOptions.length} temÃ¡ticas disponibles
          </span>
        )}
      </div>

      <Controller
        name="id_tematica"
        control={control}
        rules={{ required: 'Debes seleccionar una temÃ¡tica' }}
        render={({ field }) => (
          <div>
            <Select
              {...field}
              isClearable
              placeholder="Selecciona una temÃ¡tica"
              options={themeOptions}
              className="react-select-container"
              classNamePrefix="react-select"
              styles={customSelectStyles}
              formatOptionLabel={formatOptionLabel}
              noOptionsMessage={() => "No hay temÃ¡ticas disponibles"}
              onChange={(selectedOption) => handleThemeChange(selectedOption, field.onChange)}
              onBlur={() => {
                console.log('[ThemeSection] Theme selection blurred');
                field.onBlur();
              }}
            />
            {errors.id_tematica && (
              <p className="mt-1 text-xs text-red-500 flex items-center gap-1">
                <FiAlertCircle className="w-3 h-3" />
                {errors.id_tematica.message}
              </p>
            )}
          </div>
        )}
      />

      {/* Use the current form value directly */}
      {renderThemeDetails(control._formValues.id_tematica)}

      {themeOptions.length === 0 && (
        <div className="flex items-start gap-3 p-4 bg-amber-50 text-amber-700 rounded-lg border border-amber-200">
          <FiAlertCircle className="w-5 h-5 mt-0.5 flex-shrink-0" />
          <div>
            <p className="font-medium">No hay temÃ¡ticas disponibles</p>
            <p className="text-sm mt-1">
              No se encontraron temÃ¡ticas activas en el sistema.
              Por favor, contacta al administrador para mÃ¡s informaciÃ³n.
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default ThemeSection;\n\n

=== ./reservas/pages/admin/reservationform-components/UserSection.jsx ===
import React from 'react';

const UserSection = ({ register, errors, users, addLog }) => {
  return (
    <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
      <label className="block text-sm font-medium text-gray-700 mb-2">
        Usuario
      </label>
      <div className="relative">
        <select
          {...register('id_usuario', {
            required: 'Este campo es requerido',
          })}
          className="w-full px-3 py-2 text-sm text-gray-700 bg-white border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
          onChange={(e) => {
            register('id_usuario').onChange(e);
            addLog('Usuario seleccionado');
          }}
        >
          <option value="">Seleccionar usuario</option>
          {users.map((user) => (
            <option key={user.id} value={user.id}>
              {user.nombre}
            </option>
          ))}
        </select>
        {errors.id_usuario && (
          <p className="mt-1 text-xs text-red-500">
            {errors.id_usuario.message}
          </p>
        )}
      </div>
    </div>
  );
};

export default UserSection;\n\n

=== ./reservas/pages/customer/Appointment.jsx ===
import React from 'react'
import { useState, useEffect, useLayoutEffect, useRef } from 'react'
import { Link } from 'react-router-dom'
import { motion, AnimatePresence } from 'framer-motion'
import {
  FiClock,
  FiImage,
  FiCoffee,
  FiMusic,
  FiUsers,
  FiArrowRight,
  FiCheck,
  FiX,
  FiPhone,
  FiMessageSquare,
  FiPlus,
  FiMinus,
  FiMenu,
  FiCalendar,
  FiPackage,
  FiMail,
  FiLogIn,
  FiUserPlus
} from 'react-icons/fi'
import { gsap } from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'
import Logo from '@shared/src/img/logo.webp'

gsap.registerPlugin(ScrollTrigger)

// Componente NavigationBar
const NavigationBar = ({ toggleMenu, isMenuOpen }) => (
  <nav className='fixed top-0 left-0 right-0 z-50 bg-white/5 backdrop-blur-md'>
    <div className='container mx-auto px-6 py-4'>
      <div className='flex justify-between items-center'>
        <Link to='/'>
          <motion.img
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            src={Logo}
            alt='Tramboory'
            className='h-16 w-auto transition-transform duration-300 hover:scale-110'
          />
        </Link>
        <motion.button
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5 }}
          onClick={toggleMenu}
          className='text-white p-2 rounded-full hover:bg-white/10 transition-colors duration-300'
        >
          {isMenuOpen ? <FiX size={24} /> : <FiMenu size={24} />}
        </motion.button>
      </div>
    </div>
  </nav>
)

// Componente FullscreenMenu
const FullscreenMenu = ({
  isOpen,
  menuRef,
  menuBackgroundRef,
  menuItems,
  onMenuItemClick
}) => (
  <AnimatePresence>
    {isOpen && (
      <motion.div
        ref={menuRef}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className='fixed inset-0 z-40 flex items-center justify-center'
      >
        <motion.div
          ref={menuBackgroundRef}
          className='absolute inset-0 bg-gradient-to-br from-purple-900/95 to-indigo-900/95 backdrop-blur-lg'
          initial={{ scale: 0, borderRadius: '100%' }}
          animate={{ scale: 1, borderRadius: '0%' }}
          exit={{ scale: 0, borderRadius: '100%' }}
          transition={{ duration: 0.5, ease: 'easeInOut' }}
        />
        <ul className='relative z-50 space-y-8'>
          {menuItems.map((item, index) => (
            <motion.li
              key={item.text}
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 50 }}
              transition={{ delay: index * 0.1 }}
            >
              <Link
                to={item.link}
                className='group flex items-center justify-center space-x-4 text-white text-2xl
                  hover:text-yellow-300 transition-all duration-300'
                onClick={() => onMenuItemClick()}
              >
                <span
                  className='text-3xl text-yellow-300 group-hover:text-white
                  transition-colors duration-300'
                >
                  {item.icon}
                </span>
                <span className='relative'>
                  {item.text}
                  <span
                    className='absolute -bottom-1 left-0 w-0 h-0.5 bg-yellow-300
                    transition-all duration-300 group-hover:w-full'
                  />
                </span>
              </Link>
            </motion.li>
          ))}
        </ul>
      </motion.div>
    )}
  </AnimatePresence>
)

// Componente de fondo animado
const AnimatedBackground = () => (
  <div className='fixed inset-0 z-0 overflow-hidden'>
    <motion.div
      className='absolute inset-0'
      style={{
        background: `
              radial-gradient(circle at 20% 30%, rgba(147, 51, 234, 0.1) 0%, transparent 50%),
              radial-gradient(circle at 80% 70%, rgba(79, 70, 229, 0.1) 0%, transparent 50%),
              radial-gradient(circle at 50% 50%, rgba(219, 39, 119, 0.05) 0%, transparent 50%)
            `
      }}
    >
      {[...Array(5)].map((_, i) => (
        <motion.div
          key={i}
          className='absolute rounded-full mix-blend-multiply filter blur-xl'
          animate={{
            x: [0, 100, 0],
            y: [0, 50, 0],
            scale: [1, 1.2, 1]
          }}
          transition={{
            duration: 20 + i * 2,
            repeat: Infinity,
            ease: 'linear'
          }}
          style={{
            width: `${200 + i * 100}px`,
            height: `${200 + i * 100}px`,
            left: `${20 + i * 15}%`,
            top: `${20 + i * 10}%`,
            backgroundColor: `hsla(${220 + i * 40}, 70%, 80%, 0.05)`
          }}
        />
      ))}
    </motion.div>
  </div>
)

const ServiceCard = ({
  title,
  description,
  items,
  price,
  recommended,
  type
}) => {
  const [expandedCategory, setExpandedCategory] = useState(null)
  const [isHovered, setIsHovered] = useState(false)

  const cardVariants = {
    hover: {
      scale: 1.02,
      y: -5,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 20
      }
    }
  }

  const categoryVariants = {
    collapsed: { height: 0, opacity: 0 },
    expanded: { height: 'auto', opacity: 1 }
  }

  return (
    <motion.div
      variants={cardVariants}
      whileHover='hover'
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
      className={`bg-white/90 backdrop-blur-lg rounded-2xl shadow-xl p-8 relative cursor-pointer
            ${
              recommended
                ? 'border-4 border-indigo-500'
                : 'border border-gray-200'
            }
            transform transition-all duration-300`}
    >
      {recommended && (
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className='absolute -top-4 left-1/2 transform -translate-x-1/2'
        >
          <span className='bg-indigo-500 text-white px-6 py-2 rounded-full text-sm font-semibold shadow-lg'>
            Paquete Completo
          </span>
        </motion.div>
      )}

      {/* Efecto de brillo en hover */}
      <div
        className={`absolute inset-0 rounded-2xl transition-opacity duration-300 pointer-events-none
              ${isHovered ? 'opacity-100' : 'opacity-0'}
              bg-gradient-to-r from-transparent via-white/10 to-transparent
              animate-shine`}
      />

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className='mb-6'
      >
        <span
          className={`text-sm font-semibold ${
            type === 'normal' ? 'text-indigo-600' : 'text-purple-600'
          }`}
        >
          {type === 'normal' ? 'Todo Incluido' : 'Renta de Espacio'}
        </span>
        <h3 className='text-2xl font-bold text-gray-900 mt-2'>{title}</h3>
        <p className='text-gray-600 mt-2'>{description}</p>

        <div className='mt-4 text-3xl font-bold text-gray-900'>
          ${price}
          <span className='text-base font-normal text-gray-500'>/evento</span>
        </div>
      </motion.div>

      <div className='space-y-4 mb-8'>
        {Object.entries(items).map(([category, categoryItems], index) => (
          <motion.div
            key={category}
            className='rounded-lg overflow-hidden'
            initial={false}
            animate={expandedCategory === category ? 'expanded' : 'collapsed'}
          >
            <motion.button
              onClick={() =>
                setExpandedCategory(
                  expandedCategory === category ? null : category
                )
              }
              className={`w-full text-left p-4 flex items-center justify-between
                    rounded-lg transition-colors duration-300
                    ${
                      expandedCategory === category
                        ? 'bg-indigo-50 text-indigo-700'
                        : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
                    }`}
            >
              <span className='font-semibold'>{category}</span>
              <motion.div
                animate={{ rotate: expandedCategory === category ? 180 : 0 }}
                transition={{ duration: 0.3 }}
              >
                {expandedCategory === category ? <FiMinus /> : <FiPlus />}
              </motion.div>
            </motion.button>

            <AnimatePresence>
              {expandedCategory === category && (
                <motion.div
                  initial='collapsed'
                  animate='expanded'
                  exit='collapsed'
                  variants={categoryVariants}
                  transition={{ duration: 0.3 }}
                  className='px-4 py-2 bg-white/50'
                >
                  {categoryItems.map((item, itemIndex) => (
                    <motion.div
                      key={itemIndex}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: itemIndex * 0.1 }}
                      className='flex items-start py-2'
                    >
                      {item.included ? (
                        <FiCheck className='text-green-500 mt-1 mr-3 flex-shrink-0 w-5 h-5' />
                      ) : (
                        <FiX className='text-red-500 mt-1 mr-3 flex-shrink-0 w-5 h-5' />
                      )}
                      <div>
                        <p
                          className={`font-medium ${
                            item.included ? 'text-gray-700' : 'text-gray-400'
                          }`}
                        >
                          {item.title}
                        </p>
                        {item.description && (
                          <p
                            className={`text-sm ${
                              item.included ? 'text-gray-600' : 'text-gray-400'
                            }`}
                          >
                            {item.description}
                          </p>
                        )}
                      </div>
                    </motion.div>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        ))}
      </div>

      <motion.div className='space-y-4' whileHover={{ scale: 1.02 }}>
        <Link
          to='/signin'
          className={`block w-full py-3 px-6 text-center rounded-lg font-semibold 
                transition-all duration-300 transform hover:scale-105 hover:shadow-lg
                ${
                  type === 'normal'
                    ? 'bg-indigo-600 hover:bg-indigo-700 text-white'
                    : 'bg-purple-600 hover:bg-purple-700 text-white'
                }`}
        >
          Reservar Ahora
          <FiArrowRight className='inline ml-2' />
        </Link>

        <button
          onClick={() => (window.location.href = 'tel:+XXXXXXXXXX')}
          className='w-full py-3 px-6 text-center rounded-lg font-semibold 
                border-2 border-gray-300 text-gray-700 hover:bg-gray-50 
                transition-all duration-300 transform hover:scale-105 hover:shadow-lg'
        >
          Llamar para InformaciÃ³n
          <FiPhone className='inline ml-2' />
        </button>
      </motion.div>
    </motion.div>
  )
}

export default function Appointment () {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const menuRef = React.useRef(null)
  const menuBackgroundRef = React.useRef(null)

  const menuItems = [
    { icon: <FiCalendar />, text: 'Reservar', link: '/appointments' },
    { icon: <FiPackage />, text: 'Paquetes', link: '/appointments' },
    { icon: <FiMail />, text: 'Contacto', link: '/contact' },
    { icon: <FiLogIn />, text: 'Iniciar SesiÃ³n', link: '/signin' },
    { icon: <FiUserPlus />, text: 'Registrarse', link: '/signup' }
  ]

  useLayoutEffect(() => {
    const ctx = gsap.context(() => {
      ScrollTrigger.batch('.animate-on-scroll', {
        onEnter: batch =>
          gsap.to(batch, {
            opacity: 1,
            y: 0,
            stagger: 0.15,
            overwrite: true
          }),
        start: 'top bottom-=100',
        end: 'bottom top',
        markers: false
      })
    })

    return () => ctx.revert()
  }, [])

  // DefiniciÃ³n de servicios dentro del componente
  const services = {
    normal: {
      title: 'Tramboory Normal',
      description:
        'La experiencia completa con todos los servicios incluidos para una celebraciÃ³n perfecta.',
      price: '7,999',
      recommended: true,
      type: 'normal',
      items: {
        'Tiempo y Espacio': [
          {
            title: '4 Horas de DiversiÃ³n',
            description: '3.5 horas de salÃ³n + 30 min de despedida',
            included: true
          }
        ],
        'DecoraciÃ³n y PersonalizaciÃ³n': [
          {
            title: 'InvitaciÃ³n Digital',
            description: 'InvitaciÃ³n personalizada para tu evento',
            included: true
          },
          {
            title: 'DecoraciÃ³n TemÃ¡tica',
            description: 'AmbientaciÃ³n Tramboory para tu fiesta',
            included: true
          }
        ],
        'Alimentos y Bebidas': [
          {
            title: 'MenÃº Completo',
            description: 'Alimentos para niÃ±os y adultos',
            included: true
          },
          {
            title: 'Bebidas Ilimitadas',
            description: 'Refrescos, agua y cafÃ© de cortesÃ­a',
            included: true
          }
        ],
        'Entretenimiento y Personal': [
          {
            title: 'Ãrea de Juegos',
            description: 'Ludoteca y alberca de pelotas',
            included: true
          },
          {
            title: 'Ambiente Festivo',
            description: 'MÃºsica y anfitriones para animar',
            included: true
          },
          {
            title: 'Coordinador de Evento',
            description: 'Personal dedicado para tu celebraciÃ³n',
            included: true
          }
        ]
      }
    },
    matutino: {
      title: 'Tramboory Matutino',
      description:
        'Renta del espacio para eventos personalizados con la opciÃ³n de agregar servicios adicionales.',
      price: '4,999',
      recommended: false,
      type: 'matutino',
      items: {
        'Renta BÃ¡sica': [
          {
            title: 'Espacio Exclusivo',
            description: 'SalÃ³n privado para tu evento',
            included: true
          },
          {
            title: 'Mobiliario BÃ¡sico',
            description: 'Mesas y sillas incluidas',
            included: true
          },
          {
            title: 'Horario Matutino',
            description: '3 horas de evento',
            included: true
          }
        ],
        'Servicios Opcionales': [
          {
            title: 'Servicio de Alimentos',
            description: 'Personaliza el menÃº a tu gusto',
            included: false
          },
          {
            title: 'DecoraciÃ³n',
            description: 'OpciÃ³n de decorar el espacio',
            included: false
          },
          {
            title: 'Personal de Servicio',
            description: 'Meseros y personal de apoyo opcional',
            included: false
          }
        ]
      }
    }
  }

  return (
    <div className='min-h-screen relative'>
      {/* NavegaciÃ³n */}
      <NavigationBar
        toggleMenu={() => setIsMenuOpen(!isMenuOpen)}
        isMenuOpen={isMenuOpen}
      />

      {/* MenÃº Fullscreen */}
      <FullscreenMenu
        isOpen={isMenuOpen}
        menuRef={menuRef}
        menuBackgroundRef={menuBackgroundRef}
        menuItems={menuItems}
        onMenuItemClick={() => setIsMenuOpen(false)}
      />
      <div className='fixed inset-0 z-0 overflow-hidden'>
        <div className='absolute inset-0 bg-gradient-to-br from-indigo-50 to-purple-50'>
          <div className='absolute inset-0 animate-wave opacity-20 bg-[linear-gradient(45deg,transparent_25%,rgba(68,51,122,0.1)_50%,transparent_75%,transparent_100%)]' />
          <div className='absolute inset-0 animate-wave-slow opacity-20 bg-[linear-gradient(-45deg,transparent_25%,rgba(79,70,229,0.1)_50%,transparent_75%,transparent_100%)]' />
        </div>
      </div>

      <div className='relative z-10'>
        {/* Hero Section */}
        <section className='relative py-20 px-4 sm:px-6 lg:px-8 animate-on-scroll'>
          <div className='max-w-7xl mx-auto text-center'>
            <motion.h1
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              className='text-5xl md:text-6xl font-extrabold text-gray-900 mb-8'
            >
              Elige tu Experiencia
              <span className='block text-indigo-600'>Tramboory</span>
            </motion.h1>
            <motion.p
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className='text-xl text-gray-600 max-w-3xl mx-auto mb-10'
            >
              Dos opciones perfectas para tu celebraciÃ³n: nuestro paquete todo
              incluido o personaliza tu evento a tu manera en horario matutino.
            </motion.p>
          </div>
        </section>

        {/* Services Section */}
        <section className='py-12 px-4 sm:px-6 lg:px-8'>
          <div className='max-w-7xl mx-auto'>
            <div className='grid grid-cols-1 lg:grid-cols-2 gap-8'>
              <ServiceCard {...services.normal} />
              <ServiceCard {...services.matutino} />
            </div>
          </div>
        </section>

        {/* Contact Section */}
        <section className='py-16 px-4 sm:px-6 lg:px-8 relative overflow-hidden'>
          <div className='absolute inset-0 bg-gradient-to-r from-indigo-600/90 to-purple-600/90 backdrop-blur-sm' />
          <div className='max-w-7xl mx-auto relative z-10 text-center'>
            <h2 className='text-3xl font-bold text-white mb-6'>
              Â¿Tienes dudas sobre nuestros servicios?
            </h2>
            <p className='text-white/90 text-lg mb-8'>
              Nuestro equipo estÃ¡ listo para ayudarte a elegir la mejor opciÃ³n
              para tu evento
            </p>
            <div className='flex flex-col sm:flex-row justify-center gap-4'>
              <Link
                to='/contact'
                className='inline-flex items-center justify-center px-6 py-3 rounded-lg 
                        bg-white text-indigo-600 font-semibold hover:bg-gray-100 
                        transition-all duration-300 transform hover:scale-105'
              >
                <FiMessageSquare className='mr-2' />
                ContÃ¡ctanos
              </Link>
              <a
                href='tel:+XXXXXXXXXX'
                className='inline-flex items-center justify-center px-6 py-3 rounded-lg 
                        border-2 border-white text-white font-semibold hover:bg-white/10 
                        transition-all duration-300 transform hover:scale-105'
              >
                <FiPhone className='mr-2' />
                Llamar Ahora
              </a>
            </div>
          </div>
        </section>
      </div>
    </div>
  )
}\n\n

=== ./reservas/pages/customer/ConfirmationModal.jsx ===
import React, { useState, useEffect, useRef } from 'react';
import { gsap } from 'gsap';
import { toast } from 'react-toastify';
import usePreReservasStore from '@domains/reservas/services/preReservasStore';
import {
  FiCreditCard,
  FiCalendar,
  FiUser,
  FiPackage,
  FiCheck,
  FiX,
  FiAlertCircle,
  FiClock
} from 'react-icons/fi';

const ConfirmationModal = ({ onClose, onConfirm }) => {
  const modalRef = useRef(null);
  const [transactionData, setTransactionData] = useState({
    token_transaccion: '',
    comprobante: '',
  });
  const [isValid, setIsValid] = useState(false);

  const { 
    pagoEnProceso, 
    error, 
    loading, 
    confirmarPago, 
    preReserva 
  } = usePreReservasStore();

  // Animation on mount
  useEffect(() => {
    gsap.fromTo(
      modalRef.current,
      { opacity: 0, y: -50 },
      { opacity: 1, y: 0, duration: 0.5, ease: 'power3.out' }
    );
  }, []);

  // Calculate time remaining for pre-reservation expiration
  const calculateTimeRemaining = () => {
    if (!pagoEnProceso?.expiracion_pre_reserva) return null;
    
    const expiration = new Date(pagoEnProceso.expiracion_pre_reserva);
    const now = new Date();
    const diffMs = expiration - now;
    
    if (diffMs <= 0) return 'Expirado';
    
    const diffMins = Math.floor(diffMs / 60000);
    const diffSecs = Math.floor((diffMs % 60000) / 1000);
    
    return `${diffMins}:${diffSecs < 10 ? '0' : ''}${diffSecs}`;
  };
  
  const [timeRemaining, setTimeRemaining] = useState(calculateTimeRemaining());
  
  // Update time remaining every second
  useEffect(() => {
    if (!pagoEnProceso?.expiracion_pre_reserva) return;
    
    const timer = setInterval(() => {
      const remaining = calculateTimeRemaining();
      setTimeRemaining(remaining);
      
      if (remaining === 'Expirado') {
        clearInterval(timer);
        toast.error('La pre-reserva ha expirado. Por favor, inicie el proceso nuevamente.');
        onClose();
      }
    }, 1000);
    
    return () => clearInterval(timer);
  }, [pagoEnProceso, onClose]);

  // Add event listener for escape key
  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEscKey);
    return () => {
      document.removeEventListener('keydown', handleEscKey);
    };
  }, [onClose]);

  // Validate form input
  useEffect(() => {
    setIsValid(!!transactionData.token_transaccion);
  }, [transactionData]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setTransactionData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onloadend = () => {
        setTransactionData(prev => ({
          ...prev,
          comprobante: reader.result
        }));
      };
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!isValid || loading) return;
    
    try {
      await confirmarPago({
        token_transaccion: transactionData.token_transaccion,
        datos_transaccion: {
          comprobante: transactionData.comprobante
        }
      });
      
      if (onConfirm) {
        onConfirm();
      }
    } catch (err) {
      console.error('Error al confirmar pago:', err);
      // Error is handled by the store
    }
  };

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('es-MX', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center z-50 p-4">
      <div
        ref={modalRef}
        className="bg-white rounded-xl shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto"
      >
        {/* Header */}
        <div className="bg-indigo-50 p-6 border-b border-indigo-100">
          <h2 className="text-2xl font-bold text-indigo-700 mb-2">Confirmar Pago</h2>
          <p className="text-gray-600">
            Tu pre-reserva estÃ¡ pendiente de confirmaciÃ³n. Por favor, ingresa los datos del pago realizado.
          </p>
          
          {pagoEnProceso && (
            <div className="mt-4 bg-indigo-100 p-4 rounded-lg flex items-center justify-between">
              <div className="flex items-center gap-2">
                <FiClock className="text-indigo-600" />
                <span className="font-medium text-indigo-700">Tiempo restante:</span>
              </div>
              <span className="font-mono text-lg font-bold text-indigo-800">
                {timeRemaining || 'Calculando...'}
              </span>
            </div>
          )}
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Pre-reserva info */}
          {preReserva && (
            <div className="bg-gray-50 p-4 rounded-lg space-y-3">
              <h3 className="font-medium text-gray-900">Detalles de Pre-reserva</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex items-start gap-2">
                  <FiUser className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Festejado</p>
                    <p className="font-medium">{preReserva.nombre_festejado || 'No especificado'}</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-2">
                  <FiCalendar className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Fecha y Hora</p>
                    <p className="font-medium">
                      {preReserva.fecha_reserva ? formatDate(preReserva.fecha_reserva) : 'No especificado'}
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start gap-2">
                  <FiPackage className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Paquete</p>
                    <p className="font-medium">{preReserva.paquete_nombre || 'No especificado'}</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-2">
                  <FiCreditCard className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Total a Pagar</p>
                    <p className="font-medium text-indigo-700">
                      ${pagoEnProceso?.monto?.toFixed(2) || 'N/A'} MXN
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Error message */}
          {error && (
            <div className="bg-red-50 p-4 rounded-lg flex items-start gap-2 text-red-600">
              <FiAlertCircle className="mt-1 flex-shrink-0" />
              <div>
                <p className="font-medium">Error</p>
                <p>{error}</p>
              </div>
            </div>
          )}

          {/* Payment confirmation form */}
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="token_transaccion" className="block text-sm font-medium text-gray-700 mb-1">
                NÃºmero de Referencia / ConfirmaciÃ³n
              </label>
              <input
                type="text"
                id="token_transaccion"
                name="token_transaccion"
                value={transactionData.token_transaccion}
                onChange={handleChange}
                placeholder="Ej. 123456789"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                required
              />
              <p className="mt-1 text-sm text-gray-500">
                Ingresa el nÃºmero de referencia o confirmaciÃ³n de tu pago
              </p>
            </div>

            <div>
              <label htmlFor="comprobante" className="block text-sm font-medium text-gray-700 mb-1">
                Comprobante de Pago (opcional)
              </label>
              <input
                type="file"
                id="comprobante"
                name="comprobante"
                onChange={handleFileChange}
                accept="image/*,.pdf"
                className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              />
              <p className="mt-1 text-sm text-gray-500">
                Puedes adjuntar una imagen o PDF de tu comprobante de pago
              </p>
            </div>
          </form>
        </div>

        {/* Actions */}
        <div className="border-t border-gray-200 p-6 bg-gray-50 flex justify-end gap-4">
          <button
            onClick={onClose}
            className="px-6 py-2 rounded-lg text-gray-700 bg-white border border-gray-300 hover:bg-gray-50 transition duration-300 flex items-center gap-2"
            disabled={loading}
          >
            <FiX className="w-5 h-5" />
            Cancelar
          </button>
          <button
            onClick={handleSubmit}
            disabled={!isValid || loading}
            className={`px-6 py-2 rounded-lg text-white flex items-center gap-2 ${
              isValid && !loading
                ? 'bg-indigo-600 hover:bg-indigo-700'
                : 'bg-gray-400 cursor-not-allowed'
            } transition duration-300`}
          >
            {loading ? (
              <>
                <span className="animate-spin h-5 w-5 mr-2 border-t-2 border-b-2 border-white rounded-full"></span>
                Procesando...
              </>
            ) : (
              <>
                <FiCheck className="w-5 h-5" />
                Confirmar Pago
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default ConfirmationModal;\n\n

=== ./reservas/pages/customer/ContractModal.jsx ===
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { 
  FiCheckCircle, 
  FiX, 
  FiArrowDown, 
  FiAlertTriangle, 
  FiLock,
  FiThumbsUp,
  FiThumbsDown,
  FiClock,
  FiDollarSign,
  FiCalendar,
  FiShield,
  FiAlertCircle,
  FiChevronDown,
  FiInfo,
  FiClipboard,
  FiBookOpen,
  FiArrowRight
} from 'react-icons/fi';
import { toast } from 'react-toastify';

// Definiciones de animaciones
const transitionConfig = {
  type: "spring",
  damping: 30,
  stiffness: 400
};

const ContractModal = ({ isOpen, onClose, onAccept }) => {
  const [isAccepted, setIsAccepted] = useState(false);
  const [hasScrolledToBottom, setHasScrolledToBottom] = useState(false);
  const [showAcceptButtons, setShowAcceptButtons] = useState(false);
  const [readStartTime, setReadStartTime] = useState(null);
  const [scrollPercentage, setScrollPercentage] = useState(0);
  const [expandedSections, setExpandedSections] = useState({
    pagos: true,
    cambios: true,
    evento: true,
    restricciones: true
  });
  const navigate = useNavigate();
  
  const contentRef = useRef(null);
  const modalRef = useRef(null);
  
  useEffect(() => {
    if (isOpen) {
      setReadStartTime(Date.now());
      
      // AnimaciÃ³n de entrada
      const timer = setTimeout(() => {
        if (modalRef.current) {
          modalRef.current.classList.add('animate-in');
        }
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [isOpen]);

  const toggleSection = (section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const handleScroll = (e) => {
    const element = e.target;
    const scrollTop = element.scrollTop;
    const scrollHeight = element.scrollHeight;
    const clientHeight = element.clientHeight;
    
    // Calcular porcentaje de scroll
    const newScrollPercentage = Math.min(
      100,
      Math.round((scrollTop / (scrollHeight - clientHeight)) * 100)
    );
    setScrollPercentage(newScrollPercentage);
    
    // Verificar si ha llegado al final
    const isAtBottom = scrollTop + clientHeight >= scrollHeight - 20;
    
    if (isAtBottom && !hasScrolledToBottom) {
      const timeSpentReading = (Date.now() - readStartTime) / 1000; // convertir a segundos
      
      if (timeSpentReading < 10) { // Si han pasado menos de 10 segundos
        toast.warning('Por favor, tÃ³mate tu tiempo para leer el contrato completo.', {
          icon: 'â³',
          position: 'top-center'
        });
        return;
      }
      
      setHasScrolledToBottom(true);
      
      // AÃ±adir animaciÃ³n mÃ¡s suave para los botones
      setTimeout(() => {
        setShowAcceptButtons(true);
      }, 500);
    }
  };

  const handleAccept = async () => {
    setIsAccepted(true);
    
    // AnimaciÃ³n de aceptaciÃ³n
    await new Promise(resolve => setTimeout(resolve, 800));
    
    toast.success('Â¡Contrato aceptado exitosamente!', {
      icon: "ðŸŽ‰",
      position: 'top-center',
      style: {
        borderRadius: '10px',
        background: '#10B981',
        color: '#fff',
      },
    });
    
    await new Promise(resolve => setTimeout(resolve, 500));
    onAccept();
  };

  const handleReject = () => {
    toast.error('Has rechazado los tÃ©rminos y condiciones.', {
      icon: "â„¹ï¸",
      position: 'top-center',
      onClose: () => {
        toast.info('SerÃ¡s redirigido al inicio...', {
          autoClose: 2000,
          position: 'top-center',
          onClose: () => navigate('/')
        });
      }
    });
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <div className="fixed inset-0 z-50 overflow-hidden">
        {/* Overlay con efecto de blur */}
        <motion.div 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3 }}
          className="absolute inset-0 backdrop-blur-sm bg-gradient-to-br from-slate-900/70 to-indigo-900/70"
          onClick={onClose}
        />
        
        {/* Modal principal */}
        <div className="fixed inset-0 flex items-center justify-center p-4 sm:p-6 md:p-8 pointer-events-none">
          <motion.div
            ref={modalRef}
            initial={{ opacity: 0, scale: 0.95, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.95, y: 20 }}
            transition={transitionConfig}
            className="bg-white dark:bg-gray-900 rounded-2xl shadow-2xl w-full max-w-3xl overflow-hidden pointer-events-auto border border-indigo-50 dark:border-indigo-900/30"
            style={{
              maxHeight: 'calc(100vh - 2rem)',
              boxShadow: '0 25px 50px -12px rgba(79, 70, 229, 0.25)'
            }}
          >
            {/* Header con estilo glassmorphism */}
            <div className="relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-r from-indigo-600 to-purple-600 opacity-95"></div>
              <div className="relative p-6 sm:p-8">
                <div className="flex justify-between items-center">
                  <div className="flex items-center space-x-3">
                    <div className="bg-white/20 backdrop-blur-md p-2.5 rounded-xl">
                      <FiClipboard className="w-6 h-6 text-white" />
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold text-white">
                        Contrato de Servicios
                      </h2>
                      <p className="text-indigo-100 text-sm mt-1">
                        LÃ©elo detenidamente antes de aceptar
                      </p>
                    </div>
                  </div>
                  <button
                    onClick={onClose}
                    className="text-white/80 hover:text-white p-2 hover:bg-white/10 rounded-full transition-all duration-300"
                    aria-label="Cerrar"
                  >
                    <FiX className="w-6 h-6" />
                  </button>
                </div>
                
                {/* Barra de progreso de lectura */}
                <div className="absolute bottom-0 left-0 right-0 h-1.5 bg-white/20">
                  <motion.div 
                    className="h-full bg-white"
                    initial={{ width: "0%" }}
                    animate={{ width: `${scrollPercentage}%` }}
                    transition={{ duration: 0.2 }}
                  />
                </div>
              </div>
            </div>

            {/* Contenido principal con scroll */}
            <div 
              ref={contentRef}
              onScroll={handleScroll}
              className="max-h-[calc(100vh-22rem)] overflow-y-auto scroll-smooth p-6 sm:p-8 space-y-6"
            >
              {/* Alerta introductoria */}
              <motion.div 
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2, ...transitionConfig }}
                className="bg-amber-50 dark:bg-amber-900/30 border-l-4 border-amber-400 dark:border-amber-500 p-4 rounded-lg shadow-sm"
              >
                <div className="flex items-start">
                  <FiAlertCircle className="h-6 w-6 text-amber-500 mt-0.5 flex-shrink-0" />
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-amber-800 dark:text-amber-300">InformaciÃ³n importante</h3>
                    <div className="mt-2 text-sm text-amber-700 dark:text-amber-400">
                      <p>
                        Este documento constituye un acuerdo legal vinculante entre usted y Tramboory.
                        Al aceptar, confirma que ha leÃ­do, entendido y estÃ¡ de acuerdo con todos los tÃ©rminos.
                      </p>
                    </div>
                  </div>
                </div>
              </motion.div>

              {/* Secciones del contrato con acordeÃ³n */}
              <div className="space-y-4">
                <ContractSection
                  title="Pagos y Reservaciones"
                  icon={FiDollarSign}
                  isExpanded={expandedSections.pagos}
                  toggleExpand={() => toggleSection('pagos')}
                  delay={0.3}
                  items={[
                    "Anticipo requerido de $2,000 pesos para reservar.",
                    "50% del total debe pagarse 30 dÃ­as antes del evento.",
                    "Pago restante debe completarse 15 dÃ­as antes del evento.",
                    "No hay devoluciÃ³n del anticipo en caso de cancelaciÃ³n."
                  ]}
                />

                <ContractSection
                  title="Cambios y Modificaciones"
                  icon={FiCalendar}
                  isExpanded={expandedSections.cambios}
                  toggleExpand={() => toggleSection('cambios')}
                  delay={0.4}
                  items={[
                    "Cambios de fecha requieren 20 dÃ­as de anticipaciÃ³n.",
                    "AutorizaciÃ³n previa necesaria para servicios externos.",
                    "La temÃ¡tica no puede modificarse una vez seleccionada."
                  ]}
                />

                <ContractSection
                  title="Durante el Evento"
                  icon={FiClock}
                  isExpanded={expandedSections.evento}
                  toggleExpand={() => toggleSection('evento')}
                  delay={0.5}
                  items={[
                    "Inicio puntual a la hora reservada.",
                    "Llegada recomendada 15 minutos antes.",
                    "No se permiten alimentos externos excepto dulces y pastel autorizado.",
                    "Servicio de cocina finaliza 2.5 horas despuÃ©s del inicio."
                  ]}
                />

                <ContractSection
                  title="Restricciones y Seguridad"
                  icon={FiAlertTriangle}
                  isExpanded={expandedSections.restricciones}
                  toggleExpand={() => toggleSection('restricciones')}
                  delay={0.6}
                  items={[
                    "Prohibido: chicles, confeti, espuma, slime, gelatina, pintura, plastilinas.",
                    "No se permiten espectÃ¡culos con fuego o pirotecnia.",
                    "La empresa no se hace responsable por mal uso de instalaciones."
                  ]}
                />
              </div>
              
              {/* InformaciÃ³n adicional */}
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.7 }}
                className="bg-gray-50 dark:bg-gray-800/50 p-5 rounded-xl border border-gray-100 dark:border-gray-700"
              >
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <FiInfo className="h-6 w-6 text-indigo-500" />
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-gray-600 dark:text-gray-300">
                      Al aceptar este contrato, reconoces que has leÃ­do y comprendido todas las clÃ¡usulas
                      y que aceptas todas las responsabilidades y condiciones establecidas en este acuerdo.
                    </p>
                  </div>
                </div>
              </motion.div>
              
              {/* Indicador de scroll si no ha llegado al final */}
              {!hasScrolledToBottom && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1, y: [0, 10, 0] }}
                  transition={{ 
                    delay: 0.8, 
                    y: {
                      repeat: Infinity,
                      duration: 2
                    }
                  }}
                  className="flex flex-col items-center justify-center py-4"
                >
                  <FiArrowDown className="h-6 w-6 text-indigo-400" />
                  <p className="text-sm text-gray-500 mt-2">ContinÃºa leyendo para aceptar</p>
                </motion.div>
              )}
            </div>

            {/* Footer con acciones */}
            <div className="border-t border-gray-200 dark:border-gray-800 bg-gray-50 dark:bg-gray-900 p-6">
              {!hasScrolledToBottom ? (
                <div className="flex justify-center">
                  <div className="flex items-center space-x-2 text-gray-600 dark:text-gray-400">
                    <FiBookOpen className="w-5 h-5" />
                    <span>Por favor, lee el contrato completo</span>
                  </div>
                </div>
              ) : (
                <div className="space-y-6">
                  <AnimatePresence>
                    {showAcceptButtons && (
                      <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: 20 }}
                        transition={transitionConfig}
                        className="flex flex-col sm:flex-row justify-center gap-4"
                      >
                        <motion.button
                          whileHover={{ scale: 1.03 }}
                          whileTap={{ scale: 0.97 }}
                          onClick={handleReject}
                          className="flex-1 px-6 py-3 bg-white border border-red-200 text-red-600 hover:bg-red-50 rounded-xl shadow-sm flex items-center justify-center space-x-2 transition-all duration-300"
                        >
                          <FiThumbsDown className="w-5 h-5" />
                          <span>Rechazar TÃ©rminos</span>
                        </motion.button>

                        <motion.button
                          whileHover={{ scale: 1.03 }}
                          whileTap={{ scale: 0.97 }}
                          onClick={handleAccept}
                          className="flex-1 px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-xl shadow-md hover:shadow-lg flex items-center justify-center space-x-2 transition-all duration-300"
                        >
                          <FiThumbsUp className="w-5 h-5" />
                          <span>Aceptar TÃ©rminos</span>
                        </motion.button>
                      </motion.div>
                    )}
                  </AnimatePresence>

                  {/* Indicador de estado de aceptaciÃ³n */}
                  {isAccepted && (
                    <motion.div
                      initial={{ opacity: 0, scale: 0.8 }}
                      animate={{ opacity: 1, scale: 1 }}
                      transition={{ type: "spring", stiffness: 500, damping: 30 }}
                      className="text-center"
                    >
                      <div className="inline-flex items-center justify-center p-2 bg-green-100 dark:bg-green-900/30 rounded-full">
                        <FiCheckCircle className="h-8 w-8 text-green-500" />
                      </div>
                      <p className="mt-2 font-medium text-green-700 dark:text-green-400">
                        Â¡Contrato Aceptado!
                      </p>
                    </motion.div>
                  )}
                </div>
              )}
            </div>
          </motion.div>
        </div>
      </div>
    </AnimatePresence>
  );
};

// Componente de secciÃ³n de contrato mejorado
const ContractSection = ({ icon: Icon, title, items, isExpanded, toggleExpand, delay = 0 }) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay, ...transitionConfig }}
      className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 overflow-hidden shadow-sm hover:shadow-md transition-all duration-300"
    >
      <button 
        onClick={toggleExpand}
        className="w-full flex items-center justify-between p-5 text-left focus:outline-none"
      >
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-indigo-100 dark:bg-indigo-900/50 rounded-lg">
            <Icon className="h-5 w-5 text-indigo-600 dark:text-indigo-400" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">{title}</h3>
        </div>
        <motion.div
          animate={{ rotate: isExpanded ? 180 : 0 }}
          transition={{ duration: 0.3 }}
        >
          <FiChevronDown className="h-5 w-5 text-gray-500" />
        </motion.div>
      </button>
      
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: "auto", opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className="px-5 pb-5 pt-1">
              <ul className="space-y-3">
                {items.map((item, index) => (
                  <motion.li 
                    key={index}
                    initial={{ opacity: 0, x: -5 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.1 * index }}
                    className="flex items-start"
                  >
                    <span className="inline-flex items-center justify-center h-6 w-6 text-indigo-600 dark:text-indigo-400 mr-2 flex-shrink-0">
                      <FiArrowRight className="h-3.5 w-3.5" />
                    </span>
                    <span className="text-gray-700 dark:text-gray-300">{item}</span>
                  </motion.li>
                ))}
              </ul>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default ContractModal;\n\n

=== ./reservas/pages/customer/PaymentModalCustomer.jsx ===
import React, { useEffect, useRef, useState } from 'react';
import PropTypes from 'prop-types';
import { gsap } from 'gsap';
import axios from '@shared/utils/axiosConfig';
import { toast } from 'react-toastify';
import usePreReservasStore from '@domains/reservas/services/preReservasStore';
import {
  FiDollarSign,
  FiCreditCard,
  FiMapPin,
  FiCopy,
  FiCheck,
  FiX,
  FiAlertCircle,
  FiInfo,
  FiLoader
} from 'react-icons/fi';

const PaymentModal = ({ total, onClose, onSelectPaymentMethod, loading }) => {
  const modalRef = useRef(null);
  const [paymentMethod, setPaymentMethod] = useState('');
  const [copiedClabe, setCopiedClabe] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const CLABE = '646016206867172653';
  const ADDRESS = 'P.Âº Solares 1639, Solares Residencial, 45019 Zapopan, Jal.';

  // Use preReservasStore for payment-first flow
  const { iniciarProcesoPago, pagoEnProceso } = usePreReservasStore();

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('es-MX', {
      style: 'currency',
      currency: 'MXN'
    }).format(amount);
  };

  useEffect(() => {
    gsap.fromTo(
      modalRef.current,
      { opacity: 0, y: -50 },
      { opacity: 1, y: 0, duration: 0.5, ease: 'power3.out' }
    );
  }, []);

  // Add event listener for escape key
  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    // Add event listener
    document.addEventListener('keydown', handleEscKey);

    // Cleanup function
    return () => {
      document.removeEventListener('keydown', handleEscKey);
    };
  }, [onClose]);

  const handleCopyClabe = () => {
    navigator.clipboard.writeText(CLABE);
    setCopiedClabe(true);
    setTimeout(() => setCopiedClabe(false), 2000);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!paymentMethod || isProcessing) return;
    
    // Validar que onSelectPaymentMethod sea una funciÃ³n
    if (typeof onSelectPaymentMethod !== 'function') {
      console.error('Error: onSelectPaymentMethod no es una funciÃ³n');
      toast.error('Error en la configuraciÃ³n del proceso de pago. Por favor, intenta nuevamente.');
      setErrorMessage('Error interno: MÃ©todo de procesamiento de pago no disponible');
      return;
    }
    
    setIsProcessing(true);
    setErrorMessage('');
    
    try {
      console.log('Enviando mÃ©todo de pago:', paymentMethod);
      
      // Iniciar proceso de pago con pre-reserva
      await onSelectPaymentMethod(paymentMethod);
      
      // Mostrar mensaje de Ã©xito
      toast.success('MÃ©todo de pago seleccionado. Procesando pre-reserva...');
    } catch (error) {
      console.error('Error en el proceso de pago y confirmaciÃ³n:', error);
      
      // Extraer y mostrar informaciÃ³n detallada del error
      if (error.response) {
        console.error('Datos de la respuesta de error:', error.response.data);
        console.error('Estado HTTP:', error.response.status);
        console.error('Cabeceras:', error.response.headers);
        toast.error(`Error ${error.response.status}: ${error.response.data.message || 'Error al procesar el pago'}`);
        setErrorMessage(error.response.data.message || 'Error al procesar el pago');
      } else if (error.request) {
        console.error('No se recibiÃ³ respuesta. Request:', error.request);
        toast.error('No se recibiÃ³ respuesta del servidor.');
        setErrorMessage('No se recibiÃ³ respuesta del servidor. Verifique su conexiÃ³n.');
      } else {
        console.error('Error al configurar la peticiÃ³n:', error.message);
        toast.error(`Error: ${error.message}`);
        setErrorMessage(error.message || 'Error al procesar el pago');
      }
    } finally {
      setIsProcessing(false);
    }
  };

  const PaymentOption = ({ value, title, icon: Icon, description }) => (
    <button
      onClick={() => setPaymentMethod(value)}
      className={`w-full p-4 rounded-lg border-2 transition-all duration-300 ${
        paymentMethod === value
          ? 'border-indigo-600 bg-indigo-50'
          : 'border-gray-200 hover:border-indigo-200 hover:bg-gray-50'
      }`}
    >
      <div className="flex items-center gap-3">
        <div
          className={`p-2 rounded-full ${
            paymentMethod === value ? 'bg-indigo-100 text-indigo-600' : 'bg-gray-100 text-gray-600'
          }`}
        >
          <Icon className="w-6 h-6" />
        </div>
        <div className="text-left">
          <h3 className={`font-medium ${paymentMethod === value ? 'text-indigo-600' : 'text-gray-900'}`}>
            {title}
          </h3>
          <p className="text-sm text-gray-500">{description}</p>
        </div>
      </div>
    </button>
  );

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center z-50 p-4">
      <div
        ref={modalRef}
        className="bg-white rounded-xl shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto"
      >
        {/* Header */}
        <div className="bg-indigo-50 p-6 border-b border-indigo-100">
          <div className="flex items-center gap-3 mb-2">
            <FiDollarSign className="text-indigo-600 text-2xl" />
            <h2 className="text-2xl font-bold text-indigo-700">MÃ©todo de Pago</h2>
          </div>
          <p className="text-gray-600">
            Selecciona tu mÃ©todo de pago preferido para completar la reserva.
          </p>
          <div className="mt-3 bg-white rounded-lg p-3 border border-indigo-100">
            <span className="text-gray-700">Total a pagar: </span>
            <span className="font-bold text-indigo-600 text-lg">
              {formatCurrency(total)}
            </span>
          </div>
        </div>

        {/* Content */}
        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {/* Payment Options */}
          <div className="space-y-4">
            <PaymentOption
              value="transferencia"
              title="Transferencia Bancaria"
              icon={FiCreditCard}
              description="Realiza una transferencia bancaria desde tu aplicaciÃ³n"
            />
            <PaymentOption
              value="efectivo"
              title="Pago en Efectivo"
              icon={FiDollarSign}
              description="Paga en efectivo directamente en nuestra sucursal"
            />
            <PaymentOption
              value="tarjeta_credito"
              title="Tarjeta de CrÃ©dito"
              icon={FiCreditCard}
              description="Paga con tarjeta de crÃ©dito"
            />
            <PaymentOption
              value="tarjeta_debito"
              title="Tarjeta de DÃ©bito"
              icon={FiCreditCard}
              description="Paga con tarjeta de dÃ©bito"
            />
          </div>

          {/* Payment Details */}
          {paymentMethod && (
            <div className="mt-6 animate-fadeIn">
              {paymentMethod === 'transferencia' ? (
                <div className="bg-gray-50 p-6 rounded-lg space-y-4">
                  <h3 className="font-medium text-gray-900 flex items-center gap-2">
                    <FiInfo className="text-indigo-600" />
                    InformaciÃ³n para Transferencia
                  </h3>
                  <div className="space-y-2">
                    <p className="text-sm text-gray-600">CLABE Interbancaria:</p>
                    <div className="flex items-center gap-2 bg-white p-3 rounded-lg border border-gray-200">
                      <span className="font-mono text-lg">{CLABE}</span>
                      <button
                        onClick={handleCopyClabe}
                        className="ml-auto p-2 hover:bg-gray-100 rounded-lg transition-colors"
                        title="Copiar CLABE"
                      >
                        {copiedClabe ? (
                          <FiCheck className="w-5 h-5 text-green-500" />
                        ) : (
                          <FiCopy className="w-5 h-5 text-gray-500" />
                        )}
                      </button>
                    </div>
                    <p className="text-sm text-gray-500 mt-2">
                      * Una vez realizada la transferencia, conserva tu comprobante.
                    </p>
                  </div>
                </div>
              ) : (
                <div className="bg-gray-50 p-6 rounded-lg space-y-4">
                  <h3 className="font-medium text-gray-900 flex items-center gap-2">
                    <FiMapPin className="text-indigo-600" />
                    DirecciÃ³n de Pago
                  </h3>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <p className="text-gray-800">{ADDRESS}</p>
                  </div>
                  <p className="text-sm text-gray-500">
                    * Horario de atenciÃ³n: Lunes a Viernes de 9:00 AM a 6:00 PM
                  </p>
                </div>
              )}
            </div>
          )}

          {/* InformaciÃ³n y alertas */}
          {loading ? (
            <div className="text-indigo-600 flex items-center gap-2 bg-indigo-50 p-4 rounded-lg">
              <FiLoader className="animate-spin" />
              <span>Procesando pre-reserva...</span>
            </div>
          ) : (
            <>
              {!paymentMethod && (
                <div className="text-amber-600 flex items-center gap-2 bg-amber-50 p-4 rounded-lg">
                  <FiAlertCircle />
                  <span>Por favor, selecciona un mÃ©todo de pago para continuar</span>
                </div>
              )}
              
              {/* Mostrar mensaje de error si existe */}
              {errorMessage && (
                <div className="text-red-600 flex items-center gap-2 bg-red-50 p-4 rounded-lg">
                  <FiAlertCircle />
                  <span>{errorMessage}</span>
                </div>
              )}
              
              {/* InformaciÃ³n de pre-reserva si existe */}
              {pagoEnProceso && (
                <div className="bg-green-50 p-4 rounded-lg mt-4">
                  <h3 className="font-medium text-green-800 mb-2">InformaciÃ³n de Pre-reserva:</h3>
                  <p className="text-green-700">ID Pago: {pagoEnProceso.id}</p>
                  <p className="text-green-700">
                    Expira en: {new Date(pagoEnProceso.expiracion).toLocaleTimeString()}
                  </p>
                </div>
              )}
            </>
          )}
        </form>

        {/* Actions */}
        <div className="border-t border-gray-200 p-6 bg-gray-50 flex justify-end gap-4">
          <button
            onClick={onClose}
            className="px-6 py-2 rounded-lg text-gray-700 bg-white border border-gray-300 hover:bg-gray-50 transition duration-300 flex items-center gap-2"
          >
            <FiX className="w-5 h-5" />
            Cancelar
          </button>
          <button
            onClick={handleSubmit}
            disabled={!paymentMethod || isProcessing || loading || typeof onSelectPaymentMethod !== 'function'}
            className={`px-6 py-2 rounded-lg text-white flex items-center gap-2 ${
              paymentMethod && !isProcessing && typeof onSelectPaymentMethod === 'function'
                ? 'bg-indigo-600 hover:bg-indigo-700'
                : 'bg-gray-400 cursor-not-allowed'
            } transition duration-300`}
          >
            <FiCheck className="w-5 h-5" />
            {isProcessing || loading ? 'Procesando...' : 'Continuar'}
          </button>
        </div>
      </div>
    </div>
  );
};

// AÃ±adir validaciÃ³n de PropTypes
PaymentModal.propTypes = {
  total: PropTypes.number.isRequired,
  onClose: PropTypes.func.isRequired,
  onSelectPaymentMethod: PropTypes.func.isRequired,
  loading: PropTypes.bool
};

// Valores por defecto
PaymentModal.defaultProps = {
  loading: false
};

export default PaymentModal;
\n\n

=== ./reservas/pages/customer/QuotationConfirmationModal.jsx ===
import React, { useEffect, useRef } from 'react';
import { gsap } from 'gsap';
import { motion } from 'framer-motion';
import {
  FiCreditCard,
  FiCalendar,
  FiUser,
  FiPackage,
  FiCheck,
  FiX,
  FiClock,
  FiImage,
  FiMapPin
} from 'react-icons/fi';

const QuotationConfirmationModal = ({ 
  reservationData, 
  packages, 
  foodOptions, 
  tematicas, 
  extras, 
  mamparas, 
  onCancel, 
  onConfirm 
}) => {
  const modalRef = useRef(null);

  // Animation on mount
  useEffect(() => {
    gsap.fromTo(
      modalRef.current,
      { opacity: 0, y: -50 },
      { opacity: 1, y: 0, duration: 0.5, ease: 'power3.out' }
    );
  }, []);

  // Add event listener for escape key
  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.key === 'Escape') {
        onCancel();
      }
    };

    document.addEventListener('keydown', handleEscKey);
    return () => {
      document.removeEventListener('keydown', handleEscKey);
    };
  }, [onCancel]);

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('es-MX', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    }).format(date);
  };

  // Format time for display
  const formatTime = (timeString) => {
    if (!timeString) return '';
    // Convert "11:00:00" to "11:00"
    return timeString.substring(0, 5);
  };

  // Get package details
  const selectedPackage = packages?.find(pkg => pkg.id === reservationData?.id_paquete);
  const selectedFoodOption = foodOptions?.find(option => option.id === reservationData?.id_opcion_alimento);
  const selectedTematica = tematicas?.find(t => t.id === reservationData?.id_tematica);
  const selectedMampara = mamparas?.find(m => m.id === reservationData?.id_mampara);

  // Calculate expiration date (48 hours from now)
  const expirationDate = new Date();
  expirationDate.setHours(expirationDate.getHours() + 48);

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center z-50 p-4">
      <motion.div
        ref={modalRef}
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-xl shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto"
      >
        {/* Header */}
        <div className="bg-indigo-50 p-6 border-b border-indigo-100">
          <h2 className="text-2xl font-bold text-indigo-700 mb-2">Confirmar CotizaciÃ³n</h2>
          <p className="text-gray-600">
            Revisa los detalles de tu cotizaciÃ³n. Esta cotizaciÃ³n estarÃ¡ disponible por 48 horas.
          </p>
          
          <div className="mt-4 bg-indigo-100 p-4 rounded-lg flex items-center justify-between">
            <div className="flex items-center gap-2">
              <FiClock className="text-indigo-600" />
              <span className="font-medium text-indigo-700">Expira:</span>
            </div>
            <span className="font-medium text-indigo-800">
              {formatDate(expirationDate)} a las {expirationDate.getHours()}:{expirationDate.getMinutes() < 10 ? '0' : ''}{expirationDate.getMinutes()}
            </span>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Reservation info */}
          <div className="bg-gray-50 p-4 rounded-lg space-y-4">
            <h3 className="font-medium text-gray-900">Detalles del Evento</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {reservationData?.nombre_festejado && (
                <div className="flex items-start gap-2">
                  <FiUser className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Festejado</p>
                    <p className="font-medium">{reservationData.nombre_festejado}</p>
                  </div>
                </div>
              )}
              
              <div className="flex items-start gap-2">
                <FiCalendar className="mt-1 text-indigo-500" />
                <div>
                  <p className="text-sm text-gray-500">Fecha</p>
                  <p className="font-medium">
                    {formatDate(reservationData?.fecha_reserva)}
                  </p>
                </div>
              </div>
              
              <div className="flex items-start gap-2">
                <FiClock className="mt-1 text-indigo-500" />
                <div>
                  <p className="text-sm text-gray-500">Horario</p>
                  <p className="font-medium">
                    {formatTime(reservationData?.hora_inicio)} - {formatTime(reservationData?.hora_fin)}
                  </p>
                </div>
              </div>
              
              <div className="flex items-start gap-2">
                <FiPackage className="mt-1 text-indigo-500" />
                <div>
                  <p className="text-sm text-gray-500">Paquete</p>
                  <p className="font-medium">{selectedPackage?.nombre || 'No especificado'}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Extras and options */}
          <div className="bg-gray-50 p-4 rounded-lg space-y-4">
            <h3 className="font-medium text-gray-900">Opciones y Extras</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {selectedTematica && (
                <div className="flex items-start gap-2">
                  <FiImage className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">TemÃ¡tica</p>
                    <p className="font-medium">{selectedTematica.nombre}</p>
                  </div>
                </div>
              )}
              
              {selectedMampara && (
                <div className="flex items-start gap-2">
                  <FiMapPin className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">Mampara</p>
                    <p className="font-medium">{selectedMampara.nombre}</p>
                  </div>
                </div>
              )}
              
              {selectedFoodOption && (
                <div className="flex items-start gap-2">
                  <FiPackage className="mt-1 text-indigo-500" />
                  <div>
                    <p className="text-sm text-gray-500">OpciÃ³n de Alimento</p>
                    <p className="font-medium">{selectedFoodOption.nombre}</p>
                  </div>
                </div>
              )}
            </div>
            
            {/* Extras list */}
            {reservationData?.extras && reservationData.extras.length > 0 && (
              <div className="mt-4">
                <h4 className="text-sm font-medium text-gray-700 mb-2">Extras Seleccionados</h4>
                <ul className="space-y-2">
                  {reservationData.extras.map((extra, index) => (
                    <li key={index} className="flex justify-between text-sm">
                      <span>{extra.nombre} x{extra.cantidad}</span>
                      <span className="font-medium">${parseFloat(extra.precio * extra.cantidad).toFixed(2)}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>

          {/* Price summary */}
          <div className="bg-indigo-50 p-4 rounded-lg">
            <h3 className="font-medium text-gray-900 mb-4">Resumen de Precios</h3>
            
            <div className="space-y-2">
              <div className="flex justify-between">
                <span>Paquete Base</span>
                <span className="font-medium">${parseFloat(reservationData?.packagePrice || 0).toFixed(2)}</span>
              </div>
              
              {selectedTematica && (
                <div className="flex justify-between">
                  <span>TemÃ¡tica: {selectedTematica.nombre}</span>
                  <span className="font-medium">${parseFloat(selectedTematica.precio || 0).toFixed(2)}</span>
                </div>
              )}
              
              {selectedMampara && (
                <div className="flex justify-between">
                  <span>Mampara: {selectedMampara.nombre}</span>
                  <span className="font-medium">${parseFloat(selectedMampara.precio || 0).toFixed(2)}</span>
                </div>
              )}
              
              {selectedFoodOption && (
                <div className="flex justify-between">
                  <span>OpciÃ³n de Alimento: {selectedFoodOption.nombre}</span>
                  <span className="font-medium">${parseFloat(selectedFoodOption.precio_extra || 0).toFixed(2)}</span>
                </div>
              )}
              
              {reservationData?.martes_fee > 0 && (
                <div className="flex justify-between">
                  <span>Cargo por Martes</span>
                  <span className="font-medium">${parseFloat(reservationData.martes_fee).toFixed(2)}</span>
                </div>
              )}
              
              {/* Extras total */}
              {reservationData?.extras && reservationData.extras.length > 0 && (
                <div className="flex justify-between">
                  <span>Extras</span>
                  <span className="font-medium">
                    ${reservationData.extras.reduce((sum, extra) => sum + parseFloat(extra.precio * extra.cantidad), 0).toFixed(2)}
                  </span>
                </div>
              )}
              
              <div className="border-t border-indigo-200 pt-2 mt-2 flex justify-between font-bold text-indigo-800">
                <span>Total</span>
                <span>${parseFloat(reservationData?.total || 0).toFixed(2)}</span>
              </div>
            </div>
          </div>
          
          {/* Disclaimer */}
          <div className="text-sm text-gray-500 italic">
            <p>Esta cotizaciÃ³n es vÃ¡lida por 48 horas. Los precios y disponibilidad estÃ¡n sujetos a cambios despuÃ©s de este perÃ­odo.</p>
            <p className="mt-1">Al crear esta cotizaciÃ³n, no se realiza ningÃºn cargo ni se confirma la reserva.</p>
          </div>
        </div>

        {/* Actions */}
        <div className="border-t border-gray-200 p-6 bg-gray-50 flex justify-end gap-4">
          <button
            onClick={onCancel}
            className="px-6 py-2 rounded-lg text-gray-700 bg-white border border-gray-300 hover:bg-gray-50 transition duration-300 flex items-center gap-2"
          >
            <FiX className="w-5 h-5" />
            Cancelar
          </button>
          <button
            onClick={onConfirm}
            className="px-6 py-2 rounded-lg text-white bg-indigo-600 hover:bg-indigo-700 transition duration-300 flex items-center gap-2"
          >
            <FiCheck className="w-5 h-5" />
            Crear CotizaciÃ³n
          </button>
        </div>
      </motion.div>
    </div>
  );
};

export default QuotationConfirmationModal;\n\n

=== ./reservas/pages/customer/ReservationForm.jsx ===
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useWatch } from 'react-hook-form'; 
import { FiCheck } from 'react-icons/fi';
import { isTuesday } from 'date-fns';
import { 
  TIME_SLOTS, 
  TUESDAY_SURCHARGE,
  formatReservationForApi, 
  formatReservationForEditing 
} from '@shared/utils/reservationUtils';

// Import all section components
import PackageSection from './reservationform/PackageSection';
import FoodOptionsSection from './reservationform/FoodOptionsSection';
import DateTimeSection from './reservationform/DateTimeSection';
import ThemeSection from './reservationform/ThemeSection';
import MamparaSection from './reservationform/MamparaSection';
import ExtrasSection from './reservationform/ExtrasSection';
import CelebrantSection from './reservationform/CelebrantSection';
import CommentsSection from './reservationform/CommentsSection';
const ReservationForm = ({
  onSubmit,
  handleSubmit,
  packages,
  foodOptions,
  tematicas,
  mamparas,
  extras,
  unavailableDates,
  existingReservations,
  control,
  setValue,
  errors,
  watch,
  setIsTuesdayModalOpen,
  editingReservation = null // Nueva prop para manejar ediciÃ³n
}) => {
  // Efecto para inicializar el formulario cuando hay una reserva en ediciÃ³n
  useEffect(() => {
    if (editingReservation) {
      console.log('Inicializando formulario para ediciÃ³n:', editingReservation);
      
      // Transformar datos para ediciÃ³n usando la funciÃ³n comÃºn
      const formattedData = formatReservationForEditing(
        editingReservation,
        foodOptions,
        tematicas,
        mamparas
      );
      
      // Reiniciar todos los campos del formulario con los datos formateados
      Object.keys(formattedData).forEach(field => {
        if (field !== 'extras') { // Extras requiere manejo especial
          setValue(field, formattedData[field]);
        }
      });
      
      // Manejar extras especialmente para preservar cantidades
      if (formattedData.extras?.length) {
        setValue('extras', formattedData.extras);
      }
      
      console.log('Datos formateados para ediciÃ³n:', formattedData);
    }
  }, [editingReservation, foodOptions, tematicas, mamparas, setValue]);
  // Memoize form values
  const formValues = useWatch({ control });
  
  // Wrapper para la funciÃ³n onSubmit que transforma los datos para la API
  const handleFormSubmit = useCallback((data) => {
    // Transformar los datos al formato esperado por la API usando la funciÃ³n comÃºn
    const apiData = formatReservationForApi(data);
    
    // Llamar a la funciÃ³n onSubmit original con los datos transformados
    onSubmit(apiData);
  }, [onSubmit]);
  
  // Memoize filtered mamparas con compatibilidad para objetos complejos
  const filteredMamparas = useMemo(() => {
    // Extraer el ID de temÃ¡tica (puede ser un objeto complejo o un ID directo)
    const themeId = typeof formValues.id_tematica === 'object'
      ? formValues.id_tematica?.value
      : formValues.id_tematica;
    
    // Usar Number() para asegurar comparaciÃ³n numÃ©rica consistente
    return themeId
      ? mamparas.filter(m => Number(m.id_tematica) === Number(themeId) && m.activo)
      : [];
  }, [formValues.id_tematica, mamparas]);
  // Memoize package price calculation
  const calculatePackagePrice = useCallback((packageId, date) => {
    if (!packageId || !date || !(date instanceof Date)) return 0;
    
    const selectedPkg = packages.find(pkg => pkg.id === packageId);
    if (!selectedPkg) return 0;

    const dayOfWeek = date.getDay();
    const isWeekend = dayOfWeek === 0 || dayOfWeek >= 5;
    const basePrice = isWeekend 
      ? parseFloat(selectedPkg.precio_viernes_domingo)
      : parseFloat(selectedPkg.precio_lunes_jueves);
    
    return basePrice + (isTuesday(date) ? TUESDAY_SURCHARGE : 0);
  }, [packages]);

  // Memoize food option price con compatibilidad para objetos complejos
  const getFoodOptionPrice = useCallback((foodOption) => {
    if (!foodOption) return 0;
    
    // Si es un objeto complejo, usar su precio_extra directo o buscar por id.value
    if (typeof foodOption === 'object') {
      if (foodOption.precio_extra) {
        return parseFloat(foodOption.precio_extra);
      }
      const optionId = foodOption.value;
      const option = foodOptions.find(opt => Number(opt.id) === Number(optionId));
      return option?.precio_extra ? parseFloat(option.precio_extra) : 0;
    }
    
    // Si es un ID directo
    const option = foodOptions.find(opt => Number(opt.id) === Number(foodOption));
    return option?.precio_extra ? parseFloat(option.precio_extra) : 0;
  }, [foodOptions]);

  // Memoize mampara price con compatibilidad para objetos complejos
  const getMamparaPrice = useCallback((mamparaObj) => {
    if (!mamparaObj) return 0;
    
    // Si es un objeto complejo, usar su precio directo o buscar por id.value
    if (typeof mamparaObj === 'object') {
      if (mamparaObj.precio) {
        return parseFloat(mamparaObj.precio);
      }
      const mamparaId = mamparaObj.value;
      const mampara = mamparas.find(m => Number(m.id) === Number(mamparaId));
      return mampara?.precio ? parseFloat(mampara.precio) : 0;
    }
    
    // Si es un ID directo
    const mampara = mamparas.find(m => Number(m.id) === Number(mamparaObj));
    return mampara?.precio ? parseFloat(mampara.precio) : 0;
  }, [mamparas]);

  // Memoize extras total
  const calculateExtrasTotal = useCallback((selectedExtras) => {
    if (!selectedExtras?.length) return 0;
    return selectedExtras.reduce((total, extra) => {
      const extraInfo = extras.find(e => e.id === extra.id);
      if (extraInfo?.precio && extra.cantidad) {
        return total + (parseFloat(extraInfo.precio) * parseInt(extra.cantidad));
      }
      return total;
    }, 0);
  }, [extras]);

  // Memoize total calculation
  const total = useMemo(() => {
    const packagePrice = calculatePackagePrice(formValues.id_paquete, formValues.fecha_reserva);
    const foodPrice = getFoodOptionPrice(formValues.id_opcion_alimento);
    const mamparaPrice = getMamparaPrice(formValues.id_mampara);
    const extrasTotal = calculateExtrasTotal(formValues.extras);
    
    return packagePrice + foodPrice + mamparaPrice + extrasTotal;
  }, [
    formValues,
    calculatePackagePrice,
    getFoodOptionPrice,
    getMamparaPrice,
    calculateExtrasTotal
  ]);

  // Update total when dependencies change
  useEffect(() => {
    setValue('total', total);
  }, [total, setValue]);

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-8">
      <PackageSection 
        control={control}
        packages={packages}
        errors={errors}
        setValue={setValue}
      />

      <FoodOptionsSection
        control={control}
        errors={errors}
        foodOptions={foodOptions}
        setValue={setValue}
      />

      <DateTimeSection
        control={control}
        errors={errors}
        setValue={setValue}
        unavailableDates={unavailableDates}
        existingReservations={existingReservations}
        setIsTuesdayModalOpen={setIsTuesdayModalOpen}
        packages={packages}
      />

      <ThemeSection
        control={control}
        errors={errors}
        tematicas={tematicas}
        setValue={setValue}
      />

      <MamparaSection
        control={control}
        errors={errors}
        filteredMamparas={filteredMamparas}
        setValue={setValue}
      />

      <ExtrasSection
        control={control}
        extras={extras}
        setValue={setValue}
      />

      <CelebrantSection
        control={control}
        errors={errors}
      />

      <CommentsSection
        control={control}
      />

      <div className="flex justify-end mt-8">
        <button
          type="submit"
          className="px-8 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200 flex items-center gap-2 font-medium shadow-sm"
        >
          <FiCheck className="w-5 h-5" />
          {editingReservation ? 'Actualizar Reserva' : 'Crear Reserva'}
        </button>
      </div>
    </form>
  );
};

export default ReservationForm;\n\n

=== ./reservas/pages/customer/ReservationModal.jsx ===
import { useEffect, useRef } from 'react';
import { gsap } from 'gsap';
import {
  FiCheck,
  FiPackage,
  FiCalendar,
  FiClock,
  FiDollarSign,
  FiUser,
  FiImage,
  FiList,
  FiInfo,
  FiMapPin,
  FiMail
} from 'react-icons/fi';
import SummaryItem from './SummaryItem';
import { useNavigate } from 'react-router-dom';

const ReservationModal = ({ reservationData, onClose, packages, extrasData }) => {
  const navigate = useNavigate();
  const modalRef = useRef(null);
  const { extras, tuesdayFee } = reservationData;

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('es-MX', {
      style: 'currency',
      currency: 'MXN'
    }).format(amount);
  };

  const formatDate = (date) => {
    return new Intl.DateTimeFormat('es-MX', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    }).format(new Date(date));
  };
  
  const getDayType = (fecha) => {
    if (!fecha) return '';
    const reservationDate = new Date(fecha);
    const dayOfWeek = reservationDate.getDay();
    return dayOfWeek >= 1 && dayOfWeek <= 4 ? 'L-J' : 'V-D';
  };

  const getExtrasTotal = () => {
    return extras?.reduce((total, extra) => {
      const extraInfo = extrasData.find(e => e.id === extra.id);
      return total + (parseFloat(extraInfo?.precio || 0) * (parseInt(extra.cantidad) || 1));
    }, 0) || 0;
  };

  useEffect(() => {
    gsap.fromTo(
      modalRef.current,
      { opacity: 0, scale: 0.8 },
      {
        opacity: 1,
        scale: 1,
        duration: 0.5,
        ease: 'elastic.out(1, 0.75)',
      }
    );
  }, []);

  const handleClose = () => {
    onClose();
    navigate(`/reservation-status/${reservationData.id}`);
  };

  const Section = ({ title, children, icon: Icon }) => (
    <div className="bg-white p-4 rounded-lg border border-gray-100 space-y-3">
      <h3 className="text-lg font-medium text-gray-900 flex items-center gap-2 border-b pb-2">
        {Icon && <Icon className="w-5 h-5 text-indigo-600" />}
        {title}
      </h3>
      {children}
    </div>
  );

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center z-50 p-4">
      <div
        ref={modalRef}
        className="bg-gradient-to-b from-white to-gray-50 p-6 rounded-xl shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto"
      >
        {/* Encabezado */}
        <div className="text-center mb-8">
          <div className="bg-green-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
            <FiCheck className="text-green-500 text-4xl" />
          </div>
          <h2 className="text-2xl font-bold text-indigo-700">
            Â¡Reserva Confirmada!
          </h2>
          <p className="text-gray-600 mt-2">
            Tu reservaciÃ³n ha sido registrada exitosamente
          </p>
          <div className="text-sm text-gray-500 mt-1">
            ID de Reserva: #{reservationData.id}
          </div>
        </div>

        <div className="space-y-6">
          {/* Detalles del Paquete */}
          <Section title="Detalles del Paquete" icon={FiPackage}>
            <div className="bg-indigo-50 p-4 rounded-lg">
              <SummaryItem
                icon={<FiPackage className="text-indigo-600" />}
                label="Paquete Seleccionado"
                value={`${packages.find((pkg) => pkg.id === reservationData.id_paquete)?.nombre || 'No seleccionado'}`}
              />
              <SummaryItem
                icon={<FiDollarSign className="text-indigo-600" />}
                label="Precio del Paquete"
                value={`${formatCurrency(reservationData.packagePrice)} (Tarifa ${getDayType(reservationData.fecha_reserva)})`}
              />
            </div>
          </Section>

          {/* Fecha y Horario */}
          <Section title="Fecha y Horario" icon={FiCalendar}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <SummaryItem
                icon={<FiCalendar className="text-indigo-600" />}
                label="Fecha"
                value={formatDate(reservationData.fecha_reserva)}
              />
              <SummaryItem
                icon={<FiClock className="text-indigo-600" />}
                label="Horario"
                value={reservationData.hora_inicio === 'maÃ±ana' ? 'Matutino (9:00 - 14:00)' : 'Vespertino (15:00 - 20:00)'}
              />
            </div>
          </Section>

          {/* InformaciÃ³n del Festejado */}
          <Section title="InformaciÃ³n del Festejado" icon={FiUser}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <SummaryItem
                icon={<FiUser className="text-indigo-600" />}
                label="Nombre"
                value={reservationData.nombre_festejado}
              />
              <SummaryItem
                icon={<FiUser className="text-indigo-600" />}
                label="Edad"
                value={`${reservationData.edad_festejado} aÃ±os`}
              />
            </div>
          </Section>

          {/* Servicios Seleccionados */}
          <Section title="Servicios Seleccionados" icon={FiList}>
            <SummaryItem
              icon={<FiDollarSign className="text-indigo-600" />}
              label="OpciÃ³n de Alimento"
              value={reservationData.opcion_alimento_nombre || 'Ninguna'}
            />
            <SummaryItem
              icon={<FiImage className="text-indigo-600" />}
              label="TemÃ¡tica"
              value={reservationData.tematica_nombre || 'No seleccionada'}
            />
          </Section>

          {/* Extras y Cargos Adicionales */}
          {(extras?.length > 0 || tuesdayFee > 0) && (
            <Section title="Extras y Cargos Adicionales" icon={FiList}>
              {extras && extras.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-medium text-gray-700">Servicios Extra:</h4>
                  {extras.map((extra, index) => {
                    const extraInfo = extrasData.find((e) => e.id === extra.id);
                    const extraTotal = (parseFloat(extraInfo?.precio) || 0) * (parseInt(extra.cantidad) || 1);
                    return (
                      <div key={index} className="flex justify-between text-sm">
                        <span>{`${extraInfo?.nombre} (x${extra.cantidad})`}</span>
                        <span className="font-medium">{formatCurrency(extraTotal)}</span>
                      </div>
                    );
                  })}
                  <div className="border-t pt-2 mt-2">
                    <div className="flex justify-between font-medium">
                      <span>Total Extras:</span>
                      <span>{formatCurrency(getExtrasTotal())}</span>
                    </div>
                  </div>
                </div>
              )}
              {tuesdayFee > 0 && (
                <SummaryItem
                  icon={<FiDollarSign className="text-indigo-600" />}
                  label="Cargo por Martes"
                  value={formatCurrency(tuesdayFee)}
                />
              )}
            </Section>
          )}

          {/* Resumen de Costos */}
          <Section title="Resumen de Costos" icon={FiDollarSign}>
            <div className="bg-indigo-50 p-4 rounded-lg space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Paquete Base ({getDayType(reservationData.fecha_reserva)}):</span>
                <span>{formatCurrency(reservationData.packagePrice)}</span>
              </div>
              {extras && extras.length > 0 && (
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Total Extras:</span>
                  <span>{formatCurrency(getExtrasTotal())}</span>
                </div>
              )}
              {tuesdayFee > 0 && (
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Cargo Martes:</span>
                  <span>{formatCurrency(tuesdayFee)}</span>
                </div>
              )}
              <div className="border-t border-indigo-100 pt-2 mt-2">
                <div className="flex justify-between items-center font-bold text-lg">
                  <span>Total Final:</span>
                  <span className="text-indigo-600">{formatCurrency(reservationData.total)}</span>
                </div>
              </div>
            </div>
          </Section>
        </div>

        {/* Botones de AcciÃ³n */}
        <div className="mt-8 flex justify-center gap-4">
          <button
            onClick={handleClose}
            className="px-6 py-2 rounded-md text-white bg-indigo-600 hover:bg-indigo-700 transition duration-300 flex items-center gap-2"
          >
            <FiCheck className="w-5 h-5" />
            Ver Estado de Reserva
          </button>
        </div>
      </div>
    </div>
  );
};

export default ReservationModal;\n\n

=== ./reservas/pages/customer/ReservationStatus.jsx ===
// ReservationStatus.js
import { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import axiosInstance from '@shared/utils/axiosConfig';
import { toast } from 'react-toastify';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';
import {jwtDecode} from 'jwt-decode'; // Corrected import

import {
  FiCalendar,
  FiClock,
  FiDollarSign,
  FiPackage,
  FiUser,
  FiImage,
  FiInfo,
  FiPlus,
  FiCheck,
  FiX,
  FiAlertCircle,
  FiCreditCard,
  FiMessageCircle,
  FiStar,
  FiActivity,
  FiRefreshCw,
  FiList,
  FiMaximize,
  FiZoomIn,
} from 'react-icons/fi';
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
} from '@shared/components/Card';
import { Dialog, DialogContent, DialogTitle } from '@shared/components/Dialog';

// Helper functions
const formatDate = (dateString) => {
  if (!dateString) return 'Fecha no disponible';
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return 'Fecha invÃ¡lida';
    return format(date, 'PPP', { locale: es });
  } catch (error) {
    console.error('Error al formatear fecha:', error);
    return 'Fecha invÃ¡lida';
  }
};

const formatCurrency = (amount) => {
  if (!amount) return '$0.00';
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN',
  }).format(amount);
};

// Componente para mostrar imÃ¡genes a pantalla completa
const ImageLightbox = ({ isOpen, onClose, imageUrl, alt }) => {
  if (!isOpen) return null;

  // Handler para detectar clics en el fondo
  const handleBackdropClick = (e) => {
    // Cerrar el lightbox al hacer clic en cualquier parte
    onClose();
  };

  // Handler para evitar que los clics en la imagen cierren el lightbox
  const handleImageClick = (e) => {
    e.stopPropagation(); // Evita que el clic se propague al fondo
  };

  return (
    <div 
      className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-90 transition-opacity duration-300"
      onClick={handleBackdropClick} // Cerrar al hacer clic en cualquier parte
    >
      <div className="relative w-full h-full flex flex-col">
        {/* Barra superior con botÃ³n de cierre */}
        <div className="flex justify-end p-4">
          <button 
            onClick={onClose}
            className="text-white p-2 rounded-full hover:bg-white/10 transition-colors"
            aria-label="Cerrar"
          >
            <FiX size={24} />
          </button>
        </div>
        
        {/* Contenedor de la imagen */}
        <div className="flex-1 flex items-center justify-center p-4">
          <img 
            src={imageUrl}
            alt={alt}
            className="max-h-full max-w-full object-contain"
            onClick={handleImageClick}
          />
        </div>
      </div>
    </div>
  );
};

// Components
const StatusBadge = ({ status }) => {
  const statusConfig = {
    pendiente: {
      icon: FiClock,
      class: 'bg-yellow-100 text-yellow-800',
      text: 'Pendiente',
    },
    confirmada: {
      icon: FiCheck,
      class: 'bg-green-100 text-green-800',
      text: 'Confirmada',
    },
    cancelada: {
      icon: FiX,
      class: 'bg-red-100 text-red-800',
      text: 'Cancelada',
    },
  };

  const config = statusConfig[status] || statusConfig.pendiente;
  const Icon = config.icon;

  return (
    <span
      className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${config.class}`}
    >
      <Icon className="w-4 h-4 mr-2" />
      {config.text}
    </span>
  );
};

const ReservationCard = ({ reservation, isActive, onClick }) => {
  const cardVariants = {
    initial: { scale: 1 },
    hover: { scale: 1.02 },
    tap: { scale: 0.98 },
  };

  return (
    <motion.div
      variants={cardVariants}
      initial="initial"
      whileHover="hover"
      whileTap="tap"
      className={`p-4 rounded-lg border cursor-pointer transition-colors duration-200 ${
        isActive
          ? 'border-indigo-500 bg-indigo-50 shadow-md'
          : 'border-gray-200 hover:border-indigo-300 hover:bg-gray-50'
      }`}
      onClick={onClick}
    >
      <div className="flex justify-between items-start">
        <div className="flex items-start space-x-3">
          <div
            className={`p-2 rounded-full ${
              isActive ? 'bg-indigo-100' : 'bg-gray-100'
            }`}
          >
            <FiUser
              className={`w-5 h-5 ${
                isActive ? 'text-indigo-600' : 'text-gray-500'
              }`}
            />
          </div>
          <div>
            <h3 className="font-medium text-gray-900">
              {reservation.nombre_festejado}
            </h3>
            <div className="flex items-center text-sm text-gray-500">
              <FiCalendar className="w-4 h-4 mr-1" />
              {formatDate(reservation.fecha_reserva)}
            </div>
          </div>
        </div>
        <StatusBadge status={reservation.estado} />
      </div>
    </motion.div>
  );
};

// Componente estÃ¡ndar para detalles sin imÃ¡genes
const DetailSection = ({ icon: Icon, label, value, className = '' }) => (
  <div className={`flex items-start space-x-3 ${className}`}>
    <div className="flex-shrink-0 p-2 bg-indigo-100 rounded-lg">
      <Icon className="w-5 h-5 text-indigo-600" />
    </div>
    <div>
      <p className="text-sm font-medium text-gray-500">{label}</p>
      <p className="mt-1 text-lg font-medium text-gray-900">{value}</p>
    </div>
  </div>
);

// Componente para detalles con imÃ¡genes (temÃ¡ticas, mamparas)
const DetailSectionWithImage = ({ icon: Icon, label, value, imageUrl, alt, onImageClick, imageError = false, className = '' }) => (
  <div className={`flex flex-col ${className}`}>
    <div className="flex items-start space-x-3">
      <div className="flex-shrink-0 p-2 bg-indigo-100 rounded-lg">
        <Icon className="w-5 h-5 text-indigo-600" />
      </div>
      <div>
        <p className="text-sm font-medium text-gray-500">{label}</p>
        <p className="mt-1 text-lg font-medium text-gray-900">{value}</p>
      </div>
    </div>
    
    {imageUrl && !imageError ? (
      <div className="mt-3 ml-10 relative">
        <div className="relative overflow-hidden rounded-lg group">
          <img
            src={imageUrl}
            alt={alt}
            className="w-full max-w-xs rounded-lg shadow-sm group-hover:shadow-md transition-all duration-300 object-cover"
            style={{ maxHeight: '160px' }}
            onError={(e) => {
              e.target.onerror = null;
              e.target.style.display = 'none';
            }}
          />
          <div 
            className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100 cursor-pointer"
            onClick={onImageClick}
          >
            <div className="p-2 bg-white bg-opacity-80 rounded-full">
              <FiZoomIn size={20} className="text-indigo-600" />
            </div>
          </div>
        </div>
        <button
          className="absolute top-2 right-2 p-1 bg-white rounded-full shadow-md hover:bg-indigo-50 transition-colors"
          onClick={onImageClick}
          aria-label="Ver imagen ampliada"
        >
          <FiMaximize size={16} className="text-indigo-600" />
        </button>
      </div>
    ) : null}
  </div>
);

const TimelineEvent = ({ title, description, icon: Icon, isCompleted }) => (
  <div className="flex items-start space-x-4">
    <div
      className={`flex-shrink-0 w-8 h-8 flex items-center justify-center rounded-full ${
        isCompleted ? 'bg-green-100' : 'bg-gray-100'
      }`}
    >
      <Icon
        className={`w-4 h-4 ${
          isCompleted ? 'text-green-600' : 'text-gray-400'
        }`}
      />
    </div>
    <div>
      <p className="font-medium text-gray-900">{title}</p>
      <p className="text-sm text-gray-500">{description}</p>
    </div>
  </div>
);

const LoadingSpinner = () => (
  <div className="min-h-screen bg-gradient-to-br from-purple-100 to-indigo-200 flex items-center justify-center">
    <motion.div
      className="relative w-20 h-20"
      animate={{ rotate: 360 }}
      transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}
    >
      <div className="absolute top-0 left-0 w-full h-full border-4 border-indigo-200 rounded-full"></div>
      <div className="absolute top-0 left-0 w-full h-full border-4 border-indigo-600 rounded-full border-t-transparent animate-spin"></div>
      <motion.div
        className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"
        animate={{ opacity: [0.5, 1, 0.5] }}
        transition={{ duration: 1, repeat: Infinity }}
      >
        <FiRefreshCw className="w-8 h-8 text-indigo-600" />
      </motion.div>
    </motion.div>
  </div>
);

const ErrorState = ({ message, onRetry }) => (
  <div className="min-h-screen bg-gradient-to-br from-purple-100 to-indigo-200 flex items-center justify-center p-4">
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white p-8 rounded-lg shadow-xl max-w-md w-full text-center"
    >
      <div className="mb-6">
        <motion.div
          animate={{
            scale: [1, 1.2, 1],
            rotate: [0, 15, -15, 0],
          }}
          transition={{ duration: 0.5 }}
        >
          <FiAlertCircle className="w-16 h-16 text-red-500 mx-auto" />
        </motion.div>
      </div>
      <h2 className="text-2xl font-bold text-gray-900 mb-4">
        Â¡Ups! Algo saliÃ³ mal
      </h2>
      <p className="text-gray-600 mb-8">{message}</p>
      <div className="space-y-4">
        <button
          onClick={onRetry}
          className="w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors flex items-center justify-center"
        >
          <FiRefreshCw className="w-5 h-5 mr-2" />
          Intentar de nuevo
        </button>
        <button
          onClick={() => window.location.href = '/'}
          className="w-full px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
        >
          Volver al inicio
        </button>
      </div>
    </motion.div>
  </div>
);

const EmptyState = ({ onCreateNew }) => (
  <div className="min-h-screen bg-gradient-to-br from-purple-100 to-indigo-200 flex items-center justify-center p-4">
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white p-8 rounded-lg shadow-xl max-w-md w-full text-center"
    >
      <motion.div
        animate={{
          y: [0, -10, 0],
        }}
        transition={{
          duration: 2,
          repeat: Infinity,
          ease: 'easeInOut',
        }}
      >
        <FiCalendar className="w-16 h-16 text-indigo-500 mx-auto mb-6" />
      </motion.div>
      <h2 className="text-2xl font-bold text-gray-900 mb-4">
        Â¡Comienza tu aventura!
      </h2>
      <p className="text-gray-600 mb-8">
        AÃºn no tienes reservas. Â¿QuÃ© tal si creas tu primera experiencia mÃ¡gica?
      </p>
      <motion.button
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={onCreateNew}
        className="px-6 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors flex items-center justify-center mx-auto"
      >
        <FiPlus className="w-5 h-5 mr-2" />
        Crear Nueva Reserva
      </motion.button>
    </motion.div>
  </div>
);

const ReservationStatus = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeReservation, setActiveReservation] = useState(null);
  const [userReservations, setUserReservations] = useState([]);
  const [showConfirmCancel, setShowConfirmCancel] = useState(false);
  const [userId, setUserId] = useState(null);
  const [reservationData, setReservationData] = useState(null);
  
  // Estados para los lightboxes
  const [tematicaLightboxOpen, setTematicaLightboxOpen] = useState(false);
  const [mamparaLightboxOpen, setMamparaLightboxOpen] = useState(false);
  const [tematicaImageError, setTematicaImageError] = useState(false);
  const [mamparaImageError, setMamparaImageError] = useState(false);

  const { id } = useParams();
  const navigate = useNavigate();

  // Resetear los errores de imagen cuando cambia la reserva activa
  useEffect(() => {
    if (activeReservation) {
      setTematicaImageError(false);
      setMamparaImageError(false);
    }
  }, [activeReservation]);

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      navigate('/signin');
      return;
    }

    try {
      const decodedToken = jwtDecode(token);
      console.log('Decoded token:', decodedToken);
      setUserId(decodedToken.id);
    } catch (error) {
      console.error('Error al decodificar el token:', error);
      navigate('/signin');
    }
  }, [navigate]);

  useEffect(() => {
    const fetchReservationData = async () => {
      try {
        const response = await axiosInstance.get(`/api/reservas/${id}`);
        setReservationData(response.data);
      } catch (error) {
        console.error('Error al obtener los datos de la reserva:', error);
        // Redirigir a una pÃ¡gina de error o a la pÃ¡gina de reservas
        navigate('/reservations');
      }
    };

    fetchReservationData();
  }, [id, navigate]);

  useEffect(() => {
    if (userId) {
      fetchUserReservations();
    }
  }, [userId]);

  const fetchUserReservations = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await axiosInstance.get('/api/reservas', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });

      if (response.data) {
        // Filter reservations by userId
        const userReservationsData = response.data.filter(
          (reserva) => reserva.id_usuario === userId
        );

        const sortedReservations = userReservationsData.sort(
          (a, b) => new Date(b.fecha_reserva) - new Date(a.fecha_reserva)
        );

        setUserReservations(sortedReservations);

        // Select the active reservation
        if (id) {
          const selectedReservation = sortedReservations.find(
            (r) => r.id === parseInt(id)
          );
          setActiveReservation(selectedReservation || sortedReservations[0]);
        } else {
          setActiveReservation(sortedReservations[0]);
        }
      }
    } catch (error) {
      console.error('Error al obtener las reservas:', error);
      if (error.response?.status === 401) {
        navigate('/signin');
      } else {
        setError(
          'No se pudieron cargar tus reservas. Por favor, intenta mÃ¡s tarde.'
        );
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCancelReservation = async () => {
    try {
      if (!activeReservation?.id || activeReservation.id_usuario !== userId) {
        toast.error('No tienes permiso para cancelar esta reserva');
        return;
      }

      await axiosInstance.put(
        `/api/reservas/${activeReservation.id}`,
        {
          estado: 'cancelada',
        },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        }
      );

      await fetchUserReservations();
      setShowConfirmCancel(false);
      toast.success('Reserva cancelada exitosamente');
    } catch (error) {
      console.error('Error al cancelar la reserva:', error);
      toast.error('No se pudo cancelar la reserva. Por favor, intenta mÃ¡s tarde.');
      if (error.response?.status === 401) {
        navigate('/signin');
      }
    }
  };

  // Render conditional based on state
  if (loading) return <LoadingSpinner />;
  if (error) return <ErrorState message={error} onRetry={fetchUserReservations} />;
  if (!userReservations || userReservations.length === 0) {
    return <EmptyState onCreateNew={() => navigate('/reservations')} />;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-100 to-indigo-200 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-3xl font-bold text-gray-900">Mis Reservas</h1>
          <p className="mt-2 text-gray-600">
            Gestiona y visualiza todas tus reservas en un solo lugar
          </p>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
          {/* Sidebar with reservations */}
          <div className="lg:col-span-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex justify-between items-center">
                  <span className="flex items-center">
                    <FiList className="w-5 h-5 mr-2" />
                    Reservas Activas
                  </span>
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => navigate('/reservations')}
                    className="p-2 bg-indigo-100 text-indigo-600 rounded-full hover:bg-indigo-200 transition-colors"
                  >
                    <FiPlus className="w-5 h-5" />
                  </motion.button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <AnimatePresence>
                  <div className="space-y-4">
                    {userReservations.map((reservation) => (
                      <ReservationCard
                        key={reservation.id}
                        reservation={reservation}
                        isActive={activeReservation?.id === reservation.id}
                        onClick={() => setActiveReservation(reservation)}
                      />
                    ))}
                  </div>
                </AnimatePresence>
              </CardContent>
            </Card>
          </div>

          {/* Reservation details */}
          <div className="lg:col-span-8">
            {activeReservation && (
              <AnimatePresence mode="wait">
                <motion.div
                  key={activeReservation.id}
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: -20 }}
                  className="space-y-6"
                >
                  <Card>
                    <CardHeader>
                      <div className="flex justify-between items-center">
                        <CardTitle className="flex items-center">
                          <FiStar className="w-6 h-6 mr-2 text-indigo-500" />
                          Detalles de la Reserva
                        </CardTitle>
                        <StatusBadge status={activeReservation.estado} />
                      </div>
                    </CardHeader>
                    <CardContent>
                      {/* Main info grid */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
                        <DetailSection
                          icon={FiPackage}
                          label="Paquete"
                          value={
                            activeReservation.paquete?.nombre || 'No especificado'
                          }
                        />
                        <DetailSection
                          icon={FiCalendar}
                          label="Fecha"
                          value={formatDate(activeReservation.fecha_reserva)}
                        />
                        <DetailSection
                          icon={FiClock}
                          label="Horario"
                          value={
                            activeReservation.hora_inicio === 'maÃ±ana'
                              ? 'Matutino'
                              : 'Vespertino'
                          }
                        />
                        <DetailSection
                          icon={FiUser}
                          label="Festejado"
                          value={`${activeReservation.nombre_festejado} (${activeReservation.edad_festejado} aÃ±os)`}
                        />
                        
                        {/* TemÃ¡tica con imagen */}
                        <DetailSectionWithImage
                          icon={FiImage}
                          label="TemÃ¡tica"
                          value={activeReservation.tematicaReserva?.nombre || 'No especificada'}
                          imageUrl={activeReservation.tematicaReserva?.foto}
                          alt={`TemÃ¡tica ${activeReservation.tematicaReserva?.nombre}`}
                          onImageClick={() => setTematicaLightboxOpen(true)}
                          imageError={tematicaImageError}
                        />
                        
                        {/* Mampara con imagen */}
                        {activeReservation.mampara && (
                          <DetailSectionWithImage
                            icon={FiImage}
                            label="Mampara"
                            value={`${activeReservation.mampara.piezas} piezas`}
                            imageUrl={activeReservation.mampara?.foto}
                            alt={`Mampara de ${activeReservation.mampara.piezas} piezas`}
                            onImageClick={() => setMamparaLightboxOpen(true)}
                            imageError={mamparaImageError}
                          />
                        )}
                        <DetailSection
                          icon={FiDollarSign}
                          label="Total"
                          value={formatCurrency(activeReservation.total)}
                        />
                      </div>

                      {/* Timeline */}
                      <div className="mb-8">
                        <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                          <FiActivity className="w-5 h-5 mr-2 text-indigo-500" />
                          Progreso de la Reserva
                        </h3>
                        <div className="relative">
                          <div className="absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200"></div>
                          <div className="space-y-6">
                            <TimelineEvent
                              title="Reserva Creada"
                              description="Tu reserva ha sido registrada en el sistema"
                              icon={FiCalendar}
                              isCompleted={true}
                            />
                            <TimelineEvent
                              title="Pago Confirmado"
                              description="El pago ha sido procesado exitosamente"
                              icon={FiCreditCard}
                              isCompleted={
                                activeReservation.estado === 'confirmada'
                              }
                            />
                            <TimelineEvent
                              title="Evento Completado"
                              description="Â¡Gracias por celebrar con nosotros!"
                              icon={FiCheck}
                              isCompleted={
                                activeReservation.estado === 'completada'
                              }
                            />
                          </div>
                        </div>
                      </div>

                      {/* Extras */}
                      {activeReservation.extras?.length > 0 && (
                        <div className="mb-8">
                          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                            <FiPlus className="w-5 h-5 mr-2 text-indigo-500" />
                            Extras Contratados
                          </h3>
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            {activeReservation.extras.map((extra) => (
                              <motion.div
                                key={extra.id}
                                whileHover={{ scale: 1.02 }}
                                className="bg-white p-4 rounded-lg border border-gray-200 shadow-sm"
                              >
                                <div className="flex items-start space-x-3">
                                  <div className="p-2 bg-indigo-100 rounded-lg">
                                    <FiStar className="w-5 h-5 text-indigo-600" />
                                  </div>
                                  <div>
                                    <h4 className="font-medium text-gray-900">
                                      {extra.nombre}
                                    </h4>
                                    <p className="text-sm text-gray-500">
                                      {formatCurrency(extra.precio)}
                                    </p>
                                  </div>
                                </div>
                              </motion.div>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Comments */}
                      {activeReservation.comentarios && (
                        <div className="mb-8">
                          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                            <FiMessageCircle className="w-5 h-5 mr-2 text-indigo-500" />
                            Comentarios
                          </h3>
                          <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                            <p className="text-gray-700">
                              {activeReservation.comentarios}
                            </p>
                          </div>
                        </div>
                      )}

                      {/* Actions */}
                      <div className="flex justify-end space-x-4">
                        {activeReservation.estado === 'pendiente' && (
                          <motion.button
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                            onClick={() => setShowConfirmCancel(true)}
                            className="px-4 py-2 text-red-600 hover:text-red-700 transition-colors flex items-center"
                          >
                            <FiX className="w-5 h-5 mr-2" />
                            Cancelar Reserva
                          </motion.button>
                        )}
                        <motion.button
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                          onClick={() => navigate('/reservations')}
                          className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors flex items-center"
                        >
                          <FiPlus className="w-5 h-5 mr-2" />
                          Nueva Reserva
                        </motion.button>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              </AnimatePresence>
            )}
          </div>
        </div>
      </div>

      {/* Lightbox para imagen de temÃ¡tica - fuera de la card */}
      <ImageLightbox 
        isOpen={tematicaLightboxOpen}
        onClose={() => setTematicaLightboxOpen(false)}
        imageUrl={activeReservation?.tematicaReserva?.foto || ''}
        alt={activeReservation?.tematicaReserva?.nombre || 'Imagen de temÃ¡tica'}
      />
      
      {/* Lightbox para imagen de mampara - fuera de la card */}
      <ImageLightbox 
        isOpen={mamparaLightboxOpen}
        onClose={() => setMamparaLightboxOpen(false)}
        imageUrl={activeReservation?.mampara?.foto || ''}
        alt={`Mampara de ${activeReservation?.mampara?.piezas || 0} piezas`}
      />

      {/* Cancel Confirmation Modal */}
      <Dialog open={showConfirmCancel} onClose={() => setShowConfirmCancel(false)}>
        <DialogContent className="sm:max-w-lg">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
          >
            <DialogTitle className="flex items-center text-red-600">
              <FiAlertCircle className="w-6 h-6 mr-2" />
              Confirmar CancelaciÃ³n
            </DialogTitle>
            <div className="mt-6">
              <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <FiInfo className="h-5 w-5 text-red-400" />
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-red-800">
                      Importante: Esta acciÃ³n no se puede deshacer
                    </h3>
                    <div className="mt-2 text-sm text-red-700">
                      <ul className="list-disc space-y-1 pl-5">
                        <li>
                          La fecha quedarÃ¡ disponible para otros clientes
                        </li>
                        <li>
                          DeberÃ¡s crear una nueva reserva si deseas reagendar
                        </li>
                        <li>
                          El reembolso puede tomar hasta 15 dÃ­as hÃ¡biles
                        </li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>

              <div className="mt-6 flex justify-end space-x-4">
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => setShowConfirmCancel(false)}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors flex items-center"
                >
                  <FiX className="w-5 h-5 mr-2" />
                  Mantener Reserva
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={handleCancelReservation}
                  className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors flex items-center"
                >
                  <FiCheck className="w-5 h-5 mr-2" />
                  Confirmar CancelaciÃ³n
                </motion.button>
              </div>
            </div>
          </motion.div>
        </DialogContent>
      </Dialog>

      {/* Error Notification */}
      {error && (
        <div className="fixed bottom-4 right-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg shadow-lg">
          <div className="flex items-start">
            <FiAlertCircle className="w-5 h-5 mr-2 mt-0.5" />
            <div>
              <h3 className="font-medium">Error</h3>
              <p className="text-sm">{error}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ReservationStatus;\n\n

=== ./reservas/pages/customer/ReservationSummary.jsx ===
import { motion } from 'framer-motion';
import { FiCalendar, FiClock, FiCheck } from 'react-icons/fi';
import { useTheme } from '@shared/context/ThemeContext';

const ReservationSummary = ({ reservations, filterDataByMonth }) => {
    const { theme } = useTheme();
    const isDark = theme === 'dark';
    
    const currentMonth = new Date().toLocaleString('es-ES', { month: 'long' });
    const capitalizedMonth = currentMonth.charAt(0).toUpperCase() + currentMonth.slice(1);

    const filteredReservations = filterDataByMonth(reservations, 'fecha_reserva');
    const reservationsCount = filteredReservations.length;
    const confirmedReservations = filteredReservations.filter(r => r.estado === 'confirmada').length;
    const pendingReservations = filteredReservations.filter(r => r.estado === 'pendiente').length;

    return (
        <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            className="h-full"
        >
            {/* Header */}
            <div className={isDark 
                ? "bg-gradient-to-r from-green-800 to-emerald-900 p-6" 
                : "bg-gradient-to-r from-green-500 to-emerald-600 p-6"
            }>
                <div className="flex items-center justify-between">
                    <h2 className="text-xl font-semibold text-white">Reservas</h2>
                    <div className="p-2 rounded-full bg-white/20 text-white">
                        <FiCalendar className="w-5 h-5" />
                    </div>
                </div>
            </div>
            
            {/* Content */}
            <div className="p-4 md:p-6" style={{ 
                backgroundColor: isDark ? 'var(--panel-bg)' : 'white',
                color: isDark ? 'var(--color-text-primary)' : 'inherit'
            }}>
                <div className="flex flex-col items-center text-center mb-4 md:mb-6">
                    <span className={`text-xs md:text-sm font-medium px-3 md:px-4 py-1 rounded-full mb-2 md:mb-3 ${
                        isDark ? 'bg-gray-800 text-gray-100' : 'bg-gray-100 text-gray-600'
                    }`}>
                        {capitalizedMonth}
                    </span>
                    <p className={`text-3xl md:text-4xl font-bold ${
                        isDark ? 'text-green-400' : 'text-green-600'
                    }`}>
                        {reservationsCount}
                    </p>
                    <p className={`text-xs md:text-sm font-medium mt-1 ${
                        isDark ? 'text-gray-300' : 'text-gray-600'
                    }`}>
                        {reservationsCount === 1 ? 'reserva' : 'reservas'} este mes
                    </p>
                </div>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-6">
                    {/* Confirmed reservations card */}
                    <div className={`rounded-lg p-3 md:p-4 shadow-sm border text-center ${
                        isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'
                    }`}>
                        <div className={`mx-auto w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-full mb-2 md:mb-3 ${
                            isDark ? 'bg-green-900 text-green-400' : 'bg-green-100 text-green-600'
                        }`}>
                            <FiCheck className="w-4 h-4 md:w-5 md:h-5" />
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className={`text-base md:text-xl font-bold ${
                                isDark ? 'text-white' : 'text-gray-800'
                            }`}>
                                {confirmedReservations}
                            </p>
                            <p className={`text-xs md:text-sm font-medium text-center ${
                                isDark ? 'text-gray-300' : 'text-gray-600'
                            }`}>
                                Confirmadas
                            </p>
                        </div>
                    </div>
                    
                    {/* Pending reservations card */}
                    <div className={`rounded-lg p-3 md:p-4 shadow-sm border text-center ${
                        isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'
                    }`}>
                        <div className={`mx-auto w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-full mb-2 md:mb-3 ${
                            isDark ? 'bg-amber-900 text-amber-400' : 'bg-amber-100 text-amber-600'
                        }`}>
                            <FiClock className="w-4 h-4 md:w-5 md:h-5" />
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className={`text-base md:text-xl font-bold ${
                                isDark ? 'text-white' : 'text-gray-800'
                            }`}>
                                {pendingReservations}
                            </p>
                            <p className={`text-xs md:text-sm font-medium text-center ${
                                isDark ? 'text-gray-300' : 'text-gray-600'
                            }`}>
                                Pendientes
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </motion.div>
    );
};

export default ReservationSummary;\n\n

=== ./reservas/pages/customer/StepperReservation.jsx ===
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm, FormProvider } from 'react-hook-form';
import { AnimatePresence, motion } from 'framer-motion';
import { 
  FiArrowLeft, 
  FiArrowRight, 
  FiCheck, 
  FiX, 
  FiAlertTriangle, 
  FiInfo, 
  FiShoppingCart, 
  FiMenu,
  FiChevronLeft,
  FiChevronRight,
  FiMaximize,
  FiMinimize
} from 'react-icons/fi';

// Componentes de cada paso
import PackageStep from './reservationsteps/PackageStep';
import DateTimeStep from './reservationsteps/DateTimeStep';
import ThemeStep from './reservationsteps/ThemeStep';
import MamparaStep from './reservationsteps/MamparaStep';
import FoodOptionsStep from './reservationsteps/FoodOptionsStep';
import ExtrasStep from './reservationsteps/ExtrasStep';
import CelebrantStep from './reservationsteps/CelebrantStep';
import ReviewStep from './reservationsteps/ReviewStep';

// Componentes auxiliares
import StepIndicator from './reservationcomponents/StepIndicator';
import SummarySidebar from './reservationcomponents/SummarySidebar';
import TuesdayModal from './TuesdayModal';
import PaymentModal from './PaymentModalCustomer';
import ConfirmationModal from './ConfirmationModal';

// Servicios y utilidades
import { useReservationData } from '@shared/hooks/useReservationData';
import { formatters } from '@shared/utils/formatters';

// DefiniciÃ³n de los pasos
const STEPS = [
  { id: 'package', label: 'Paquete', component: PackageStep, required: ['id_paquete'], icon: FiShoppingCart },
  { id: 'datetime', label: 'Fecha y Hora', component: DateTimeStep, required: ['fecha_reserva', 'hora_inicio'], icon: FiArrowRight },
  { id: 'theme', label: 'TemÃ¡tica', component: ThemeStep, required: ['id_tematica'], icon: FiArrowRight },
  { id: 'mampara', label: 'Mampara', component: MamparaStep, required: [], icon: FiArrowRight },
  { id: 'food', label: 'Alimentos', component: FoodOptionsStep, required: [], icon: FiArrowRight },
  { id: 'extras', label: 'Extras', component: ExtrasStep, required: [], icon: FiArrowRight },
  { id: 'celebrant', label: 'Festejado', component: CelebrantStep, required: ['nombre_festejado', 'edad_festejado'], icon: FiArrowRight },
  { id: 'review', label: 'Revisar', component: ReviewStep, required: [], icon: FiCheck }
];

const StepperReservation = () => {
  const navigate = useNavigate();
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalType, setModalType] = useState(null); // 'tuesday', 'payment', 'confirmation'
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [apiError, setApiError] = useState(null);
  const [isExitWarningOpen, setIsExitWarningOpen] = useState(false);
  const [isSummaryOpen, setIsSummaryOpen] = useState(false); // Para toggle del resumen en mÃ³vil
  const [isFullscreen, setIsFullscreen] = useState(false); // Para modo pantalla completa

  // Obtener datos para el formulario de reserva
  const { 
    packages, 
    tematicas, 
    mamparas, 
    foodOptions,
    extras,
    loading, 
    error, 
    unavailableDates,
    existingReservations,
    createReservation,
  } = useReservationData();
  
  // Configurar el formulario con react-hook-form
  const methods = useForm({
    defaultValues: {
      id_paquete: null,
      fecha_reserva: null,
      hora_inicio: null,
      id_tematica: null,
      id_mampara: null,
      id_opcion_alimento: null,
      extras: [],
      nombre_festejado: '',
      edad_festejado: '',
      sexo_festejado: '',
      color_favorito: '',
      detalles_especiales: '',
      tuesdayFee: 0,
      packagePrice: 0
    }
  });
  
  const { watch, setValue, handleSubmit, formState } = methods;
  
  // Valores actuales del formulario
  const formValues = watch();
  
  // Efecto para manejar el cÃ¡lculo de precios del paquete
  useEffect(() => {
    if (formValues.id_paquete && formValues.fecha_reserva) {
      const selectedPackage = packages.find(pkg => pkg.id === formValues.id_paquete);
      if (selectedPackage) {
        // Determinar si es fin de semana
        const day = formValues.fecha_reserva.getDay();
        const isWeekend = day === 0 || day === 5 || day === 6; // Domingo(0), Viernes(5), SÃ¡bado(6)
        
        // Establecer precio segÃºn el dÃ­a
        const packagePrice = isWeekend 
          ? parseFloat(selectedPackage.precio_viernes_domingo)
          : parseFloat(selectedPackage.precio_lunes_jueves);
          
        setValue('packagePrice', packagePrice);
      }
    }
  }, [formValues.id_paquete, formValues.fecha_reserva, packages, setValue]);
  
  // Obtener el paso actual
  const currentStep = STEPS[currentStepIndex];
  
  // Verificar si los datos del paso actual son vÃ¡lidos
  const isCurrentStepValid = () => {
    if (!currentStep.required.length) return true;
    
    return currentStep.required.every(field => {
      const value = formValues[field];
      return value !== null && value !== undefined && value !== '';
    });
  };
  
  // Verificar si todos los datos requeridos estÃ¡n completos
  const isFormValid = () => {
    const allRequiredFields = STEPS.flatMap(step => step.required);
    return allRequiredFields.every(field => {
      const value = formValues[field];
      return value !== null && value !== undefined && value !== '';
    });
  };
  
  // Avanzar al siguiente paso
  const nextStep = async () => {
    if (currentStepIndex < STEPS.length - 1) {
      // Si es el Ãºltimo paso, ir al pago
      if (currentStepIndex === STEPS.length - 2) {
        if (isFormValid()) {
          setModalType('payment');
          setIsModalOpen(true);
        } else {
          // Destacar campos requeridos faltantes
          setCurrentStepIndex(STEPS.length - 1); // Ir a la revisiÃ³n para mostrar errores
        }
      } else {
        // AnimaciÃ³n al cambiar de paso
        setCurrentStepIndex(currentStepIndex + 1);
        
        // Auto scroll al inicio del contenido en dispositivos mÃ³viles
        if (window.innerWidth < 768) {
          const contentElement = document.getElementById('step-content');
          if (contentElement) {
            contentElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        }
      }
    }
  };
  
  // Retroceder al paso anterior
  const prevStep = () => {
    if (currentStepIndex > 0) {
      setCurrentStepIndex(currentStepIndex - 1);
      
      // Auto scroll al inicio del contenido en dispositivos mÃ³viles
      if (window.innerWidth < 768) {
        const contentElement = document.getElementById('step-content');
        if (contentElement) {
          contentElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }
    }
  };
  
  // Ir a un paso especÃ­fico
  const goToStep = (index) => {
    if (index >= 0 && index < STEPS.length) {
      setCurrentStepIndex(index);
      
      // Auto scroll al inicio del contenido en dispositivos mÃ³viles
      if (window.innerWidth < 768) {
        const contentElement = document.getElementById('step-content');
        if (contentElement) {
          contentElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }
    }
  };
  
  // Manejar martes con recargo
  const handleTuesdayConfirm = () => {
    setIsModalOpen(false);
    setModalType(null);
    // El valor de tuesdayFee ya se establece en DateTimeStep
  };
  
  // Manejar selecciÃ³n de mÃ©todo de pago
  const handleSelectPaymentMethod = async (paymentMethod) => {
    try {
      // Guardar el mÃ©todo de pago seleccionado
      console.log('MÃ©todo de pago seleccionado:', paymentMethod);
      
      // Normalizar el mÃ©todo de pago para asegurar compatibilidad
      const normalizedPaymentMethod = paymentMethod === 'transfer' ? 'transferencia' : paymentMethod;
      
      // Guardar el mÃ©todo de pago en el formulario si es necesario
      setValue('payment_method', normalizedPaymentMethod);
      
      // Continuar con el proceso de reserva - convertir a Promise para poder usar await
      return new Promise((resolve, reject) => {
        // Usar el callback de onSubmit para detectar Ã©xito o error
        const onSubmitSuccess = async (data) => {
          try {
            await submitReservation(data);
            resolve(true);
          } catch (error) {
            console.error('Error en el proceso de reserva:', error);
            reject(error);
          }
        };
        
        // Ejecutar handleSubmit con nuestro callback personalizado
        const submitResult = handleSubmit(onSubmitSuccess)();
        
        // Si handleSubmit devuelve una promesa (por validaciÃ³n), manejarla
        if (submitResult && typeof submitResult.catch === 'function') {
          submitResult.catch(reject);
        }
      });
    } catch (error) {
      console.error('Error al seleccionar mÃ©todo de pago:', error);
      throw error; // Re-lanzar para que PaymentModal pueda manejarlo
    }
  };
  
  // Manejar confirmaciÃ³n
  const handleConfirmation = () => {
    setIsModalOpen(false);
    setModalType(null);
    navigate('/customer/reservationstatus', { replace: true });
  };
  
  // Enviar reserva
  // FunciÃ³n para generar un cÃ³digo de seguimiento de exactamente 10 caracteres
  const generateTrackingCode = () => {
    // Obtener fecha actual
    const now = new Date();
    
    // Extraer componentes de fecha (2 dÃ­gitos del aÃ±o, mes y dÃ­a)
    const year = now.getFullYear().toString().slice(2); // 2 dÃ­gitos
    const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 2 dÃ­gitos
    const day = now.getDate().toString().padStart(2, '0'); // 2 dÃ­gitos
    
    // Generar parte aleatoria (4 dÃ­gitos para completar 10 caracteres en total)
    const randomPart = Math.floor(1000 + Math.random() * 9000);
    
    // Construir cÃ³digo: YYMMDDXXXX (exactamente 10 caracteres)
    return `${year}${month}${day}${randomPart}`;
  };

  const submitReservation = async (data) => {
    setIsSubmitting(true);
    setApiError(null);
    
    try {
      // Generar cÃ³digo de seguimiento
      const codigoSeguimiento = generateTrackingCode();
      
      // Preparar comentarios combinando campos adicionales
      let comentarios = '';
      if (data.sexo_festejado) {
        comentarios += `Sexo: ${data.sexo_festejado}. `;
      }
      if (data.color_favorito) {
        comentarios += `Color favorito: ${data.color_favorito}. `;
      }
      if (data.detalles_especiales) {
        comentarios += `Detalles especiales: ${data.detalles_especiales}`;
      }
      
      // Normalizar el mÃ©todo de pago
      let metodoPagoNormalizado;
      switch(data.payment_method) {
        case 'transfer':
          metodoPagoNormalizado = 'transferencia';
          break;
        case 'cash':
          metodoPagoNormalizado = 'efectivo';
          break;
        case 'credit':
          metodoPagoNormalizado = 'tarjeta_credito';
          break;
        case 'debit':
          metodoPagoNormalizado = 'tarjeta_debito';
          break;
        default:
          metodoPagoNormalizado = 'transferencia';
      }
      
      // Convertir hora_inicio a formato correcto si es "tarde" o "maÃ±ana"
      let horaInicio = typeof data.hora_inicio === 'object' ? data.hora_inicio.value : data.hora_inicio;
      if (horaInicio === 'tarde') {
        horaInicio = '14:00:00';
      } else if (horaInicio === 'maÃ±ana' || horaInicio === 'manana') {
        horaInicio = '10:00:00';
      }
      
      // Calcular hora_fin (3 horas despuÃ©s de hora_inicio)
      const [horas, minutos, segundos] = horaInicio.split(':').map(Number);
      const horaFin = `${String(horas + 3).padStart(2, '0')}:${String(minutos).padStart(2, '0')}:${String(segundos).padStart(2, '0')}`;
      
      // Formatear la fecha en formato YYYY-MM-DD
      let fechaReserva = data.fecha_reserva;
      if (fechaReserva instanceof Date) {
        fechaReserva = fechaReserva.toISOString().split('T')[0]; // Formato YYYY-MM-DD
      }
      
      // Adaptar datos para la API
      const reservationData = {
        id_paquete: data.id_paquete,
        fecha_reserva: fechaReserva,
        hora_inicio: horaInicio,
        hora_fin: horaFin, // AÃ±adir hora_fin obligatoria
        id_tematica: data.id_tematica,
        id_mampara: data.id_mampara || null,
        id_opcion_alimento: data.id_opcion_alimento || null,
        nombre_festejado: data.nombre_festejado,
        edad_festejado: parseInt(data.edad_festejado, 10), // Convertir a nÃºmero
        comentarios: comentarios.trim() || null, // Usar el campo comentarios para datos adicionales
        extras: data.extras || [],
        total: calculateTotal(), // Cambiado de precio_total a total para coincidir con el backend
        estado: 'pendiente', // Campo requerido por el backend
        metodo_pago: metodoPagoNormalizado, // Usar el mÃ©todo de pago normalizado
        codigo_seguimiento: codigoSeguimiento // AÃ±adir cÃ³digo de seguimiento
      };
      
      // Asegurarse de que el cÃ³digo de seguimiento estÃ© presente y tenga el formato correcto
      if (!reservationData.codigo_seguimiento || reservationData.codigo_seguimiento.length !== 10) {
        console.error('CÃ³digo de seguimiento invÃ¡lido, generando uno nuevo');
        reservationData.codigo_seguimiento = generateTrackingCode();
      }
      
      console.log('Enviando datos de reserva:', reservationData);
      
      // Validar datos antes de enviar
      if (!reservationData.hora_inicio || !reservationData.hora_fin) {
        throw new Error('Las horas de inicio y fin son obligatorias');
      }
      
      if (!reservationData.fecha_reserva || !/^\d{4}-\d{2}-\d{2}$/.test(reservationData.fecha_reserva)) {
        throw new Error('La fecha de reserva debe estar en formato YYYY-MM-DD');
      }
      
      if (isNaN(reservationData.edad_festejado)) {
        throw new Error('La edad del festejado debe ser un nÃºmero');
      }
      
      // Enviar a la API
      const result = await createReservation(reservationData);
      
      if (result.success) {
        // Mostrar modal de confirmaciÃ³n
        setModalType('confirmation');
        setIsModalOpen(true);
      } else {
        setApiError(result.message || 'Error al crear la reserva');
      }
    } catch (error) {
      console.error('Error al enviar la reserva:', error);
      setApiError('OcurriÃ³ un error al procesar tu reserva. Por favor intenta nuevamente.');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Calcular el total
  const calculateTotal = () => {
    let total = 0;
    
    // Precio del paquete
    total += parseFloat(formValues.packagePrice || 0);
    
    // Precio de la temÃ¡tica (si tiene)
    const selectedTematica = tematicas.find(tema => tema.id === formValues.id_tematica);
    if (selectedTematica && selectedTematica.precio) {
      total += parseFloat(selectedTematica.precio);
    }
    
    // Precio de la mampara (si seleccionada)
    if (formValues.id_mampara) {
      const selectedMampara = mamparas.find(mampara => mampara.id === formValues.id_mampara);
      if (selectedMampara && selectedMampara.precio) {
        total += parseFloat(selectedMampara.precio);
      }
    }
    
    // Precio de la opciÃ³n de alimento (si seleccionada)
    if (formValues.id_opcion_alimento) {
      const selectedFoodOption = foodOptions.find(food => food.id === formValues.id_opcion_alimento);
      if (selectedFoodOption && selectedFoodOption.precio_extra) {
        total += parseFloat(selectedFoodOption.precio_extra);
      }
    }
    
    // Precio de extras (si hay)
    if (formValues.extras && formValues.extras.length > 0) {
      formValues.extras.forEach(extra => {
        const extraInfo = extras.find(e => e.id === extra.id);
        if (extraInfo && extraInfo.precio && extra.cantidad) {
          total += parseFloat(extraInfo.precio) * parseInt(extra.cantidad);
        }
      });
    }
    
    // Recargo por martes
    total += parseFloat(formValues.tuesdayFee || 0);
    
    return total;
  };
  
  // Manejar teclado para navegaciÃ³n
  useEffect(() => {
    const handleKeyDown = (e) => {
      // Solo si no hay modales abiertos
      if (!isModalOpen) {
        // Avanzar con Alt+Derecha o Alt+Enter
        if (e.altKey && (e.key === 'ArrowRight' || e.key === 'Enter')) {
          if (isCurrentStepValid()) {
            e.preventDefault();
            nextStep();
          }
        }
        // Retroceder con Alt+Izquierda
        else if (e.altKey && e.key === 'ArrowLeft') {
          e.preventDefault();
          prevStep();
        }
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isModalOpen, currentStepIndex, formValues, isCurrentStepValid]);
  
  // Manejar intento de salir con cambios sin guardar
  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (formState.isDirty) {
        e.preventDefault();
        e.returnValue = '';
        return '';
      }
    };
    
    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, [formState.isDirty]);

  // Escuchar cambios de tamaÃ±o de pantalla para ajustes de UI
  useEffect(() => {
    const handleResize = () => {
      // En desktop, asegurar que el resumen siempre estÃ© visible
      if (window.innerWidth >= 1024) {
        setIsSummaryOpen(false);
      }
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  // Toggle modo pantalla completa
  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen);
    
    if (!isFullscreen) {
      // Si el navegador soporta pantalla completa
      if (document.documentElement.requestFullscreen) {
        document.documentElement.requestFullscreen();
      } else if (document.documentElement.webkitRequestFullscreen) {
        document.documentElement.webkitRequestFullscreen();
      } else if (document.documentElement.msRequestFullscreen) {
        document.documentElement.msRequestFullscreen();
      }
    } else {
      // Salir de pantalla completa
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      }
    }
  };
  
  // Renderizar el componente actual
  const renderCurrentStep = () => {
    if (loading) {
      return (
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
        </div>
      );
    }
    
    if (error) {
      return (
        <div className="bg-red-50 p-4 rounded-lg border border-red-200">
          <div className="flex items-start gap-3">
            <FiAlertTriangle className="text-red-500 w-6 h-6 flex-shrink-0" />
            <div>
              <h3 className="font-medium text-red-800">Error al cargar datos</h3>
              <p className="text-red-700 mt-1">
                {typeof error === 'string' ? error : 'Error desconocido al cargar los datos. Por favor intenta nuevamente.'}
              </p>
              <button
                onClick={() => window.location.reload()}
                className="mt-3 bg-red-100 text-red-700 px-4 py-2 rounded-md font-medium hover:bg-red-200"
              >
                Recargar pÃ¡gina
              </button>
            </div>
          </div>
        </div>
      );
    }
    
    const CurrentStepComponent = currentStep.component;
    
    return (
      <CurrentStepComponent
        packages={packages || []}
        tematicas={tematicas || []}
        mamparas={mamparas || []}
        foodOptions={foodOptions || []}
        extras={extras || []}
        unavailableDates={unavailableDates || []}
        existingReservations={existingReservations || []}
        nextStep={nextStep}
        setIsTuesdayModalOpen={(open) => {
          setModalType('tuesday');
          setIsModalOpen(open);
        }}
        goToStep={goToStep}
        methods={methods}
      />
    );
  };
  
  // Renderizar el progreso en formato de barra para mÃ³viles
  const renderMobileProgress = () => {
    const progress = ((currentStepIndex + 1) / STEPS.length) * 100;
    
    return (
      <div className="mb-3">
        <div className="flex justify-between text-xs text-gray-600 mb-1">
          <span>Paso {currentStepIndex + 1} de {STEPS.length}</span>
          <span>{Math.round(progress)}% completado</span>
        </div>
        <div className="h-1.5 bg-gray-200 rounded-full overflow-hidden">
          <div 
            className="h-full bg-gradient-to-r from-indigo-500 to-indigo-600 rounded-full"
            style={{ width: `${progress}%` }}
          ></div>
        </div>
      </div>
    );
  };
  
  // Manejar los controles de navegaciÃ³n
  const renderControls = () => {
    const isLastStep = currentStepIndex === STEPS.length - 1;
    const isFirstStep = currentStepIndex === 0;
    
    return (
      <div className="flex justify-between mt-8 pt-4 border-t border-gray-200">
        <button
          type="button"
          onClick={prevStep}
          disabled={isFirstStep}
          className={`flex items-center gap-2 px-5 py-2.5 rounded-lg transition-all duration-200 ${
            isFirstStep
              ? 'text-gray-400 cursor-not-allowed'
              : 'text-gray-700 hover:bg-gray-100'
          }`}
        >
          <FiChevronLeft className="w-5 h-5" />
          <span className="hidden sm:inline dark:text-white">Anterior</span>
        </button>
        
        <div className="flex gap-3">
          <button
            type="button"
            onClick={() => setIsExitWarningOpen(true)}
            className="text-gray-500 hover:text-gray-700 px-4 py-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <span className="hidden sm:inline dark:text-white">Cancelar</span>
            <FiX className="w-5 h-5 inline sm:hidden" />
          </button>
          
          <button
            type="button"
            onClick={nextStep}
            disabled={!isCurrentStepValid() || isSubmitting}
            className={`flex items-center gap-2 px-6 py-2.5 rounded-lg font-medium transition-all duration-200 ${
              !isCurrentStepValid() || isSubmitting
                ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                : isLastStep
                  ? 'bg-gradient-to-r from-green-500 to-green-600 text-white hover:shadow-lg hover:from-green-600 hover:to-green-700'
                  : 'bg-gradient-to-r from-indigo-500 to-indigo-600 text-white hover:shadow-lg hover:from-indigo-600 hover:to-indigo-700'
            }`}
          >
            {isSubmitting ? (
              <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
            ) : isLastStep ? (
              <FiCheck className="w-5 h-5" />
            ) : (
              <FiChevronRight className="w-5 h-5" />
            )}
            <span className="hidden sm:inline dark:text-white">{isLastStep ? 'Confirmar y Pagar' : 'Siguiente'}</span>
          </button>
        </div>
      </div>
    );
  };

  return (
    <FormProvider {...methods}>
      <div className={`bg-gradient-to-b from-indigo-50 to-gray-50 dark:from-gray-900 dark:to-black min-h-screen transition-all duration-300 ${isFullscreen ? 'fixed inset-0 z-50' : ''}`}>
        <div className="container mx-auto px-0 sm:px-4 max-w-7xl">
          {/* Header con tÃ­tulo y controles */}
          <div className="bg-white dark:bg-gray-800 shadow-sm p-4 md:rounded-lg md:mt-4 sticky top-0 z-30 border-b md:border border-gray-200 dark:border-gray-700">
            <div className="flex justify-between items-center">
              <h1 className="text-xl font-bold text-gray-900 dark:text-white">Reserva tu Evento</h1>
              
              <div className="flex items-center gap-2">
                {/* Toggle del resumen en mÃ³vil */}
                <button
                  type="button"
                  onClick={() => setIsSummaryOpen(!isSummaryOpen)}
                  className="p-2 text-gray-700 dark:text-gray-300 hover:text-indigo-700 dark:hover:text-indigo-400 rounded-full hover:bg-indigo-100 dark:hover:bg-indigo-900 transition-colors lg:hidden"
                  aria-label={isSummaryOpen ? "Ocultar resumen" : "Mostrar resumen"}
                >
                  <FiMenu className="w-5 h-5" />
                </button>
                
                {/* BotÃ³n de pantalla completa */}
                <button
                  type="button"
                  onClick={toggleFullscreen}
                  className="p-2 text-gray-700 dark:text-gray-300 hover:text-indigo-700 dark:hover:text-indigo-400 rounded-full hover:bg-indigo-100 dark:hover:bg-indigo-900 transition-colors hidden sm:flex"
                  aria-label={isFullscreen ? "Salir de pantalla completa" : "Pantalla completa"}
                >
                  {isFullscreen ? (
                    <FiMinimize className="w-5 h-5" />
                  ) : (
                    <FiMaximize className="w-5 h-5" />
                  )}
                </button>
              </div>
            </div>
          </div>

          {/* Indicador de pasos para desktop */}
          <div className="hidden md:block my-6 px-4">
            <StepIndicator
              steps={STEPS.map(step => step.label)}
              currentStep={currentStepIndex}
              goToStep={goToStep}
            />
          </div>
          
          {/* Contenedor principal con layout adaptativo */}
          <div className="md:mt-8 md:px-4 relative md:grid md:grid-cols-3 md:gap-8 lg:grid-cols-4">
            {/* Sidebar de resumen (fijo en desktop, desplegable en mÃ³vil) */}
            <div className={`
              ${isSummaryOpen 
                ? 'fixed inset-0 z-40 bg-gray-900/50 backdrop-blur-sm' 
                : 'hidden lg:block lg:col-span-1'
              } 
              transition-all duration-300 ease-in-out
            `}>
              <div className={`
                bg-white shadow-lg h-full overflow-y-auto w-full max-w-md ${
                  isSummaryOpen 
                    ? 'animate-slide-in-right ml-auto' 
                    : 'lg:h-auto lg:sticky lg:top-24 lg:rounded-xl lg:shadow-sm'
                }
              `}>
                {/* Cabecera del resumen en mÃ³vil */}
                {isSummaryOpen && (
                  <div className="flex justify-between items-center p-4 border-b border-gray-200">
                    <h2 className="font-bold text-gray-900">Resumen de tu Reserva</h2>
                    <button
                      type="button"
                      onClick={() => setIsSummaryOpen(false)}
                      className="p-2 text-gray-700 hover:bg-gray-100 rounded-full"
                    >
                      <FiX className="w-5 h-5" />
                    </button>
                  </div>
                )}
                
                {/* Contenido del resumen */}
                <div className="p-4">
                  <SummarySidebar
                    formValues={formValues}
                    packages={packages}
                    tematicas={tematicas}
                    mamparas={mamparas}
                    foodOptions={foodOptions}
                    extras={extras}
                    currentStepIndex={currentStepIndex}
                    formatters={formatters}
                    calculateTotal={calculateTotal}
                  />
                </div>
              </div>
            </div>
            
            {/* Ãrea principal de contenido */}
            <div id="step-content" className="md:col-span-3 bg-white dark:bg-gray-800 md:rounded-xl shadow-sm">
              {/* Indicador de progreso para mÃ³viles */}
              <div className="p-4 md:hidden">
                {renderMobileProgress()}
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                  Paso {currentStepIndex + 1}: <span className="dark:text-white">{STEPS[currentStepIndex].label}</span>
                </h2>
              </div>
              
              {/* Contenido del paso actual */}
              <div className="p-4 md:p-8">
                <AnimatePresence mode="wait">
                  <motion.div
                    key={currentStepIndex}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -10 }}
                    transition={{ duration: 0.3 }}
                    className="min-h-[50vh] sm:min-h-[60vh] flex flex-col"
                  >
                    {renderCurrentStep()}
                  </motion.div>
                </AnimatePresence>
                
                {/* Controles de navegaciÃ³n */}
                {renderControls()}
              </div>
            </div>
          </div>
          
          {/* InformaciÃ³n contextual */}
          <div className="p-4 md:mt-8 md:mb-12">
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900 dark:to-indigo-900 p-4 rounded-xl border border-blue-200 dark:border-blue-800 shadow-sm">
              <div className="flex gap-3">
                <FiInfo className="w-6 h-6 text-blue-600 flex-shrink-0" />
                <div>
                  <h4 className="font-medium text-blue-800 dark:text-blue-300">Â¿Necesitas ayuda?</h4>
                  <p className="text-blue-700 dark:text-blue-400 text-sm mt-1">
                    Puedes <motion.button
                      onClick={() => {
                        window.open("https://wa.me/523332300243?text=Hola%2C%20necesito%20ayuda%20con%20mi%20reservaci%C3%B3n%20en%20Tramboory.", '_blank', 'noopener,noreferrer');
                      }}
                      className="text-blue-800 dark:text-blue-300 font-medium hover:text-green-600 dark:hover:text-green-400 transition-colors duration-300 inline cursor-pointer"
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      contactarnos por WhatsApp
                    </motion.button> para asistencia personal o navegar entre los pasos usando los botones de navegaciÃ³n.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* BotÃ³n flotante de resumen en dispositivos mÃ³viles */}
      <button
        type="button"
        onClick={() => setIsSummaryOpen(true)}
        className={`fixed bottom-4 right-4 z-20 flex items-center gap-2 px-4 py-3 rounded-full shadow-lg bg-indigo-600 dark:bg-indigo-700 text-white lg:hidden ${isSummaryOpen ? 'hidden' : 'flex animate-bounce-subtle'}`}
      >
        <FiShoppingCart className="w-5 h-5" />
        <span className="font-medium dark:text-white">Ver resumen (<span className="dark:text-white">{formatters.formatCurrency(calculateTotal())}</span>)</span>
      </button>
      
      {/* Modales */}
      {isModalOpen && modalType === 'tuesday' && (
        <TuesdayModal
          isOpen={isModalOpen && modalType === 'tuesday'}
          onClose={() => {
            setIsModalOpen(false);
            setModalType(null);
          }}
          onConfirm={handleTuesdayConfirm}
        />
      )}
      
      {isModalOpen && modalType === 'payment' && (
        <PaymentModal
          total={calculateTotal()}
          onClose={() => {
            setIsModalOpen(false);
            setModalType(null);
          }}
          onSelectPaymentMethod={handleSelectPaymentMethod}
          loading={isSubmitting}
        />
      )}
      
      {isModalOpen && modalType === 'confirmation' && (
        <ConfirmationModal
          isOpen={isModalOpen && modalType === 'confirmation'}
          onClose={handleConfirmation}
        />
      )}
      
      {/* Modal de advertencia de salida */}
      {isExitWarningOpen && (
        <div className="fixed inset-0 bg-gray-900/70 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-2xl p-6 max-w-md w-full mx-4 shadow-2xl animate-zoom-in">
            <div className="flex items-center gap-3 mb-4">
              <div className="bg-amber-100 p-2 rounded-full">
                <FiAlertTriangle className="w-6 h-6 text-amber-600" />
              </div>
              <h3 className="text-lg font-bold text-gray-900 dark:text-white">Â¿Seguro que deseas salir?</h3>
            </div>
            <p className="text-gray-600 dark:text-gray-300 mb-6">
              Si sales ahora, perderÃ¡s toda la informaciÃ³n que has ingresado.
            </p>
            <div className="flex flex-col sm:flex-row sm:justify-end gap-3">
              <button
                onClick={() => setIsExitWarningOpen(false)}
                className="px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors sm:order-1"
              >
                Cancelar
              </button>
              <button
                onClick={() => navigate('/')}
                className="px-4 py-2 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-lg hover:from-red-600 hover:to-red-700 transition-colors sm:order-2"
              >
                Salir sin guardar
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Error API */}
      {apiError && (
        <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-red-50 dark:bg-red-900 border border-red-300 dark:border-red-700 p-4 rounded-xl shadow-lg max-w-sm w-full animate-slide-up">
          <div className="flex items-start gap-3">
            <FiAlertTriangle className="text-red-500 w-6 h-6 flex-shrink-0" />
            <div className="flex-1">
              <h3 className="font-medium text-red-800 dark:text-red-300">Error</h3>
              <p className="text-red-700 dark:text-red-400 text-sm mt-1">{apiError}</p>
            </div>
            <button
              onClick={() => setApiError(null)}
              className="text-gray-500 hover:text-gray-700"
            >
              <FiX className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}
      
      <style jsx="true">{`
        @keyframes slide-in-right {
          from { transform: translateX(100%); }
          to { transform: translateX(0); }
        }
        
        @keyframes slide-up {
          from { transform: translate(-50%, 100%); opacity: 0; }
          to { transform: translate(-50%, 0); opacity: 1; }
        }
        
        @keyframes zoom-in {
          from { transform: scale(0.9); opacity: 0; }
          to { transform: scale(1); opacity: 1; }
        }
        
        @keyframes bounce-subtle {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-5px); }
        }
        
        .animate-slide-in-right {
          animation: slide-in-right 0.3s ease-out forwards;
        }
        
        .animate-slide-up {
          animation: slide-up 0.3s ease-out forwards;
        }
        
        .animate-zoom-in {
          animation: zoom-in 0.3s ease-out forwards;
        }
        
        .animate-bounce-subtle {
          animation: bounce-subtle 2s infinite;
        }
      `}</style>
    </FormProvider>
  );
};

export default StepperReservation;\n\n

=== ./reservas/pages/customer/StepperReservation.jsx.new ===
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm, FormProvider } from 'react-hook-form';
import { AnimatePresence, motion } from 'framer-motion';
import { 
  FiArrowLeft, 
  FiArrowRight, 
  FiCheck, 
  FiX, 
  FiAlertTriangle, 
  FiInfo, 
  FiShoppingCart, 
  FiMenu,
  FiChevronLeft,
  FiChevronRight,
  FiMaximize,
  FiMinimize
} from 'react-icons/fi';

// Importaciones organizadas por dominio
// Pasos del formulario
import STEPS, { isStepValid, areAllRequiredStepsValid } from './reservationsteps';

// Componentes auxiliares
import { 
  StepIndicator, 
  SummarySidebar, 
  calculateProgress, 
  isStepNavigable 
} from './reservationcomponents';

// Modales
import TuesdayModal from './TuesdayModal';
import PaymentModal from './PaymentModal';
import ConfirmationModal from './ConfirmationModal';

// Servicios y utilidades
import { useReservationData } from '../../../hooks/useReservationData';
import { formatters } from '../../../utils/formatters';

// Estilos organizados
import styles, { cn, cond } from './styles';
const StepperReservation = () => {
  const navigate = useNavigate();
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalType, setModalType] = useState(null); // 'tuesday', 'payment', 'confirmation'
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [apiError, setApiError] = useState(null);
  const [isExitWarningOpen, setIsExitWarningOpen] = useState(false);
  const [isSummaryOpen, setIsSummaryOpen] = useState(false); // Para toggle del resumen en mÃ³vil
  const [isFullscreen, setIsFullscreen] = useState(false); // Para modo pantalla completa

  // Obtener datos para el formulario de reserva
  const { 
    packages, 
    tematicas, 
    mamparas, 
    foodOptions,
    extras,
    loading, 
    error, 
    unavailableDates,
    existingReservations,
    createReservation,
  } = useReservationData();
  
  // Configurar el formulario con react-hook-form
  const methods = useForm({
    defaultValues: {
      id_paquete: null,
      fecha_reserva: null,
      hora_inicio: null,
      id_tematica: null,
      id_mampara: null,
      id_opcion_alimento: null,
      extras: [],
      nombre_festejado: '',
      edad_festejado: '',
      sexo_festejado: '',
      color_favorito: '',
      detalles_especiales: '',
      tuesdayFee: 0,
      packagePrice: 0
    }
  });
  
  const { watch, setValue, handleSubmit, formState } = methods;
  
  // Valores actuales del formulario
  const formValues = watch();\n\n

=== ./reservas/pages/customer/SummaryItem.jsx ===
// SummaryItem.js
import React from 'react';

const SummaryItem = ({ icon, label, value }) => {
  if (!value) return null;

  return (
    <div className="flex items-center space-x-3">
      <div className="text-indigo-500">{icon}</div>
      <div>
        <p className="text-sm font-medium text-gray-500">{label}</p>
        <p className="text-lg font-semibold text-gray-900">
          {value && typeof value === 'object' && value.label
            ? value.label
            : value || 'No seleccionado'}
        </p>
      </div>
    </div>
  );
};

export default SummaryItem;
\n\n

=== ./reservas/pages/customer/TuesdayModal.jsx ===
import { motion } from 'framer-motion';
import { FiAlertCircle } from 'react-icons/fi';

const TuesdayModal = ({ onClose, onConfirm }) => {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.9 }}
        className="bg-white rounded-lg shadow-xl w-full max-w-md p-6"
      >
        <div className="flex items-center mb-4">
          <FiAlertCircle className="text-yellow-500 text-2xl mr-2" />
          <h2 className="text-xl font-semibold">Reserva en Martes</h2>
        </div>
        <p className="mb-4">
          Has seleccionado un martes para tu reserva. Se aplicarÃ¡ una tarifa adicional de 1500 pesos mexicanos. Â¿Deseas continuar?
        </p>
        <div className="flex justify-end">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md mr-2"
          >
            Cancelar
          </button>
          <button
            onClick={onConfirm}
            className="px-4 py-2 bg-indigo-600 text-white rounded-md"
          >
            Continuar
          </button>
        </div>
      </motion.div>
    </div>
  );
};

export default TuesdayModal;\n\n

=== ./reservas/pages/customer/index.jsx ===
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { motion } from 'framer-motion';
import axiosInstance from '@shared/utils/axiosConfig';
import { FiArrowLeft, FiCalendar, FiPackage, FiImage, FiClock, FiUsers } from 'react-icons/fi';
import ParticlesBackground from '@domains/public/components/decorative/ParticlesBackground';
import AnimatedBalloons from '@domains/public/components/decorative/AnimatedBalloons';

// Componente principal de flujo paso a paso
import StepperReservation from './StepperReservation';

// Modales
import ContractModal from './ContractModal';
import PaymentModal from './PaymentModalCustomer';
import TuesdayModal from './TuesdayModal';
import ConfirmationModal from './ConfirmationModal';
import QuotationConfirmationModal from './QuotationConfirmationModal';

// Stores
import usePreReservasStore from '@domains/reservas/services/preReservasStore';
import useCotizacionesStore from '@domains/cotizaciones/services/cotizacionesStore';

// Constantes para slots de tiempo
const TIME_SLOTS = {
  MORNING: {
    label: 'MaÃ±ana (11:00 - 16:00)',
    value: 'maÃ±ana',
    start: '11:00:00',
    end: '16:00:00'
  },
  AFTERNOON: {
    label: 'Tarde (17:00 - 22:00)',
    value: 'tarde',
    start: '17:00:00',
    end: '22:00:00'
  }
};

// FunciÃ³n para verificar si una reserva estÃ¡ activa
const isActiveReservation = (reserva) => {
  return reserva.activo &&
    (reserva.estado === 'pendiente' || reserva.estado === 'confirmada');
};

// Tiempo mÃ¡ximo para completar la pre-reserva (en minutos)
const PRE_RESERVA_TIMEOUT = 30;

// Componente de tarjeta de informaciÃ³n
const InfoCard = ({ icon: Icon, title, description }) => (
  <motion.div 
    whileHover={{ scale: 1.05 }}
    className="bg-white/85 dark:bg-gray-800/85 backdrop-blur-sm rounded-xl shadow-lg p-6 flex flex-col items-center text-center transition-all duration-300"
  >
    <div className="bg-indigo-100 dark:bg-indigo-900/50 rounded-full p-3 mb-4">
      <Icon className="text-indigo-600 dark:text-indigo-400 w-6 h-6" />
    </div>
    <h3 className="text-lg font-bold text-gray-800 dark:text-white mb-2">{title}</h3>
    <p className="text-gray-600 dark:text-gray-300 text-sm">{description}</p>
  </motion.div>
);

const ReservationPage = () => {
  const navigate = useNavigate();
  
  // Estados para datos de API
  const [packages, setPackages] = useState([]);
  const [tematicas, setTematicas] = useState([]);
  const [extrasData, setExtrasData] = useState([]);
  const [mamparas, setMamparas] = useState([]);
  const [foodOptions, setFoodOptions] = useState([]);
  const [userData, setUserData] = useState(null);
  const [unavailableDates, setUnavailableDates] = useState([]);
  const [existingReservations, setExistingReservations] = useState([]);
  const [userReservations, setUserReservations] = useState([]);
  
  // Estados para modales
  const [isContractModalOpen, setIsContractModalOpen] = useState(false);
  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);
  const [isTuesdayModalOpen, setIsTuesdayModalOpen] = useState(false);
  const [isConfirmationModalOpen, setIsConfirmationModalOpen] = useState(false);
  const [isQuotationModalOpen, setIsQuotationModalOpen] = useState(false);
  
  // Estados para flujo de reserva
  const [reservationData, setReservationData] = useState(null);
  const [hasReservations, setHasReservations] = useState(false);
  const [contractAccepted, setContractAccepted] = useState(false);
  const [loading, setLoading] = useState(true);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [isCotizacion, setIsCotizacion] = useState(true); // Por defecto, crear cotizaciÃ³n

  // Obtener cabecera de autenticaciÃ³n
  const getAuthHeader = () => {
    const token = localStorage.getItem('token');
    return { headers: { Authorization: `Bearer ${token}` } };
  };

  // Efecto para simular la carga progresiva
  useEffect(() => {
    const interval = setInterval(() => {
      setLoadingProgress((prev) => {
        const newProgress = prev + 5;
        if (newProgress >= 100) {
          clearInterval(interval);
          setTimeout(() => setLoading(false), 300);
          return 100;
        }
        return newProgress;
      });
    }, 100);

    return () => clearInterval(interval);
  }, []);

  // Efecto para cargar datos al iniciar
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      toast.error('No se ha iniciado sesiÃ³n. Redirigiendo al inicio de sesiÃ³n...', {
        position: "top-right",
        autoClose: 2000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true
      });
      setTimeout(() => navigate('/signin'), 2000);
      return;
    }

    const loadAllData = async () => {
      try {
        // Cargar datos en paralelo para optimizar
        const [
          userResponse,
          packagesResponse,
          tematicasResponse,
          foodOptionsResponse,
          mamparasResponse,
          extrasResponse,
          reservationsResponse
        ] = await Promise.all([
          axiosInstance.get('/usuarios/me', getAuthHeader()),
          axiosInstance.get('/paquetes', getAuthHeader()),
          axiosInstance.get('/tematicas', getAuthHeader()),
          axiosInstance.get('/opciones-alimentos', getAuthHeader()),
          axiosInstance.get('/mamparas', getAuthHeader()),
          axiosInstance.get('/extras', getAuthHeader()),
          axiosInstance.get('/reservas', getAuthHeader())
        ]);

        // Inicializar datos
        setUserData(userResponse.data);
        setPackages(packagesResponse.data);
        setTematicas(tematicasResponse.data);
        setFoodOptions(foodOptionsResponse.data);
        setMamparas(mamparasResponse.data);
        setExtrasData(extrasResponse.data);

        // Procesar reservas
        const allReservations = reservationsResponse.data;
        const userReservs = await axiosInstance.get('/reservas/user', getAuthHeader());
        setUserReservations(userReservs.data);
        setHasReservations(userReservs.data.length > 0);

        // Procesar fechas no disponibles
        const activeReservations = allReservations.filter(isActiveReservation);
        setExistingReservations(activeReservations);

        const reservationsByDate = activeReservations.reduce((acc, reserva) => {
          const dateStr = reserva.fecha_reserva.split('T')[0];
          if (!acc[dateStr]) {
            acc[dateStr] = {
              morning: false,
              afternoon: false
            };
          }

          if (reserva.hora_inicio === TIME_SLOTS.MORNING.start) {
            acc[dateStr].morning = true;
          }
          if (reserva.hora_inicio === TIME_SLOTS.AFTERNOON.start) {
            acc[dateStr].afternoon = true;
          }

          return acc;
        }, {});

        const fullyBookedDates = Object.entries(reservationsByDate)
          .filter(([_, slots]) => slots.morning && slots.afternoon)
          .map(([dateStr]) => new Date(dateStr));

        setUnavailableDates(fullyBookedDates);
      } catch (error) {
        console.error('Error al cargar los datos iniciales:', error);
        toast.error('Error al cargar los datos. Por favor, recarga la pÃ¡gina.');
        if (error.response?.status === 401) {
          navigate('/signin');
        }
      }
    };

    loadAllData();
  }, [navigate]);

  // Calcular precio del paquete segÃºn dÃ­a de la semana
  const calculatePackagePrice = (selectedPackage, fecha) => {
    if (!selectedPackage || !fecha) return 0;

    const reservationDate = new Date(fecha);
    const dayOfWeek = reservationDate.getDay();

    if (dayOfWeek >= 1 && dayOfWeek <= 4) {
      return parseFloat(selectedPackage.precio_lunes_jueves) || 0;
    } else {
      return parseFloat(selectedPackage.precio_viernes_domingo) || 0;
    }
  };

  // Obtener las funciones y estados de los stores
  const {
    iniciarProcesoPago,
    confirmarPago,
    loading: preReservaLoading,
    error: preReservaError,
    pagoEnProceso,
    preReserva,
    limpiarPreReserva
  } = usePreReservasStore();
  
  const {
    crearCotizacion,
    loading: cotizacionLoading,
    error: cotizacionError,
    cotizacionActual,
    limpiarCotizacionActual
  } = useCotizacionesStore();

  // Manejar envÃ­o de formulario (puede ser cotizaciÃ³n o reserva)
  const handleReservationSubmit = async (data) => {
    try {
      // Validar fecha y hora
      if (!(data.fecha_reserva instanceof Date) || isNaN(data.fecha_reserva.getTime())) {
        toast.error('La fecha de reserva es invÃ¡lida');
        return;
      }

      if (!data.hora_inicio) {
        toast.error('El horario es invÃ¡lido');
        return;
      }

      // Transformar hora al formato del backend
      const timeSlotValue = typeof data.hora_inicio === 'object' ?
        data.hora_inicio.value : data.hora_inicio;
      
      const timeSlot = timeSlotValue === 'maÃ±ana' ?
        TIME_SLOTS.MORNING : TIME_SLOTS.AFTERNOON;

      // Crear fecha sin hora para backend
      const fecha = new Date(data.fecha_reserva.getTime());
      fecha.setHours(0, 0, 0, 0);

      // Obtener elementos seleccionados
      const selectedPackage = packages.find(pkg => pkg.id === data.id_paquete);
      const selectedFoodOption = foodOptions.find(option => option.id === data.id_opcion_alimento);
      const selectedTematica = tematicas.find(t => t.id === data.id_tematica);
      const selectedMampara = mamparas.find(m => m.id === data.id_mampara);

      // Procesar extras seleccionados
      const selectedExtras = (data.extras || []).map(extra => {
        const extraInfo = extrasData.find(e => e.id === extra.id);
        return {
          ...extra,
          nombre: extraInfo?.nombre,
          precio: extraInfo?.precio,
          descripcion: extraInfo?.descripcion
        };
      });

      // Calcular precio total
      let packagePrice = calculatePackagePrice(selectedPackage, fecha);
      let total = packagePrice;

      if (selectedFoodOption) {
        total += parseFloat(selectedFoodOption.precio_extra) || 0;
      }

      total += parseFloat(data.tuesdayFee) || 0;

      if (selectedMampara) {
        total += parseFloat(selectedMampara.precio) || 0;
      }

      if (selectedTematica) {
        total += parseFloat(selectedTematica.precio) || 0;
      }

      selectedExtras.forEach((extra) => {
        if (extra.precio && extra.cantidad) {
          total += (parseFloat(extra.precio) || 0) * (parseInt(extra.cantidad) || 1);
        }
      });

      const formattedTotal = total.toFixed(2);

      // Crear objeto de datos para cotizaciÃ³n o reserva
      const formData = {
        ...data,
        id_usuario: userData?.id,
        packagePrice: packagePrice,
        total: parseFloat(formattedTotal),
        extras: selectedExtras,
        paquete_nombre: selectedPackage?.nombre,
        opcion_alimento_nombre: selectedFoodOption?.nombre,
        tematica_nombre: selectedTematica?.nombre,
        mampara_nombre: selectedMampara?.nombre,
        fecha_reserva: fecha.toISOString().split('T')[0],
        hora_inicio: timeSlot.start,
        hora_fin: timeSlot.end,
        martes_fee: data.tuesdayFee || 0,
      };

      setReservationData(formData);
      
      // Mostrar el modal correspondiente segÃºn el flujo seleccionado
      if (isCotizacion) {
        setIsQuotationModalOpen(true);
      } else {
        setIsConfirmationModalOpen(true);
      }
    } catch (error) {
      console.error('Error al procesar la reserva:', error);
      toast.error('OcurriÃ³ un error al procesar la reserva. Por favor, intenta nuevamente.');
    }
  };

  // Iniciar el proceso de pago para reserva directa
  const iniciarPago = async () => {
    try {
      setIsConfirmationModalOpen(false);
      setIsPaymentModalOpen(true);
    } catch (error) {
      console.error('Error al iniciar el proceso de pago:', error);
      toast.error('Error al iniciar el proceso de pago. Por favor, intenta nuevamente.');
    }
  };
  
  // Crear cotizaciÃ³n
  const iniciarCotizacion = async () => {
    try {
      setIsQuotationModalOpen(false);
      
      // Crear cotizaciÃ³n en el backend
      const resultado = await crearCotizacion(reservationData);
      
      // Mostrar mensaje de Ã©xito
      toast.success('Â¡CotizaciÃ³n creada con Ã©xito! Puedes revisarla en tu perfil.');
      
      // Navegar a la pÃ¡gina de cotizaciones
      navigate('/customer/cotizaciones');
    } catch (error) {
      console.error('Error al crear cotizaciÃ³n:', error);
      toast.error('Error al crear la cotizaciÃ³n. Por favor, intenta nuevamente.');
    }
  };

  // FunciÃ³n para manejar la selecciÃ³n del mÃ©todo de pago
  const handleSelectPaymentMethod = async (metodoPago) => {
    try {
      // Iniciar proceso de pago con pre-reserva
      await iniciarProcesoPago(reservationData, metodoPago);
      
      // Cerrar modal de pago y mostrar modal de confirmaciÃ³n
      setIsPaymentModalOpen(false);
      setIsConfirmationModalOpen(true);
    } catch (error) {
      console.error('Error al iniciar proceso de pago:', error);
      // El error se maneja en el store y se muestra en el modal
    }
  };

  // Manejar confirmaciÃ³n de pago
  const handlePaymentConfirm = async () => {
    try {
      const result = await confirmarPago();
      toast.success('Â¡Reserva confirmada con Ã©xito!');
      
      // Limpiar datos de pre-reserva
      limpiarPreReserva();
      
      // Navegar a la pÃ¡gina de estado de reserva
      navigate(`/customer/reservationstatus/${result.reserva.id}`);
    } catch (error) {
      console.error('Error al confirmar pago:', error);
      // El error se maneja en el store y se muestra en el modal
    }
  };

  // Manejar aceptaciÃ³n de contrato
  const handleContractAccept = () => {
    setContractAccepted(true);
    setIsContractModalOpen(false);
    toast.success('Contrato aceptado exitosamente');
    setIsPaymentModalOpen(true);
  };

  // Renderizar pantalla de carga
  if (loading) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-indigo-100 to-purple-100 dark:from-gray-900 dark:to-indigo-950">
        <div className="w-64 h-64 relative">
          <div className="w-full h-full rounded-full border-8 border-indigo-200 dark:border-indigo-900"></div>
          <div 
            className="absolute top-0 left-0 w-full h-full rounded-full border-t-8 border-l-8 border-indigo-600 dark:border-indigo-400"
            style={{ 
              transform: 'rotate(0deg)',
              animation: 'spin 1.5s linear infinite'
            }}
          ></div>
          <div className="absolute inset-0 flex items-center justify-center text-2xl font-bold text-indigo-700 dark:text-indigo-300">
            {loadingProgress}%
          </div>
        </div>
        <h2 className="mt-8 text-xl font-semibold text-indigo-800 dark:text-indigo-300">Preparando tu experiencia mÃ¡gica...</h2>
        <style jsx>{`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}</style>
      </div>
    );
  }

  return (
    <div className="relative min-h-screen bg-gradient-to-br from-indigo-50 to-purple-100 dark:from-gray-900 dark:to-indigo-950 overflow-hidden">
      {/* DecoraciÃ³n de fondo */}
      <div className="absolute inset-0 z-0 opacity-40">
        <ParticlesBackground color="#4f46e5" />
      </div>
      
      <div className="absolute top-0 right-0 -z-10 opacity-20">
        <AnimatedBalloons count={15} />
      </div>
      
      {/* DecoraciÃ³n con imÃ¡genes */}
      <div className="absolute top-10 left-10 -rotate-6 w-32 h-32 opacity-20">
        <img src="/client/src/img/balloons.png" alt="" className="w-full h-full object-contain" />
      </div>
      
      <div className="absolute bottom-10 right-10 rotate-12 w-32 h-32 opacity-20">
        <img src="/client/src/img/confetti.png" alt="" className="w-full h-full object-contain" />
      </div>
      
      {/* Contenedor principal */}
      <div className="relative z-10 py-12 px-4 sm:px-6">
        {/* Notificaciones Toast */}
        <ToastContainer
          position="top-right"
          autoClose={5000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="light"
          limit={3}
        />
        
        <div className="max-w-7xl mx-auto">
          {/* Cabecera */}
          <div className="mb-12 flex flex-col items-center">
            <button
              onClick={() => navigate('/')}
              className="self-start mb-6 flex items-center gap-2 text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-300 transition-colors"
            >
              <FiArrowLeft className="w-5 h-5" />
              <span>Regresar al Inicio</span>
            </button>
            
            <h1 className="text-4xl md:text-5xl font-bold text-center text-indigo-800 dark:text-indigo-300 mb-4">
              <span className="bg-clip-text text-transparent bg-gradient-to-r from-indigo-600 to-purple-600 dark:from-indigo-400 dark:to-purple-400">
                {isCotizacion ? 'Crea tu CotizaciÃ³n' : 'Crea tu Reserva MÃ¡gica'}
              </span>
            </h1>
            
            <p className="text-center text-gray-600 dark:text-gray-300 max-w-2xl">
              {isCotizacion
                ? 'Personaliza tu evento y obtÃ©n una cotizaciÃ³n sin compromiso'
                : 'Sigue los pasos para personalizar tu evento y crear una experiencia inolvidable'}
            </p>
            
            <div className="mt-6 flex justify-center">
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-2 inline-flex">
                <button
                  onClick={() => setIsCotizacion(true)}
                  className={`px-4 py-2 rounded-md transition-colors ${
                    isCotizacion
                      ? 'bg-indigo-600 text-white'
                      : 'bg-transparent text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                  }`}
                >
                  CotizaciÃ³n
                </button>
                <button
                  onClick={() => setIsCotizacion(false)}
                  className={`px-4 py-2 rounded-md transition-colors ${
                    !isCotizacion
                      ? 'bg-indigo-600 text-white'
                      : 'bg-transparent text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                  }`}
                >
                  Reserva Directa
                </button>
              </div>
            </div>
            
            {hasReservations && (
              <button
                onClick={() => navigate('/customer/reservationstatus')}
                className="mt-6 bg-indigo-100 dark:bg-indigo-900 hover:bg-indigo-200 dark:hover:bg-indigo-800 text-indigo-700 dark:text-indigo-300 font-medium py-2 px-4 rounded-lg transition-colors"
              >
                Ver mis reservas actuales
              </button>
            )}
          </div>
          
          {/* InformaciÃ³n destacada */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12">
            <InfoCard
              icon={FiPackage}
              title="PersonalizaciÃ³n Total"
              description="Elige el paquete perfecto para tu evento y personalÃ­zalo con extras Ãºnicos"
            />
            <InfoCard
              icon={FiCalendar}
              title="Fecha Flexible"
              description="Selecciona la fecha ideal para tu celebraciÃ³n con nuestro calendario interactivo"
            />
            <InfoCard
              icon={FiImage}
              title="TemÃ¡ticas Ãšnicas"
              description="Explora nuestras temÃ¡ticas especiales para hacer de tu evento algo inolvidable"
            />
            <InfoCard
              icon={FiUsers}
              title="AtenciÃ³n Personalizada"
              description="Estamos para ayudarte en cada paso del proceso de reservaciÃ³n"
            />
          </div>
          
          {/* StepperReservation componente principal */}
          <StepperReservation
            packages={packages}
            tematicas={tematicas}
            mamparas={mamparas}
            foodOptions={foodOptions}
            extras={extrasData}
            unavailableDates={unavailableDates}
            existingReservations={existingReservations}
            onSubmit={handleReservationSubmit}
            setIsTuesdayModalOpen={setIsTuesdayModalOpen}
          />
        </div>
      </div>
      
      {/* Modales */}
          {/* Modal de cotizaciÃ³n */}
          {isQuotationModalOpen && (
            <QuotationConfirmationModal
              reservationData={reservationData}
              packages={packages}
              foodOptions={foodOptions}
              tematicas={tematicas}
              extras={extrasData}
              mamparas={mamparas}
              onCancel={() => setIsQuotationModalOpen(false)}
              onConfirm={iniciarCotizacion}
            />
          )}
          
          {/* Modal de confirmaciÃ³n de pago */}
          {isConfirmationModalOpen && pagoEnProceso ? (
            // Modal de confirmaciÃ³n para pago ya iniciado
            <ConfirmationModal
              onClose={() => setIsConfirmationModalOpen(false)}
              onConfirm={handlePaymentConfirm}
            />
          ) : isConfirmationModalOpen && !pagoEnProceso && (
            // Modal de confirmaciÃ³n de datos antes de pago
            <ConfirmationModal
              reservationData={reservationData}
              packages={packages}
              foodOptions={foodOptions}
              tematicas={tematicas}
              extras={extrasData}
              mamparas={mamparas}
              onCancel={() => setIsConfirmationModalOpen(false)}
              onConfirm={iniciarPago}
            />
          )}

          {isPaymentModalOpen && (
            <PaymentModal
              total={reservationData?.total || 0}
              onClose={() => setIsPaymentModalOpen(false)}
              onSelectPaymentMethod={handleSelectPaymentMethod}
              loading={preReservaLoading}
            />
          )}

          {isContractModalOpen && (
            <ContractModal
              isOpen={isContractModalOpen}
              onClose={() => setIsContractModalOpen(false)}
              onAccept={handleContractAccept}
            />
          )}

          {isTuesdayModalOpen && (
            <TuesdayModal
              onClose={() => setIsTuesdayModalOpen(false)}
              onConfirm={() => setIsTuesdayModalOpen(false)}
            />
          )}

          {/* Mostrar mensajes de error */}
          {preReservaError && (
            <div className="fixed bottom-4 right-4 bg-red-100 dark:bg-red-900 border-l-4 border-red-500 text-red-700 dark:text-red-300 p-4 rounded shadow-lg z-50">
              <p className="font-bold">Error</p>
              <p>{preReservaError}</p>
            </div>
          )}
          
          {cotizacionError && (
            <div className="fixed bottom-4 right-4 bg-red-100 dark:bg-red-900 border-l-4 border-red-500 text-red-700 dark:text-red-300 p-4 rounded shadow-lg z-50">
              <p className="font-bold">Error</p>
              <p>{cotizacionError}</p>
            </div>
          )}
    </div>
  );
};

export default ReservationPage;\n\n

=== ./reservas/pages/customer/reservationcomponents/StepIndicator.jsx ===
import React from 'react';
import { motion } from 'framer-motion';
import { FiCheck } from 'react-icons/fi';

const StepIndicator = ({ steps, currentStep, goToStep }) => {
  // Determinar si un paso estÃ¡ completado, activo o pendiente
  const getStepStatus = (index) => {
    if (index < currentStep) return 'completed';
    if (index === currentStep) return 'active';
    return 'pending';
  };

  // Obtener la clase CSS adecuada segÃºn el estado del paso
  const getStepNumberClass = (status) => {
    switch (status) {
      case 'completed':
        return 'bg-gradient-to-r from-indigo-500 to-indigo-600 text-white shadow-md';
      case 'active':
        return 'bg-white text-indigo-600 border-2 border-indigo-600 shadow-md';
      default:
        return 'bg-white text-gray-400 border border-gray-300';
    }
  };

  // Obtener la clase CSS para el conector entre pasos
  const getConnectorClass = (status) => {
    switch (status) {
      case 'completed':
        return 'bg-gradient-to-r from-indigo-400 to-indigo-600';
      case 'active':
        return 'bg-gray-200';
      default:
        return 'bg-gray-200';
    }
  };

  // Obtener la clase CSS para el texto del paso
  const getTextClass = (status) => {
    switch (status) {
      case 'completed':
        return 'text-indigo-600 font-medium';
      case 'active':
        return 'text-gray-900 font-medium';
      default:
        return 'text-gray-400';
    }
  };

  // Animaciones para los elementos
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      className="flex items-center justify-center"
    >
      <div className="w-full max-w-4xl px-4">
        <div className="relative">
          {/* Barra de progreso */}
          <div className="absolute top-5 left-0 right-0 flex">
            {steps.map((_, index) => {
              if (index === steps.length - 1) return null;
              
              const status = getStepStatus(index);
              return (
                <div
                  key={`connector-${index}`}
                  className={`h-1 flex-1 ${getConnectorClass(status)} rounded-full transition-colors duration-300`}
                ></div>
              );
            })}
          </div>

          {/* Pasos */}
          <div className="relative flex justify-between">
            {steps.map((step, index) => {
              const status = getStepStatus(index);
              const isClickable = index < currentStep; // SÃ³lo permitir volver a pasos completados
              
              return (
                <motion.div
                  key={`step-${index}`}
                  variants={itemVariants}
                  className="flex flex-col items-center"
                  style={{ width: `${100 / steps.length}%` }}
                >
                  <motion.button
                    type="button"
                    onClick={() => isClickable && goToStep(index)}
                    disabled={!isClickable}
                    whileHover={isClickable ? { scale: 1.1 } : {}}
                    whileTap={isClickable ? { scale: 0.95 } : {}}
                    className={`relative z-10 flex items-center justify-center w-10 h-10 rounded-full text-sm font-medium transition-all duration-300
                      ${getStepNumberClass(status)}
                      ${isClickable ? 'cursor-pointer hover:shadow-lg' : 'cursor-default'}
                    `}
                    aria-label={`Ir al paso: ${step}`}
                  >
                    {status === 'completed' ? (
                      <motion.div
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        transition={{ type: "spring", stiffness: 400, damping: 10 }}
                      >
                        <FiCheck className="w-5 h-5" />
                      </motion.div>
                    ) : (
                      <motion.span
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 0.2 }}
                      >
                        {index + 1}
                      </motion.span>
                    )}
                  </motion.button>
                  
                  <div className="mt-2 text-center">
                    <motion.span 
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.2 }}
                      className={`text-xs sm:text-sm ${getTextClass(status)} transition-colors duration-300 whitespace-nowrap`}
                    >
                      {step}
                    </motion.span>
                  </div>
                </motion.div>
              );
            })}
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default StepIndicator;\n\n

=== ./reservas/pages/customer/reservationcomponents/SummarySidebar.jsx ===
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  FiPackage,
  FiCalendar,
  FiClock,
  FiImage,
  FiCoffee,
  FiList,
  FiUser,
  FiDollarSign,
  FiShoppingBag,
  FiChevronDown,
  FiChevronUp,
  FiShoppingCart,
  FiAlertTriangle,
  FiTag,
  FiInfo
} from 'react-icons/fi';

const SummarySection = ({ title, children, icon: Icon, visible = true, isExpandable = false }) => {
  const [isExpanded, setIsExpanded] = useState(true);
  
  if (!visible) return null;
  
  return (
    <div className="rounded-xl overflow-hidden mb-3 bg-white shadow-sm border border-gray-100 hover:border-indigo-100 transition-all duration-300">
      <div 
        className={`flex items-center justify-between p-3 ${
          isExpandable ? 'cursor-pointer hover:bg-indigo-50 transition-colors duration-200' : ''
        } ${isExpanded ? 'bg-gradient-to-r from-indigo-50 to-white' : 'bg-white'}`}
        onClick={() => isExpandable && setIsExpanded(!isExpanded)}
      >
        <div className="flex items-center gap-2">
          {Icon && <Icon className="text-indigo-600 w-4 h-4" />}
          <h3 className="font-medium text-gray-800 text-sm">{title}</h3>
        </div>
        
        {isExpandable && (
          <motion.button 
            type="button"
            className="text-gray-500 hover:text-indigo-600 p-1 rounded-full hover:bg-indigo-100 transition-colors duration-200"
            aria-label={isExpanded ? 'Colapsar' : 'Expandir'}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
          >
            {isExpanded ? <FiChevronUp className="w-4 h-4" /> : <FiChevronDown className="w-4 h-4" />}
          </motion.button>
        )}
      </div>
      
      <AnimatePresence>
        {(!isExpandable || isExpanded) && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="overflow-hidden"
          >
            <div className="p-3">
              {children}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

const SummaryItem = ({ label, value, icon: Icon, visible = true, highlight = false }) => {
  if (!visible || !value) return null;
  
  return (
    <motion.div 
      initial={{ opacity: 0, x: -5 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.3 }}
      className={`flex items-start gap-2 py-1.5 ${highlight ? 'text-indigo-700 font-medium' : 'border-b border-gray-100 last:border-0'}`}
    >
      {Icon && (
        <motion.div 
          whileHover={{ scale: 1.1, rotate: 5 }}
          className="mt-0.5 flex-shrink-0"
        >
          <Icon className={`w-4 h-4 ${highlight ? 'text-indigo-600' : 'text-indigo-500'}`} />
        </motion.div>
      )}
      <div className="flex-1 min-w-0">
        <span className={`text-gray-600 text-sm ${highlight ? 'font-medium' : ''}`}>{label}:</span>
        <span className={`ml-1 ${highlight ? 'text-indigo-700 font-medium' : 'text-gray-800'} text-sm truncate block sm:inline`}>
          {value}
        </span>
      </div>
    </motion.div>
  );
};

const PriceTag = ({ label, price, highlight = false }) => {
  return (
    <div className={`flex justify-between items-center ${highlight ? 'pt-2 mt-2 border-t border-dashed border-indigo-200' : ''}`}>
      <span className={`text-sm ${highlight ? 'text-indigo-600 font-medium' : 'text-gray-600'} flex items-center gap-1`}>
        {highlight ? <FiTag className="w-3 h-3" /> : null}
        <span>{label}</span>
      </span>
      <span className={`${highlight ? 'text-indigo-600 font-medium' : 'text-gray-700'} text-sm`}>
        {price}
      </span>
    </div>
  );
};

const SummarySidebar = ({
  formValues,
  packages,
  tematicas,
  mamparas,
  foodOptions,
  extras,
  currentStepIndex,
  formatters,
  calculateTotal
}) => {
  const [selectedPackage, setSelectedPackage] = useState(null);
  const [selectedTematica, setSelectedTematica] = useState(null);
  const [selectedMampara, setSelectedMampara] = useState(null);
  const [selectedFoodOption, setSelectedFoodOption] = useState(null);
  const [selectedExtras, setSelectedExtras] = useState([]);
  const [total, setTotal] = useState(0);
  
  // Actualizar los valores seleccionados cuando cambia el formulario
  useEffect(() => {
    // Buscar el paquete seleccionado
    if (formValues.id_paquete) {
      const pkg = packages.find(p => p.id === formValues.id_paquete);
      setSelectedPackage(pkg);
    } else {
      setSelectedPackage(null);
    }
    
    // Buscar la temÃ¡tica seleccionada
    if (formValues.id_tematica) {
      const tema = tematicas.find(t => t.id === formValues.id_tematica);
      setSelectedTematica(tema);
    } else {
      setSelectedTematica(null);
    }
    
    // Buscar la mampara seleccionada
    if (formValues.id_mampara) {
      const mampara = mamparas.find(m => m.id === formValues.id_mampara);
      setSelectedMampara(mampara);
    } else {
      setSelectedMampara(null);
    }
    
    // Buscar la opciÃ³n de alimento seleccionada
    if (formValues.id_opcion_alimento) {
      const food = foodOptions.find(f => f.id === formValues.id_opcion_alimento);
      setSelectedFoodOption(food);
    } else {
      setSelectedFoodOption(null);
    }
    
    // Procesar extras seleccionados
    if (formValues.extras && formValues.extras.length) {
      const extrasWithDetails = formValues.extras.map(selectedExtra => {
        const extraInfo = extras.find(e => e.id === selectedExtra.id);
        return {
          ...extraInfo,
          cantidad: selectedExtra.cantidad
        };
      }).filter(Boolean); // Filtrar valores nulos o undefined
      
      setSelectedExtras(extrasWithDetails);
    } else {
      setSelectedExtras([]);
    }
    
    // Calcular el total
    if (typeof calculateTotal === 'function') {
      setTotal(calculateTotal());
    }
  }, [
    formValues, 
    packages, 
    tematicas, 
    mamparas, 
    foodOptions, 
    extras, 
    calculateTotal
  ]);
  
  // Formatear moneda
  const formatCurrency = formatters?.formatCurrency || (amount => 
    new Intl.NumberFormat('es-MX', {
      style: 'currency',
      currency: 'MXN'
    }).format(amount || 0)
  );
  
  // Formatear fecha
  const formatDate = formatters?.formatDate || (date => {
    if (!date || !(date instanceof Date)) return '';
    return new Intl.DateTimeFormat('es-MX', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    }).format(date);
  });
  
  // Obtener el horario formateado
  const getFormattedTimeSlot = () => {
    if (!formValues.hora_inicio) return '';
    
    if (typeof formValues.hora_inicio === 'object') {
      return formValues.hora_inicio.label;
    }
    
    return formValues.hora_inicio === 'maÃ±ana' 
      ? 'MaÃ±ana (11:00 - 16:00)' 
      : 'Tarde (17:00 - 22:00)';
  };
  
  // Verificar si una secciÃ³n debe estar visible segÃºn el paso actual
  const shouldShowSection = (section) => {
    const sections = [
      'package', // Paso 0
      'datetime', // Paso 1
      'theme', // Paso 2
      'mampara', // Paso 3
      'food', // Paso 4
      'extras', // Paso 5
      'celebrant', // Paso 6
    ];
    
    return currentStepIndex >= sections.indexOf(section);
  };
  
  // Obtener el nombre del paso actual
  const getCurrentStepName = () => {
    const steps = [
      'SelecciÃ³n de Paquete',
      'SelecciÃ³n de Fecha y Hora',
      'SelecciÃ³n de TemÃ¡tica',
      'SelecciÃ³n de Mampara',
      'Opciones de Alimentos',
      'Extras',
      'InformaciÃ³n del Festejado',
      'RevisiÃ³n y ConfirmaciÃ³n'
    ];
    
    return steps[currentStepIndex] || '';
  };

  // Animaciones
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: {
        when: "beforeChildren",
        staggerChildren: 0.1
      }
    }
  };
  
  const itemVariants = {
    hidden: { opacity: 0, y: 10 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      className="space-y-4"
    >
      <motion.div 
        variants={itemVariants}
        className="mb-4 pb-3"
      >
        <div className="flex items-center gap-3 mb-3">
          <div className="bg-gradient-to-br from-indigo-500 to-indigo-600 text-white p-2 rounded-full shadow-sm">
            <FiShoppingCart className="w-5 h-5" />
          </div>
          <div>
            <h2 className="text-lg font-bold text-gray-900">Resumen de tu Reserva</h2>
            <p className="text-sm text-gray-600">
              Paso actual: {getCurrentStepName()}
            </p>
          </div>
        </div>
        
        <div className="h-1 bg-gray-100 rounded-full overflow-hidden">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${((currentStepIndex + 1) / 8) * 100}%` }}
            className="h-full bg-gradient-to-r from-indigo-500 to-indigo-600"
            transition={{ duration: 0.5, ease: "easeOut" }}
          />
        </div>
      </motion.div>

      {currentStepIndex >= 0 && (
        <div className="space-y-3">
          {/* Paquete */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title="Paquete" 
              icon={FiPackage}
              visible={shouldShowSection('package')}
            >
              {selectedPackage ? (
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-800">{selectedPackage.nombre}</span>
                    <span className="text-indigo-600 font-medium">
                      {formatCurrency(formValues.packagePrice)}
                    </span>
                  </div>
                  <p className="text-xs text-gray-600 bg-gray-50 p-2 rounded-lg">
                    {selectedPackage.min_invitados} - {selectedPackage.max_invitados} invitados
                  </p>
                </div>
              ) : (
                <div className="text-sm text-gray-500 italic p-2 bg-gray-50 rounded-lg">
                  No seleccionado
                </div>
              )}
            </SummarySection>
          </motion.div>

          {/* Fecha y Hora */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title="Fecha y Hora" 
              icon={FiCalendar}
              visible={shouldShowSection('datetime')}
            >
              <div className="space-y-2">
                <SummaryItem 
                  label="Fecha" 
                  value={formatDate(formValues.fecha_reserva)}
                  icon={FiCalendar}
                  visible={!!formValues.fecha_reserva}
                />
                <SummaryItem 
                  label="Horario" 
                  value={getFormattedTimeSlot()}
                  icon={FiClock}
                  visible={!!formValues.hora_inicio}
                />
                
                {formValues.tuesdayFee > 0 && (
                  <div className="flex justify-between items-center mt-2 pt-2 border-t border-dashed border-amber-200 bg-amber-50 p-2 rounded-lg">
                    <span className="text-amber-600 text-xs flex items-center gap-1">
                      <FiAlertTriangle className="w-3 h-3" />
                      <span>Cargo adicional por martes</span>
                    </span>
                    <span className="text-amber-600 font-medium text-xs">
                      {formatCurrency(formValues.tuesdayFee)}
                    </span>
                  </div>
                )}
              </div>
            </SummarySection>
          </motion.div>

          {/* TemÃ¡tica */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title="TemÃ¡tica" 
              icon={FiImage}
              visible={shouldShowSection('theme')}
            >
              {selectedTematica ? (
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-800">{selectedTematica.nombre}</span>
                    {selectedTematica.precio > 0 && (
                      <span className="text-indigo-600 font-medium">
                        {formatCurrency(selectedTematica.precio)}
                      </span>
                    )}
                  </div>
                  {selectedTematica.descripcion && (
                    <p className="text-xs text-gray-600 line-clamp-2 bg-gray-50 p-2 rounded-lg">
                      {selectedTematica.descripcion}
                    </p>
                  )}
                </div>
              ) : (
                <div className="text-sm text-gray-500 italic p-2 bg-gray-50 rounded-lg">
                  No seleccionada
                </div>
              )}
            </SummarySection>
          </motion.div>

          {/* Mampara */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title="Mampara" 
              icon={FiImage}
              visible={shouldShowSection('mampara')}
            >
              {selectedMampara ? (
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-800">
                      Mampara de {selectedMampara.piezas} piezas
                    </span>
                    <span className="text-indigo-600 font-medium">
                      {formatCurrency(selectedMampara.precio)}
                    </span>
                  </div>
                </div>
              ) : (
                <div className="text-sm text-gray-500 italic p-2 bg-gray-50 rounded-lg">
                  No seleccionada (opcional)
                </div>
              )}
            </SummarySection>
          </motion.div>

          {/* OpciÃ³n de Alimento */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title="OpciÃ³n de Alimentos" 
              icon={FiCoffee}
              visible={shouldShowSection('food')}
            >
              {selectedFoodOption ? (
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-800">{selectedFoodOption.nombre}</span>
                    <span className="text-indigo-600 font-medium">
                      {formatCurrency(selectedFoodOption.precio_extra)}
                    </span>
                  </div>
                </div>
              ) : (
                <div className="text-sm text-gray-500 italic p-2 bg-gray-50 rounded-lg">
                  No seleccionada (opcional)
                </div>
              )}
            </SummarySection>
          </motion.div>

          {/* Extras */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title={`Extras${selectedExtras.length > 0 ? ` (${selectedExtras.length})` : ''}`}
              icon={FiList}
              visible={shouldShowSection('extras')}
              isExpandable={selectedExtras.length > 2}
            >
              {selectedExtras.length > 0 ? (
                <div className="space-y-3">
                  {selectedExtras.map((extra, index) => {
                    const cantidad = parseInt(extra.cantidad) || 1;
                    const extraPrice = (parseFloat(extra.precio) || 0) * cantidad;
                    
                    return (
                      <motion.div 
                        key={index} 
                        className="flex justify-between items-center text-sm rounded-lg p-1.5 hover:bg-gray-50 transition-colors"
                        whileHover={{ scale: 1.02 }}
                      >
                        <div className="flex items-center gap-1">
                          <FiShoppingBag className="w-3 h-3 text-indigo-500" />
                          <span className="font-medium text-gray-800">{extra.nombre}</span>
                          {cantidad > 1 && (
                            <span className="text-xs ml-1 bg-indigo-100 text-indigo-700 px-1.5 py-0.5 rounded-full">
                              x{cantidad}
                            </span>
                          )}
                        </div>
                        <span className="text-indigo-600 font-medium">
                          {formatCurrency(extraPrice)}
                        </span>
                      </motion.div>
                    );
                  })}
                </div>
              ) : (
                <div className="text-sm text-gray-500 italic p-2 bg-gray-50 rounded-lg">
                  No seleccionados (opcional)
                </div>
              )}
            </SummarySection>
          </motion.div>

          {/* InformaciÃ³n del Festejado */}
          <motion.div variants={itemVariants}>
            <SummarySection 
              title="InformaciÃ³n del Festejado" 
              icon={FiUser}
              visible={shouldShowSection('celebrant')}
            >
              {formValues.nombre_festejado || formValues.edad_festejado ? (
                <div className="space-y-2">
                  <SummaryItem 
                    label="Nombre" 
                    value={formValues.nombre_festejado}
                    icon={FiUser}
                    visible={!!formValues.nombre_festejado}
                  />
                  <SummaryItem 
                    label="Edad" 
                    value={formValues.edad_festejado}
                    icon={FiCalendar}
                    visible={!!formValues.edad_festejado}
                  />
                  <SummaryItem 
                    label="Sexo" 
                    value={formValues.sexo_festejado === 'femenino' ? 'NiÃ±a' : formValues.sexo_festejado === 'masculino' ? 'NiÃ±o' : ''}
                    icon={FiUser}
                    visible={!!formValues.sexo_festejado}
                  />
                </div>
              ) : (
                <div className="text-sm text-gray-500 italic p-2 bg-gray-50 rounded-lg">
                  No ingresado
                </div>
              )}
            </SummarySection>
          </motion.div>
        </div>
      )}

      {/* Total */}
      <motion.div 
        variants={itemVariants}
        className="mt-6 pt-4 rounded-xl bg-gradient-to-br from-indigo-50 via-indigo-50 to-white p-4 shadow-sm border border-indigo-100"
      >
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <div className="bg-gradient-to-br from-indigo-500 to-indigo-600 text-white p-1.5 rounded-full shadow-sm">
              <FiShoppingCart className="w-4 h-4" />
            </div>
            <span className="font-bold text-gray-800">Resumen de Costos</span>
          </div>
        </div>
        
        <div className="space-y-2 mb-3">
          {selectedPackage && (
            <PriceTag 
              label="Paquete" 
              price={formatCurrency(formValues.packagePrice)} 
            />
          )}
          
          {selectedTematica && selectedTematica.precio > 0 && (
            <PriceTag 
              label="TemÃ¡tica" 
              price={formatCurrency(selectedTematica.precio)} 
            />
          )}
          
          {selectedMampara && (
            <PriceTag 
              label="Mampara" 
              price={formatCurrency(selectedMampara.precio)} 
            />
          )}
          
          {selectedFoodOption && selectedFoodOption.precio_extra > 0 && (
            <PriceTag 
              label="OpciÃ³n de alimentos" 
              price={formatCurrency(selectedFoodOption.precio_extra)} 
            />
          )}
          
          {selectedExtras.length > 0 && (
            <PriceTag 
              label={`Extras (${selectedExtras.length})`}
              price={formatCurrency(
                selectedExtras.reduce((sum, extra) => {
                  const cantidad = parseInt(extra.cantidad) || 1;
                  return sum + (parseFloat(extra.precio) || 0) * cantidad;
                }, 0)
              )} 
            />
          )}
          
          {formValues.tuesdayFee > 0 && (
            <PriceTag 
              label="Cargo por martes" 
              price={formatCurrency(formValues.tuesdayFee)}
              highlight={true}
            />
          )}
        </div>
        
        <div className="flex items-center justify-between pt-3 border-t border-indigo-200">
          <span className="font-bold text-gray-800">Total:</span>
          <span className="text-xl font-bold text-indigo-700">
            {formatCurrency(total)}
          </span>
        </div>
        
        <p className="text-xs text-gray-500 mt-2">
          El precio incluye todos los elementos seleccionados.
          {formValues.tuesdayFee > 0 && ' Incluye cargo adicional por martes.'}
        </p>
      </motion.div>

      {/* InformaciÃ³n adicional */}
      <motion.div 
        variants={itemVariants}
        className="mt-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-3 border border-blue-100 shadow-sm"
      >
        <div className="flex items-center gap-2">
          <FiInfo className="w-4 h-4 flex-shrink-0 text-blue-600" />
          <p className="text-xs text-blue-700">
            Puedes personalizar tu evento en cualquier momento del proceso de reserva.
          </p>
        </div>
      </motion.div>
    </motion.div>
  );
};

export default SummarySidebar;\n\n

=== ./reservas/pages/customer/reservationcomponents/index.js ===
/**
 * index.js
 * Punto de entrada para los componentes auxiliares de reservaciÃ³n
 * Centraliza las importaciones y exportaciones de componentes auxiliares del stepper
 */

// Importar todos los componentes auxiliares
import StepIndicator from './StepIndicator';
import SummarySidebar from './SummarySidebar';

// Exportar componentes individualmente
export {
  StepIndicator,
  SummarySidebar
};

/**
 * Componentes de modales relacionados con la reservaciÃ³n
 * Estos se importan directamente desde el directorio principal de reservaciÃ³n
 * ya que son componentes mÃ¡s especÃ­ficos
 */
export const getModals = () => {
  const modalImports = Promise.all([
    import('../TuesdayModal'),
    import('../PaymentModalCustomer'),
    import('../ConfirmationModal'),
    import('../ContractModal'),
    import('../QuotationConfirmationModal')
  ]);
  
  return modalImports.then(([
    TuesdayModal,
    PaymentModal,
    ConfirmationModal,
    ContractModal,
    QuotationConfirmationModal
  ]) => ({
    TuesdayModal: TuesdayModal.default,
    PaymentModal: PaymentModal.default,
    ConfirmationModal: ConfirmationModal.default,
    ContractModal: ContractModal.default,
    QuotationConfirmationModal: QuotationConfirmationModal.default
  }));
};

/**
 * FunciÃ³n para generar un conjunto de elementos para el indicador de pasos
 * @param {Array} steps - Array de objetos de pasos con al menos una propiedad 'label'
 * @param {number} currentStepIndex - Ãndice del paso actual (base 0)
 * @returns {Array} - Array de elementos de paso formateados para el indicador
 */
export const generateStepItems = (steps, currentStepIndex) => {
  if (!Array.isArray(steps)) return [];
  
  return steps.map((step, index) => ({
    label: step.label || `Paso ${index + 1}`,
    isCompleted: index < currentStepIndex,
    isCurrent: index === currentStepIndex,
    isPending: index > currentStepIndex
  }));
};

/**
 * FunciÃ³n para calcular el progreso total de la reservaciÃ³n
 * @param {number} currentStepIndex - Ãndice del paso actual (base 0)
 * @param {number} totalSteps - NÃºmero total de pasos
 * @returns {number} - Porcentaje de progreso (0-100)
 */
export const calculateProgress = (currentStepIndex, totalSteps) => {
  if (totalSteps <= 0) return 0;
  return Math.round(((currentStepIndex + 1) / totalSteps) * 100);
};

/**
 * FunciÃ³n para determinar si un paso es navegable (puede ser accedido directamente)
 * @param {number} targetStepIndex - Ãndice del paso objetivo
 * @param {number} currentStepIndex - Ãndice del paso actual 
 * @param {Array} validSteps - Array de Ã­ndices de pasos que son vÃ¡lidos para navegar
 * @returns {boolean} - true si el paso puede ser accedido
 */
export const isStepNavigable = (targetStepIndex, currentStepIndex, validSteps = []) => {
  // Siempre se puede navegar hacia atrÃ¡s
  if (targetStepIndex < currentStepIndex) return true;
  
  // Si es el paso actual, ya estamos ahÃ­
  if (targetStepIndex === currentStepIndex) return true;
  
  // Si el paso objetivo estÃ¡ en la lista de pasos vÃ¡lidos
  if (validSteps.includes(targetStepIndex)) return true;
  
  // Por defecto, no permitir navegaciÃ³n hacia adelante
  return false;
};

/**
 * FunciÃ³n para agrupar elementos de resumen por categorÃ­a
 * @param {Object} formValues - Valores del formulario de reservaciÃ³n
 * @param {Object} options - Objetos con opciones disponibles (paquetes, temÃ¡ticas, etc.)
 * @returns {Object} - Objeto con elementos agrupados por categorÃ­a
 */
export const groupSummaryItems = (formValues, options) => {
  const { packages, tematicas, mamparas, foodOptions, extras } = options;
  
  return {
    package: {
      title: 'Paquete',
      item: packages?.find(pkg => pkg.id === formValues.id_paquete),
      price: formValues.packagePrice || 0,
      formatter: 'package'
    },
    datetime: {
      title: 'Fecha y Hora',
      date: formValues.fecha_reserva,
      time: formValues.hora_inicio,
      tuesdayFee: formValues.tuesdayFee || 0,
      formatter: 'datetime'
    },
    theme: {
      title: 'TemÃ¡tica',
      item: tematicas?.find(tema => tema.id === formValues.id_tematica),
      formatter: 'theme'
    },
    mampara: {
      title: 'Mampara',
      item: mamparas?.find(mampara => mampara.id === formValues.id_mampara),
      formatter: 'mampara'
    },
    food: {
      title: 'Alimentos',
      item: foodOptions?.find(food => food.id === formValues.id_opcion_alimento),
      formatter: 'food'
    },
    extras: {
      title: 'Extras',
      items: formValues.extras?.map(extra => {
        const extraInfo = extras?.find(e => e.id === extra.id);
        return {
          ...extraInfo,
          cantidad: extra.cantidad
        };
      }).filter(Boolean) || [],
      formatter: 'extras'
    },
    celebrant: {
      title: 'Festejado',
      nombre: formValues.nombre_festejado,
      edad: formValues.edad_festejado,
      sexo: formValues.sexo_festejado,
      color: formValues.color_favorito,
      detalles: formValues.detalles_especiales,
      formatter: 'celebrant'
    }
  };
};

// Exportar un objeto con todas las utilidades como default
export default {
  StepIndicator,
  SummarySidebar,
  getModals,
  generateStepItems,
  calculateProgress,
  isStepNavigable,
  groupSummaryItems
};\n\n

=== ./reservas/pages/customer/reservationform/CelebrantSection.jsx ===
import React from 'react';
import { Controller } from 'react-hook-form';
import { FiUser, FiAlertCircle } from 'react-icons/fi';
import FormSection from './FormSection';

const CelebrantSection = ({ control, errors }) => {
  return (
    <FormSection title="InformaciÃ³n del Festejado" icon={FiUser}>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Nombre del Festejado */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Nombre del Festejado *
          </label>
          <div className="relative">
            <Controller
              name="nombre_festejado"
              control={control}
              defaultValue=""
              rules={{
                required: 'Nombre del festejado es requerido',
                minLength: {
                  value: 3,
                  message: 'El nombre debe tener al menos 3 caracteres',
                },
              }}
              render={({ field }) => (
                <input
                  {...field}
                  type="text"
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="Nombre completo"
                />
              )}
            />
            {errors.nombre_festejado && (
              <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                <FiAlertCircle className="w-4 h-4" />
                {errors.nombre_festejado.message}
              </p>
            )}
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiUser className="h-5 w-5 text-gray-400" />
            </div>
          </div>
        </div>

        {/* Edad del Festejado */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Edad del Festejado *
          </label>
          <div className="relative">
            <Controller
              name="edad_festejado"
              control={control}
              defaultValue=""
              rules={{
                required: 'Edad del festejado es requerida',
                min: {
                  value: 1,
                  message: 'La edad debe ser mayor a 0',
                },
                max: {
                  value: 100,
                  message: 'La edad no puede ser mayor a 100',
                },
              }}
              render={({ field: { onChange, ...field } }) => (
                <input
                  {...field}
                  type="number"
                  onChange={(e) => {
                    const value = parseInt(e.target.value, 10);
                    onChange(isNaN(value) ? '' : value);
                  }}
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="Edad"
                />
              )}
            />
            {errors.edad_festejado && (
              <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                <FiAlertCircle className="w-4 h-4" />
                {errors.edad_festejado.message}
              </p>
            )}
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiUser className="h-5 w-5 text-gray-400" />
            </div>
          </div>
        </div>
      </div>
    </FormSection>
  );
};

export default CelebrantSection;\n\n

=== ./reservas/pages/customer/reservationform/CommentsSection.jsx ===
import React from 'react';
import { Controller } from 'react-hook-form';
import { FiMessageSquare } from 'react-icons/fi';
import FormSection from './FormSection';

const CommentsSection = ({ control }) => {
  return (
    <FormSection title="Comentarios Adicionales" icon={FiMessageSquare}>
      <div>
        <div className="relative">
          <Controller
            name="comentarios"
            control={control}
            defaultValue=""
            render={({ field }) => (
              <textarea
                {...field}
                rows="3"
                className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 resize-y"
                placeholder="Â¿Tienes algÃºn requerimiento especial o comentario adicional para tu reserva?"
              />
            )}
          />
          <div className="absolute top-3 left-3">
            <FiMessageSquare className="h-5 w-5 text-gray-400" />
          </div>
        </div>
      </div>
    </FormSection>
  );
};

export default CommentsSection;
\n\n

=== ./reservas/pages/customer/reservationform/DateTimeSection.jsx ===
import React, { useState, useEffect, useCallback } from 'react';
import { Controller, useWatch } from 'react-hook-form';
import { FiCalendar, FiClock, FiAlertCircle, FiInfo } from 'react-icons/fi';
import DatePicker, { registerLocale } from 'react-datepicker';
import es from 'date-fns/locale/es';
import Select from 'react-select';
import FormSection from './FormSection';
import { customSelectStyles } from './styles';
import 'react-datepicker/dist/react-datepicker.css';
import { addDays, isBefore, startOfDay } from 'date-fns';

registerLocale('es', es);

const TIME_SLOTS = {
  MORNING: {
    label: 'MaÃ±ana (11:00 - 16:00)',
    value: 'maÃ±ana',
    hora_inicio: '11:00:00',
    hora_fin: '16:00:00',
    icon: 'ðŸŒ…'
  },
  AFTERNOON: {
    label: 'Tarde (17:00 - 22:00)',
    value: 'tarde',
    hora_inicio: '17:00:00',
    hora_fin: '22:00:00',
    icon: 'ðŸŒ‡'
  }
};

const TimeSlotSelect = ({ 
  field, 
  existingReservations,
  selectedDate,
  customStyles 
}) => {
  const getAvailableTimeSlots = () => {
    if (!selectedDate || !(selectedDate instanceof Date)) return [];

    const dateStr = selectedDate.toISOString().split('T')[0];
    const reservationsForDate = existingReservations.filter(
      reservation => {
        const reservationDate = new Date(reservation.fecha_reserva).toISOString().split('T')[0];
        const isActiveReservation = reservation.estado === 'pendiente' || reservation.estado === 'confirmada';
        return reservationDate === dateStr && isActiveReservation;
      }
    );

    const availableSlots = [];

    const morningBooked = reservationsForDate.some(r => r.hora_inicio === TIME_SLOTS.MORNING.hora_inicio);
    const afternoonBooked = reservationsForDate.some(r => r.hora_inicio === TIME_SLOTS.AFTERNOON.hora_inicio);

    if (!morningBooked) {
      availableSlots.push({
        ...TIME_SLOTS.MORNING,
        label: (
          <div className="flex items-center gap-2">
            <span>{TIME_SLOTS.MORNING.icon}</span>
            <span>{TIME_SLOTS.MORNING.label}</span>
          </div>
        )
      });
    }

    if (!afternoonBooked) {
      availableSlots.push({
        ...TIME_SLOTS.AFTERNOON,
        label: (
          <div className="flex items-center gap-2">
            <span>{TIME_SLOTS.AFTERNOON.icon}</span>
            <span>{TIME_SLOTS.AFTERNOON.label}</span>
          </div>
        )
      });
    }

    return availableSlots;
  };

  const timeOptions = getAvailableTimeSlots();
  const selectedOption = field.value ? timeOptions.find(option => 
    option.value === field.value
  ) : null;

  return (
    <Select
      options={timeOptions}
      value={selectedOption}
      onChange={(option) => {
        if (option) {
          field.onChange(option.value);
        } else {
          field.onChange(null);
        }
      }}
      isDisabled={!selectedDate}
      placeholder={
        !selectedDate
          ? 'Primero selecciona una fecha'
          : timeOptions.length === 0
          ? 'No hay horarios disponibles'
          : 'Selecciona un horario'
      }
      className="react-select-container"
      classNamePrefix="react-select"
      styles={customStyles}
      menuPortalTarget={document.body}
    />
  );
};

const DateTimeSection = ({
  control,
  errors,
  setValue,
  unavailableDates,
  existingReservations,
  setIsTuesdayModalOpen,
  packages
}) => {
  const [tuesdayModalShown, setTuesdayModalShown] = useState(false);

  const selectedPackage = useWatch({
    control,
    name: 'id_paquete'
  });

  const selectedDate = useWatch({
    control,
    name: 'fecha_reserva'
  });

  const selectedTimeSlot = useWatch({
    control,
    name: 'hora_inicio'
  });

  useEffect(() => {
    if (selectedPackage && selectedDate instanceof Date) {
      const pkg = packages.find((p) => p.id === selectedPackage);
      if (pkg) {
        const dayOfWeek = selectedDate.getDay();
        const newPrice =
          dayOfWeek >= 1 && dayOfWeek <= 4
            ? parseFloat(pkg.precio_lunes_jueves)
            : parseFloat(pkg.precio_viernes_domingo);
        setValue('packagePrice', newPrice, { shouldValidate: false });
  
        if (dayOfWeek === 2 && !tuesdayModalShown) {
          setValue('tuesdayFee', 1500, { shouldValidate: false });
          setIsTuesdayModalOpen(true);
          setTuesdayModalShown(true);
        } else if (dayOfWeek !== 2) {
          setValue('tuesdayFee', 0, { shouldValidate: false });
          setTuesdayModalShown(false);
        }
      }
    }
  }, [selectedPackage, selectedDate, packages, setValue, setIsTuesdayModalOpen, tuesdayModalShown]);

  const handleDateChange = (date, onChange) => {
    if (!date) {
      onChange(null);
      setValue('hora_inicio', null);
      setValue('packagePrice', 0, { shouldValidate: false });
      setValue('tuesdayFee', 0, { shouldValidate: false });
      setTuesdayModalShown(false);
      return;
    }
  
    if (date instanceof Date && !isNaN(date.getTime())) {
      const validDate = new Date(date);
      validDate.setHours(0, 0, 0, 0);
      onChange(validDate);
      setValue('hora_inicio', null);
      setTuesdayModalShown(false);
    } else {
      console.error('Fecha invÃ¡lida:', date);
      onChange(null);
      setValue('hora_inicio', null);
      setTuesdayModalShown(false);
    }
  };

  const getDateAvailability = (date) => {
    if (!date) return 'available';

    const today = startOfDay(new Date());
    if (isBefore(date, today)) {
      return 'past';
    }

    // Check if date is within one week
    const oneWeekFromNow = addDays(today, 7);
    if (isBefore(date, oneWeekFromNow)) {
      return 'unavailable';
    }

    const dateStr = date.toISOString().split('T')[0];
    const reservationsForDate = existingReservations.filter(
      reservation => {
        const reservationDate = new Date(reservation.fecha_reserva).toISOString().split('T')[0];
        const isActiveReservation = reservation.estado === 'pendiente' || reservation.estado === 'confirmada';
        return reservationDate === dateStr && isActiveReservation;
      }
    );

    const morningBooked = reservationsForDate.some(r => r.hora_inicio === TIME_SLOTS.MORNING.hora_inicio);
    const afternoonBooked = reservationsForDate.some(r => r.hora_inicio === TIME_SLOTS.AFTERNOON.hora_inicio);

    if (morningBooked && afternoonBooked) return 'unavailable';
    if (morningBooked || afternoonBooked) return 'partial';
    return 'available';
  };

  const getDatePriceInfo = useCallback((date) => {
    if (!selectedPackage || !packages.length) return '';
    
    const pkg = packages.find((p) => p.id === selectedPackage);
    if (!pkg) return '';

    const dayOfWeek = date.getDay();
    const basePrice = dayOfWeek >= 1 && dayOfWeek <= 4
      ? pkg.precio_lunes_jueves
      : pkg.precio_viernes_domingo;

    const isTuesdayDate = date.getDay() === 2;
    const priceInfo = `Precio: $${basePrice}${isTuesdayDate ? ' + $1,500 (Martes)' : ''}`;
    
    return priceInfo;
  }, [selectedPackage, packages]);

  const getDayClassName = (date) => {
    const today = startOfDay(new Date());
    const oneWeekFromNow = addDays(today, 7);
    const availability = getDateAvailability(date);
    const isWithinFirstWeek = isBefore(date, oneWeekFromNow);
    const isToday = date.getTime() === today.getTime();
    let className = 'w-full h-full flex items-center justify-center hover:bg-opacity-80 transition-all duration-200 ';

    if (isToday) {
      className += 'bg-blue-100 text-blue-800 font-bold ring-2 ring-blue-400 ';
    } else if (availability === 'past' || isWithinFirstWeek) {
      className += 'bg-gray-100 text-gray-400 cursor-not-allowed ';
    } else if (availability === 'unavailable') {
      className += 'bg-red-100 text-red-800 cursor-not-allowed ';
    } else if (availability === 'partial') {
      className += 'bg-yellow-100 text-yellow-800 ';
    } else if (availability === 'available') {
      className += 'bg-green-100 text-green-800 ';
    }

    return className;
  };

  const filterDate = (date) => {
    const today = startOfDay(new Date());
    const oneWeekFromNow = addDays(today, 7);
    return !isBefore(date, oneWeekFromNow);
  };

  const CustomInput = React.forwardRef(({ value, onClick, onChange }, ref) => (
    <div className="relative">
      <input
        value={value}
        onChange={onChange}
        onClick={onClick}
        ref={ref}
        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 cursor-pointer bg-white"
        placeholder="Seleccionar fecha"
        readOnly
      />
      <FiCalendar className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
    </div>
  ));

  return (
    <FormSection title="Fecha y Horario" icon={FiCalendar}>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha de Reserva
          </label>
          <div className="relative">
            <Controller
              control={control}
              name="fecha_reserva"
              rules={{ 
                required: 'Fecha de reserva es requerida',
                validate: {
                  isValidDate: (value) => {
                    if (!(value instanceof Date) || isNaN(value.getTime())) {
                      return 'Fecha invÃ¡lida';
                    }
                    const today = startOfDay(new Date());
                    const oneWeekFromNow = addDays(today, 7);
                    if (isBefore(value, oneWeekFromNow)) {
                      return 'Las reservas deben hacerse con al menos una semana de anticipaciÃ³n';
                    }
                    return true;
                  }
                }
              }}
              render={({ field }) => (
                <DatePicker
                  selected={field.value}
                  onChange={(date) => handleDateChange(date, field.onChange)}
                  customInput={<CustomInput />}
                  dateFormat="dd/MM/yyyy"
                  minDate={new Date()}
                  filterDate={filterDate}
                  excludeDates={unavailableDates}
                  locale="es"
                  showPopperArrow={false}
                  popperPlacement="bottom-start"
                  popperClassName="datepicker-popper"
                  calendarClassName="shadow-lg border border-gray-200 rounded-lg"
                  renderDayContents={(day, date) => (
                    <div className="relative group">
                      <div 
                        className={getDayClassName(date)}
                        aria-label={
                          date.getTime() === startOfDay(new Date()).getTime() 
                            ? "DÃ­a actual" 
                            : getDatePriceInfo(date)
                        }
                      >
                        {day}
                      </div>
                      <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 hidden group-hover:block">
                        <div className="bg-gray-900 text-white text-xs rounded py-1 px-2 whitespace-nowrap">
                          {date.getTime() === startOfDay(new Date()).getTime() 
                            ? "DÃ­a actual" 
                            : getDatePriceInfo(date)}
                        </div>
                      </div>
                    </div>
                  )}
                />
              )}
            />
            {errors.fecha_reserva && (
              <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                <FiAlertCircle className="w-4 h-4" />
                {errors.fecha_reserva.message}
              </p>
            )}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Horario Disponible
          </label>
          <div className="relative">
            <Controller
              name="hora_inicio"
              control={control}
              rules={{ required: 'Horario es requerido' }}
              render={({ field }) => (
                <div>
                  <TimeSlotSelect
                    field={field}
                    existingReservations={existingReservations}
                    selectedDate={selectedDate}
                    customStyles={customSelectStyles}
                  />
                  {selectedDate && selectedTimeSlot && (
                    <div className="mt-2 text-sm text-gray-600 bg-gray-50 p-2 rounded-md flex items-center gap-2">
                      <FiInfo className="w-4 h-4" />
                      <span>
                        Horario seleccionado: {
                          selectedTimeSlot === 'maÃ±ana' 
                            ? TIME_SLOTS.MORNING.label 
                            : TIME_SLOTS.AFTERNOON.label
                        }
                      </span>
                    </div>
                  )}
                </div>
              )}
            />
            {errors.hora_inicio && (
              <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                <FiAlertCircle className="w-4 h-4" />
                {errors.hora_inicio.message}
              </p>
            )}
          </div>
        </div>
      </div>

      {/* Leyenda de colores */}
      <div className="mt-4 bg-white p-4 rounded-lg border border-indigo-100 shadow-sm space-y-4">
        <div className="grid grid-cols-4 gap-2">
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-green-100"></div>
            <span>Ambos horarios disponibles</span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-yellow-100"></div>
            <span>Un horario disponible</span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-red-100"></div>
            <span>Sin disponibilidad</span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <div className="w-4 h-4 rounded bg-gray-100"></div>
            <span>Fechas pasadas</span>
          </div>
        </div>
      </div>

      {/* Resumen de la selecciÃ³n */}
      {selectedDate && selectedTimeSlot && (
        <div className="mt-4 p-4 bg-indigo-50 rounded-lg border border-indigo-100">
          <h4 className="text-sm font-medium text-indigo-900 mb-2">Resumen de la Reserva</h4>
          <div className="space-y-2 text-sm text-indigo-700">
            <div className="flex items-center gap-2">
              <FiCalendar className="w-4 h-4" />
              <span>Fecha: {selectedDate.toLocaleDateString('es-ES', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}</span>
            </div>
            <div className="flex items-center gap-2">
              <FiClock className="w-4 h-4" />
              <span>Horario: {selectedTimeSlot === 'maÃ±ana' ? TIME_SLOTS.MORNING.label : TIME_SLOTS.AFTERNOON.label}</span>
            </div>
          </div>
        </div>
      )}
    </FormSection>
  );
};

export default DateTimeSection;
\n\n

=== ./reservas/pages/customer/reservationform/ExtrasSection.jsx ===
import React, { useCallback, useMemo, useEffect } from 'react';
import { useWatch } from 'react-hook-form';
import { FiPlus, FiMinus, FiCheck, FiDollarSign, FiShoppingCart, FiInfo } from 'react-icons/fi';
import { processExtras } from '@shared/utils/reservationUtils';

const ExtrasSection = ({ extras, control, setValue }) => {
  const selectedExtras = useWatch({
    control,
    name: 'extras',
    defaultValue: []
  });

  // Efecto para procesar extras y eliminar duplicados al inicializar
  useEffect(() => {
    if (selectedExtras && selectedExtras.length > 0) {
      const processedExtras = processExtras(selectedExtras);
      if (JSON.stringify(processedExtras) !== JSON.stringify(selectedExtras)) {
        setValue('extras', processedExtras);
      }
    }
  }, []);

  const handleExtraToggle = useCallback((extra) => {
    const currentExtras = selectedExtras || [];
    // Usar Number() para garantizar comparaciÃ³n consistente
    const existingIndex = currentExtras.findIndex((item) => Number(item.id) === Number(extra.id));
    
    if (existingIndex === -1) {
      // Preservar propiedades adicionales Ãºtiles
      setValue('extras', [...currentExtras, { 
        id: extra.id, 
        cantidad: 1,
        nombre: extra.nombre,
        precio: extra.precio
      }]);
    } else {
      setValue('extras', currentExtras.filter((_, index) => index !== existingIndex));
    }
  }, [selectedExtras, setValue]);

  const handleQuantityChange = useCallback((extraId, newQuantity) => {
    const currentExtras = selectedExtras || [];
    // Usar Number() para garantizar comparaciÃ³n consistente
    const existingIndex = currentExtras.findIndex((item) => Number(item.id) === Number(extraId));
    
    if (newQuantity < 1) {
      setValue('extras', currentExtras.filter((_, index) => index !== existingIndex));
    } else {
      const updatedExtras = [...currentExtras];
      updatedExtras[existingIndex] = { 
        ...updatedExtras[existingIndex], 
        cantidad: newQuantity 
      };
      setValue('extras', updatedExtras);
    }
  }, [selectedExtras, setValue]);

  const renderQuantityControls = useCallback((extraId, cantidad) => (
    <div className="flex items-center gap-2 bg-white p-1 rounded-lg border border-gray-200 shadow-sm">
      <button
        type="button"
        onClick={() => handleQuantityChange(extraId, cantidad - 1)}
        className="p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Disminuir cantidad"
      >
        <FiMinus className="w-3 h-3" />
      </button>
      <input
        type="number"
        value={cantidad}
        min="1"
        onChange={(e) => handleQuantityChange(extraId, parseInt(e.target.value) || 1)}
        className="w-16 text-center border border-gray-300 rounded-md p-1 text-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        aria-label="Cantidad"
      />
      <button
        type="button"
        onClick={() => handleQuantityChange(extraId, cantidad + 1)}
        className="p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Aumentar cantidad"
      >
        <FiPlus className="w-3 h-3" />
      </button>
    </div>
  ), [handleQuantityChange]);

  const selectedCount = useMemo(() => selectedExtras?.length || 0, [selectedExtras]);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FiShoppingCart className="text-indigo-600 w-5 h-5" />
          <h3 className="text-lg font-semibold text-gray-900">Extras</h3>
        </div>
        {selectedCount > 0 && (
          <span className="bg-indigo-100 text-indigo-800 text-sm font-medium px-3 py-1 rounded-full">
            {selectedCount} seleccionado{selectedCount !== 1 ? 's' : ''}
          </span>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {extras.map((extra) => {
          // Usar Number() para garantizar comparaciÃ³n consistente
          const existingExtra = selectedExtras?.find((item) => Number(item.id) === Number(extra.id));
          const isSelected = !!existingExtra;

          return (
            <div
              key={extra.id}
              className={`group p-4 rounded-lg border transition-all duration-300 transform ${
                isSelected
                  ? 'border-indigo-500 bg-indigo-50 shadow-md scale-[1.02]'
                  : 'border-gray-200 hover:border-indigo-300 hover:shadow-sm hover:scale-[1.01]'
              }`}
            >
              <div className="flex justify-between items-start mb-3">
                <div className="flex-1">
                  <div className="flex items-center gap-2">
                    <h4 className="font-medium text-gray-900">{extra.nombre}</h4>
                    {isSelected && (
                      <span className="flex items-center gap-1 text-xs bg-indigo-500 text-white px-2 py-0.5 rounded-full">
                        <FiCheck className="w-3 h-3" />
                        Seleccionado
                      </span>
                    )}
                  </div>
                  {extra.descripcion && (
                    <p className="text-sm text-gray-600 mt-1 group-hover:text-gray-700">
                      {extra.descripcion}
                    </p>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => handleExtraToggle(extra)}
                  className={`p-2 rounded-full transition-all duration-200 ${
                    isSelected
                      ? 'bg-indigo-500 text-white hover:bg-indigo-600'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                  aria-label={isSelected ? 'Remover extra' : 'Agregar extra'}
                >
                  {isSelected ? <FiMinus /> : <FiPlus />}
                </button>
              </div>

              <div className="flex justify-between items-center mt-3">
                <div className="flex items-center gap-2">
                  <FiDollarSign className="text-indigo-600 w-4 h-4" />
                  <span className="text-lg font-semibold text-indigo-600">
                    ${Number(extra.precio).toFixed(2)}
                  </span>
                </div>

                {isSelected && renderQuantityControls(
                  extra.id, 
                  // Manejar diferentes formatos de cantidad (ediciÃ³n vs nuevo)
                  existingExtra.cantidad || existingExtra.ReservaExtra?.cantidad || 1
                )}
              </div>
            </div>
          );
        })}
      </div>

      {extras.length === 0 && (
        <div className="flex items-center justify-center gap-2 py-8 text-gray-500 bg-gray-50 rounded-lg border border-dashed border-gray-300">
          <FiInfo className="w-5 h-5" />
          <span>No hay extras disponibles</span>
        </div>
      )}
    </div>
  );
};

export default React.memo(ExtrasSection);\n\n

=== ./reservas/pages/customer/reservationform/FoodOptionsSection.jsx ===
import React, { useMemo } from 'react';
import { Controller } from 'react-hook-form';
import { FiCoffee, FiAlertCircle, FiInfo } from 'react-icons/fi';
import Select from 'react-select';
import FormSection from './FormSection';
import { customSelectStyles, formatCurrency } from './styles';

const FoodOptionLabel = React.memo(({ foodOption }) => (
  <div className="space-y-1">
    <div className="font-medium text-gray-900">{foodOption.nombre}</div>
    <div className="text-xs text-gray-500">
      {foodOption.descripcion || 'OpciÃ³n estÃ¡ndar de alimentos'}
    </div>
  </div>
));

FoodOptionLabel.displayName = 'FoodOptionLabel';

const FoodOptionDetails = React.memo(({ foodOption }) => (
  <div className="p-2 space-y-2">
    <div className="font-medium text-gray-900">{foodOption.nombre}</div>
    <div className="text-sm text-gray-600 space-y-1">
      <div>MenÃº para Adultos: {foodOption.menu_adulto || 'MenÃº estÃ¡ndar'}</div>
      <div>MenÃº para NiÃ±os: {foodOption.menu_nino || 'MenÃº infantil estÃ¡ndar'}</div>
      <div className="mt-2 pt-2 border-t border-gray-200">
        <div className="text-xs text-gray-500">Precios por persona:</div>
        <div>Adultos: {formatCurrency(foodOption.precio_adulto)}</div>
        <div>NiÃ±os: {formatCurrency(foodOption.precio_nino)}</div>
        <div className="text-indigo-600 font-medium mt-1">
          Total estimado: {formatCurrency(foodOption.precio_extra)}
        </div>
      </div>
    </div>
  </div>
));

FoodOptionDetails.displayName = 'FoodOptionDetails';

const FoodSelect = React.memo(({ field, options, customStyles }) => {
  // Manejar tanto objetos complejos como IDs directos
  const selectedOption = useMemo(() => {
    // Si es un objeto complejo (formato dashboard)
    if (typeof field.value === 'object' && field.value?.value) {
      return options.find(option => Number(option.value) === Number(field.value.value));
    }
    
    // Si es un ID directo (formato cliente)
    return options.find(option => Number(option.value) === Number(field.value));
  }, [options, field.value]);

  return (
    <Select
      {...field}
      options={options}
      value={selectedOption}
      onChange={(option) => {
        // Mantener el formato de ID simple para compatibilidad
        field.onChange(option ? option.value : null);
      }}
      placeholder="Seleccionar opciÃ³n de alimento"
      className="react-select-container"
      classNamePrefix="react-select"
      styles={{
        ...customStyles,
        option: (base) => ({
          ...base,
          padding: '8px 12px',
          cursor: 'pointer'
        })
      }}
      formatOptionLabel={(option) => (
        <FoodOptionLabel foodOption={option.foodOption} />
      )}
      components={{
        Option: ({ data, ...props }) => (
          <div {...props.innerProps}>
            <FoodOptionDetails foodOption={data.foodOption} />
          </div>
        )
      }}
      isClearable
    />
  );
});

FoodSelect.displayName = 'FoodSelect';

const FoodOptionsSection = ({ control, errors, foodOptions, setValue }) => {
  const foodOptionsList = useMemo(() => 
    foodOptions
      // Filtrar por opciones activas (si aplica)
      .filter(food => food.activo !== false)
      .map((food) => ({
        value: food.id,
        label: food.nombre,
        foodOption: food, // Pasar la opciÃ³n completa
        // Propiedades directas para compatibilidad con ambos formatos
        precio_extra: food.precio_extra,
        turno: food.turno,
        descripcion: food.descripcion
      })),
    [foodOptions]
  );

  return (
    <FormSection title="OpciÃ³n de Alimento" icon={FiCoffee}>
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Selecciona la OpciÃ³n de Alimento
          </label>
          <Controller
            name="id_opcion_alimento"
            control={control}
            rules={{ required: 'La opciÃ³n de alimento es requerida' }}
            render={({ field }) => (
              <div>
                <FoodSelect
                  field={field}
                  options={foodOptionsList}
                  customStyles={customSelectStyles}
                />
                {errors.id_opcion_alimento && (
                  <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                    <FiAlertCircle className="w-4 h-4" />
                    {errors.id_opcion_alimento.message}
                  </p>
                )}
              </div>
            )}
          />
        </div>

        {/* InformaciÃ³n adicional sobre las opciones de alimento */}
        {foodOptions.length > 0 ? (
          <div className="mt-4 bg-gray-50 p-3 rounded-lg">
            <div className="flex items-center gap-2 text-gray-700 mb-2">
              <FiInfo className="w-4 h-4" />
              <span className="text-sm font-medium">InformaciÃ³n importante</span>
            </div>
            <div className="text-sm text-gray-600 space-y-2">
              <p>
                Cada opciÃ³n de alimento incluye menÃºs especÃ­ficos para adultos y niÃ±os.
                Los precios mostrados son por persona y se suman al paquete base.
              </p>
              <p>
                Puedes solicitar cambios especÃ­ficos (como papas fritas) al momento de la reserva
                en la secciÃ³n de comentarios adicionales.
              </p>
            </div>
          </div>
        ) : (
          <div className="text-center py-4 bg-gray-50 rounded-lg">
            <FiInfo className="mx-auto h-6 w-6 text-gray-400" />
            <p className="mt-2 text-sm text-gray-500">
              No hay opciones de alimento disponibles en este momento
            </p>
          </div>
        )}
      </div>
    </FormSection>
  );
};

export default FoodOptionsSection;\n\n

=== ./reservas/pages/customer/reservationform/FormSection.jsx ===
import React from 'react';

const FormSection = ({ title, children, icon: Icon }) => (
  <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-300">
    <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
      {Icon && <Icon className="w-5 h-5 text-indigo-600" />}
      {title}
    </h3>
    {children}
  </div>
);

export default FormSection;
\n\n

=== ./reservas/pages/customer/reservationform/MamparaSection.jsx ===
import React, { useEffect } from 'react';
import { Controller, useWatch } from 'react-hook-form';
import { FiLayout, FiAlertCircle, FiInfo } from 'react-icons/fi';
import Select from 'react-select';
import FormSection from './FormSection';
import { customSelectStyles, formatCurrency } from './styles';

const MamparaSection = ({ control, errors, filteredMamparas, setValue }) => {
  // Observar cambios en la mampara y temÃ¡tica seleccionadas
  const selectedMampara = useWatch({
    control,
    name: 'id_mampara'
  });

  // Extraer ID de mampara (puede ser un objeto complejo o un ID directo)
  const selectedMamparaId = typeof selectedMampara === 'object' 
    ? selectedMampara?.value 
    : selectedMampara;

  const selectedThemeObj = useWatch({
    control,
    name: 'id_tematica'
  });
  
  // Extraer ID de temÃ¡tica (puede ser un objeto complejo o un ID directo)
  const selectedTheme = typeof selectedThemeObj === 'object'
    ? selectedThemeObj?.value
    : selectedThemeObj;

  // Actualizar el precio de la mampara cuando cambia la selecciÃ³n
  useEffect(() => {
    // Si ya es un objeto complejo con precio, usamos ese valor directamente
    if (typeof selectedMampara === 'object' && selectedMampara?.precio) {
      setValue('mamparaPrice', parseFloat(selectedMampara.precio) || 0, {
        shouldValidate: true,
        shouldDirty: true
      });
      return;
    }
    
    // Si es un ID, buscamos la mampara correspondiente
    if (selectedMamparaId) {
      const selectedMamparaObj = filteredMamparas.find(m => Number(m.id) === Number(selectedMamparaId));
      if (selectedMamparaObj) {
        setValue('mamparaPrice', parseFloat(selectedMamparaObj.precio) || 0, {
          shouldValidate: true,
          shouldDirty: true
        });
      }
    } else {
      setValue('mamparaPrice', 0, {
        shouldValidate: true,
        shouldDirty: true
      });
    }
  }, [selectedMampara, selectedMamparaId, filteredMamparas, setValue]);

  // Limpiar la selecciÃ³n de mampara cuando cambia la temÃ¡tica
  useEffect(() => {
    if (!selectedTheme && !selectedThemeObj) {
      setValue('id_mampara', null);
      setValue('mamparaPrice', 0, {
        shouldValidate: true,
        shouldDirty: true
      });
    }
  }, [selectedTheme, selectedThemeObj, setValue]);

  return (
    <FormSection title="Mampara" icon={FiLayout}>
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Selecciona la Mampara
        </label>
        <div className="relative">
          <Controller
            name="id_mampara"
            control={control}
            render={({ field }) => {
              const options = filteredMamparas.map((mampara) => ({
                value: mampara.id,
                label: `${mampara.piezas} piezas - ${formatCurrency(mampara.precio)}`,
                piezas: mampara.piezas,
                precio: mampara.precio
              }));
              
              // Manejar tanto objeto complejo como ID directo
              const selectedOption = typeof field.value === 'object'
                ? field.value // Ya es un objeto completo
                : options.find((option) => Number(option.value) === Number(field.value));

              return (
                <>
                  <Select
                    options={options}
                    value={selectedOption}
                    onChange={(option) => {
                      field.onChange(option ? option.value : null);
                      if (option) {
                        setValue('mamparaPrice', parseFloat(option.precio) || 0, {
                          shouldValidate: true,
                          shouldDirty: true
                        });
                      } else {
                        setValue('mamparaPrice', 0, {
                          shouldValidate: true,
                          shouldDirty: true
                        });
                      }
                    }}
                    placeholder={selectedTheme || selectedThemeObj ? "Seleccionar mampara" : "Primero selecciona una temÃ¡tica"}
                    isDisabled={!selectedTheme && !selectedThemeObj}
                    className="react-select-container"
                    classNamePrefix="react-select"
                    styles={customSelectStyles}
                    menuPortalTarget={document.body}
                    isClearable={true}
                  />
                  {selectedOption && (
                    <div className="mt-2 text-sm text-indigo-600 bg-indigo-50 p-2 rounded-md flex items-center gap-2">
                      <FiInfo className="w-4 h-4" />
                      <span>
                        Esta mampara incluye {selectedOption.piezas} piezas - 
                        Precio: {formatCurrency(selectedOption.precio)}
                      </span>
                    </div>
                  )}
                </>
              );
            }}
          />
          {errors.id_mampara && (
            <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
              <FiAlertCircle className="w-4 h-4" />
              {errors.id_mampara.message}
            </p>
          )}
        </div>
        {(selectedTheme || selectedThemeObj) && filteredMamparas.length === 0 && (
          <p className="mt-2 text-sm text-amber-600 bg-amber-50 p-2 rounded-md flex items-center gap-2">
            <FiInfo className="w-4 h-4" />
            <span>No hay mamparas disponibles para la temÃ¡tica seleccionada</span>
          </p>
        )}
        {!selectedTheme && !selectedThemeObj && (
          <p className="mt-2 text-sm text-gray-600 bg-gray-50 p-2 rounded-md flex items-center gap-2">
            <FiInfo className="w-4 h-4" />
            <span>Selecciona una temÃ¡tica para ver las mamparas disponibles</span>
          </p>
        )}
      </div>
    </FormSection>
  );
};

export default MamparaSection;\n\n

=== ./reservas/pages/customer/reservationform/PackageSection.jsx ===
import React, { useMemo } from 'react';
import { Controller } from 'react-hook-form';
import { FiPackage, FiAlertCircle, FiInfo } from 'react-icons/fi';
import Select from 'react-select';
import FormSection from './FormSection';
import { customSelectStyles, formatCurrency } from './styles';

const PackageOption = React.memo(({ pkg }) => (
  <div className="p-2 space-y-2">
    <div className="font-medium text-gray-900">{pkg.nombre}</div>
    <div className="text-sm text-gray-600">
      <div>L-J: {formatCurrency(pkg.precio_lunes_jueves)}</div>
      <div>V-D: {formatCurrency(pkg.precio_viernes_domingo)}</div>
    </div>
  </div>
));

PackageOption.displayName = 'PackageOption';

const PackageInfo = React.memo(({ selectedPackage }) => {
  if (!selectedPackage) return null;
  
  return (
    <div className="mt-2 text-sm text-indigo-600 bg-indigo-50 p-2 rounded-md flex items-center gap-2">
      <FiInfo className="w-4 h-4" />
      <span>
        Precios: L-J {formatCurrency(selectedPackage.precio_lunes_jueves)} | 
        V-D {formatCurrency(selectedPackage.precio_viernes_domingo)}
      </span>
    </div>
  );
});

PackageInfo.displayName = 'PackageInfo';

const PackageSelect = React.memo(({ field, options, packages, customStyles }) => {
  const selectedOption = useMemo(() => 
    options.find((option) => option.value === field.value),
    [options, field.value]
  );

  const selectedPackage = useMemo(() => 
    packages.find(p => p.id === field.value),
    [packages, field.value]
  );

  return (
    <div>
      <Select
        {...field}
        options={options}
        value={selectedOption}
        onChange={(option) => field.onChange(option ? option.value : null)}
        placeholder="Seleccionar paquete"
        className="react-select-container"
        classNamePrefix="react-select"
        styles={{
          ...customStyles,
          option: (base) => ({
            ...base,
            padding: '8px 12px',
            cursor: 'pointer'
          })
        }}
        components={{
          Option: ({ data, ...props }) => (
            <div {...props.innerProps}>
              <PackageOption pkg={packages.find(p => p.id === data.value)} />
            </div>
          )
        }}
        isClearable
      />
      <PackageInfo selectedPackage={selectedPackage} />
    </div>
  );
});

PackageSelect.displayName = 'PackageSelect';

const PackageSection = ({ control, packages, errors }) => {
  const packageOptions = useMemo(() => 
    packages.map((pkg) => ({
      value: pkg.id,
      label: pkg.nombre
    })),
    [packages]
  );

  return (
    <FormSection title="InformaciÃ³n del Paquete" icon={FiPackage}>
      <div className="space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Selecciona tu Paquete
          </label>
          <div className="relative">
            <Controller
              name="id_paquete"
              control={control}
              rules={{ required: 'Paquete es requerido' }}
              render={({ field }) => (
                <PackageSelect
                  field={field}
                  options={packageOptions}
                  packages={packages}
                  customStyles={customSelectStyles}
                />
              )}
            />
            {errors.id_paquete && (
              <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                <FiAlertCircle className="w-4 h-4" />
                {errors.id_paquete.message}
              </p>
            )}
          </div>
        </div>
      </div>
    </FormSection>
  );
};

export default React.memo(PackageSection);\n\n

=== ./reservas/pages/customer/reservationform/ThemeSection.jsx ===
import React from 'react';
import { Controller } from 'react-hook-form';
import { FiStar, FiAlertCircle, FiInfo } from 'react-icons/fi';
import Select from 'react-select';
import FormSection from './FormSection';
import { customSelectStyles } from './styles';

const ThemeSelect = ({ field, options, error }) => {
  // Manejar tanto objeto complejo como ID directo
  const selectedValue = typeof field.value === 'object' 
    ? field.value // Ya es un objeto completo
    : options.find((option) => Number(option.value) === Number(field.value));
  
  return (
    <div>
      <Select
        options={options}
        value={selectedValue}
        onChange={(option) => {
          // En modo dashboard queremos preservar el objeto completo
          // En modo cliente solo el valor es suficiente
          // Usamos el valor directo para compatibilidad con ambos
          field.onChange(option ? option.value : null);
        }}
        placeholder="Seleccionar temÃ¡tica"
        className="react-select-container"
        classNamePrefix="react-select"
        styles={customSelectStyles}
        menuPortalTarget={document.body}
        isClearable={true}
      />
      {error && (
        <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
          <FiAlertCircle className="w-4 h-4" />
          {error.message}
        </p>
      )}
    </div>
  );
};

const ThemeSection = ({ control, errors, tematicas, setValue }) => {
  // Filtrar por temÃ¡ticas activas y mapear a formato para select
  const themeOptions = tematicas
    .filter(tematica => tematica.activo) // Solo temÃ¡ticas activas
    .map((tematica) => ({
      value: tematica.id,
      label: tematica.nombre,
      // Preservar propiedades importantes para compatibilidad
      descripcion: tematica.descripcion,
      foto: tematica.foto,
      // Datos completos para compatibilidad
      data: tematica
    }));

  return (
    <FormSection title="TemÃ¡tica del Evento" icon={FiStar}>
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Selecciona la TemÃ¡tica
          </label>
          <Controller
            name="id_tematica"
            control={control}
            rules={{ required: 'TemÃ¡tica es requerida' }}
            render={({ field }) => (
              <ThemeSelect
                field={field}
                options={themeOptions}
                error={errors.id_tematica}
              />
            )}
          />
          <p className="mt-1 text-xs text-gray-500">
            Tu selecciÃ³n de temÃ¡tica afectarÃ¡ las opciones de mampara disponibles.
          </p>
        </div>

        {/* InformaciÃ³n adicional sobre las temÃ¡ticas */}
        {themeOptions.length > 0 ? (
          <div className="mt-4 bg-indigo-50 p-3 rounded-lg">
            <div className="flex items-center gap-2 text-indigo-700 mb-2">
              <FiInfo className="w-4 h-4" />
              <span className="text-sm font-medium">InformaciÃ³n sobre temÃ¡ticas</span>
            </div>
            <p className="text-sm text-indigo-600">
              Selecciona la temÃ¡tica que mejor se adapte a tu celebraciÃ³n. 
              Cada temÃ¡tica incluye decoraciÃ³n y ambientaciÃ³n especÃ­fica.
            </p>
          </div>
        ) : (
          <div className="text-center py-4 bg-gray-50 rounded-lg">
            <FiInfo className="mx-auto h-6 w-6 text-gray-400" />
            <p className="mt-2 text-sm text-gray-500">
              No hay temÃ¡ticas disponibles en este momento
            </p>
          </div>
        )}
      </div>
    </FormSection>
  );
};

export default ThemeSection;
\n\n

=== ./reservas/pages/customer/reservationform/styles.js ===
// Common select styles for react-select components
export const customSelectStyles = {
  control: (provided) => ({
    ...provided,
    borderColor: '#E5E7EB',
    boxShadow: 'none',
    '&:hover': {
      borderColor: '#6366F1',
    },
  }),
  option: (provided, state) => ({
    ...provided,
    backgroundColor: state.isSelected ? '#6366F1' : 'white',
    color: state.isSelected ? 'white' : '#374151',
    '&:hover': {
      backgroundColor: '#E0E7FF',
    },
  }),
};

// Common currency formatter
export const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN',
  }).format(amount);
};

// Common input styles
export const inputStyles = `
  w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm 
  focus:outline-none focus:ring-indigo-500 focus:border-indigo-500
`;

// Common button styles
export const buttonStyles = {
  primary: `
    px-8 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 
    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 
    transition-colors duration-200 flex items-center gap-2 font-medium shadow-sm
  `,
  secondary: `
    px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 
    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 
    transition-colors duration-200 flex items-center gap-2
  `,
};

// Calendar styles
export const calendarStyles = {
  calendarContainer: `
    bg-white border border-gray-200 rounded-lg shadow-lg p-4
    font-sans
  `,
  monthYearWrapper: `
    flex items-center justify-between mb-4
    text-gray-800 font-semibold
  `,
  monthYear: `
    text-lg font-bold text-gray-900
  `,
  nextPrevButton: `
    p-2 rounded-full hover:bg-gray-100
    focus:outline-none focus:ring-2 focus:ring-indigo-500
    transition-colors duration-200
  `,
  weekDays: `
    grid grid-cols-7 gap-1 mb-2
    text-sm font-medium text-gray-600
  `,
  dayWrapper: `
    aspect-square flex items-center justify-center
    text-sm font-medium cursor-pointer
    transition-all duration-200
  `,
  selectedDay: `
    bg-indigo-600 text-white rounded-full
    hover:bg-indigo-700
  `,
  today: `
    border-2 border-indigo-500 rounded-full
    text-indigo-600
  `,
  disabledDay: `
    text-gray-300 cursor-not-allowed
    hover:bg-transparent
  `,
  normalDay: `
    hover:bg-gray-100 rounded-full
    text-gray-700
  `,
  weekend: `
    text-indigo-600 font-semibold
  `,
};

// Time slot styles
export const timeSlotStyles = {
  container: `
    mt-4 grid grid-cols-2 gap-2
  `,
  slot: `
    p-3 border rounded-lg text-center cursor-pointer
    transition-all duration-200
    hover:border-indigo-500 hover:bg-indigo-50
  `,
  slotSelected: `
    border-indigo-500 bg-indigo-50 text-indigo-700
    font-medium
  `,
  slotDisabled: `
    bg-gray-50 text-gray-400 cursor-not-allowed
    hover:border-gray-200 hover:bg-gray-50
  `,
  slotLabel: `
    text-sm font-medium
  `,
  slotTime: `
    text-xs text-gray-500 mt-1
  `,
};\n\n

=== ./reservas/pages/customer/reservationsteps/CelebrantStep.jsx ===
import React from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import { motion } from 'framer-motion';
import { 
  FiUser, 
  FiCalendar, 
  FiHeart, 
  FiInfo, 
  FiAlertCircle,
  FiMessageCircle,
  FiCheckCircle
} from 'react-icons/fi';

const FormField = ({ 
  icon: Icon, 
  label, 
  name, 
  required, 
  error, 
  children, 
  hint 
}) => {
  return (
    <div className="space-y-1">
      <label htmlFor={name} className="flex items-center gap-2 text-gray-700 dark:text-white font-medium">
        {Icon && <Icon className="text-indigo-600 w-5 h-5" />}
        <span>{label}</span>
        {required && <span className="text-red-500">*</span>}
      </label>
      
      {children}
      
      {hint && (
        <p className="text-xs text-gray-500 dark:text-gray-300 mt-1">{hint}</p>
      )}
      
      {error && (
        <p className="text-red-500 text-sm flex items-center gap-1 mt-1">
          <FiAlertCircle className="w-4 h-4 flex-shrink-0" />
          <span>{error}</span>
        </p>
      )}
    </div>
  );
};

const CelebrantStep = () => {
  const { 
    control, 
    formState: { errors, dirtyFields, isValid },
    watch 
  } = useFormContext();
  
  const watchedNombre = watch('nombre_festejado') || '';
  const watchedEdad = watch('edad_festejado') || '';
  const watchedSexo = watch('sexo_festejado') || '';
  const watchedColor = watch('color_favorito') || '';
  
  // Calcular progreso del formulario (campos completos / total de campos necesarios)
  const requiredFieldsCount = 2; // nombre y edad son obligatorios
  const completedRequiredFieldsCount = 
    (!!watchedNombre ? 1 : 0) + 
    (!!watchedEdad ? 1 : 0);
  
  const formProgress = (completedRequiredFieldsCount / requiredFieldsCount) * 100;

  // Animaciones
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { 
        staggerChildren: 0.05
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-3">InformaciÃ³n del Festejado</h2>
        <p className="text-gray-600 dark:text-gray-200 max-w-2xl mx-auto">
          CuÃ©ntanos sobre la persona que va a celebrar este dÃ­a especial para que podamos personalizar tu evento.
        </p>
      </div>

      {/* Barra de progreso */}
      <div className="w-full bg-gray-200 rounded-full h-2.5 mb-6">
        <div 
          className="bg-indigo-600 h-2.5 rounded-full transition-all duration-500 ease-out"
          style={{ width: `${formProgress}%` }}
        ></div>
      </div>

      {/* Formulario de datos del festejado */}
      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <motion.div variants={itemVariants}>
            <FormField
              icon={FiUser}
              label="Nombre del Festejado"
              name="nombre_festejado"
              required={true}
              error={errors.nombre_festejado?.message}
            >
              <Controller
                name="nombre_festejado"
                control={control}
                rules={{ 
                  required: "El nombre del festejado es requerido",
                  minLength: {
                    value: 2,
                    message: "El nombre debe tener al menos 2 caracteres"
                  }
                }}
                render={({ field }) => (
                  <input
                    {...field}
                    id="nombre_festejado"
                    type="text"
                    placeholder="Ej. MarÃ­a Fernanda"
                    className={`w-full p-3 rounded-lg border focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 ${
                      errors.nombre_festejado
                        ? 'border-red-300 bg-red-50 dark:bg-red-900/20 dark:border-red-700'
                        : field.value
                          ? 'border-green-300 bg-green-50 dark:bg-green-900/20 dark:border-green-700'
                          : 'border-gray-300 dark:border-gray-600 dark:bg-gray-700'
                    }`}
                  />
                )}
              />
            </FormField>
          </motion.div>

          <motion.div variants={itemVariants}>
            <FormField
              icon={FiCalendar}
              label="Edad que Cumple"
              name="edad_festejado"
              required={true}
              error={errors.edad_festejado?.message}
            >
              <Controller
                name="edad_festejado"
                control={control}
                rules={{ 
                  required: "La edad es requerida",
                  min: {
                    value: 1,
                    message: "La edad debe ser mayor a 0"
                  },
                  max: {
                    value: 120,
                    message: "La edad debe ser menor a 120"
                  },
                  pattern: {
                    value: /^[0-9]+$/,
                    message: "Solo se permiten nÃºmeros"
                  }
                }}
                render={({ field }) => (
                  <input
                    {...field}
                    id="edad_festejado"
                    type="number"
                    min="1"
                    max="120"
                    placeholder="Ej. 7"
                    className={`w-full p-3 rounded-lg border focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 ${
                      errors.edad_festejado
                        ? 'border-red-300 bg-red-50 dark:bg-red-900/20 dark:border-red-700'
                        : field.value
                          ? 'border-green-300 bg-green-50 dark:bg-green-900/20 dark:border-green-700'
                          : 'border-gray-300 dark:border-gray-600 dark:bg-gray-700'
                    }`}
                  />
                )}
              />
            </FormField>
          </motion.div>

          <motion.div variants={itemVariants}>
            <FormField
              icon={FiUser}
              label="Sexo del Festejado"
              name="sexo_festejado"
              hint="Esta informaciÃ³n nos ayuda a personalizar mejor la decoraciÃ³n"
            >
              <Controller
                name="sexo_festejado"
                control={control}
                render={({ field }) => (
                  <>
                    <div className="flex gap-4 mt-2">
                      <label className={`flex items-center gap-2 p-3 rounded-lg border cursor-pointer transition-colors ${
                        field.value === 'femenino'
                          ? 'bg-pink-50 border-pink-300 text-pink-700 dark:bg-pink-900/20 dark:border-pink-700 dark:text-pink-300'
                          : 'bg-white border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700'
                      }`}>
                        <input
                          {...field}
                          type="radio"
                          value="femenino"
                          className="hidden"
                          checked={field.value === 'femenino'}
                          onChange={() => field.onChange('femenino')}
                        />
                        <div className={`w-4 h-4 rounded-full border flex items-center justify-center ${
                          field.value === 'femenino'
                            ? 'border-pink-500 bg-white'
                            : 'border-gray-400'
                        }`}>
                          {field.value === 'femenino' && (
                            <div className="w-2 h-2 rounded-full bg-pink-500"></div>
                          )}
                        </div>
                        <span>NiÃ±a</span>
                      </label>
                      
                      <label className={`flex items-center gap-2 p-3 rounded-lg border cursor-pointer transition-colors ${
                        field.value === 'masculino'
                          ? 'bg-blue-50 border-blue-300 text-blue-700 dark:bg-blue-900/20 dark:border-blue-700 dark:text-blue-300'
                          : 'bg-white border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700'
                      }`}>
                        <input
                          {...field}
                          type="radio"
                          value="masculino"
                          className="hidden"
                          checked={field.value === 'masculino'}
                          onChange={() => field.onChange('masculino')}
                        />
                        <div className={`w-4 h-4 rounded-full border flex items-center justify-center ${
                          field.value === 'masculino'
                            ? 'border-blue-500 bg-white'
                            : 'border-gray-400'
                        }`}>
                          {field.value === 'masculino' && (
                            <div className="w-2 h-2 rounded-full bg-blue-500"></div>
                          )}
                        </div>
                        <span>NiÃ±o</span>
                      </label>

                      <label className={`flex items-center gap-2 p-3 rounded-lg border cursor-pointer transition-colors ${
                        field.value === 'otro'
                          ? 'bg-purple-50 border-purple-300 text-purple-700 dark:bg-purple-900/20 dark:border-purple-700 dark:text-purple-300'
                          : 'bg-white border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700'
                      }`}>
                        <input
                          {...field}
                          type="radio"
                          value="otro"
                          className="hidden"
                          checked={field.value === 'otro'}
                          onChange={() => field.onChange('otro')}
                        />
                        <div className={`w-4 h-4 rounded-full border flex items-center justify-center ${
                          field.value === 'otro'
                            ? 'border-purple-500 bg-white'
                            : 'border-gray-400'
                        }`}>
                          {field.value === 'otro' && (
                            <div className="w-2 h-2 rounded-full bg-purple-500"></div>
                          )}
                        </div>
                        <span>Otro</span>
                      </label>
                    </div>

                    {/* Campo de texto para "Otro" con animaciÃ³n */}
                    {field.value === 'otro' && (
                      <motion.div
                        initial={{ opacity: 0, y: -10, height: 0 }}
                        animate={{ opacity: 1, y: 0, height: 'auto' }}
                        exit={{ opacity: 0, y: -10, height: 0 }}
                        transition={{
                          duration: 0.3,
                          ease: "easeInOut",
                          opacity: { duration: 0.2 }
                        }}
                        className="mt-3 overflow-hidden"
                      >
                        <Controller
                          name="sexo_festejado_personalizado"
                          control={control}
                          render={({ field: customField }) => (
                            <input
                              {...customField}
                              type="text"
                              placeholder="Especifica el gÃ©nero"
                              className="w-full p-3 rounded-lg border border-purple-300 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 bg-purple-50 dark:bg-purple-900/20 dark:border-purple-700 transition-all duration-300"
                              onChange={(e) => {
                                customField.onChange(e.target.value);
                                // Ya no actualizamos el valor principal, mantenemos 'otro'
                              }}
                              autoFocus
                            />
                          )}
                        />
                      </motion.div>
                    )}
                  </>
                )}
              />
            </FormField>
          </motion.div>

          <motion.div variants={itemVariants}>
            <FormField
              icon={FiHeart}
              label="Color Favorito"
              name="color_favorito"
              hint="Nos ayuda a personalizar la decoraciÃ³n"
            >
              <Controller
                name="color_favorito"
                control={control}
                render={({ field }) => (
                  <input
                    {...field}
                    id="color_favorito"
                    type="text"
                    placeholder="Ej. Azul, Rosa, Verde"
                    className={`w-full p-3 rounded-lg border focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 ${
                      field.value
                        ? 'border-green-300 bg-green-50 dark:bg-green-900/20 dark:border-green-700'
                        : 'border-gray-300 dark:border-gray-600 dark:bg-gray-700'
                    }`}
                  />
                )}
              />
            </FormField>
          </motion.div>
        </div>

        <motion.div variants={itemVariants} className="mt-6">
          <FormField
            icon={FiMessageCircle}
            label="Detalles Adicionales o Peticiones Especiales"
            name="detalles_especiales"
            hint="Â¿Hay algo especial que deberÃ­amos saber? Ej: alergias, preferencias, etc."
          >
            <Controller
              name="detalles_especiales"
              control={control}
              render={({ field }) => (
                <textarea
                  {...field}
                  id="detalles_especiales"
                  rows="3"
                  placeholder="Escribe aquÃ­ cualquier detalle o peticiÃ³n especial..."
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                />
              )}
            />
          </FormField>
        </motion.div>

        {/* Mensaje de campos requeridos */}
        <div className="mt-6 flex items-start gap-2 text-xs text-gray-500 dark:text-gray-300">
          <FiInfo className="w-4 h-4 flex-shrink-0 mt-0.5" />
          <p>Los campos marcados con <span className="text-red-500">*</span> son requeridos.</p>
        </div>
      </motion.div>

      {/* Consejos o informaciÃ³n adicional */}
      <div className="bg-indigo-50 dark:bg-indigo-900/20 p-5 rounded-lg border border-indigo-100 dark:border-indigo-800">
        <div className="flex gap-3">
          <FiCheckCircle className="w-6 h-6 text-indigo-600 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-indigo-800 dark:text-indigo-300">Â¡Personaliza al mÃ¡ximo!</h4>
            <p className="text-indigo-700 dark:text-indigo-300 text-sm mt-1">
              Cuanta mÃ¡s informaciÃ³n nos brindes sobre el festejado, mejor podremos personalizar tu evento para hacerlo inolvidable. 
              Toda informaciÃ³n es confidencial y solo serÃ¡ utilizada para mejorar tu experiencia.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CelebrantStep;\n\n

=== ./reservas/pages/customer/reservationsteps/DateTimeStep.jsx ===
import React, { useState, useEffect } from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import DatePicker, { registerLocale } from 'react-datepicker';
import { motion, AnimatePresence } from 'framer-motion';
import { isTuesday, addDays, isAfter, isBefore, format, parseISO } from 'date-fns';
import { es } from 'date-fns/locale';
import {
  FiCalendar,
  FiClock,
  FiSun,
  FiMoon,
  FiAlertCircle,
  FiInfo,
  FiCheck,
  FiChevronRight,
  FiChevronLeft
} from 'react-icons/fi';
import 'react-datepicker/dist/react-datepicker.css';

// Registrar locale espaÃ±ol para DatePicker
registerLocale('es', es);

// Constantes
const TIME_SLOTS = {
  MORNING: {
    label: 'MaÃ±ana (11:00 - 16:00)',
    value: 'maÃ±ana',
    start: '11:00:00',
    end: '16:00:00',
    icon: FiSun
  },
  AFTERNOON: {
    label: 'Tarde (17:00 - 22:00)',
    value: 'tarde',
    start: '17:00:00',
    end: '22:00:00',
    icon: FiMoon
  }
};

const TUESDAY_SURCHARGE = 500; // Cargo adicional por los martes

const DateTimeStep = ({ 
  unavailableDates = [], // Valor predeterminado para evitar el error
  existingReservations = [], // Valor predeterminado
  setIsTuesdayModalOpen,
  methods
}) => {
  const { control, setValue, watch, formState: { errors } } = useFormContext();
  const [isDatePickerOpen, setIsDatePickerOpen] = useState(false);
  const selectedDate = watch('fecha_reserva');
  const selectedTimeSlot = watch('hora_inicio');
  const tuesdayFee = watch('tuesdayFee') || 0;
  
  // Estados locales para gestiÃ³n de UI
  const [showTuesdayWarning, setShowTuesdayWarning] = useState(false);
  const [unavailableTimeSlots, setUnavailableTimeSlots] = useState({
    morning: false,
    afternoon: false
  });

  // Calcular slots de tiempo no disponibles cuando cambia la fecha seleccionada
  useEffect(() => {
    if (selectedDate) {
      const dateString = format(selectedDate, 'yyyy-MM-dd');
      const reservationsOnSelectedDate = existingReservations.filter(
        reservation => reservation.fecha_reserva.split('T')[0] === dateString
      );

      const morning = reservationsOnSelectedDate.some(
        reservation => reservation.hora_inicio === TIME_SLOTS.MORNING.start
      );
      
      const afternoon = reservationsOnSelectedDate.some(
        reservation => reservation.hora_inicio === TIME_SLOTS.AFTERNOON.start
      );

      setUnavailableTimeSlots({ morning, afternoon });
      
      // Verificar si es martes para mostrar advertencia
      if (isTuesday(selectedDate)) {
        setShowTuesdayWarning(true);
        setValue('tuesdayFee', TUESDAY_SURCHARGE);
      } else {
        setShowTuesdayWarning(false);
        setValue('tuesdayFee', 0);
      }
      
      // Reiniciar timeSlot si el seleccionado ya no estÃ¡ disponible
      if (selectedTimeSlot) {
        const timeSlotValue = 
          typeof selectedTimeSlot === 'object' ? selectedTimeSlot.value : selectedTimeSlot;
          
        if ((timeSlotValue === 'maÃ±ana' && morning) || 
            (timeSlotValue === 'tarde' && afternoon)) {
          setValue('hora_inicio', null);
        }
      }
    }
  }, [selectedDate, existingReservations, setValue, selectedTimeSlot]);

  // FunciÃ³n para filtrar fechas disponibles en el DatePicker
  const filterAvailableDates = (date) => {
    // No permitir fechas en el pasado
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    if (isBefore(date, today)) return false;
    
    // No permitir fechas muy futuras (6 meses)
    const sixMonthsFromNow = addDays(today, 180);
    if (isAfter(date, sixMonthsFromNow)) return false;
    
    // Verificar si la fecha estÃ¡ en la lista de fechas no disponibles (con verificaciÃ³n segura)
    if (!Array.isArray(unavailableDates) || unavailableDates.length === 0) {
      return true; // Si no hay fechas no disponibles, todas estÃ¡n disponibles
    }
    
    return !unavailableDates.some(unavailableDate => {
      const unavailableDateTime = new Date(unavailableDate);
      return (
        unavailableDateTime.getDate() === date.getDate() &&
        unavailableDateTime.getMonth() === date.getMonth() &&
        unavailableDateTime.getFullYear() === date.getFullYear()
      );
    });
  };

  // Componente personalizado para las cabeceras del DatePicker
  const CustomHeader = ({
    date,
    decreaseMonth,
    increaseMonth,
    prevMonthButtonDisabled,
    nextMonthButtonDisabled
  }) => (
    <div className="flex items-center justify-between p-3 bg-indigo-50 rounded-t-lg">
      <button
        onClick={decreaseMonth}
        disabled={prevMonthButtonDisabled}
        type="button"
        className={`p-2 rounded-full transition-all duration-200 ${
          prevMonthButtonDisabled
            ? 'text-gray-300 cursor-not-allowed'
            : 'text-indigo-600 hover:bg-indigo-100'
        }`}
        aria-label="Mes anterior"
      >
        <FiChevronLeft className="w-5 h-5" />
      </button>
      
      <h2 className="text-lg font-semibold text-indigo-800 capitalize">
        {format(date, 'MMMM yyyy', { locale: es })}
      </h2>
      
      <button
        onClick={increaseMonth}
        disabled={nextMonthButtonDisabled}
        type="button"
        className={`p-2 rounded-full transition-all duration-200 ${
          nextMonthButtonDisabled
            ? 'text-gray-300 cursor-not-allowed'
            : 'text-indigo-600 hover:bg-indigo-100'
        }`}
        aria-label="Mes siguiente"
      >
        <FiChevronRight className="w-5 h-5" />
      </button>
    </div>
  );

  // Renderizar un time slot
  const renderTimeSlot = (timeSlotKey, timeSlot, isDisabled) => {
    const TimeIcon = timeSlot.icon;
    const isSelected = selectedTimeSlot && 
      (typeof selectedTimeSlot === 'object' 
        ? selectedTimeSlot.value === timeSlot.value 
        : selectedTimeSlot === timeSlot.value);

    return (
      <motion.div
        whileHover={isDisabled ? {} : { scale: 1.02 }}
        whileTap={isDisabled ? {} : { scale: 0.98 }}
        className="relative"
      >
        <button
          type="button"
          onClick={() => {
            if (!isDisabled) {
              setValue('hora_inicio', {
                label: timeSlot.label,
                value: timeSlot.value
              });
            }
          }}
          disabled={isDisabled}
          className={`w-full p-4 rounded-lg border-2 transition-all duration-300 ${
            isDisabled
              ? 'bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed opacity-60'
              : isSelected
                ? 'bg-indigo-50 border-indigo-500 text-indigo-800'
                : 'bg-white border-gray-200 hover:border-indigo-300 text-gray-800'
          }`}
        >
          <div className="flex items-center gap-3">
            <div
              className={`p-3 rounded-full ${
                isSelected
                  ? 'bg-indigo-100 text-indigo-600'
                  : isDisabled
                    ? 'bg-gray-200 text-gray-400'
                    : 'bg-gray-100 text-gray-600'
              }`}
            >
              <TimeIcon className="w-5 h-5" />
            </div>
            <div className="text-left">
              <h3 className={`font-medium ${isSelected ? 'text-indigo-600' : ''}`}>
                {timeSlot.label}
              </h3>
            </div>
          </div>
        </button>
        
        {isDisabled && (
          <div className="absolute top-1 right-1 bg-red-100 text-red-600 text-xs font-medium px-2 py-1 rounded-full">
            No disponible
          </div>
        )}
        
        {isSelected && (
          <div className="absolute top-1 right-1 bg-indigo-100 text-indigo-600 text-xs font-medium px-2 py-1 rounded-full flex items-center gap-1">
            <FiCheck className="w-3 h-3" />
            Seleccionado
          </div>
        )}
      </motion.div>
    );
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-3xl font-bold text-indigo-900 mb-3 leading-tight">Selecciona Fecha y Hora</h2>
        <p className="text-indigo-600 max-w-2xl mx-auto opacity-80">
          Elige el dÃ­a y horario perfecto para tu evento especial
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-10">
        {/* Selector de Fecha */}
        <div className="space-y-4">
          <div className="flex items-center gap-2 mb-3">
            <div className="bg-indigo-100 p-2 rounded-md">
              <FiCalendar className="text-indigo-600 w-5 h-5" />
            </div>
            <h3 className="font-semibold text-indigo-800 text-lg">Fecha de la Reserva</h3>
          </div>
          
          <Controller
            control={control}
            name="fecha_reserva"
            rules={{ required: "La fecha es requerida" }}
            render={({ field }) => (
              <div className="relative">
                <DatePicker
                  selected={field.value}
                  onChange={(date) => {
                    field.onChange(date);
                    if (isTuesday(date) && !tuesdayFee) {
                      setIsTuesdayModalOpen(true);
                    }
                  }}
                  onCalendarOpen={() => setIsDatePickerOpen(true)}
                  onCalendarClose={() => setIsDatePickerOpen(false)}
                  filterDate={filterAvailableDates}
                  locale="es"
                  dateFormat="dd 'de' MMMM 'de' yyyy"
                  placeholderText="Selecciona una fecha"
                  minDate={new Date()}
                  maxDate={addDays(new Date(), 180)}
                  renderCustomHeader={CustomHeader}
                  calendarClassName="bg-white shadow-xl rounded-lg border-0 overflow-hidden"
                  inline={false}
                  showIcon
                  className={`w-full p-4 rounded-lg transition-all duration-200 shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 ${
                    errors.fecha_reserva
                      ? 'border-red-300 bg-red-50 border-2'
                      : isDatePickerOpen
                        ? 'border-indigo-300 bg-indigo-50 border-2'
                        : 'border border-gray-300 bg-white hover:border-indigo-300'
                  }`}
                  dayClassName={date => 
                    date.getDay() === 0 || date.getDay() === 6 
                      ? "bg-blue-50 text-blue-800 rounded-full hover:bg-blue-100"
                      : date.getDay() === 2 
                        ? "bg-amber-50 text-amber-800 rounded-full hover:bg-amber-100"
                        : "rounded-full hover:bg-indigo-100"
                  }
                />
                
                <div className="absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none">
                  <FiCalendar className={`w-5 h-5 ${
                    errors.fecha_reserva
                      ? 'text-red-400'
                      : isDatePickerOpen
                        ? 'text-indigo-500'
                        : 'text-gray-400'
                  }`} />
                </div>
                
                {errors.fecha_reserva && (
                  <p className="mt-2 text-red-600 text-sm flex items-center gap-1">
                    <FiAlertCircle className="w-4 h-4 flex-shrink-0" />
                    <span>{errors.fecha_reserva.message}</span>
                  </p>
                )}
              </div>
            )}
          />
          
          {/* Advertencia de Martes */}
          <AnimatePresence>
            {showTuesdayWarning && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="bg-amber-50 border border-amber-200 rounded-lg p-3 mt-3"
              >
                <div className="flex gap-2">
                  <FiInfo className="text-amber-500 w-5 h-5 flex-shrink-0" />
                  <div>
                    <p className="text-amber-800 text-sm">
                      Has seleccionado un martes. Aplicamos un cargo adicional de{' '}
                      <span className="font-medium">{new Intl.NumberFormat('es-MX', {
                        style: 'currency',
                        currency: 'MXN'
                      }).format(TUESDAY_SURCHARGE)}</span>{' '}
                      para reservas en este dÃ­a.
                    </p>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Selector de Horario */}
        <div className="space-y-4">
          <div className="flex items-center gap-2 mb-3">
            <div className="bg-indigo-100 p-2 rounded-md">
              <FiClock className="text-indigo-600 w-5 h-5" />
            </div>
            <h3 className="font-semibold text-indigo-800 text-lg">Horario</h3>
          </div>
          
          <Controller
            control={control}
            name="hora_inicio"
            rules={{ required: "El horario es requerido" }}
            render={({ field }) => (
              <div className="space-y-4">
                <div className="space-y-4">
                  {/* Horario MaÃ±ana */}
                  {renderTimeSlot(
                    'morning',
                    TIME_SLOTS.MORNING,
                    selectedDate ? unavailableTimeSlots.morning : true
                  )}
                  
                  {/* Horario Tarde */}
                  {renderTimeSlot(
                    'afternoon',
                    TIME_SLOTS.AFTERNOON,
                    selectedDate ? unavailableTimeSlots.afternoon : true
                  )}
                </div>
                
                {errors.hora_inicio && (
                  <p className="mt-2 text-red-600 text-sm flex items-center gap-1">
                    <FiAlertCircle className="w-4 h-4 flex-shrink-0" />
                    <span>{errors.hora_inicio.message}</span>
                  </p>
                )}
              </div>
            )}
          />
          
          {selectedDate && unavailableTimeSlots.morning && unavailableTimeSlots.afternoon && (
            <motion.div 
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
              className="mt-4 bg-red-50 border-l-4 border-red-500 rounded-lg p-4 shadow-sm"
            >
              <div className="flex gap-3">
                <FiAlertCircle className="text-red-500 w-6 h-6 flex-shrink-0" />
                <div>
                  <p className="text-red-700 font-semibold">Fecha no disponible</p>
                  <p className="text-red-600 text-sm mt-1">
                    Ambos horarios estÃ¡n ocupados para esta fecha. Por favor, selecciona otra fecha.
                  </p>
                </div>
              </div>
            </motion.div>
          )}
          
          {!selectedDate && (
            <motion.div 
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
              className="mt-4 bg-blue-50 border-l-4 border-blue-500 rounded-lg p-4 shadow-sm"
            >
              <div className="flex gap-3">
                <FiInfo className="text-blue-500 w-6 h-6 flex-shrink-0" />
                <p className="text-blue-700">
                  Por favor, selecciona primero una fecha para ver los horarios disponibles.
                </p>
              </div>
            </motion.div>
          )}
        </div>
      </div>

      {/* InformaciÃ³n adicional */}
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.3, duration: 0.5 }}
        className="mt-8 bg-indigo-50 p-6 rounded-xl border border-indigo-100 shadow-sm"
      >
        <div className="flex gap-4">
          <FiInfo className="w-7 h-7 text-indigo-600 flex-shrink-0" />
          <div>
            <h4 className="font-semibold text-indigo-900 text-lg">InformaciÃ³n importante</h4>
            <ul className="mt-3 space-y-3 text-indigo-800">
              <li className="flex items-start gap-2">
                <FiCheck className="w-4 h-4 text-green-500 mt-0.5" />
                <span>
                  Las reservas estÃ¡n disponibles de hasta 6 meses en adelante.
                </span>
              </li>
              <li className="flex items-start gap-2">
                <FiCheck className="w-4 h-4 text-green-500 mt-0.5" />
                <span>
                  Horario de maÃ±ana: 11:00 AM - 4:00 PM
                </span>
              </li>
              <li className="flex items-start gap-2">
                <FiCheck className="w-4 h-4 text-green-500 mt-0.5" />
                <span>
                  Horario de tarde: 5:00 PM - 10:00 PM
                </span>
              </li>
              <li className="flex items-start gap-2">
                <FiAlertCircle className="w-4 h-4 text-amber-500 mt-0.5" />
                <span>
                  Los martes tienen un cargo adicional de {new Intl.NumberFormat('es-MX', {
                    style: 'currency',
                    currency: 'MXN'
                  }).format(TUESDAY_SURCHARGE)}.
                </span>
              </li>
            </ul>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default DateTimeStep;\n\n

=== ./reservas/pages/customer/reservationsteps/ExtrasStep.jsx ===
import React, { useEffect, useState } from 'react';
import { useFormContext, useWatch } from 'react-hook-form';
import { motion, AnimatePresence } from 'framer-motion';
import {
  FiShoppingCart,
  FiDollarSign,
  FiPlus,
  FiMinus,
  FiCheck,
  FiInfo,
  FiFilter,
  FiSearch,
  FiX
} from 'react-icons/fi';

// FunciÃ³n para formatear moneda
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount || 0);
};

// CategorÃ­as para filtrar extras
const CATEGORIES = [
  { id: 'all', label: 'Todos' },
  { id: 'food', label: 'Alimentos' },
  { id: 'decoration', label: 'DecoraciÃ³n' },
  { id: 'entertainment', label: 'Entretenimiento' },
  { id: 'services', label: 'Servicios' }
];

const ExtrasStep = ({ extras = [] }) => {
  const { control, setValue } = useFormContext();
  const selectedExtras = useWatch({
    control,
    name: 'extras',
    defaultValue: []
  });

  // Estados para bÃºsqueda y filtrado
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [filteredExtras, setFilteredExtras] = useState([]);
  const [showFilters, setShowFilters] = useState(false);

  // FunciÃ³n para procesar y eliminar duplicados de extras
  const processExtras = (selectedItems) => {
    if (!selectedItems) return [];
    
    // Crear un mapa con ID como clave para eliminar duplicados
    const uniqueExtras = selectedItems.reduce((acc, item) => {
      acc[item.id] = item;
      return acc;
    }, {});
    
    return Object.values(uniqueExtras);
  };

  // Efecto para procesar extras y eliminar duplicados al inicializar
  useEffect(() => {
    if (selectedExtras && selectedExtras.length > 0) {
      const processedExtras = processExtras(selectedExtras);
      if (JSON.stringify(processedExtras) !== JSON.stringify(selectedExtras)) {
        setValue('extras', processedExtras);
      }
    }
  }, []);

  // Filtrar extras activos, por categorÃ­a y por bÃºsqueda
  useEffect(() => {
    // Verificar que extras sea un array vÃ¡lido
    if (!Array.isArray(extras) || extras.length === 0) {
      setFilteredExtras([]);
      return;
    }
    
    let filtered = extras.filter(extra => extra.activo);
    
    // Filtrar por categorÃ­a
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(extra => extra.categoria === selectedCategory);
    }
    
    // Filtrar por bÃºsqueda
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase().trim();
      filtered = filtered.filter(extra =>
        extra.nombre.toLowerCase().includes(query) ||
        (extra.descripcion && extra.descripcion.toLowerCase().includes(query))
      );
    }
    
    // Ordenar por categorÃ­a y nombre
    filtered.sort((a, b) => {
      if (a.categoria !== b.categoria) {
        return a.categoria.localeCompare(b.categoria);
      }
      return a.nombre.localeCompare(b.nombre);
    });
    
    setFilteredExtras(filtered);
  }, [extras, selectedCategory, searchQuery]);

  // Calcular el total de extras seleccionados
  const calculateExtrasTotal = () => {
    if (!selectedExtras?.length) return 0;
    
    return selectedExtras.reduce((total, extra) => {
      const extraInfo = extras.find(e => e.id === extra.id);
      if (extraInfo?.precio && extra.cantidad) {
        return total + (parseFloat(extraInfo.precio) * parseInt(extra.cantidad));
      }
      return total;
    }, 0);
  };

  // Manejar la activaciÃ³n/desactivaciÃ³n de un extra
  const handleExtraToggle = (extra) => {
    const currentExtras = selectedExtras || [];
    const existingIndex = currentExtras.findIndex((item) => item.id === extra.id);
    
    if (existingIndex === -1) {
      // AÃ±adir extra con cantidad 1
      setValue('extras', [...currentExtras, { 
        id: extra.id, 
        cantidad: 1,
        nombre: extra.nombre,
        precio: extra.precio
      }]);
    } else {
      // Eliminar extra
      setValue('extras', currentExtras.filter((_, index) => index !== existingIndex));
    }
  };

  // Manejar cambio de cantidad de un extra
  const handleQuantityChange = (extraId, newQuantity) => {
    const currentExtras = selectedExtras || [];
    const existingIndex = currentExtras.findIndex((item) => item.id === extraId);
    
    if (newQuantity < 1) {
      // Eliminar extra si la cantidad es menor a 1
      setValue('extras', currentExtras.filter((_, index) => index !== existingIndex));
    } else {
      // Actualizar cantidad
      const updatedExtras = [...currentExtras];
      updatedExtras[existingIndex] = { 
        ...updatedExtras[existingIndex], 
        cantidad: newQuantity 
      };
      setValue('extras', updatedExtras);
    }
  };

  // Renderizar controles de cantidad
  const renderQuantityControls = (extraId, cantidad) => (
    <div className="flex items-center gap-2 bg-white p-1 rounded-lg border border-gray-200 shadow-sm">
      <button
        type="button"
        onClick={(e) => {
          e.stopPropagation();
          handleQuantityChange(extraId, cantidad - 1);
        }}
        className="p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Disminuir cantidad"
      >
        <FiMinus className="w-3 h-3" />
      </button>
      <input
        type="number"
        value={cantidad}
        min="1"
        onChange={(e) => {
          e.stopPropagation();
          handleQuantityChange(extraId, parseInt(e.target.value) || 1);
        }}
        onClick={(e) => e.stopPropagation()}
        className="w-14 text-center border border-gray-300 rounded-md p-1 text-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        aria-label="Cantidad"
      />
      <button
        type="button"
        onClick={(e) => {
          e.stopPropagation();
          handleQuantityChange(extraId, cantidad + 1);
        }}
        className="p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Aumentar cantidad"
      >
        <FiPlus className="w-3 h-3" />
      </button>
    </div>
  );

  // Contar extras seleccionados
  const selectedCount = selectedExtras?.length || 0;

  // Variantes para animaciones
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { 
        staggerChildren: 0.05
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-3xl font-bold text-indigo-900 mb-3 leading-tight">Personaliza tu Evento con Extras</h2>
        <p className="text-indigo-600 max-w-2xl mx-auto opacity-80">
          AÃ±ade elementos adicionales para hacer tu celebraciÃ³n aÃºn mÃ¡s especial. Selecciona tantos como desees.
        </p>
      </div>

      {/* Panel de bÃºsqueda y filtros */}
      <div className="bg-white p-5 rounded-xl shadow-sm border border-gray-200">
        <div className="flex flex-col md:flex-row gap-4">
          {/* Buscador */}
          <div className="relative flex-1">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              className="block w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Buscar extras..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
            {searchQuery && (
              <button
                type="button"
                onClick={() => setSearchQuery('')}
                className="absolute inset-y-0 right-0 pr-3 flex items-center"
              >
                <FiX className="h-5 w-5 text-gray-400 hover:text-gray-600" />
              </button>
            )}
          </div>

          {/* BotÃ³n de filtros en mÃ³vil */}
          <div className="md:hidden">
            <button
              type="button"
              onClick={() => setShowFilters(!showFilters)}
              className="w-full flex items-center justify-center gap-2 py-2 px-4 bg-indigo-50 text-indigo-700 rounded-lg hover:bg-indigo-100 transition-colors"
            >
              <FiFilter className="w-4 h-4" />
              <span>Filtrar por categorÃ­a</span>
              {selectedCategory !== 'all' && (
                <span className="bg-indigo-100 text-indigo-800 text-xs font-medium px-2 py-0.5 rounded-full">
                  1
                </span>
              )}
            </button>
          </div>

          {/* Filtros desktop */}
          <div className="hidden md:flex items-center gap-2">
            <span className="text-gray-500 text-sm">Filtrar:</span>
            <div className="flex flex-wrap gap-2">
              {CATEGORIES.map(category => (
                <button
                  key={category.id}
                  type="button"
                  onClick={() => setSelectedCategory(category.id)}
                  className={`py-1 px-3 rounded-full text-sm font-medium transition-colors ${
                    selectedCategory === category.id
                      ? 'bg-indigo-600 text-white'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  {category.label}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Filtros mÃ³vil expandibles */}
        <AnimatePresence>
          {showFilters && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: 'auto', opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="mt-4 overflow-hidden"
            >
              <div className="flex flex-wrap gap-2">
                {CATEGORIES.map(category => (
                  <button
                    key={category.id}
                    type="button"
                    onClick={() => setSelectedCategory(category.id)}
                    className={`py-1 px-3 rounded-full text-sm font-medium transition-colors ${
                      selectedCategory === category.id
                        ? 'bg-indigo-600 text-white'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    {category.label}
                  </button>
                ))}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Contador de seleccionados */}
      {selectedCount > 0 && (
        <motion.div 
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
          className="bg-indigo-50 p-5 rounded-xl border border-indigo-100 shadow-sm"
        >
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
            <div className="flex items-center gap-3">
              <div className="bg-indigo-100 p-2 rounded-md">
                <FiShoppingCart className="text-indigo-600 w-5 h-5" />
              </div>
              <span className="font-semibold text-indigo-800 text-lg">
                {selectedCount} extra{selectedCount !== 1 ? 's' : ''} seleccionado{selectedCount !== 1 ? 's' : ''}
              </span>
            </div>
            <div className="bg-indigo-100 px-4 py-2 rounded-lg text-indigo-700 font-semibold">
              Total: {formatCurrency(calculateExtrasTotal())}
            </div>
          </div>
        </motion.div>
      )}

      {/* Grid de Extras */}
      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        className="grid grid-cols-1 md:grid-cols-2 gap-5"
      >
        {filteredExtras.length > 0 ? (
          filteredExtras.map((extra) => {
            const existingExtra = selectedExtras?.find((item) => item.id === extra.id);
            const isSelected = !!existingExtra;

            return (
              <motion.div
                key={extra.id}
                variants={itemVariants}
                onClick={() => handleExtraToggle(extra)}
                className={`group p-4 rounded-lg border transition-all duration-300 cursor-pointer ${
                  isSelected
                    ? 'border-indigo-500 bg-indigo-50 shadow-md'
                    : 'border-gray-200 hover:border-indigo-300 hover:shadow-sm'
                }`}
              >
                <div className="flex justify-between items-start mb-3">
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <h4 className={`font-medium ${isSelected ? 'text-indigo-700' : 'text-gray-900'}`}>
                        {extra.nombre}
                      </h4>
                      {isSelected && (
                        <span className="flex items-center gap-1 text-xs bg-indigo-500 text-white px-2 py-0.5 rounded-full">
                          <FiCheck className="w-3 h-3" />
                          Seleccionado
                        </span>
                      )}
                    </div>
                    {extra.descripcion && (
                      <p className={`text-sm mt-1 ${isSelected ? 'text-indigo-600' : 'text-gray-600'}`}>
                        {extra.descripcion}
                      </p>
                    )}
                    
                    {extra.categoria && (
                      <div className="mt-2">
                        <span className="inline-block bg-gray-100 text-gray-600 text-xs px-2 py-0.5 rounded-full">
                          {extra.categoria}
                        </span>
                      </div>
                    )}
                  </div>
                  <button
                    type="button"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleExtraToggle(extra);
                    }}
                    className={`p-2 rounded-full transition-all duration-200 ${
                      isSelected
                        ? 'bg-indigo-500 text-white hover:bg-indigo-600'
                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                    } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                    aria-label={isSelected ? 'Remover extra' : 'Agregar extra'}
                  >
                    {isSelected ? <FiMinus /> : <FiPlus />}
                  </button>
                </div>

                <div className="flex justify-between items-center mt-3">
                  <div className="flex items-center gap-2">
                    <FiDollarSign className={`${isSelected ? 'text-indigo-600' : 'text-gray-600'} w-4 h-4`} />
                    <span className={`text-lg font-semibold ${isSelected ? 'text-indigo-600' : 'text-gray-800'}`}>
                      {formatCurrency(extra.precio)}
                    </span>
                    <span className="text-sm text-gray-500">por unidad</span>
                  </div>

                  {isSelected && renderQuantityControls(
                    extra.id, 
                    existingExtra.cantidad || 1
                  )}
                </div>
              </motion.div>
            );
          })
        ) : (
          <div className="col-span-full text-center py-10 bg-gray-50 rounded-lg border border-dashed border-gray-300">
            <FiInfo className="w-10 h-10 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-500">
              {searchQuery || selectedCategory !== 'all'
                ? 'No se encontraron extras que coincidan con tu bÃºsqueda o filtro'
                : 'No hay extras disponibles en este momento'}
            </p>
            {(searchQuery || selectedCategory !== 'all') && (
              <button
                className="mt-4 text-indigo-600 hover:text-indigo-800 font-medium"
                onClick={() => {
                  setSearchQuery('');
                  setSelectedCategory('all');
                }}
              >
                Limpiar filtros
              </button>
            )}
          </div>
        )}
      </motion.div>

      {/* InformaciÃ³n adicional */}
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.3, duration: 0.5 }}
        className="mt-8 bg-indigo-50 p-6 rounded-xl border border-indigo-100 shadow-sm"
      >
        <div className="flex gap-4">
          <FiInfo className="w-7 h-7 text-indigo-600 flex-shrink-0" />
          <div>
            <h4 className="font-semibold text-indigo-900 text-lg">InformaciÃ³n sobre extras</h4>
            <p className="text-indigo-700 mt-2">
              Los extras son completamente opcionales y tienen un costo adicional que se sumarÃ¡ al total de tu reserva.
              Puedes seleccionar mÃºltiples extras y especificar la cantidad deseada de cada uno.
            </p>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default ExtrasStep;\n\n

=== ./reservas/pages/customer/reservationsteps/FoodOptionsStep.jsx ===
import React, { useEffect, useState } from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import { motion } from 'framer-motion';
import {
  FiCoffee,
  FiDollarSign,
  FiCheck,
  FiInfo,
  FiShoppingBag,
  FiUsers,
  FiPlus,
  FiMinus
} from 'react-icons/fi';

// FunciÃ³n para formatear moneda
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount || 0);
};

const FoodOptionsStep = ({ foodOptions }) => {
  const { control, setValue, watch, formState: { errors } } = useFormContext();
  const selectedFoodOptionId = watch('id_opcion_alimento');
  const [activeFoodOptions, setActiveFoodOptions] = useState([]);
  
  // Filtrar opciones activas
  useEffect(() => {
    const active = foodOptions.filter(option => option.activo);
    // Ordenar por precio ascendente
    const sorted = [...active].sort((a, b) => parseFloat(a.precio_extra) - parseFloat(b.precio_extra));
    setActiveFoodOptions(sorted);
  }, [foodOptions]);

  // Poder omitir la selecciÃ³n (es opcional)
  const handleSkip = () => {
    setValue('id_opcion_alimento', null);
    // Avanzar al siguiente paso (lo maneja el componente padre)
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-3">Opciones de Alimentos</h2>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Selecciona una opciÃ³n de alimentos para complementar tu evento. Puedes personalizar la experiencia culinaria de tus invitados.
        </p>
      </div>

      {/* Grid de opciones de alimentos */}
      <Controller
        control={control}
        name="id_opcion_alimento"
        render={({ field }) => (
          <div className="space-y-6">
            {activeFoodOptions.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {activeFoodOptions.map((option) => {
                  const isSelected = field.value === option.id;
                  
                  return (
                    <motion.div
                      key={option.id}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => field.onChange(isSelected ? null : option.id)}
                      className={`relative rounded-xl overflow-hidden border-2 transition-all duration-300 cursor-pointer ${
                        isSelected
                          ? 'border-indigo-500 bg-indigo-50 shadow-lg'
                          : 'border-gray-200 bg-white hover:border-indigo-300 hover:shadow-md'
                      }`}
                    >
                      <div className="p-6">
                        {/* Encabezado */}
                        <div className="flex items-start justify-between mb-4">
                          <div className="flex items-center gap-3">
                            <div className={`p-3 rounded-full ${
                              isSelected ? 'bg-indigo-100 text-indigo-600' : 'bg-gray-100 text-gray-600'
                            }`}>
                              <FiCoffee className="w-6 h-6" />
                            </div>
                            <div>
                              <h3 className={`text-lg font-semibold ${isSelected ? 'text-indigo-700' : 'text-gray-900'}`}>
                                {option.nombre}
                              </h3>
                            </div>
                          </div>
                          
                          {isSelected && (
                            <div className="ml-auto flex items-center justify-center w-6 h-6 bg-indigo-600 text-white rounded-full">
                              <FiCheck className="w-4 h-4" />
                            </div>
                          )}
                        </div>
                        
                        {/* Precio */}
                        <div className="flex items-center gap-2 mb-4">
                          <FiDollarSign className="text-indigo-600 w-5 h-5" />
                          <span className="text-lg font-semibold text-indigo-600">
                            {formatCurrency(option.precio_extra)}
                          </span>
                        </div>
                        
                        {/* DescripciÃ³n */}
                        {option.descripcion && (
                          <p className="text-sm text-gray-600 mb-4">
                            {option.descripcion}
                          </p>
                        )}
                        
                        {/* Detalles principales */}
                        <div className="space-y-2 mt-4">
                          {option.cantidad_platos && (
                            <div className="flex items-center gap-2 text-sm text-gray-700">
                              <FiShoppingBag className="w-4 h-4 text-indigo-500" />
                              <span>{option.cantidad_platos} platos incluidos</span>
                            </div>
                          )}
                          
                          {option.para_personas && (
                            <div className="flex items-center gap-2 text-sm text-gray-700">
                              <FiUsers className="w-4 h-4 text-indigo-500" />
                              <span>Para {option.para_personas} personas</span>
                            </div>
                          )}
                          
                          {/* Botones de incrementar/decrementar platillos (opcional para futuras versiones) */}
                          {/* <div className="flex items-center gap-2 mt-4">
                            <button
                              type="button"
                              className="p-1 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200"
                            >
                              <FiMinus className="w-4 h-4" />
                            </button>
                            <span className="font-medium">1</span>
                            <button
                              type="button"
                              className="p-1 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200"
                            >
                              <FiPlus className="w-4 h-4" />
                            </button>
                          </div> */}
                        </div>
                      </div>
                      
                      {/* BotÃ³n de selecciÃ³n (alternativa al clic en tarjeta) */}
                      <div className="p-4 border-t border-gray-200 bg-gray-50">
                        <button
                          type="button"
                          onClick={(e) => {
                            e.stopPropagation();
                            field.onChange(isSelected ? null : option.id);
                          }}
                          className={`w-full py-2 rounded-lg font-medium ${
                            isSelected
                              ? 'bg-indigo-100 text-indigo-700 border border-indigo-500'
                              : 'bg-white text-indigo-600 border border-indigo-600 hover:bg-indigo-50'
                          }`}
                        >
                          {isSelected ? 'Seleccionado' : 'Seleccionar'}
                        </button>
                      </div>
                    </motion.div>
                  );
                })}
              </div>
            ) : (
              <div className="text-center py-10 bg-gray-50 rounded-lg border border-dashed border-gray-300">
                <FiInfo className="w-10 h-10 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500">
                  No hay opciones de alimentos disponibles en este momento
                </p>
              </div>
            )}
          </div>
        )}
      />

      {/* OpciÃ³n para omitir */}
      {activeFoodOptions.length > 0 && (
        <div className="flex justify-center">
          <button
            type="button"
            onClick={handleSkip}
            className="text-gray-500 hover:text-gray-700 font-medium underline"
          >
            Continuar sin seleccionar opciÃ³n de alimentos
          </button>
        </div>
      )}

      {/* InformaciÃ³n adicional */}
      <div className="mt-6 bg-indigo-50 p-5 rounded-lg">
        <div className="flex gap-3">
          <FiInfo className="w-6 h-6 text-indigo-600 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-indigo-800">InformaciÃ³n sobre alimentos</h4>
            <p className="text-indigo-700 text-sm mt-1">
              Las opciones de alimentos tienen un costo adicional que se sumarÃ¡ al total de tu reserva.
              Puedes complementar estas opciones con extras adicionales en el siguiente paso.
              Si tienes alguna necesidad dietÃ©tica especial, puedes mencionarla en la secciÃ³n de comentarios.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FoodOptionsStep;\n\n

=== ./reservas/pages/customer/reservationsteps/MamparaStep.jsx ===
import React, { useState, useEffect } from 'react';
import { useFormContext, Controller, useWatch } from 'react-hook-form';
import { motion, AnimatePresence } from 'framer-motion';
import { FiImage, FiDollarSign, FiInfo, FiX, FiCheck, FiZoomIn, FiFilter } from 'react-icons/fi';

// FunciÃ³n para formatear moneda
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount || 0);
};

// Optimizador de URL de Cloudinary
const optimizeCloudinaryUrl = (url, options = {}) => {
  if (!url || !url.includes('cloudinary.com')) return url;
  
  const { width = 400, height = 300, quality = 'auto' } = options;
  
  try {
    // Extraer la URL base y las transformaciones
    const urlObj = new URL(url);
    const pathSegments = urlObj.pathname.split('/');
    
    // Encontrar el Ã­ndice donde empiezan los segmentos de imagen (despuÃ©s de upload)
    let uploadIndex = pathSegments.findIndex(segment => segment === 'upload');
    
    if (uploadIndex !== -1) {
      // Crear nuevas transformaciones
      const transformations = `c_fill,g_auto,f_auto,q_${quality},w_${width},h_${height}`;
      
      // Insertar transformaciones justo despuÃ©s de 'upload'
      pathSegments.splice(uploadIndex + 1, 0, transformations);
      
      // Reconstruir la URL
      urlObj.pathname = pathSegments.join('/');
      return urlObj.toString();
    }
    
    return url;
  } catch (error) {
    console.error('Error optimizando URL de Cloudinary:', error);
    return url;
  }
};

// Componente modal para vista ampliada de imagen
const ImageModal = ({ isOpen, onClose, mampara }) => {
  if (!isOpen || !mampara) return null;
  
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75 transition-opacity duration-300">
      <div className="relative w-full max-w-3xl p-4">
        {/* BotÃ³n para cerrar */}
        <button 
          onClick={onClose}
          className="absolute top-4 right-4 p-2 rounded-full bg-white text-gray-800 hover:bg-gray-200 transition-colors z-10"
          aria-label="Cerrar"
        >
          <FiX className="w-6 h-6" />
        </button>
        
        <div className="bg-white rounded-xl overflow-hidden shadow-2xl animate-scaleIn">
          {/* Imagen */}
          <div className="relative">
            {mampara.foto ? (
              <img 
                src={optimizeCloudinaryUrl(mampara.foto, { width: 1200, height: 800, quality: 'auto:best' })}
                alt={`Mampara de ${mampara.piezas} piezas`}
                className="w-full object-cover"
                style={{ maxHeight: 'calc(80vh - 120px)' }}
              />
            ) : (
              <div className="bg-gray-200 w-full h-64 flex items-center justify-center">
                <FiImage className="w-12 h-12 text-gray-400" />
              </div>
            )}
          </div>
          
          {/* InformaciÃ³n */}
          <div className="p-6">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-xl font-bold text-gray-900">Mampara de {mampara.piezas} piezas</h3>
              <div className="flex items-center gap-1 text-indigo-600 font-medium">
                <FiDollarSign className="w-4 h-4" />
                <span>{formatCurrency(mampara.precio)}</span>
              </div>
            </div>
            
            {mampara.descripcion && (
              <p className="text-gray-700 mt-2">{mampara.descripcion}</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

const MamparaStep = ({ mamparas, tematicas }) => {
  const { control, setValue, watch, formState: { errors } } = useFormContext();
  const selectedMamparaId = watch('id_mampara');
  const selectedThemeId = watch('id_tematica');
  const [viewingMampara, setViewingMampara] = useState(null);
  const [filteredMamparas, setFilteredMamparas] = useState([]);
  const [showNoThemeWarning, setShowNoThemeWarning] = useState(false);
  
  // Obtener el nombre de la temÃ¡tica seleccionada
  const selectedThemeName = tematicas.find(t => t.id === selectedThemeId)?.nombre || '';
  
  // Filtrar mamparas por la temÃ¡tica seleccionada
  useEffect(() => {
    if (selectedThemeId) {
      setShowNoThemeWarning(false);
      const filtered = mamparas.filter(mampara => 
        mampara.activo && mampara.id_tematica === selectedThemeId
      );
      setFilteredMamparas(filtered);
      
      // Si hay una mampara seleccionada que ya no estÃ¡ en las filtradas, limpiar la selecciÃ³n
      if (selectedMamparaId && !filtered.some(m => m.id === selectedMamparaId)) {
        setValue('id_mampara', null);
      }
    } else {
      setShowNoThemeWarning(true);
      setFilteredMamparas([]);
    }
  }, [mamparas, selectedThemeId, selectedMamparaId, setValue]);

  // Manejar la apertura de vista detallada
  const handleViewDetails = (mampara) => {
    setViewingMampara(mampara);
  };

  // Poder omitir la selecciÃ³n de mampara (es opcional)
  const handleSkip = () => {
    setValue('id_mampara', null);
    // Avanzar al siguiente paso (lo maneja el contenedor)
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-3">Elige tu Mampara</h2>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Selecciona la mampara que complementarÃ¡ la decoraciÃ³n de tu evento
          {selectedThemeName && (
            <span className="font-medium text-indigo-600"> con la temÃ¡tica de {selectedThemeName}</span>
          )}
        </p>
      </div>

      {/* Alerta si no se ha seleccionado una temÃ¡tica */}
      {showNoThemeWarning && (
        <div className="bg-amber-50 border border-amber-200 rounded-lg p-5">
          <div className="flex gap-3">
            <FiInfo className="w-6 h-6 text-amber-500 flex-shrink-0" />
            <div>
              <h4 className="font-medium text-amber-800">Selecciona una temÃ¡tica primero</h4>
              <p className="text-amber-700 text-sm mt-1">
                Debes seleccionar una temÃ¡tica en el paso anterior para ver las mamparas disponibles. 
                Las mamparas estÃ¡n relacionadas con cada temÃ¡tica especÃ­fica.
              </p>
              <button
                type="button"
                onClick={() => {
                  // Regresar al paso de temÃ¡ticas se maneja desde el componente padre
                }}
                className="mt-3 text-amber-700 font-medium underline hover:text-amber-800"
              >
                Volver al paso de selecciÃ³n de temÃ¡tica
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Grid de Mamparas */}
      <Controller
        control={control}
        name="id_mampara"
        render={({ field }) => (
          <div className="space-y-4">
            {filteredMamparas.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
                {filteredMamparas.map((mampara) => {
                  const isSelected = field.value === mampara.id;
                  
                  return (
                    <motion.div
                      key={mampara.id}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      className={`rounded-xl overflow-hidden shadow-lg transition-all duration-300 ${
                        isSelected
                          ? 'ring-4 ring-indigo-500 transform scale-[1.02]'
                          : 'hover:shadow-xl'
                      }`}
                    >
                      <div className={`border h-full flex flex-col rounded-xl overflow-hidden ${
                        isSelected ? 'border-indigo-500' : 'border-gray-200'
                      }`}>
                        {/* Imagen de la mampara */}
                        <div className="relative group">
                          {mampara.foto ? (
                            <div className="relative overflow-hidden h-48 bg-gray-100">
                              <img
                                src={optimizeCloudinaryUrl(mampara.foto, { width: 500, height: 300 })}
                                alt={`Mampara de ${mampara.piezas} piezas`}
                                className="w-full h-full object-cover"
                                loading="lazy"
                              />
                              <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-300 flex items-center justify-center">
                                <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                  <button
                                    type="button"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleViewDetails(mampara);
                                    }}
                                    className="p-2 bg-white rounded-full shadow-lg hover:bg-indigo-100"
                                    aria-label="Ver imagen ampliada"
                                  >
                                    <FiZoomIn className="w-5 h-5 text-indigo-600" />
                                  </button>
                                </div>
                              </div>
                            </div>
                          ) : (
                            <div className="h-48 bg-gray-200 flex items-center justify-center">
                              <FiImage className="w-12 h-12 text-gray-400" />
                            </div>
                          )}
                          
                          {isSelected && (
                            <div className="absolute top-2 right-2 bg-white text-indigo-600 text-xs font-bold px-3 py-1 rounded-full flex items-center gap-1 shadow-md">
                              <FiCheck className="w-3 h-3" />
                              Seleccionada
                            </div>
                          )}
                        </div>
                        
                        {/* InformaciÃ³n de la mampara */}
                        <div className="p-4 flex-1 flex flex-col">
                          <div className="flex items-start justify-between">
                            <h3 className="text-lg font-semibold text-gray-900">{mampara.piezas} Piezas</h3>
                            <div className="flex items-center gap-1 text-indigo-600 font-medium text-sm">
                              <FiDollarSign className="w-4 h-4" />
                              <span>{formatCurrency(mampara.precio)}</span>
                            </div>
                          </div>
                          
                          {mampara.descripcion && (
                            <p className="text-sm text-gray-600 mt-2 line-clamp-2">
                              {mampara.descripcion}
                            </p>
                          )}
                          
                          <div className="mt-auto pt-4">
                            <button
                              type="button"
                              onClick={() => field.onChange(mampara.id)}
                              className={`w-full py-2 px-4 rounded-lg font-medium transition-colors ${
                                isSelected
                                  ? 'bg-indigo-100 text-indigo-700 border-2 border-indigo-600'
                                  : 'bg-indigo-600 text-white hover:bg-indigo-700'
                              }`}
                            >
                              {isSelected ? 'Mampara Seleccionada' : 'Seleccionar Mampara'}
                            </button>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  );
                })}
              </div>
            ) : selectedThemeId ? (
              <div className="text-center py-10 bg-gray-50 rounded-lg border border-dashed border-gray-300">
                <FiInfo className="w-10 h-10 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500">
                  No hay mamparas disponibles para la temÃ¡tica seleccionada
                </p>
              </div>
            ) : null}
          </div>
        )}
      />

      {/* Modal para vista ampliada */}
      <AnimatePresence>
        {viewingMampara && (
          <ImageModal
            isOpen={!!viewingMampara}
            onClose={() => setViewingMampara(null)}
            mampara={viewingMampara}
          />
        )}
      </AnimatePresence>

      {/* OpciÃ³n para omitir */}
      {filteredMamparas.length > 0 && (
        <div className="flex justify-center">
          <button
            type="button"
            onClick={handleSkip}
            className="text-gray-500 hover:text-gray-700 font-medium underline"
          >
            Continuar sin seleccionar mampara
          </button>
        </div>
      )}

      {/* InformaciÃ³n adicional */}
      <div className="mt-6 bg-indigo-50 p-5 rounded-lg">
        <div className="flex gap-3">
          <FiInfo className="w-6 h-6 text-indigo-600 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-indigo-800">Â¿QuÃ© es una mampara?</h4>
            <p className="text-indigo-700 text-sm mt-1">
              Las mamparas son paneles decorativos para personalizar el fondo del espacio de tu evento.
              Cada mampara estÃ¡ diseÃ±ada para complementar una temÃ¡tica especÃ­fica y tiene un costo adicional.
              La selecciÃ³n de mampara es opcional.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MamparaStep;\n\n

=== ./reservas/pages/customer/reservationsteps/PackageStep.jsx ===
import React, { useState, useEffect } from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import { motion } from 'framer-motion';
import { FiPackage, FiDollarSign, FiUsers, FiCheck, FiInfo } from 'react-icons/fi';

// FunciÃ³n para formatear moneda
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount || 0);
};

const PackageStep = ({ packages, nextStep }) => {
  const { control, setValue, watch, formState: { errors } } = useFormContext();
  const selectedPackageId = watch('id_paquete');
  const [expandedDetails, setExpandedDetails] = useState(null);

  // Ordenar paquetes por precio
  const sortedPackages = [...packages].sort((a, b) => {
    return parseFloat(a.precio_lunes_jueves) - parseFloat(b.precio_lunes_jueves);
  });

  // Establecer valor predeterminado si no hay selecciÃ³n y hay paquetes disponibles
  useEffect(() => {
    if (!selectedPackageId && sortedPackages.length > 0) {
      // No seleccionar automÃ¡ticamente, dejar que el usuario elija
    }
  }, [selectedPackageId, sortedPackages]);

  // FunciÃ³n para alternar detalles expandidos
  const toggleDetails = (packageId) => {
    setExpandedDetails(expandedDetails === packageId ? null : packageId);
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-3">Selecciona tu Paquete</h2>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Elige el paquete que mÃ¡s se adapte a tus necesidades para tu celebraciÃ³n especial
        </p>
      </div>

      <Controller
        control={control}
        name="id_paquete"
        rules={{ required: "Por favor selecciona un paquete" }}
        render={({ field }) => (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
              {sortedPackages.map((pkg) => {
                const isSelected = field.value === pkg.id;
                const isExpanded = expandedDetails === pkg.id;

                return (
                  <motion.div
                    key={pkg.id}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    className={`rounded-xl overflow-hidden shadow-lg transition-all duration-300 ${
                      isSelected
                        ? 'ring-4 ring-indigo-500 transform scale-[1.02]'
                        : 'hover:shadow-xl'
                    }`}
                  >
                    <div
                      className={`border h-full flex flex-col rounded-xl overflow-hidden ${
                        isSelected ? 'border-indigo-500' : 'border-gray-200'
                      }`}
                    >
                      {/* Encabezado del paquete */}
                      <div
                        className={`p-5 ${
                          isSelected ? 'bg-indigo-600 text-white' : 'bg-gray-50'
                        }`}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex items-center gap-2">
                            <FiPackage
                              className={`w-6 h-6 ${isSelected ? 'text-white' : 'text-indigo-600'}`}
                            />
                            <h3 className="text-lg font-semibold">{pkg.nombre}</h3>
                          </div>
                          {isSelected && (
                            <div className="flex items-center gap-1 bg-white text-indigo-600 px-2 py-1 rounded-full text-xs font-medium">
                              <FiCheck className="w-3 h-3" />
                              Seleccionado
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Cuerpo del paquete */}
                      <div className="p-5 flex-1 flex flex-col">
                        {/* Precios */}
                        <div className="flex justify-between mb-4">
                          <div>
                            <div className="text-gray-500 text-sm">Lunes - Jueves</div>
                            <div className="text-indigo-600 font-semibold text-lg">
                              {formatCurrency(pkg.precio_lunes_jueves)}
                            </div>
                          </div>
                          <div className="text-right">
                            <div className="text-gray-500 text-sm">Viernes - Domingo</div>
                            <div className="text-indigo-600 font-semibold text-lg">
                              {formatCurrency(pkg.precio_viernes_domingo)}
                            </div>
                          </div>
                        </div>

                        {/* Capacidad */}
                        <div className="flex items-center gap-2 mb-3">
                          <FiUsers className="text-gray-500" />
                          <span className="text-gray-700">
                            {pkg.min_invitados} - {pkg.max_invitados} invitados
                          </span>
                        </div>

                        {/* CaracterÃ­sticas del paquete (sÃ³lo si expande) */}
                        <div className={`mt-2 space-y-2 ${isExpanded ? 'block' : 'hidden'}`}>
                          {pkg.descripcion && (
                            <div className="text-gray-700 text-sm">{pkg.descripcion}</div>
                          )}
                          {/* AquÃ­ se pueden agregar mÃ¡s caracterÃ­sticas especÃ­ficas del paquete */}
                        </div>

                        {/* BotÃ³n para expandir/colapsar detalles */}
                        <button
                          type="button"
                          onClick={() => toggleDetails(pkg.id)}
                          className="mt-auto text-indigo-600 hover:text-indigo-800 text-sm font-medium"
                        >
                          {isExpanded ? 'Ver menos detalles' : 'Ver mÃ¡s detalles'}
                        </button>
                      </div>

                      {/* Pie de paquete con botÃ³n de selecciÃ³n */}
                      <div className="p-4 border-t border-gray-200">
                        <button
                          type="button"
                          onClick={() => {
                            field.onChange(pkg.id);
                            setTimeout(() => {
                              // Permitir que la selecciÃ³n visual ocurra antes de avanzar
                              // nextStep();
                            }, 500);
                          }}
                          className={`w-full py-2.5 px-4 rounded-lg font-medium transition-colors ${
                            isSelected
                              ? 'bg-indigo-100 text-indigo-700 border-2 border-indigo-600'
                              : 'bg-indigo-600 text-white hover:bg-indigo-700'
                          }`}
                        >
                          {isSelected ? 'Paquete Seleccionado' : 'Seleccionar este Paquete'}
                        </button>
                      </div>
                    </div>
                  </motion.div>
                );
              })}
            </div>

            {errors.id_paquete && (
              <p className="text-red-500 flex items-center gap-1 text-sm mt-2">
                <FiInfo className="w-4 h-4 flex-shrink-0" />
                <span>{errors.id_paquete.message}</span>
              </p>
            )}
          </div>
        )}
      />

      {sortedPackages.length === 0 && (
        <div className="text-center py-10 bg-gray-50 rounded-lg border border-dashed border-gray-300">
          <FiInfo className="w-10 h-10 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-500">No hay paquetes disponibles en este momento</p>
        </div>
      )}

      <div className="mt-6 bg-blue-50 p-4 rounded-lg">
        <div className="flex gap-3">
          <FiInfo className="w-6 h-6 text-blue-600 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-blue-800">Â¿No encuentras lo que buscas?</h4>
            <p className="text-blue-700 text-sm mt-1">
              Todos nuestros paquetes son personalizables. Selecciona el mÃ¡s cercano a tus
              necesidades y despuÃ©s podrÃ¡s ajustarlo con extras.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PackageStep;\n\n

=== ./reservas/pages/customer/reservationsteps/ReviewStep.jsx ===
import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import { motion } from 'framer-motion';
import {
  FiPackage,
  FiCalendar,
  FiClock,
  FiDollarSign,
  FiUser,
  FiImage,
  FiList,
  FiMessageCircle,
  FiCoffee,
  FiChevronDown,
  FiChevronUp,
  FiEdit,
  FiCheckCircle,
  FiAlertTriangle
} from 'react-icons/fi';

// FunciÃ³n para formatear moneda
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount || 0);
};

// Componente para una secciÃ³n individual del resumen
const SummarySection = ({ 
  title, 
  icon: Icon, 
  children, 
  editAction, 
  stepIndex, 
  goToStep, 
  className = "", 
  isExpandable = false 
}) => {
  const [isExpanded, setIsExpanded] = useState(true);
  
  return (
    <div className={`bg-white rounded-xl overflow-hidden shadow-sm border border-gray-200 ${className}`}>
      <div className="flex items-center justify-between p-5 bg-gray-50 border-b border-gray-200">
        <div className="flex items-center gap-3">
          {Icon && <Icon className="text-indigo-600 w-5 h-5" />}
          <h3 className="font-semibold text-gray-900">{title}</h3>
        </div>
        <div className="flex items-center gap-2">
          {editAction && (
            <button
              type="button"
              onClick={() => goToStep(stepIndex)}
              className="text-indigo-600 hover:text-indigo-800 p-1.5 rounded-full hover:bg-indigo-50 transition-colors"
              aria-label={`Editar ${title}`}
            >
              <FiEdit className="w-4 h-4" />
            </button>
          )}
          
          {isExpandable && (
            <button
              type="button"
              onClick={() => setIsExpanded(!isExpanded)}
              className="text-gray-500 hover:text-gray-700 p-1.5 rounded-full hover:bg-gray-100 transition-colors"
              aria-label={isExpanded ? 'Colapsar' : 'Expandir'}
            >
              {isExpanded ? <FiChevronUp className="w-4 h-4" /> : <FiChevronDown className="w-4 h-4" />}
            </button>
          )}
        </div>
      </div>
      
      {(!isExpandable || isExpanded) && (
        <div className="p-5">
          {children}
        </div>
      )}
    </div>
  );
};

// Componente para un Ã­tem individual del resumen
const SummaryItem = ({ label, value, icon: Icon }) => (
  <div className="flex items-start py-2 border-b border-gray-100 last:border-0">
    <div className="flex items-center gap-2 w-1/3 text-gray-600">
      {Icon && <Icon className="w-4 h-4 flex-shrink-0" />}
      <span>{label}:</span>
    </div>
    <div className="w-2/3 font-medium text-gray-900">
      {value || <span className="text-gray-400 italic">No seleccionado</span>}
    </div>
  </div>
);

const ReviewStep = ({ 
  packages, 
  foodOptions, 
  tematicas, 
  mamparas, 
  extras, 
  goToStep 
}) => {
  const { watch } = useFormContext();
  const formValues = watch();
  
  // Datos seleccionados
  const selectedPackage = packages.find(pkg => pkg.id === formValues.id_paquete);
  const selectedFoodOption = foodOptions.find(food => food.id === formValues.id_opcion_alimento);
  const selectedTematica = tematicas.find(tema => tema.id === formValues.id_tematica);
  const selectedMampara = mamparas.find(mampara => mampara.id === formValues.id_mampara);
  const selectedExtras = formValues.extras || [];
  
  // Formatear fecha
  const formatDate = (date) => {
    try {
      if (!date || !(date instanceof Date) || isNaN(date.getTime())) {
        return 'No seleccionada';
      }
  
      return new Intl.DateTimeFormat('es-MX', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }).format(date);
    } catch (error) {
      console.error('Error al formatear la fecha:', error);
      return 'Fecha invÃ¡lida';
    }
  };
  
  // Obtener el horario formateado
  const getFormattedTimeSlot = () => {
    if (!formValues.hora_inicio) return 'No seleccionada';
    
    if (typeof formValues.hora_inicio === 'object') {
      return formValues.hora_inicio.label || 'No seleccionada';
    }
    
    return formValues.hora_inicio === 'maÃ±ana' 
      ? 'MaÃ±ana (11:00 - 16:00)' 
      : 'Tarde (17:00 - 22:00)';
  };
  
  // DescripciÃ³n de extras seleccionados
  const getExtrasDescription = () => {
    if (!selectedExtras.length) return null;
    
    return (
      <div className="space-y-2 py-2">
        {selectedExtras.map((extra, index) => {
          const extraInfo = extras.find(e => e.id === extra.id);
          if (!extraInfo) return null;
          
          const cantidad = parseInt(extra.cantidad) || 1;
          const extraPrice = (parseFloat(extraInfo.precio) || 0) * cantidad;
          
          return (
            <div key={index} className="flex justify-between items-center">
              <div>
                <span className="font-medium">{extraInfo.nombre}</span>
                {cantidad > 1 && <span className="text-gray-500"> (x{cantidad})</span>}
              </div>
              <div className="text-indigo-600 font-medium">
                {formatCurrency(extraPrice)}
              </div>
            </div>
          );
        })}
      </div>
    );
  };

  // CÃ¡lculo del total
  const calculateTotal = () => {
    let total = 0;
    
    // Precio del paquete
    if (selectedPackage) {
      const packagePrice = formValues.packagePrice || 0;
      total += packagePrice;
    }
    
    // Precio de la opciÃ³n de alimento
    if (selectedFoodOption) {
      total += parseFloat(selectedFoodOption.precio_extra) || 0;
    }
    
    // Precio de la mampara
    if (selectedMampara) {
      total += parseFloat(selectedMampara.precio) || 0;
    }
    
    // Recargo por martes
    total += parseFloat(formValues.tuesdayFee) || 0;
    
    // Precio de extras
    selectedExtras.forEach(extra => {
      const extraInfo = extras.find(e => e.id === extra.id);
      if (extraInfo && extra.cantidad) {
        total += (parseFloat(extraInfo.precio) || 0) * (parseInt(extra.cantidad) || 1);
      }
    });
    
    return total;
  };

  // Verificar si hay informaciÃ³n suficiente para continuar
  const canProceed = () => {
    const requiredFields = [
      'id_paquete',
      'fecha_reserva',
      'hora_inicio',
      'id_tematica',
      'nombre_festejado',
      'edad_festejado'
    ];
    
    return requiredFields.every(field => !!formValues[field]);
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-3">Revisa tu Reserva</h2>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Por favor verifica que todos los detalles de tu reserva sean correctos antes de continuar.
        </p>
      </div>

      {/* Status Banner */}
      {canProceed() ? (
        <div className="bg-green-50 border border-green-200 p-4 rounded-lg flex items-center gap-3 mb-6">
          <FiCheckCircle className="text-green-500 w-6 h-6 flex-shrink-0" />
          <div>
            <h3 className="font-medium text-green-800">Â¡Todo listo para confirmar!</h3>
            <p className="text-green-700 text-sm">
              Has completado toda la informaciÃ³n necesaria. Revisa los detalles y haz clic en continuar cuando estÃ©s listo.
            </p>
          </div>
        </div>
      ) : (
        <div className="bg-amber-50 border border-amber-200 p-4 rounded-lg flex items-center gap-3 mb-6">
          <FiAlertTriangle className="text-amber-500 w-6 h-6 flex-shrink-0" />
          <div>
            <h3 className="font-medium text-amber-800">Falta informaciÃ³n requerida</h3>
            <p className="text-amber-700 text-sm">
              Debes completar todos los campos requeridos para poder confirmar tu reserva. Revisa las secciones marcadas con un botÃ³n de editar.
            </p>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Paquete */}
        <SummarySection 
          title="Paquete" 
          icon={FiPackage} 
          editAction={true}
          stepIndex={0}
          goToStep={goToStep}
        >
          {selectedPackage ? (
            <div className="space-y-3">
              <div className="flex justify-between">
                <h4 className="font-medium text-lg">{selectedPackage.nombre}</h4>
                <span className="text-indigo-600 font-bold">{formatCurrency(formValues.packagePrice || 0)}</span>
              </div>
              
              <p className="text-gray-600 text-sm">
                {selectedPackage.min_invitados} - {selectedPackage.max_invitados} invitados
              </p>
              
              {selectedPackage.descripcion && (
                <p className="text-gray-600 text-sm">{selectedPackage.descripcion}</p>
              )}
            </div>
          ) : (
            <div className="py-4 text-amber-600 flex items-center gap-2">
              <FiAlertTriangle className="w-5 h-5" />
              <span>Este campo es requerido. Por favor selecciona un paquete.</span>
            </div>
          )}
        </SummarySection>

        {/* Fecha y Hora */}
        <SummarySection 
          title="Fecha y Hora" 
          icon={FiCalendar}
          editAction={true}
          stepIndex={1}
          goToStep={goToStep}
        >
          <div className="space-y-4">
            <SummaryItem 
              label="Fecha" 
              value={formatDate(formValues.fecha_reserva)}
              icon={FiCalendar}
            />
            <SummaryItem 
              label="Horario" 
              value={getFormattedTimeSlot()}
              icon={FiClock}
            />
            
            {formValues.tuesdayFee > 0 && (
              <div className="flex justify-between items-center mt-2 pt-2 border-t border-dashed border-gray-200">
                <span className="text-amber-600 font-medium flex items-center gap-1">
                  <FiAlertTriangle className="w-4 h-4" />
                  Cargo adicional por martes
                </span>
                <span className="text-amber-600 font-medium">
                  {formatCurrency(formValues.tuesdayFee)}
                </span>
              </div>
            )}
          </div>
        </SummarySection>

        {/* TemÃ¡tica */}
        <SummarySection 
          title="TemÃ¡tica" 
          icon={FiImage}
          editAction={true}
          stepIndex={2}
          goToStep={goToStep}
        >
          {selectedTematica ? (
            <div className="space-y-3">
              <div className="flex justify-between">
                <h4 className="font-medium text-lg">{selectedTematica.nombre}</h4>
                {selectedTematica.precio > 0 && (
                  <span className="text-indigo-600 font-bold">{formatCurrency(selectedTematica.precio)}</span>
                )}
              </div>
              
              {selectedTematica.descripcion && (
                <p className="text-gray-600 text-sm">{selectedTematica.descripcion}</p>
              )}
            </div>
          ) : (
            <div className="py-4 text-amber-600 flex items-center gap-2">
              <FiAlertTriangle className="w-5 h-5" />
              <span>Este campo es requerido. Por favor selecciona una temÃ¡tica.</span>
            </div>
          )}
        </SummarySection>

        {/* Mampara */}
        <SummarySection 
          title="Mampara" 
          icon={FiImage}
          editAction={true}
          stepIndex={3}
          goToStep={goToStep}
        >
          {selectedMampara ? (
            <div className="space-y-3">
              <div className="flex justify-between">
                <h4 className="font-medium text-lg">Mampara de {selectedMampara.piezas} piezas</h4>
                <span className="text-indigo-600 font-bold">{formatCurrency(selectedMampara.precio)}</span>
              </div>
              
              {selectedMampara.descripcion && (
                <p className="text-gray-600 text-sm">{selectedMampara.descripcion}</p>
              )}
            </div>
          ) : (
            <div className="text-gray-500 italic">
              No seleccionada (opcional)
            </div>
          )}
        </SummarySection>

        {/* OpciÃ³n de Alimentos */}
        <SummarySection 
          title="OpciÃ³n de Alimentos" 
          icon={FiCoffee}
          editAction={true}
          stepIndex={4}
          goToStep={goToStep}
        >
          {selectedFoodOption ? (
            <div className="space-y-3">
              <div className="flex justify-between">
                <h4 className="font-medium text-lg">{selectedFoodOption.nombre}</h4>
                <span className="text-indigo-600 font-bold">{formatCurrency(selectedFoodOption.precio_extra)}</span>
              </div>
              
              {selectedFoodOption.descripcion && (
                <p className="text-gray-600 text-sm">{selectedFoodOption.descripcion}</p>
              )}
            </div>
          ) : (
            <div className="text-gray-500 italic">
              No seleccionada (opcional)
            </div>
          )}
        </SummarySection>

        {/* Extras */}
        <SummarySection 
          title="Extras" 
          icon={FiList}
          editAction={true}
          stepIndex={5}
          goToStep={goToStep}
          isExpandable={selectedExtras.length > 3}
        >
          {selectedExtras.length > 0 ? (
            getExtrasDescription()
          ) : (
            <div className="text-gray-500 italic">
              No seleccionados (opcional)
            </div>
          )}
        </SummarySection>

        {/* Festejado */}
        <SummarySection 
          title="InformaciÃ³n del Festejado" 
          icon={FiUser}
          editAction={true}
          stepIndex={6}
          goToStep={goToStep}
        >
          {formValues.nombre_festejado && formValues.edad_festejado ? (
            <div className="space-y-4">
              <SummaryItem 
                label="Nombre" 
                value={formValues.nombre_festejado}
                icon={FiUser}
              />
              <SummaryItem 
                label="Edad" 
                value={formValues.edad_festejado}
                icon={FiCalendar}
              />
              {formValues.sexo_festejado && (
                <SummaryItem 
                  label="Sexo" 
                  value={formValues.sexo_festejado === 'femenino' ? 'NiÃ±a' : 'NiÃ±o'}
                  icon={FiUser}
                />
              )}
              {formValues.color_favorito && (
                <SummaryItem 
                  label="Color favorito" 
                  value={formValues.color_favorito}
                  icon={FiImage}
                />
              )}
            </div>
          ) : (
            <div className="py-4 text-amber-600 flex items-center gap-2">
              <FiAlertTriangle className="w-5 h-5" />
              <span>Este campo es requerido. Por favor completa la informaciÃ³n del festejado.</span>
            </div>
          )}
        </SummarySection>

        {/* Comentarios */}
        <SummarySection 
          title="Comentarios o Peticiones Especiales" 
          icon={FiMessageCircle}
          editAction={true}
          stepIndex={6}
          goToStep={goToStep}
        >
          {formValues.detalles_especiales ? (
            <p className="text-gray-700">{formValues.detalles_especiales}</p>
          ) : (
            <div className="text-gray-500 italic">
              No se proporcionaron comentarios adicionales (opcional)
            </div>
          )}
        </SummarySection>
      </div>

      {/* Total */}
      <div className="bg-indigo-50 p-5 rounded-lg border border-indigo-100">
        <div className="flex justify-between items-center">
          <div className="flex items-center gap-2">
            <FiDollarSign className="text-indigo-600 w-6 h-6" />
            <span className="text-xl font-bold text-indigo-800">Total a Pagar:</span>
          </div>
          <span className="text-2xl font-bold text-indigo-600">
            {formatCurrency(calculateTotal())}
          </span>
        </div>
      </div>
    </div>
  );
};

export default ReviewStep;\n\n

=== ./reservas/pages/customer/reservationsteps/ThemeStep.jsx ===
import React, { useState, useEffect } from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import { motion, AnimatePresence } from 'framer-motion';
import { FiImage, FiDollarSign, FiSearch, FiInfo, FiX, FiCheck, FiZoomIn } from 'react-icons/fi';

// FunciÃ³n para formatear moneda
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount || 0);
};

// Optimizador de URL de Cloudinary
const optimizeCloudinaryUrl = (url, options = {}) => {
  if (!url || !url.includes('cloudinary.com')) return url;
  
  const { width = 400, height = 300, quality = 'auto' } = options;
  
  try {
    // Extraer la URL base y las transformaciones
    const urlObj = new URL(url);
    const pathSegments = urlObj.pathname.split('/');
    
    // Encontrar el Ã­ndice donde empiezan los segmentos de imagen (despuÃ©s de upload)
    let uploadIndex = pathSegments.findIndex(segment => segment === 'upload');
    
    if (uploadIndex !== -1) {
      // Crear nuevas transformaciones
      const transformations = `c_fill,g_auto,f_auto,q_${quality},w_${width},h_${height}`;
      
      // Insertar transformaciones justo despuÃ©s de 'upload'
      pathSegments.splice(uploadIndex + 1, 0, transformations);
      
      // Reconstruir la URL
      urlObj.pathname = pathSegments.join('/');
      return urlObj.toString();
    }
    
    return url;
  } catch (error) {
    console.error('Error optimizando URL de Cloudinary:', error);
    return url;
  }
};

// Componente modal para vista ampliada de imagen
const ImageModal = ({ isOpen, onClose, tematica }) => {
  if (!isOpen || !tematica) return null;
  
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75 transition-opacity duration-300">
      <div className="relative w-full max-w-3xl p-4">
        {/* BotÃ³n para cerrar */}
        <button 
          onClick={onClose}
          className="absolute top-4 right-4 p-2 rounded-full bg-white text-gray-800 hover:bg-gray-200 transition-colors z-10"
          aria-label="Cerrar"
        >
          <FiX className="w-6 h-6" />
        </button>
        
        <div className="bg-white rounded-xl overflow-hidden shadow-2xl animate-scaleIn">
          {/* Imagen */}
          <div className="relative">
            {tematica.foto ? (
              <img 
                src={optimizeCloudinaryUrl(tematica.foto, { width: 1200, height: 800, quality: 'auto:best' })}
                alt={tematica.nombre}
                className="w-full object-cover"
                style={{ maxHeight: 'calc(80vh - 120px)' }}
              />
            ) : (
              <div className="bg-gray-200 w-full h-64 flex items-center justify-center">
                <FiImage className="w-12 h-12 text-gray-400" />
              </div>
            )}
          </div>
          
          {/* InformaciÃ³n */}
          <div className="p-6">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-xl font-bold text-gray-900">{tematica.nombre}</h3>
              {tematica.precio > 0 && (
                <div className="flex items-center gap-1 text-indigo-600 font-medium">
                  <FiDollarSign className="w-4 h-4" />
                  <span>{formatCurrency(tematica.precio)}</span>
                </div>
              )}
            </div>
            
            {tematica.descripcion && (
              <p className="text-gray-700 mt-2">{tematica.descripcion}</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

const ThemeStep = ({ tematicas }) => {
  const { control, watch, formState: { errors } } = useFormContext();
  const selectedThemeId = watch('id_tematica');
  const [searchQuery, setSearchQuery] = useState('');
  const [viewingTematica, setViewingTematica] = useState(null);
  const [filteredTematicas, setFilteredTematicas] = useState([]);
  
  // Filtrar temÃ¡ticas activas
  useEffect(() => {
    const activeTematicas = tematicas.filter(tematica => tematica.activo);
    
    if (searchQuery.trim()) {
      const normalizedQuery = searchQuery.toLowerCase().trim();
      const filtered = activeTematicas.filter(tematica => 
        tematica.nombre.toLowerCase().includes(normalizedQuery) ||
        (tematica.descripcion && tematica.descripcion.toLowerCase().includes(normalizedQuery))
      );
      setFilteredTematicas(filtered);
    } else {
      setFilteredTematicas(activeTematicas);
    }
  }, [tematicas, searchQuery]);

  // Ordenar temÃ¡ticas (primero las destacadas, luego por nombre)
  const sortedTematicas = [...filteredTematicas].sort((a, b) => {
    if (a.destacado && !b.destacado) return -1;
    if (!a.destacado && b.destacado) return 1;
    return a.nombre.localeCompare(b.nombre);
  });

  // Manejar la apertura de vista detallada
  const handleViewDetails = (tematica) => {
    setViewingTematica(tematica);
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-3">Elige tu TemÃ¡tica</h2>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Selecciona el tema que harÃ¡ mÃ¡gico tu evento. Puedes personalizar tu espacio con uno de nuestros diseÃ±os de temÃ¡ticas
        </p>
      </div>

      {/* Buscador */}
      <div className="relative">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <FiSearch className="h-5 w-5 text-gray-400" />
        </div>
        <input
          type="text"
          className="block w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 shadow-sm"
          placeholder="Buscar temÃ¡ticas por nombre..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        {searchQuery && (
          <button
            type="button"
            onClick={() => setSearchQuery('')}
            className="absolute inset-y-0 right-0 pr-3 flex items-center"
          >
            <FiX className="h-5 w-5 text-gray-400 hover:text-gray-600" />
          </button>
        )}
      </div>

      {/* Grid de TemÃ¡ticas */}
      <Controller
        control={control}
        name="id_tematica"
        rules={{ required: "Por favor selecciona una temÃ¡tica" }}
        render={({ field }) => (
          <div className="space-y-4">
            {sortedTematicas.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
                {sortedTematicas.map((tematica) => {
                  const isSelected = field.value === tematica.id;
                  
                  return (
                    <motion.div
                      key={tematica.id}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      className={`rounded-xl overflow-hidden shadow-lg transition-all duration-300 ${
                        isSelected
                          ? 'ring-4 ring-indigo-500 transform scale-[1.02]'
                          : 'hover:shadow-xl'
                      }`}
                    >
                      <div className={`border h-full flex flex-col rounded-xl overflow-hidden ${
                        isSelected ? 'border-indigo-500' : 'border-gray-200'
                      }`}>
                        {/* Imagen de la temÃ¡tica */}
                        <div className="relative group">
                          {tematica.foto ? (
                            <div className="relative overflow-hidden h-48 bg-gray-100">
                              <img
                                src={optimizeCloudinaryUrl(tematica.foto, { width: 500, height: 300 })}
                                alt={tematica.nombre}
                                className="w-full h-full object-cover"
                                loading="lazy"
                              />
                              <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-300 flex items-center justify-center">
                                <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                  <button
                                    type="button"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleViewDetails(tematica);
                                    }}
                                    className="p-2 bg-white rounded-full shadow-lg hover:bg-indigo-100"
                                    aria-label="Ver imagen ampliada"
                                  >
                                    <FiZoomIn className="w-5 h-5 text-indigo-600" />
                                  </button>
                                </div>
                              </div>
                            </div>
                          ) : (
                            <div className="h-48 bg-gray-200 flex items-center justify-center">
                              <FiImage className="w-12 h-12 text-gray-400" />
                            </div>
                          )}
                          
                          {tematica.destacado && (
                            <div className="absolute top-2 left-2 bg-indigo-600 text-white text-xs font-bold px-3 py-1 rounded-full">
                              Destacado
                            </div>
                          )}
                          
                          {isSelected && (
                            <div className="absolute top-2 right-2 bg-white text-indigo-600 text-xs font-bold px-3 py-1 rounded-full flex items-center gap-1 shadow-md">
                              <FiCheck className="w-3 h-3" />
                              Seleccionado
                            </div>
                          )}
                        </div>
                        
                        {/* InformaciÃ³n de la temÃ¡tica */}
                        <div className="p-4 flex-1 flex flex-col">
                          <div className="flex items-start justify-between">
                            <h3 className="text-lg font-semibold text-gray-900">{tematica.nombre}</h3>
                            {tematica.precio > 0 && (
                              <div className="flex items-center gap-1 text-indigo-600 font-medium text-sm">
                                <FiDollarSign className="w-4 h-4" />
                                <span>{formatCurrency(tematica.precio)}</span>
                              </div>
                            )}
                          </div>
                          
                          {tematica.descripcion && (
                            <p className="text-sm text-gray-600 mt-2 line-clamp-2">
                              {tematica.descripcion}
                            </p>
                          )}
                          
                          <div className="mt-auto pt-4">
                            <button
                              type="button"
                              onClick={() => field.onChange(tematica.id)}
                              className={`w-full py-2 px-4 rounded-lg font-medium transition-colors ${
                                isSelected
                                  ? 'bg-indigo-100 text-indigo-700 border-2 border-indigo-600'
                                  : 'bg-indigo-600 text-white hover:bg-indigo-700'
                              }`}
                            >
                              {isSelected ? 'TemÃ¡tica Seleccionada' : 'Seleccionar TemÃ¡tica'}
                            </button>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  );
                })}
              </div>
            ) : (
              <div className="text-center py-10 bg-gray-50 rounded-lg border border-dashed border-gray-300">
                <FiInfo className="w-10 h-10 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500">
                  {searchQuery
                    ? 'No se encontraron temÃ¡ticas que coincidan con tu bÃºsqueda'
                    : 'No hay temÃ¡ticas disponibles en este momento'}
                </p>
                {searchQuery && (
                  <button
                    className="mt-4 text-indigo-600 hover:text-indigo-800 font-medium"
                    onClick={() => setSearchQuery('')}
                  >
                    Limpiar bÃºsqueda
                  </button>
                )}
              </div>
            )}
            
            {errors.id_tematica && (
              <p className="text-red-500 flex items-center gap-1 text-sm mt-2">
                <FiInfo className="w-4 h-4 flex-shrink-0" />
                <span>{errors.id_tematica.message}</span>
              </p>
            )}
          </div>
        )}
      />

      {/* Modal para vista ampliada */}
      <AnimatePresence>
        {viewingTematica && (
          <ImageModal
            isOpen={!!viewingTematica}
            onClose={() => setViewingTematica(null)}
            tematica={viewingTematica}
          />
        )}
      </AnimatePresence>

      {/* InformaciÃ³n adicional */}
      <div className="mt-6 bg-indigo-50 p-5 rounded-lg">
        <div className="flex gap-3">
          <FiInfo className="w-6 h-6 text-indigo-600 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-indigo-800">PersonalizaciÃ³n de TemÃ¡ticas</h4>
            <p className="text-indigo-700 text-sm mt-1">
              La temÃ¡tica define el aspecto visual de tu evento. Algunas temÃ¡ticas tienen un costo adicional
              por los materiales y decoraciÃ³n especializada que requieren.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ThemeStep;\n\n

=== ./reservas/pages/customer/reservationsteps/index.js ===
/**
 * index.js
 * Punto de entrada para los componentes de pasos de reservaciÃ³n
 * Centraliza las importaciones y exportaciones de componentes para un uso mÃ¡s limpio
 */

// Importar todos los componentes de pasos
import PackageStep from './PackageStep';
import DateTimeStep from './DateTimeStep';
import ThemeStep from './ThemeStep';
import MamparaStep from './MamparaStep';
import FoodOptionsStep from './FoodOptionsStep';
import ExtrasStep from './ExtrasStep';
import CelebrantStep from './CelebrantStep';
import ReviewStep from './ReviewStep';

// Exportar todos los componentes individualmente
export {
  PackageStep,
  DateTimeStep,
  ThemeStep,
  MamparaStep,
  FoodOptionsStep,
  ExtrasStep,
  CelebrantStep,
  ReviewStep
};

/**
 * DefiniciÃ³n de los pasos con sus respectivos componentes y metadatos
 * Esto proporciona una estructura centralizada para gestionar los pasos
 * @typedef {Object} Step
 * @property {string} id - Identificador Ãºnico del paso
 * @property {string} label - Etiqueta visible para el paso
 * @property {React.Component} component - Componente a renderizar para este paso
 * @property {string[]} required - Campos requeridos para completar este paso
 * @property {React.Component} icon - Componente de icono para este paso
 */

/**
 * ConfiguraciÃ³n de pasos disponibles para importar
 * @type {Step[]}
 */
const STEPS = [
  {
    id: 'package',
    label: 'Paquete',
    component: PackageStep,
    required: ['id_paquete'],
    description: 'Selecciona el paquete base para tu evento'
  },
  {
    id: 'datetime',
    label: 'Fecha y Hora',
    component: DateTimeStep,
    required: ['fecha_reserva', 'hora_inicio'],
    description: 'Elige el dÃ­a y horario para tu celebraciÃ³n'
  },
  {
    id: 'theme',
    label: 'TemÃ¡tica',
    component: ThemeStep,
    required: ['id_tematica'],
    description: 'Personaliza la temÃ¡tica de tu evento'
  },
  {
    id: 'mampara',
    label: 'Mampara',
    component: MamparaStep,
    required: [],
    description: 'Selecciona la mampara decorativa (opcional)'
  },
  {
    id: 'food',
    label: 'Alimentos',
    component: FoodOptionsStep,
    required: [],
    description: 'Elige opciones de alimentos para tus invitados'
  },
  {
    id: 'extras',
    label: 'Extras',
    component: ExtrasStep,
    required: [],
    description: 'Agrega elementos adicionales a tu evento'
  },
  {
    id: 'celebrant',
    label: 'Festejado',
    component: CelebrantStep,
    required: ['nombre_festejado', 'edad_festejado'],
    description: 'InformaciÃ³n sobre el/la festejado/a'
  },
  {
    id: 'review',
    label: 'Revisar',
    component: ReviewStep,
    required: [],
    description: 'Revisa los detalles de tu reservaciÃ³n'
  }
];

// Exportar la configuraciÃ³n de pasos como default
export default STEPS;

/**
 * FunciÃ³n para obtener un paso especÃ­fico por su ID
 * @param {string} stepId - ID del paso a buscar
 * @returns {Step|undefined} - El paso encontrado o undefined
 */
export const getStepById = (stepId) => {
  return STEPS.find(step => step.id === stepId);
};

/**
 * FunciÃ³n para verificar si un paso es vÃ¡lido basado en los valores del formulario
 * @param {Step} step - El paso a validar
 * @param {Object} formValues - Valores actuales del formulario
 * @returns {boolean} - true si todos los campos requeridos tienen valor
 */
export const isStepValid = (step, formValues) => {
  if (!step.required || step.required.length === 0) return true;
  
  return step.required.every(field => {
    const value = formValues[field];
    return value !== null && value !== undefined && value !== '';
  });
};

/**
 * FunciÃ³n para verificar si todos los pasos requeridos estÃ¡n completos
 * @param {Object} formValues - Valores actuales del formulario
 * @returns {boolean} - true si todos los pasos requeridos estÃ¡n completos
 */
export const areAllRequiredStepsValid = (formValues) => {
  const allRequiredFields = STEPS.flatMap(step => step.required);
  
  return allRequiredFields.every(field => {
    const value = formValues[field];
    return value !== null && value !== undefined && value !== '';
  });
};

/**
 * FunciÃ³n para obtener el Ã­ndice del prÃ³ximo paso invÃ¡lido
 * @param {number} currentIndex - Ãndice actual
 * @param {Object} formValues - Valores actuales del formulario
 * @returns {number} - Ãndice del prÃ³ximo paso invÃ¡lido o -1 si no hay
 */
export const getNextInvalidStepIndex = (currentIndex, formValues) => {
  for (let i = currentIndex + 1; i < STEPS.length; i++) {
    if (!isStepValid(STEPS[i], formValues)) {
      return i;
    }
  }
  return -1;
};\n\n

=== ./reservas/pages/customer/styles/StepComponents.module.css ===
/* 
  StepComponents.module.css
  Estilos para los componentes de cada paso de reservaciÃ³n
*/

/* ==========================================================================
   ESTILOS COMUNES PARA TODOS LOS PASOS
   ========================================================================== */
.stepContainer {
  @apply w-full mb-8;
}

.stepTitle {
  @apply text-xl font-bold text-gray-900 dark:text-white mb-6;
}

.stepDescription {
  @apply text-gray-600 dark:text-gray-300 mb-6;
}

.stepSection {
  @apply mb-8 last:mb-0;
}

.sectionTitle {
  @apply text-base font-medium text-gray-900 dark:text-white mb-3;
}

.sectionDescription {
  @apply text-sm text-gray-600 dark:text-gray-400 mb-4;
}

/* Formularios y campos */
.formRow {
  @apply flex flex-col md:flex-row gap-4 mb-6;
}

.formGroup {
  @apply flex flex-col gap-2 w-full;
}

.formLabel {
  @apply text-sm font-medium text-gray-700 dark:text-gray-300;
}

.formHelper {
  @apply text-xs text-gray-500 dark:text-gray-400 mt-1;
}

.formError {
  @apply text-xs text-red-600 dark:text-red-400 mt-1;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE PAQUETE (PackageStep)
   ========================================================================== */
.packageCard {
  @apply relative border rounded-xl p-6 transition-all duration-200 cursor-pointer;
}

.packageCardDefault {
  @apply border-gray-200 dark:border-gray-700 hover:border-indigo-200 dark:hover:border-indigo-800 hover:bg-indigo-50 dark:hover:bg-indigo-900/30;
}

.packageCardSelected {
  @apply border-indigo-500 bg-indigo-50 dark:bg-indigo-900/30 dark:border-indigo-700;
}

.packagePrice {
  @apply text-xl font-bold text-indigo-600 dark:text-indigo-400;
}

.packageDetails {
  @apply mt-3 text-sm text-gray-600 dark:text-gray-400;
}

.packageFeatures {
  @apply mt-4 space-y-2;
}

.packageFeatureItem {
  @apply flex items-start gap-2 text-sm;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE FECHA Y HORA (DateTimeStep)
   ========================================================================== */
.calendar {
  @apply bg-white dark:bg-gray-800 rounded-xl shadow-sm p-4 overflow-hidden;
}

.timeSelection {
  @apply grid grid-cols-2 gap-4 mt-6;
}

.timeCard {
  @apply flex flex-col items-center justify-center p-4 border rounded-xl transition-all duration-200 cursor-pointer;
}

.timeCardDefault {
  @apply border-gray-200 dark:border-gray-700 hover:border-indigo-200 dark:hover:border-indigo-800 hover:bg-indigo-50 dark:hover:bg-indigo-900/30;
}

.timeCardSelected {
  @apply border-indigo-500 bg-indigo-50 dark:bg-indigo-900/30 dark:border-indigo-700;
}

.dateInfo {
  @apply mt-4 p-4 bg-blue-50 dark:bg-blue-900/30 rounded-lg border border-blue-200 dark:border-blue-800;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE TEMÃTICA (ThemeStep)
   ========================================================================== */
.themeGrid {
  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6;
}

.themeCard {
  @apply relative border rounded-xl overflow-hidden transition-all duration-200 cursor-pointer;
}

.themeCardDefault {
  @apply border-gray-200 dark:border-gray-700 hover:border-indigo-300 dark:hover:border-indigo-700;
}

.themeCardSelected {
  @apply border-indigo-500 dark:border-indigo-600 ring-2 ring-indigo-500 dark:ring-indigo-600;
}

.themeImage {
  @apply w-full h-48 object-cover object-center;
}

.themeContent {
  @apply p-4;
}

.themeName {
  @apply text-lg font-medium text-gray-900 dark:text-white;
}

.themeDescription {
  @apply text-sm text-gray-600 dark:text-gray-400 mt-1 line-clamp-2;
}

.themePrice {
  @apply text-indigo-600 dark:text-indigo-400 font-medium mt-2;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE MAMPARA (MamparaStep)
   ========================================================================== */
.mamparaGrid {
  @apply grid grid-cols-1 md:grid-cols-2 gap-6;
}

.mamparaCard {
  @apply relative border rounded-xl overflow-hidden transition-all duration-200 cursor-pointer;
}

.mamparaCardDefault {
  @apply border-gray-200 dark:border-gray-700 hover:border-indigo-300 dark:hover:border-indigo-700;
}

.mamparaCardSelected {
  @apply border-indigo-500 dark:border-indigo-600 ring-2 ring-indigo-500 dark:ring-indigo-600;
}

.mamparaImage {
  @apply w-full h-64 object-cover object-center;
}

.mamparaContent {
  @apply p-4;
}

.mamparaName {
  @apply text-lg font-medium text-gray-900 dark:text-white;
}

.mamparaDescription {
  @apply text-sm text-gray-600 dark:text-gray-400 mt-1;
}

.mamparaPrice {
  @apply text-indigo-600 dark:text-indigo-400 font-medium mt-2;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE ALIMENTOS (FoodOptionsStep)
   ========================================================================== */
.foodGrid {
  @apply space-y-6;
}

.foodCard {
  @apply relative border rounded-xl p-5 transition-all duration-200 cursor-pointer;
}

.foodCardDefault {
  @apply border-gray-200 dark:border-gray-700 hover:border-indigo-200 dark:hover:border-indigo-800 hover:bg-indigo-50 dark:hover:bg-indigo-900/30;
}

.foodCardSelected {
  @apply border-indigo-500 bg-indigo-50 dark:bg-indigo-900/30 dark:border-indigo-700;
}

.foodName {
  @apply text-lg font-medium text-gray-900 dark:text-white;
}

.foodDescription {
  @apply text-sm text-gray-600 dark:text-gray-400 mt-2;
}

.foodOptions {
  @apply mt-4 space-y-3 text-sm;
}

.foodPrice {
  @apply text-indigo-600 dark:text-indigo-400 font-medium mt-4;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE EXTRAS (ExtrasStep)
   ========================================================================== */
.extrasGrid {
  @apply grid grid-cols-1 md:grid-cols-2 gap-6;
}

.extraCard {
  @apply border rounded-xl p-5 transition-all duration-200;
}

.extraName {
  @apply text-lg font-medium text-gray-900 dark:text-white;
}

.extraDescription {
  @apply text-sm text-gray-600 dark:text-gray-400 mt-2;
}

.extraPrice {
  @apply text-indigo-600 dark:text-indigo-400 font-medium mt-2;
}

.extraControls {
  @apply flex items-center justify-between mt-4;
}

.extraQuantity {
  @apply flex items-center gap-3;
}

.quantityButton {
  @apply w-8 h-8 flex items-center justify-center rounded-full bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-indigo-100 dark:hover:bg-indigo-900 transition-colors;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE FESTEJADO (CelebrantStep)
   ========================================================================== */
.celebrantForm {
  @apply space-y-6;
}

.colorPicker {
  @apply mt-6;
}

.colorGrid {
  @apply grid grid-cols-6 sm:grid-cols-8 gap-3 mt-3;
}

.colorSwatch {
  @apply w-8 h-8 rounded-full cursor-pointer transition-transform hover:scale-110;
}

.colorSwatchSelected {
  @apply ring-2 ring-offset-2 ring-indigo-600 dark:ring-offset-gray-800;
}

.colorCustom {
  @apply mt-4;
}

/* ==========================================================================
   ESTILOS PARA EL PASO DE REVISIÃ“N (ReviewStep)
   ========================================================================== */
.reviewContainer {
  @apply space-y-8;
}

.reviewSection {
  @apply border-b border-gray-200 dark:border-gray-700 pb-6 last:border-0;
}

.reviewSectionTitle {
  @apply flex items-center justify-between;
}

.reviewSectionHeading {
  @apply text-lg font-medium text-gray-900 dark:text-white;
}

.editButton {
  @apply text-sm text-indigo-600 dark:text-indigo-400 hover:text-indigo-700 dark:hover:text-indigo-300 font-medium;
}

.reviewDetail {
  @apply mt-4 space-y-4 text-gray-600 dark:text-gray-400;
}

.reviewItem {
  @apply flex items-start gap-3;
}

.reviewItemLabel {
  @apply font-medium text-gray-700 dark:text-gray-300;
}

.reviewItemValue {
  @apply text-gray-600 dark:text-gray-400;
}

.alert {
  @apply p-4 rounded-lg mt-6;
}

.alertWarning {
  @apply bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800;
}

.alertSuccess {
  @apply bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800;
}

.alertError {
  @apply bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800;
}\n\n

=== ./reservas/pages/customer/styles/StepperReservation.module.css ===
/* 
  StepperReservation.module.css
  Sistema organizado de estilos para el componente StepperReservation 
*/

/* ==========================================================================
   VARIABLES DE ESTILO
   ========================================================================== */
:root {
  --color-primary: #4f46e5; /* indigo-600 */
  --color-primary-dark: #4338ca; /* indigo-700 */
  --color-primary-light: #6366f1; /* indigo-500 */
  --color-primary-lightest: #eef2ff; /* indigo-50 */
  
  --color-success: #22c55e; /* green-500 */
  --color-success-dark: #16a34a; /* green-600 */
  
  --color-danger: #ef4444; /* red-500 */
  --color-danger-dark: #dc2626; /* red-600 */
  
  --color-warning: #f59e0b; /* amber-500 */

  --color-info: #3b82f6; /* blue-500 */
  
  --color-gray-50: #f9fafb;
  --color-gray-100: #f3f4f6;
  --color-gray-200: #e5e7eb;
  --color-gray-300: #d1d5db;
  --color-gray-500: #6b7280;
  --color-gray-600: #4b5563;
  --color-gray-700: #374151;
  --color-gray-800: #1f2937;
  --color-gray-900: #111827;
  
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  
  --radius-md: 0.375rem; /* 6px */
  --radius-lg: 0.5rem; /* 8px */
  --radius-xl: 0.75rem; /* 12px */
  --radius-2xl: 1rem; /* 16px */
  --radius-full: 9999px;
  
  --transition-fast: 200ms;
  --transition-normal: 300ms;
}

/* ==========================================================================
   LAYOUT BASE
   ========================================================================== */
.container {
  @apply container mx-auto px-0 sm:px-4 max-w-7xl;
}

.pageBackground {
  @apply bg-gradient-to-b from-indigo-50 to-gray-50 dark:from-gray-900 dark:to-black min-h-screen transition-all duration-300;
}

.pageBackgroundFullscreen {
  @apply fixed inset-0 z-50;
}

.header {
  @apply bg-white dark:bg-gray-800 shadow-sm p-4 md:rounded-lg md:mt-4 sticky top-0 z-30 border-b md:border border-gray-200 dark:border-gray-700;
}

.contentGrid {
  @apply md:mt-8 md:px-4 relative md:grid md:grid-cols-3 md:gap-8 lg:grid-cols-4;
}

.stepContent {
  @apply md:col-span-3 bg-white dark:bg-gray-800 md:rounded-xl shadow-sm;
}

.contentPadding {
  @apply p-4 md:p-8;
}

.infoSection {
  @apply p-4 md:mt-8 md:mb-12;
}

/* ==========================================================================
   COMPONENTES
   ========================================================================== */

/* Botones */
.buttonPrimary {
  @apply flex items-center gap-2 px-6 py-2.5 rounded-lg font-medium bg-gradient-to-r from-indigo-500 to-indigo-600 text-white hover:shadow-lg hover:from-indigo-600 hover:to-indigo-700 transition-all duration-200;
}

.buttonSuccess {
  @apply flex items-center gap-2 px-6 py-2.5 rounded-lg font-medium bg-gradient-to-r from-green-500 to-green-600 text-white hover:shadow-lg hover:from-green-600 hover:to-green-700 transition-all duration-200;
}

.buttonDisabled {
  @apply bg-gray-200 text-gray-500 cursor-not-allowed flex items-center gap-2 px-6 py-2.5 rounded-lg font-medium transition-all duration-200;
}

.buttonGhost {
  @apply text-gray-500 hover:text-gray-700 px-4 py-2 hover:bg-gray-100 rounded-lg transition-colors;
}

.buttonNav {
  @apply flex items-center gap-2 px-5 py-2.5 rounded-lg transition-all duration-200;
}

.buttonNavActive {
  @apply text-gray-700 hover:bg-gray-100;
}

.buttonNavDisabled {
  @apply text-gray-400 cursor-not-allowed;
}

.buttonIcon {
  @apply p-2 text-gray-700 dark:text-gray-300 hover:text-indigo-700 dark:hover:text-indigo-400 rounded-full hover:bg-indigo-100 dark:hover:bg-indigo-900 transition-colors;
}

.buttonFloating {
  @apply fixed bottom-4 right-4 z-20 flex items-center gap-2 px-4 py-3 rounded-full shadow-lg bg-indigo-600 dark:bg-indigo-700 text-white;
}

/* NavegaciÃ³n */
.desktopStepsNav {
  @apply hidden md:block my-6 px-4;
}

.mobileProgress {
  @apply p-4 md:hidden;
}

.progressBar {
  @apply h-1.5 bg-gray-200 rounded-full overflow-hidden;
}

.progressFill {
  @apply h-full bg-gradient-to-r from-indigo-500 to-indigo-600 rounded-full;
}

.controlsContainer {
  @apply flex justify-between mt-8 pt-4 border-t border-gray-200;
}

/* Tarjetas y Contenedores */
.card {
  @apply bg-white shadow-lg rounded-xl overflow-hidden;
}

.infoBox {
  @apply bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900 dark:to-indigo-900 p-4 rounded-xl border border-blue-200 dark:border-blue-800 shadow-sm;
}

.alertBox {
  @apply bg-red-50 p-4 rounded-lg border border-red-200;
}

.warningModal {
  @apply fixed inset-0 bg-gray-900/70 backdrop-blur-sm flex items-center justify-center z-50;
}

.errorToast {
  @apply fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-red-50 dark:bg-red-900 border border-red-300 dark:border-red-700 p-4 rounded-xl shadow-lg max-w-sm w-full;
}

/* Resumen lateral */
.summarySidebar {
  @apply hidden lg:block lg:col-span-1 transition-all duration-300 ease-in-out;
}

.summarySidebarMobile {
  @apply fixed inset-0 z-40 bg-gray-900/50 backdrop-blur-sm transition-all duration-300 ease-in-out;
}

.summarySidebarContent {
  @apply bg-white shadow-lg h-full overflow-y-auto w-full max-w-md;
}

.summarySidebarDesktop {
  @apply lg:h-auto lg:sticky lg:top-24 lg:rounded-xl lg:shadow-sm;
}

.summarySidebarMobileHeader {
  @apply flex justify-between items-center p-4 border-b border-gray-200;
}

/* Indicadores */
.loadingIndicator {
  @apply flex items-center justify-center h-64;
}

.loadingSpinner {
  @apply animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500;
}

.buttonLoadingSpinner {
  @apply w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin;
}

/* ==========================================================================
   ANIMACIONES
   ========================================================================== */
@keyframes slideInRight {
  from { transform: translateX(100%); }
  to { transform: translateX(0); }
}

@keyframes slideUp {
  from { transform: translate(-50%, 100%); opacity: 0; }
  to { transform: translate(-50%, 0); opacity: 1; }
}

@keyframes zoomIn {
  from { transform: scale(0.9); opacity: 0; }
  to { transform: scale(1); opacity: 1; }
}

@keyframes bounceSubtle {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-5px); }
}

.animateSlideInRight {
  animation: slideInRight 0.3s ease-out forwards;
}

.animateSlideUp {
  animation: slideUp 0.3s ease-out forwards;
}

.animateZoomIn {
  animation: zoomIn 0.3s ease-out forwards;
}

.animateBounceSubtle {
  animation: bounceSubtle 2s infinite;
}

/* ==========================================================================
   TEMA OSCURO - Ajustes especÃ­ficos
   ========================================================================== */
.darkText {
  @apply dark:text-white;
}

.darkCard {
  @apply dark:bg-gray-800;
}

.darkBorder {
  @apply dark:border-gray-700;
}

/* ==========================================================================
   RESPONSIVIDAD - Ajustes especÃ­ficos
   ========================================================================== */
.mobileOnly {
  @apply block md:hidden;
}

.desktopOnly {
  @apply hidden md:block;
}

.lgDesktopOnly {
  @apply hidden lg:block;
}

.mobileHidden {
  @apply hidden sm:inline;
}

.mobileFlexHidden {
  @apply hidden sm:flex;
}\n\n

=== ./reservas/pages/customer/styles/UI.module.css ===
/* 
  UI.module.css
  Componentes de interfaz reutilizables para el mÃ³dulo de reservaciÃ³n
*/

/* ==========================================================================
   BOTONES
   ========================================================================== */
.button {
  @apply inline-flex items-center justify-center rounded-lg font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
}

.buttonSm {
  @apply px-3 py-1.5 text-sm;
}

.buttonMd {
  @apply px-4 py-2;
}

.buttonLg {
  @apply px-6 py-2.5 text-base;
}

.buttonPrimary {
  @apply bg-gradient-to-r from-indigo-500 to-indigo-600 text-white hover:shadow-md hover:from-indigo-600 hover:to-indigo-700 focus:ring-indigo-500;
}

.buttonSecondary {
  @apply bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-gray-500 dark:bg-gray-700 dark:text-gray-200 dark:border-gray-600 dark:hover:bg-gray-600;
}

.buttonSuccess {
  @apply bg-gradient-to-r from-green-500 to-green-600 text-white hover:shadow-md hover:from-green-600 hover:to-green-700 focus:ring-green-500;
}

.buttonDanger {
  @apply bg-gradient-to-r from-red-500 to-red-600 text-white hover:shadow-md hover:from-red-600 hover:to-red-700 focus:ring-red-500;
}

.buttonWarning {
  @apply bg-gradient-to-r from-amber-500 to-amber-600 text-white hover:shadow-md hover:from-amber-600 hover:to-amber-700 focus:ring-amber-500;
}

.buttonInfo {
  @apply bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:shadow-md hover:from-blue-600 hover:to-blue-700 focus:ring-blue-500;
}

.buttonGhost {
  @apply bg-transparent text-gray-700 hover:bg-gray-100 focus:ring-gray-500 dark:text-gray-300 dark:hover:bg-gray-800;
}

.buttonLink {
  @apply bg-transparent text-indigo-600 hover:text-indigo-700 hover:underline focus:ring-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300;
}

.buttonIcon {
  @apply p-2 rounded-full;
}

.buttonDisabled {
  @apply opacity-60 cursor-not-allowed bg-gray-200 text-gray-500 hover:shadow-none;
}

.buttonFullWidth {
  @apply w-full;
}

.buttonGroup {
  @apply inline-flex;
}

.buttonGroupItem {
  @apply rounded-none first:rounded-l-lg last:rounded-r-lg -ml-px first:ml-0 border-l-0 first:border-l;
}

/* ==========================================================================
   FORMULARIOS
   ========================================================================== */
.formGroup {
  @apply mb-4;
}

.formLabel {
  @apply block text-sm font-medium text-gray-700 mb-1 dark:text-gray-300;
}

.formInput {
  @apply block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white;
}

.formInputSm {
  @apply py-1.5 text-sm;
}

.formInputMd {
  @apply py-2;
}

.formInputLg {
  @apply py-2.5 text-base;
}

.formInputInvalid {
  @apply border-red-300 focus:border-red-500 focus:ring-red-500;
}

.formHelper {
  @apply mt-1 text-xs text-gray-500 dark:text-gray-400;
}

.formError {
  @apply mt-1 text-xs text-red-600 dark:text-red-400;
}

.formSelect {
  @apply block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white;
}

.formCheckboxLabel {
  @apply inline-flex items-center;
}

.formCheckbox {
  @apply h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 dark:border-gray-700 dark:bg-gray-800;
}

.formRadioLabel {
  @apply inline-flex items-center;
}

.formRadio {
  @apply h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-500 dark:border-gray-700 dark:bg-gray-800;
}

.formTextarea {
  @apply block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white;
}

/* ==========================================================================
   TARJETAS
   ========================================================================== */
.card {
  @apply bg-white rounded-xl shadow-sm dark:bg-gray-800 dark:border dark:border-gray-700 overflow-hidden;
}

.cardHeader {
  @apply px-6 py-4 border-b border-gray-200 dark:border-gray-700;
}

.cardTitle {
  @apply text-lg font-medium text-gray-900 dark:text-white;
}

.cardBody {
  @apply px-6 py-5;
}

.cardFooter {
  @apply px-6 py-4 border-t border-gray-200 dark:border-gray-700;
}

.cardHover {
  @apply transition-shadow hover:shadow-md;
}

.cardPrimary {
  @apply border-l-4 border-indigo-500;
}

.cardSuccess {
  @apply border-l-4 border-green-500;
}

.cardWarning {
  @apply border-l-4 border-amber-500;
}

.cardDanger {
  @apply border-l-4 border-red-500;
}

.cardInfo {
  @apply border-l-4 border-blue-500;
}

/* ==========================================================================
   ALERTAS Y NOTIFICACIONES
   ========================================================================== */
.alert {
  @apply rounded-lg p-4 mb-4;
}

.alertPrimary {
  @apply bg-indigo-50 text-indigo-700 border border-indigo-200 dark:bg-indigo-900/30 dark:text-indigo-300 dark:border-indigo-800;
}

.alertSuccess {
  @apply bg-green-50 text-green-700 border border-green-200 dark:bg-green-900/30 dark:text-green-300 dark:border-green-800;
}

.alertWarning {
  @apply bg-amber-50 text-amber-700 border border-amber-200 dark:bg-amber-900/30 dark:text-amber-300 dark:border-amber-800;
}

.alertDanger {
  @apply bg-red-50 text-red-700 border border-red-200 dark:bg-red-900/30 dark:text-red-300 dark:border-red-800;
}

.alertInfo {
  @apply bg-blue-50 text-blue-700 border border-blue-200 dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-800;
}

.alertIcon {
  @apply h-5 w-5 mr-2 inline;
}

.toast {
  @apply fixed p-4 rounded-lg shadow-lg max-w-sm w-full bg-white dark:bg-gray-800 border dark:border-gray-700;
}

.toastBottom {
  @apply bottom-4 left-1/2 transform -translate-x-1/2;
}

.toastTopRight {
  @apply top-4 right-4;
}

.badge {
  @apply inline-flex items-center rounded-full px-2.5 py-1 text-xs font-medium;
}

.badgePrimary {
  @apply bg-indigo-100 text-indigo-800 dark:bg-indigo-800 dark:text-indigo-100;
}

.badgeSuccess {
  @apply bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100;
}

.badgeWarning {
  @apply bg-amber-100 text-amber-800 dark:bg-amber-800 dark:text-amber-100;
}

.badgeDanger {
  @apply bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100;
}

.badgeInfo {
  @apply bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100;
}

/* ==========================================================================
   NAVEGACIÃ“N
   ========================================================================== */
.nav {
  @apply flex;
}

.navVertical {
  @apply flex-col;
}

.navHorizontal {
  @apply flex-row;
}

.navItem {
  @apply px-4 py-2 text-gray-700 hover:text-indigo-600 hover:bg-indigo-50 rounded-lg font-medium transition-colors dark:text-gray-300 dark:hover:text-indigo-400 dark:hover:bg-indigo-900/30;
}

.navItemActive {
  @apply text-indigo-600 bg-indigo-50 dark:text-indigo-400 dark:bg-indigo-900/50;
}

.navTabs {
  @apply flex border-b border-gray-200 dark:border-gray-700;
}

.navTab {
  @apply px-4 py-2 font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 transition-colors dark:text-gray-400 dark:hover:text-gray-200 dark:hover:border-gray-600;
}

.navTabActive {
  @apply border-indigo-500 text-indigo-600 dark:border-indigo-400 dark:text-indigo-400;
}

/* ==========================================================================
   MODALES Y OVERLAYS
   ========================================================================== */
.modalBackdrop {
  @apply fixed inset-0 bg-gray-900/70 backdrop-blur-sm flex items-center justify-center z-50;
}

.modal {
  @apply bg-white dark:bg-gray-800 rounded-2xl p-6 max-w-md w-full mx-4 shadow-2xl;
}

.modalHeader {
  @apply flex items-center justify-between mb-4;
}

.modalTitle {
  @apply text-lg font-bold text-gray-900 dark:text-white;
}

.modalBody {
  @apply mb-6;
}

.modalFooter {
  @apply flex justify-end gap-3;
}

.tooltip {
  @apply absolute z-10 px-3 py-2 text-sm font-medium text-white bg-gray-900 rounded-lg shadow-sm dark:bg-gray-700;
}

.tooltipArrow {
  @apply absolute w-3 h-3 bg-gray-900 dark:bg-gray-700 transform rotate-45;
}

.popover {
  @apply absolute z-10 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700;
}

/* ==========================================================================
   LOADERS
   ========================================================================== */
.loader {
  @apply animate-spin;
}

.loaderSm {
  @apply h-4 w-4;
}

.loaderMd {
  @apply h-6 w-6;
}

.loaderLg {
  @apply h-8 w-8;
}

.loaderSpinner {
  @apply rounded-full border-2 border-t-transparent;
}

.loaderPrimary {
  @apply border-indigo-500;
}

.loaderWhite {
  @apply border-white;
}

.skeleton {
  @apply animate-pulse bg-gray-200 dark:bg-gray-700 rounded;
}

/* ==========================================================================
   LAYOUT HELPERS
   ========================================================================== */
.flexCenter {
  @apply flex items-center justify-center;
}

.flexBetween {
  @apply flex items-center justify-between;
}

.flexStart {
  @apply flex items-center justify-start;
}

.flexEnd {
  @apply flex items-center justify-end;
}

.grid2Cols {
  @apply grid grid-cols-1 md:grid-cols-2 gap-6;
}

.grid3Cols {
  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6;
}

.grid4Cols {
  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6;
}\n\n

=== ./reservas/pages/customer/styles/animations.css ===
/* 
  animations.css
  Animaciones reutilizables para el mÃ³dulo de reservaciÃ³n
*/

/* ==========================================================================
   KEYFRAMES - Definiciones de animaciones
   ========================================================================== */

@keyframes fade-in {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes fade-out {
  from { opacity: 1; }
  to { opacity: 0; }
}

@keyframes slide-in-right {
  from { transform: translateX(100%); }
  to { transform: translateX(0); }
}

@keyframes slide-in-left {
  from { transform: translateX(-100%); }
  to { transform: translateX(0); }
}

@keyframes slide-up {
  from { 
    transform: translate(-50%, 100%); 
    opacity: 0; 
  }
  to { 
    transform: translate(-50%, 0); 
    opacity: 1; 
  }
}

@keyframes slide-down {
  from { 
    transform: translateY(-20px); 
    opacity: 0; 
  }
  to { 
    transform: translateY(0); 
    opacity: 1; 
  }
}

@keyframes zoom-in {
  from { 
    transform: scale(0.9); 
    opacity: 0; 
  }
  to { 
    transform: scale(1); 
    opacity: 1; 
  }
}

@keyframes zoom-out {
  from { 
    transform: scale(1); 
    opacity: 1; 
  }
  to { 
    transform: scale(0.9); 
    opacity: 0; 
  }
}

@keyframes bounce-subtle {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-5px); }
}

@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.5; }
  100% { opacity: 1; }
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* ==========================================================================
   CLASES DE ANIMACIÃ“N - Para aplicar animaciones a los elementos
   ========================================================================== */

.animate-fade-in {
  animation: fade-in 0.3s ease-out forwards;
}

.animate-fade-out {
  animation: fade-out 0.3s ease-out forwards;
}

.animate-slide-in-right {
  animation: slide-in-right 0.3s ease-out forwards;
}

.animate-slide-in-left {
  animation: slide-in-left 0.3s ease-out forwards;
}

.animate-slide-up {
  animation: slide-up 0.3s ease-out forwards;
}

.animate-slide-down {
  animation: slide-down 0.3s ease-out forwards;
}

.animate-zoom-in {
  animation: zoom-in 0.3s ease-out forwards;
}

.animate-zoom-out {
  animation: zoom-out 0.3s ease-out forwards;
}

.animate-bounce-subtle {
  animation: bounce-subtle 2s infinite;
}

.animate-pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

.animate-spin {
  animation: spin 1s linear infinite;
}

/* Variaciones de duraciÃ³n */
.duration-fast {
  animation-duration: 200ms;
}

.duration-normal {
  animation-duration: 300ms;
}

.duration-slow {
  animation-duration: 500ms;
}

/* Variaciones de retraso */
.delay-100 {
  animation-delay: 100ms;
}

.delay-200 {
  animation-delay: 200ms;
}

.delay-300 {
  animation-delay: 300ms;
}

/* Variaciones de curva de tiempo */
.ease-linear {
  animation-timing-function: linear;
}

.ease-in {
  animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
}

.ease-out {
  animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
}

.ease-in-out {
  animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}\n\n

=== ./reservas/pages/customer/styles/index.js ===
/**
 * index.js
 * Punto de entrada para todos los estilos del mÃ³dulo de reservaciÃ³n
 * Centraliza las importaciones y exportaciones de estilos para un uso mÃ¡s fÃ¡cil en los componentes
 */

// Importar estilos de mÃ³dulos
import stepperStyles from './StepperReservation.module.css';
import stepComponentStyles from './StepComponents.module.css';
import uiStyles from './UI.module.css';

// Importar animaciones
import './animations.css';

// Importar variables
import variables from './variables';

/**
 * Objeto que contiene todos los estilos para el stepper de reservaciÃ³n
 */
const styles = {
  // MÃ³dulos principales
  stepper: stepperStyles,
  steps: stepComponentStyles,
  ui: uiStyles,
  
  // Variables y utilidades
  variables,
  
  // Acceso directo a variables comunes
  colors: variables.COLORS,
  breakpoints: variables.BREAKPOINTS,
  mediaQueries: variables.MEDIA_QUERIES,
  spacing: variables.SPACING,
  fontSizes: variables.FONT_SIZES,
  shadows: variables.SHADOWS,
  radius: variables.BORDER_RADIUS,
  zIndex: variables.Z_INDEX,
  
  // Utilidades
  createMediaQuery: variables.createMediaQuery,
  createCSSStyles: variables.createCSSStyles,
};

/**
 * FunciÃ³n auxiliar para combinar nombres de clase
 * @param  {...string} classes - Nombres de clase a combinar
 * @returns {string} - Clases combinadas
 */
export const cn = (...classes) => {
  return classes.filter(Boolean).join(' ');
};

/**
 * FunciÃ³n para crear estilos condicionales
 * @param {Object} conditions - Objeto con condiciones como clave y clases como valor
 * @returns {string} - Clases combinadas para condiciones que son verdaderas
 */
export const cond = (conditions) => {
  return Object.entries(conditions)
    .filter(([_, condition]) => Boolean(condition))
    .map(([className]) => className)
    .join(' ');
};

/**
 * FunciÃ³n para aplicar estilos responsivos basados en breakpoints
 * @param {Object} stylesObj - Objeto con breakpoints como clave y clases como valor
 * @returns {string} - Clases combinadas
 * 
 * Ejemplo:
 * responsive({
 *   base: 'text-sm',
 *   md: 'text-base',
 *   lg: 'text-lg'
 * })
 */
export const responsive = (stylesObj) => {
  if (!stylesObj || typeof stylesObj !== 'object') return '';
  
  // Crear clases para cada breakpoint
  const classes = [];
  
  // Clase base (sin media query)
  if (stylesObj.base) {
    classes.push(stylesObj.base);
  }
  
  // Clases para breakpoints
  Object.entries(stylesObj)
    .filter(([key]) => key !== 'base')
    .forEach(([key, value]) => {
      // Agregar clase con el prefijo del breakpoint
      classes.push(`${key}:${value}`);
    });
  
  return classes.join(' ');
};

/**
 * FunciÃ³n para generar estilos de variantes
 * @param {string} baseClass - Clase base
 * @param {string} variant - Nombre de la variante
 * @param {Object} variants - Objeto con las variantes disponibles
 * @returns {string} - Clase combinada
 * 
 * Ejemplo:
 * const buttonVariants = {
 *   primary: 'bg-blue-500 text-white',
 *   secondary: 'bg-gray-200 text-gray-800'
 * };
 * 
 * getVariant('button', 'primary', buttonVariants)
 * // Resultado: 'button button-primary bg-blue-500 text-white'
 */
export const getVariant = (baseClass, variant, variants) => {
  if (!variant || !variants || !variants[variant]) {
    return baseClass;
  }
  
  return `${baseClass} ${baseClass}-${variant} ${variants[variant]}`;
};

/**
 * FunciÃ³n para generar estilos de tamaÃ±o
 * @param {string} baseClass - Clase base
 * @param {string} size - Nombre del tamaÃ±o
 * @param {Object} sizes - Objeto con los tamaÃ±os disponibles
 * @returns {string} - Clase combinada
 * 
 * Ejemplo:
 * const buttonSizes = {
 *   sm: 'text-sm px-2 py-1',
 *   md: 'text-base px-4 py-2',
 *   lg: 'text-lg px-6 py-3'
 * };
 * 
 * getSize('button', 'md', buttonSizes)
 * // Resultado: 'button button-md text-base px-4 py-2'
 */
export const getSize = (baseClass, size, sizes) => {
  if (!size || !sizes || !sizes[size]) {
    return baseClass;
  }
  
  return `${baseClass} ${baseClass}-${size} ${sizes[size]}`;
};

// Exportar estilos como default
export default styles;

// Exportar mÃ³dulos individuales para uso especÃ­fico
export {
  stepperStyles,
  stepComponentStyles,
  uiStyles,
  variables
};\n\n

=== ./reservas/pages/customer/styles/variables.js ===
/**
 * variables.js
 * Variables y constantes de estilo centralizadas para el mÃ³dulo de reservaciÃ³n
 */

// ==========================================================================
// VARIABLES DE TEMA
// ==========================================================================

/**
 * Paleta de colores principal
 */
export const COLORS = {
  // Colores de marca
  primary: {
    50: '#eef2ff',
    100: '#e0e7ff',
    200: '#c7d2fe',
    300: '#a5b4fc',
    400: '#818cf8',
    500: '#6366f1', // indigo-500
    600: '#4f46e5', // indigo-600
    700: '#4338ca', // indigo-700
    800: '#3730a3',
    900: '#312e81',
    950: '#1e1b4b',
  },
  
  success: {
    500: '#22c55e', // green-500
    600: '#16a34a', // green-600
    700: '#15803d',
  },
  
  danger: {
    500: '#ef4444', // red-500
    600: '#dc2626', // red-600
    700: '#b91c1c',
  },
  
  warning: {
    500: '#f59e0b', // amber-500
    600: '#d97706', // amber-600
    700: '#b45309',
  },
  
  info: {
    500: '#3b82f6', // blue-500
    600: '#2563eb', // blue-600
    700: '#1d4ed8',
  },
  
  // Escala de grises
  gray: {
    50: '#f9fafb',
    100: '#f3f4f6',
    200: '#e5e7eb',
    300: '#d1d5db',
    400: '#9ca3af',
    500: '#6b7280',
    600: '#4b5563',
    700: '#374151',
    800: '#1f2937',
    900: '#111827',
    950: '#030712',
  },
};

/**
 * Valores de sombra
 */
export const SHADOWS = {
  sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
  DEFAULT: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1)',
  md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)',
  lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)',
  xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1)',
  '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
  inner: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.05)',
};

/**
 * Valores de border radius
 */
export const BORDER_RADIUS = {
  none: '0',
  sm: '0.125rem', // 2px
  DEFAULT: '0.25rem', // 4px
  md: '0.375rem', // 6px
  lg: '0.5rem', // 8px
  xl: '0.75rem', // 12px
  '2xl': '1rem', // 16px
  '3xl': '1.5rem', // 24px
  full: '9999px',
};

/**
 * Valores de espaciado
 */
export const SPACING = {
  px: '1px',
  0: '0',
  0.5: '0.125rem', // 2px
  1: '0.25rem', // 4px
  1.5: '0.375rem', // 6px
  2: '0.5rem', // 8px
  2.5: '0.625rem', // 10px
  3: '0.75rem', // 12px
  3.5: '0.875rem', // 14px
  4: '1rem', // 16px
  5: '1.25rem', // 20px
  6: '1.5rem', // 24px
  7: '1.75rem', // 28px
  8: '2rem', // 32px
  9: '2.25rem', // 36px
  10: '2.5rem', // 40px
  11: '2.75rem', // 44px
  12: '3rem', // 48px
  14: '3.5rem', // 56px
  16: '4rem', // 64px
  20: '5rem', // 80px
  24: '6rem', // 96px
  28: '7rem', // 112px
  32: '8rem', // 128px
  36: '9rem', // 144px
  40: '10rem', // 160px
  44: '11rem', // 176px
  48: '12rem', // 192px
  52: '13rem', // 208px
  56: '14rem', // 224px
  60: '15rem', // 240px
  64: '16rem', // 256px
  72: '18rem', // 288px
  80: '20rem', // 320px
  96: '24rem', // 384px
};

/**
 * Valores de tipografÃ­a (tamaÃ±os de fuente)
 */
export const FONT_SIZES = {
  xs: '0.75rem', // 12px
  sm: '0.875rem', // 14px
  base: '1rem', // 16px
  lg: '1.125rem', // 18px
  xl: '1.25rem', // 20px
  '2xl': '1.5rem', // 24px
  '3xl': '1.875rem', // 30px
  '4xl': '2.25rem', // 36px
  '5xl': '3rem', // 48px
  '6xl': '3.75rem', // 60px
  '7xl': '4.5rem', // 72px
  '8xl': '6rem', // 96px
  '9xl': '8rem', // 128px
};

/**
 * Valores de font-weight
 */
export const FONT_WEIGHTS = {
  thin: '100',
  extralight: '200',
  light: '300',
  normal: '400',
  medium: '500',
  semibold: '600',
  bold: '700',
  extrabold: '800',
  black: '900',
};

/**
 * Valores de line-height
 */
export const LINE_HEIGHTS = {
  none: '1',
  tight: '1.25',
  snug: '1.375',
  normal: '1.5',
  relaxed: '1.625',
  loose: '2',
};

// ==========================================================================
// MEDIA QUERIES
// ==========================================================================

/**
 * Breakpoints para media queries
 */
export const BREAKPOINTS = {
  xs: '320px',
  sm: '640px',
  md: '768px',
  lg: '1024px',
  xl: '1280px',
  '2xl': '1536px',
};

/**
 * Media queries predefinidos
 */
export const MEDIA_QUERIES = {
  xs: `(min-width: ${BREAKPOINTS.xs})`,
  sm: `(min-width: ${BREAKPOINTS.sm})`,
  md: `(min-width: ${BREAKPOINTS.md})`,
  lg: `(min-width: ${BREAKPOINTS.lg})`,
  xl: `(min-width: ${BREAKPOINTS.xl})`,
  '2xl': `(min-width: ${BREAKPOINTS['2xl']})`,
  
  xsDown: `(max-width: ${parseFloat(BREAKPOINTS.sm) - 0.1}px)`,
  smDown: `(max-width: ${parseFloat(BREAKPOINTS.md) - 0.1}px)`,
  mdDown: `(max-width: ${parseFloat(BREAKPOINTS.lg) - 0.1}px)`,
  lgDown: `(max-width: ${parseFloat(BREAKPOINTS.xl) - 0.1}px)`,
  xlDown: `(max-width: ${parseFloat(BREAKPOINTS['2xl']) - 0.1}px)`,
  
  dark: '(prefers-color-scheme: dark)',
  light: '(prefers-color-scheme: light)',
  
  motion: '(prefers-reduced-motion: no-preference)',
  reducedMotion: '(prefers-reduced-motion: reduce)',
  
  portrait: '(orientation: portrait)',
  landscape: '(orientation: landscape)',
};

// ==========================================================================
// ANIMACIONES
// ==========================================================================

/**
 * Duraciones de animaciÃ³n
 */
export const ANIMATION_DURATIONS = {
  fastest: '100ms',
  fast: '200ms',
  normal: '300ms',
  slow: '500ms',
  slowest: '700ms',
};

/**
 * Curvas de tiempo (timing functions)
 */
export const ANIMATION_TIMING_FUNCTIONS = {
  linear: 'linear',
  in: 'cubic-bezier(0.4, 0, 1, 1)',
  out: 'cubic-bezier(0, 0, 0.2, 1)',
  inOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
};

/**
 * Valores de z-index
 */
export const Z_INDEX = {
  0: '0',
  10: '10',
  20: '20',
  30: '30',
  40: '40',
  50: '50',
  auto: 'auto',
  dropdown: '1000',
  sticky: '1020',
  fixed: '1030',
  modalBackdrop: '1040',
  modal: '1050',
  popover: '1060',
  tooltip: '1070',
};

// ==========================================================================
// UTILIDADES
// ==========================================================================

/**
 * FunciÃ³n para generar estilos CSS personalizados
 * @param {Object} styles - Objeto de estilos
 * @returns {string} - Cadena de estilos CSS
 */
export const createCSSStyles = (styles) => {
  return Object.entries(styles)
    .map(([property, value]) => `${property}: ${value};`)
    .join(' ');
};

/**
 * FunciÃ³n para generar estilos CSS para media queries
 * @param {string} mediaQuery - Media query a aplicar
 * @param {Object} styles - Objeto de estilos
 * @returns {string} - Cadena de media query con estilos CSS
 */
export const createMediaQuery = (mediaQuery, styles) => {
  const cssStyles = createCSSStyles(styles);
  return `@media ${mediaQuery} { ${cssStyles} }`;
};

/**
 * Variables de tema CSS globales (como referencia)
 * Estas variables estÃ¡n definidas en :root en CSS pero se incluyen aquÃ­ como referencia
 */
export const CSS_VARIABLES = {
  // Colores
  '--color-primary': COLORS.primary[600],
  '--color-primary-dark': COLORS.primary[700],
  '--color-primary-light': COLORS.primary[500],
  '--color-primary-lightest': COLORS.primary[50],
  
  '--color-success': COLORS.success[500],
  '--color-success-dark': COLORS.success[600],
  
  '--color-danger': COLORS.danger[500],
  '--color-danger-dark': COLORS.danger[600],
  
  '--color-warning': COLORS.warning[500],
  
  '--color-info': COLORS.info[500],
  
  // Grises
  '--color-gray-50': COLORS.gray[50],
  '--color-gray-100': COLORS.gray[100],
  '--color-gray-200': COLORS.gray[200],
  '--color-gray-300': COLORS.gray[300],
  '--color-gray-500': COLORS.gray[500],
  '--color-gray-600': COLORS.gray[600],
  '--color-gray-700': COLORS.gray[700],
  '--color-gray-800': COLORS.gray[800],
  '--color-gray-900': COLORS.gray[900],
  
  // Sombras
  '--shadow-sm': SHADOWS.sm,
  '--shadow-md': SHADOWS.md,
  '--shadow-lg': SHADOWS.lg,
  
  // Border radius
  '--radius-md': BORDER_RADIUS.md,
  '--radius-lg': BORDER_RADIUS.lg,
  '--radius-xl': BORDER_RADIUS.xl,
  '--radius-2xl': BORDER_RADIUS['2xl'],
  '--radius-full': BORDER_RADIUS.full,
  
  // Transiciones
  '--transition-fast': ANIMATION_DURATIONS.fast,
  '--transition-normal': ANIMATION_DURATIONS.normal,
};

export default {
  COLORS,
  SHADOWS,
  BORDER_RADIUS,
  SPACING,
  FONT_SIZES,
  FONT_WEIGHTS,
  LINE_HEIGHTS,
  BREAKPOINTS,
  MEDIA_QUERIES,
  ANIMATION_DURATIONS,
  ANIMATION_TIMING_FUNCTIONS,
  Z_INDEX,
  CSS_VARIABLES,
};\n\n

=== ./reservas/pages/index.js ===
// Exportar todos los componentes de reservas/pages
\n\n

=== ./reservas/services/index.js ===
// Exportar todos los componentes de reservas/services
export { default as preReservasService } from './preReservas.service.js';
\n\n

=== ./reservas/services/preReservas.service.js ===
ï»¿import { create } from 'zustand';
import axiosInstance from '@shared/utils/axiosConfig';

/**
 * Store para gestionar las pre-reservas y el flujo de pago-primero
 */
// FunciÃƒÂ³n para generar un cÃƒÂ³digo de seguimiento de exactamente 10 caracteres
const generateTrackingCode = () => {
  // Obtener fecha actual
  const now = new Date();
  
  // Extraer componentes de fecha (2 dÃƒÂ­gitos del aÃƒÂ±o, mes y dÃƒÂ­a)
  const year = now.getFullYear().toString().slice(2); // 2 dÃƒÂ­gitos
  const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 2 dÃƒÂ­gitos
  const day = now.getDate().toString().padStart(2, '0'); // 2 dÃƒÂ­gitos
  
  // Generar parte aleatoria (4 dÃƒÂ­gitos para completar 10 caracteres en total)
  const randomPart = Math.floor(1000 + Math.random() * 9000);
  
  // Construir cÃƒÂ³digo: YYMMDDXXXX (exactamente 10 caracteres)
  return `${year}${month}${day}${randomPart}`;
};

const usePreReservasStore = create((set, get) => ({
  preReserva: null,
  pagoEnProceso: null,
  loading: false,
  error: null,
  
  /**
   * Inicia el proceso de pago creando una pre-reserva y obteniendo los datos para el procesador de pago
   * @param {Object} datosReserva - Datos completos de la reserva
   * @param {string} metodoPago - MÃƒÂ©todo de pago seleccionado
   * @returns {Promise<Object>} - Datos para procesar el pago
   */
  iniciarProcesoPago: async (datosReserva, metodoPago) => {
    set({ loading: true, error: null });
    
    try {
      // Normalizar el mÃƒÂ©todo de pago para asegurar compatibilidad
      let metodoNormalizado;
      switch(metodoPago) {
        case 'transfer':
          metodoNormalizado = 'transferencia';
          break;
        case 'cash':
          metodoNormalizado = 'efectivo';
          break;
        case 'credit':
          metodoNormalizado = 'tarjeta_credito';
          break;
        case 'debit':
          metodoNormalizado = 'tarjeta_debito';
          break;
        default:
          metodoNormalizado = metodoPago;
      }
      
      // Formatear la fecha en formato YYYY-MM-DD
      if (datosReserva.fecha_reserva) {
        if (datosReserva.fecha_reserva instanceof Date) {
          datosReserva.fecha_reserva = datosReserva.fecha_reserva.toISOString().split('T')[0]; // Formato YYYY-MM-DD
        }
      }
      
      // Asegurarse de que datosReserva tenga hora_fin si tiene hora_inicio
      if (datosReserva.hora_inicio && !datosReserva.hora_fin) {
        // Convertir hora_inicio a formato correcto si es "tarde" o "maÃƒÂ±ana"
        let horaInicio = typeof datosReserva.hora_inicio === 'object' ?
          datosReserva.hora_inicio.value : datosReserva.hora_inicio;
          
        if (horaInicio === 'tarde') {
          horaInicio = '14:00:00';
        } else if (horaInicio === 'maÃƒÂ±ana' || horaInicio === 'manana') {
          horaInicio = '10:00:00';
        }
        
        // Calcular hora_fin (3 horas despuÃƒÂ©s de hora_inicio)
        const [horas, minutos, segundos] = horaInicio.split(':').map(Number);
        const horaFin = `${String(horas + 3).padStart(2, '0')}:${String(minutos).padStart(2, '0')}:${String(segundos).padStart(2, '0')}`;
        
        datosReserva.hora_inicio = horaInicio;
        datosReserva.hora_fin = horaFin;
      }
      
      // Convertir edad_festejado a nÃƒÂºmero si es string
      if (datosReserva.edad_festejado && typeof datosReserva.edad_festejado === 'string') {
        datosReserva.edad_festejado = parseInt(datosReserva.edad_festejado, 10);
      }
      
      // Combinar campos adicionales en comentarios
      let comentarios = '';
      if (datosReserva.sexo_festejado) {
        comentarios += `Sexo: ${datosReserva.sexo_festejado}. `;
        delete datosReserva.sexo_festejado;
      }
      if (datosReserva.color_favorito) {
        comentarios += `Color favorito: ${datosReserva.color_favorito}. `;
        delete datosReserva.color_favorito;
      }
      if (datosReserva.detalles_especiales) {
        comentarios += `Detalles especiales: ${datosReserva.detalles_especiales}`;
        delete datosReserva.detalles_especiales;
      }
      
      if (comentarios.trim()) {
        datosReserva.comentarios = comentarios.trim();
      }
      
      // Asegurarse de que haya un cÃƒÂ³digo de seguimiento
      if (!datosReserva.codigo_seguimiento) {
        datosReserva.codigo_seguimiento = generateTrackingCode();
      }
      
      const response = await axios.post('/api/pagos/iniciar', {
        datosReserva,
        metodo_pago: metodoNormalizado
      });
      
      set({
        preReserva: {
          ...datosReserva,
          id: response.data.pago.id_pre_reserva
        },
        pagoEnProceso: response.data.pago,
        loading: false
      });
      
      return response.data;
    } catch (error) {
      console.error('Error al iniciar el proceso de pago:', error);
      set({ 
        error: error.response?.data?.message || 'Error al iniciar el proceso de pago', 
        loading: false 
      });
      throw error;
    }
  },
  
  /**
   * Confirma un pago y completa la pre-reserva convirtiÃƒÂ©ndola en reserva
   * @param {Object} datosPago - Datos del procesador de pago (token, etc)
   * @returns {Promise<Object>} - Datos de la reserva creada
   */
  confirmarPago: async (datosPago) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axios.post('/api/pagos/confirmar', {
        id_pago: get().pagoEnProceso.id,
        ...datosPago
      });
      
      // Limpiar el estado despuÃƒÂ©s de confirmar exitosamente
      set({ loading: false, preReserva: null, pagoEnProceso: null });
      return response.data;
    } catch (error) {
      console.error('Error al confirmar el pago:', error);
      set({ 
        error: error.response?.data?.message || 'Error al confirmar el pago', 
        loading: false 
      });
      throw error;
    }
  },
  
  /**
   * Obtiene informaciÃƒÂ³n de un pago asociado a una pre-reserva
   * @param {number} idPreReserva - ID de la pre-reserva
   * @returns {Promise<Object>} - Datos del pago
   */
  obtenerPagoPorPreReserva: async (idPreReserva) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axios.get(`/api/pagos/pre-reserva/${idPreReserva}`);
      set({ 
        pagoEnProceso: response.data.pago,
        loading: false 
      });
      return response.data.pago;
    } catch (error) {
      console.error('Error al obtener pago de pre-reserva:', error);
      set({ 
        error: error.response?.data?.message || 'Error al obtener informaciÃƒÂ³n del pago', 
        loading: false 
      });
      throw error;
    }
  },
  
  /**
   * Verifica si la pre-reserva actual ha expirado
   * @returns {boolean} - true si ha expirado
   */
  haExpirado: () => {
    const { pagoEnProceso } = get();
    if (!pagoEnProceso || !pagoEnProceso.expiracion) return false;
    
    return new Date() > new Date(pagoEnProceso.expiracion);
  },
  
  /**
   * Limpia los datos de pre-reserva y pago
   */
  limpiarPreReserva: () => {
    set({ preReserva: null, pagoEnProceso: null, error: null });
  }
}));

export default usePreReservasStore;
\n\n

=== ./reservas/services/preReservasStore.js ===
import { create } from 'zustand';
import axios from '../components/axiosConfig';

/**
 * Store para gestionar las pre-reservas y el flujo de pago-primero
 */
// FunciÃ³n para generar un cÃ³digo de seguimiento de exactamente 10 caracteres
const generateTrackingCode = () => {
  // Obtener fecha actual
  const now = new Date();
  
  // Extraer componentes de fecha (2 dÃ­gitos del aÃ±o, mes y dÃ­a)
  const year = now.getFullYear().toString().slice(2); // 2 dÃ­gitos
  const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 2 dÃ­gitos
  const day = now.getDate().toString().padStart(2, '0'); // 2 dÃ­gitos
  
  // Generar parte aleatoria (4 dÃ­gitos para completar 10 caracteres en total)
  const randomPart = Math.floor(1000 + Math.random() * 9000);
  
  // Construir cÃ³digo: YYMMDDXXXX (exactamente 10 caracteres)
  return `${year}${month}${day}${randomPart}`;
};

const usePreReservasStore = create((set, get) => ({
  preReserva: null,
  pagoEnProceso: null,
  loading: false,
  error: null,
  
  /**
   * Inicia el proceso de pago creando una pre-reserva y obteniendo los datos para el procesador de pago
   * @param {Object} datosReserva - Datos completos de la reserva
   * @param {string} metodoPago - MÃ©todo de pago seleccionado
   * @returns {Promise<Object>} - Datos para procesar el pago
   */
  iniciarProcesoPago: async (datosReserva, metodoPago) => {
    set({ loading: true, error: null });
    
    try {
      // Normalizar el mÃ©todo de pago para asegurar compatibilidad
      let metodoNormalizado;
      switch(metodoPago) {
        case 'transfer':
          metodoNormalizado = 'transferencia';
          break;
        case 'cash':
          metodoNormalizado = 'efectivo';
          break;
        case 'credit':
          metodoNormalizado = 'tarjeta_credito';
          break;
        case 'debit':
          metodoNormalizado = 'tarjeta_debito';
          break;
        default:
          metodoNormalizado = metodoPago;
      }
      
      // Formatear la fecha en formato YYYY-MM-DD
      if (datosReserva.fecha_reserva) {
        if (datosReserva.fecha_reserva instanceof Date) {
          datosReserva.fecha_reserva = datosReserva.fecha_reserva.toISOString().split('T')[0]; // Formato YYYY-MM-DD
        }
      }
      
      // Asegurarse de que datosReserva tenga hora_fin si tiene hora_inicio
      if (datosReserva.hora_inicio && !datosReserva.hora_fin) {
        // Convertir hora_inicio a formato correcto si es "tarde" o "maÃ±ana"
        let horaInicio = typeof datosReserva.hora_inicio === 'object' ?
          datosReserva.hora_inicio.value : datosReserva.hora_inicio;
          
        if (horaInicio === 'tarde') {
          horaInicio = '14:00:00';
        } else if (horaInicio === 'maÃ±ana' || horaInicio === 'manana') {
          horaInicio = '10:00:00';
        }
        
        // Calcular hora_fin (3 horas despuÃ©s de hora_inicio)
        const [horas, minutos, segundos] = horaInicio.split(':').map(Number);
        const horaFin = `${String(horas + 3).padStart(2, '0')}:${String(minutos).padStart(2, '0')}:${String(segundos).padStart(2, '0')}`;
        
        datosReserva.hora_inicio = horaInicio;
        datosReserva.hora_fin = horaFin;
      }
      
      // Convertir edad_festejado a nÃºmero si es string
      if (datosReserva.edad_festejado && typeof datosReserva.edad_festejado === 'string') {
        datosReserva.edad_festejado = parseInt(datosReserva.edad_festejado, 10);
      }
      
      // Combinar campos adicionales en comentarios
      let comentarios = '';
      if (datosReserva.sexo_festejado) {
        comentarios += `Sexo: ${datosReserva.sexo_festejado}. `;
        delete datosReserva.sexo_festejado;
      }
      if (datosReserva.color_favorito) {
        comentarios += `Color favorito: ${datosReserva.color_favorito}. `;
        delete datosReserva.color_favorito;
      }
      if (datosReserva.detalles_especiales) {
        comentarios += `Detalles especiales: ${datosReserva.detalles_especiales}`;
        delete datosReserva.detalles_especiales;
      }
      
      if (comentarios.trim()) {
        datosReserva.comentarios = comentarios.trim();
      }
      
      // Asegurarse de que haya un cÃ³digo de seguimiento
      if (!datosReserva.codigo_seguimiento) {
        datosReserva.codigo_seguimiento = generateTrackingCode();
      }
      
      const response = await axios.post('/api/pagos/iniciar', {
        datosReserva,
        metodo_pago: metodoNormalizado
      });
      
      set({
        preReserva: {
          ...datosReserva,
          id: response.data.pago.id_pre_reserva
        },
        pagoEnProceso: response.data.pago,
        loading: false
      });
      
      return response.data;
    } catch (error) {
      console.error('Error al iniciar el proceso de pago:', error);
      set({ 
        error: error.response?.data?.message || 'Error al iniciar el proceso de pago', 
        loading: false 
      });
      throw error;
    }
  },
  
  /**
   * Confirma un pago y completa la pre-reserva convirtiÃ©ndola en reserva
   * @param {Object} datosPago - Datos del procesador de pago (token, etc)
   * @returns {Promise<Object>} - Datos de la reserva creada
   */
  confirmarPago: async (datosPago) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axios.post('/api/pagos/confirmar', {
        id_pago: get().pagoEnProceso.id,
        ...datosPago
      });
      
      // Limpiar el estado despuÃ©s de confirmar exitosamente
      set({ loading: false, preReserva: null, pagoEnProceso: null });
      return response.data;
    } catch (error) {
      console.error('Error al confirmar el pago:', error);
      set({ 
        error: error.response?.data?.message || 'Error al confirmar el pago', 
        loading: false 
      });
      throw error;
    }
  },
  
  /**
   * Obtiene informaciÃ³n de un pago asociado a una pre-reserva
   * @param {number} idPreReserva - ID de la pre-reserva
   * @returns {Promise<Object>} - Datos del pago
   */
  obtenerPagoPorPreReserva: async (idPreReserva) => {
    set({ loading: true, error: null });
    
    try {
      const response = await axios.get(`/api/pagos/pre-reserva/${idPreReserva}`);
      set({ 
        pagoEnProceso: response.data.pago,
        loading: false 
      });
      return response.data.pago;
    } catch (error) {
      console.error('Error al obtener pago de pre-reserva:', error);
      set({ 
        error: error.response?.data?.message || 'Error al obtener informaciÃ³n del pago', 
        loading: false 
      });
      throw error;
    }
  },
  
  /**
   * Verifica si la pre-reserva actual ha expirado
   * @returns {boolean} - true si ha expirado
   */
  haExpirado: () => {
    const { pagoEnProceso } = get();
    if (!pagoEnProceso || !pagoEnProceso.expiracion) return false;
    
    return new Date() > new Date(pagoEnProceso.expiracion);
  },
  
  /**
   * Limpia los datos de pre-reserva y pago
   */
  limpiarPreReserva: () => {
    set({ preReserva: null, pagoEnProceso: null, error: null });
  }
}));

export default usePreReservasStore;\n\n

=== ./reservas/services/reservationService.js ===
import { axiosInstance } from '@/components/axiosConfig';

// Ruta base para las API de reservas
const API_PATH = '/api/reservas';

/**
 * Inicia el proceso de reserva obteniendo un ID provisional
 * @returns {Promise<Object>} Objeto con el ID de reserva provisional
 */
export const initiateReservation = async () => {
  try {
    const response = await axiosInstance.post(`${API_PATH}/initiate`);
    return response.data;
  } catch (error) {
    console.error('Error al iniciar el proceso de reserva:', error);
    throw error;
  }
};

/**
 * Procesa el pago de una reserva
 * @param {Object} paymentData Datos del pago
 * @param {number} paymentData.reservationId ID de la reserva
 * @param {number} paymentData.amount Monto del pago
 * @param {string} paymentData.paymentMethod MÃ©todo de pago
 * @returns {Promise<Object>} Resultado del procesamiento del pago
 */
export const processPayment = async ({ reservationId, amount, paymentMethod }) => {
  try {
    // Normalizar el mÃ©todo de pago para asegurar compatibilidad
    let metodoPagoNormalizado;
    
    // Verificar si el mÃ©todo de pago ya estÃ¡ normalizado
    if (['transferencia', 'efectivo', 'tarjeta_credito', 'tarjeta_debito'].includes(paymentMethod)) {
      metodoPagoNormalizado = paymentMethod;
    } else {
      // Normalizar desde valores en inglÃ©s
      switch(paymentMethod) {
        case 'transfer':
          metodoPagoNormalizado = 'transferencia';
          break;
        case 'cash':
          metodoPagoNormalizado = 'efectivo';
          break;
        case 'credit':
          metodoPagoNormalizado = 'tarjeta_credito';
          break;
        case 'debit':
          metodoPagoNormalizado = 'tarjeta_debito';
          break;
        default:
          metodoPagoNormalizado = 'transferencia'; // Valor por defecto
      }
    }
    
    const response = await axiosInstance.post('/api/pagos', {
      id_reserva: reservationId,
      monto: amount,
      fecha_pago: new Date().toISOString().split('T')[0],
      metodo_pago: metodoPagoNormalizado,
      estado: 'completado'
    });
    return response.data;
  } catch (error) {
    console.error('Error al procesar el pago:', error);
    throw error;
  }
};

/**
 * Confirma una reserva despuÃ©s de que el pago ha sido procesado
 * @param {Object} reservationData Datos completos de la reserva
 * @returns {Promise<Object>} Reserva confirmada
 */
export const confirmReservation = async (reservationData) => {
  try {
    // Verificar que el cÃ³digo de seguimiento estÃ© presente
    if (!reservationData.codigo_seguimiento || reservationData.codigo_seguimiento.length !== 10) {
      // Generar un cÃ³digo de seguimiento si no existe o no es vÃ¡lido
      reservationData.codigo_seguimiento = generateTrackingCode();
    }
    
    const response = await axiosInstance.post(`${API_PATH}/confirm`, reservationData);
    return response.data;
  } catch (error) {
    console.error('Error al confirmar la reserva:', error);
    throw error;
  }
};

/**
 * Genera un cÃ³digo de seguimiento de 10 caracteres
 * @returns {string} CÃ³digo de seguimiento
 */
const generateTrackingCode = () => {
  // Obtener fecha actual
  const now = new Date();
  
  // Extraer componentes de fecha (2 dÃ­gitos del aÃ±o, mes y dÃ­a)
  const year = now.getFullYear().toString().slice(2); // 2 dÃ­gitos
  const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 2 dÃ­gitos
  const day = now.getDate().toString().padStart(2, '0'); // 2 dÃ­gitos
  
  // Generar parte aleatoria (4 dÃ­gitos para completar 10 caracteres en total)
  const randomPart = Math.floor(1000 + Math.random() * 9000);
  
  // Construir cÃ³digo: YYMMDDXXXX (exactamente 10 caracteres)
  return `${year}${month}${day}${randomPart}`;
};

/**
 * Obtiene todas las reservas
 * @returns {Promise<Array>} Lista de reservas
 */
export const getAllReservations = async () => {
  try {
    const response = await axiosInstance.get(API_PATH);
    return response.data;
  } catch (error) {
    console.error('Error al obtener las reservas:', error);
    throw error;
  }
};

/**
 * Obtiene una reserva por su ID
 * @param {number} id ID de la reserva
 * @returns {Promise<Object>} Datos de la reserva
 */
export const getReservationById = async (id) => {
  try {
    const response = await axiosInstance.get(`${API_PATH}/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error al obtener la reserva con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Obtiene las reservas del usuario autenticado
 * @returns {Promise<Array>} Lista de reservas del usuario
 */
export const getUserReservations = async () => {
  try {
    const response = await axiosInstance.get(`${API_PATH}/user`);
    return response.data;
  } catch (error) {
    console.error('Error al obtener las reservas del usuario:', error);
    throw error;
  }
};

/**
 * Actualiza una reserva existente
 * @param {number} id ID de la reserva
 * @param {Object} reservationData Datos actualizados de la reserva
 * @returns {Promise<Object>} Reserva actualizada
 */
export const updateReservation = async (id, reservationData) => {
  try {
    const response = await axiosInstance.put(`${API_PATH}/${id}`, reservationData);
    return response.data;
  } catch (error) {
    console.error(`Error al actualizar la reserva con ID ${id}:`, error);
    throw error;
  }
};

/**
 * Cancela una reserva
 * @param {number} id ID de la reserva
 * @returns {Promise<Object>} Resultado de la cancelaciÃ³n
 */
export const cancelReservation = async (id) => {
  try {
    const response = await axiosInstance.delete(`${API_PATH}/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error al cancelar la reserva con ID ${id}:`, error);
    throw error;
  }
};

export default {
  initiateReservation,
  processPayment,
  confirmReservation,
  getAllReservations,
  getReservationById,
  getUserReservations,
  updateReservation,
  cancelReservation
};\n\n

=== ./reservas/services/reservationsStore.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'
import * as socketService from '@/services/socketService'

const useReservationsStore = create((set, get) => ({
  // Estado
  reservations: [],
  selectedReservation: null,
  
  // Acciones
  fetchReservations: async () => {
    try {
      const response = await axiosInstance.get('/reservas')
      set({ reservations: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar reservaciones:', error)
      toast.error('Error al cargar las reservaciones')
      throw error
    }
  },
  
  addReservation: async (reservationData) => {
    try {
      // Asegurarse de que id_usuario sea un nÃºmero
      if (reservationData.id_usuario) {
        reservationData.id_usuario = Number(reservationData.id_usuario)
      }
      
      const response = await axiosInstance.post('/reservas', reservationData)
      set(state => ({ reservations: [...state.reservations, response.data] }))
      toast.success('Reserva creada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al crear reservaciÃ³n:', error)
      toast.error('Error al crear la reservaciÃ³n')
      throw error
    }
  },
  
  updateReservation: async (id, reservationData) => {
    try {
      // Asegurarse de que id_usuario sea un nÃºmero
      if (reservationData.id_usuario) {
        reservationData.id_usuario = Number(reservationData.id_usuario)
      }
      
      const response = await axiosInstance.put(`/reservas/${id}`, reservationData)
      set(state => ({
        reservations: state.reservations.map(reservation => 
          reservation.id === id ? { ...reservation, ...response.data } : reservation
        )
      }))
      toast.success('Reserva actualizada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar reservaciÃ³n:', error)
      toast.error('Error al actualizar la reservaciÃ³n')
      throw error
    }
  },
  
  deleteReservation: async (id) => {
    try {
      await axiosInstance.delete(`/reservas/${id}`)
      set(state => ({
        reservations: state.reservations.filter(reservation => reservation.id !== id)
      }))
      toast.success('Reserva desactivada con Ã©xito')
    } catch (error) {
      console.error('Error al desactivar reservaciÃ³n:', error)
      toast.error('Error al desactivar la reservaciÃ³n')
      throw error
    }
  },
  
  setSelectedReservation: (reservation) => set({ selectedReservation: reservation }),
  
  updateReservationStatus: async (id, newStatus) => {
    try {
      const response = await axiosInstance.put(`/reservas/${id}/status`, { estado: newStatus })
      set(state => ({
        reservations: state.reservations.map(reservation => 
          reservation.id === id ? { ...reservation, estado: newStatus } : reservation
        )
      }))
      toast.success('Estado de la reserva actualizado exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar estado de la reservaciÃ³n:', error)
      toast.error('Error al actualizar el estado de la reservaciÃ³n')
      throw error
    }
  },
  
  // Socket.io integration
  initSocketListeners: () => {
    const socket = socketService.initSocket()
    
    socketService.subscribe('reserva_creada', (nuevaReserva) => {
      console.log('Reserva creada recibida vÃ­a Socket.IO:', nuevaReserva)
      set(state => {
        // Verificar si la reserva ya existe para evitar duplicados
        const existe = state.reservations.some(r => r.id === nuevaReserva.id)
        if (!existe) {
          toast.success(`Nueva reserva #${nuevaReserva.id} creada`)
          return { reservations: [...state.reservations, nuevaReserva] }
        }
        return state
      })
    })
    
    socketService.subscribe('reserva_actualizada', (reservaActualizada) => {
      console.log('Reserva actualizada recibida vÃ­a Socket.IO:', reservaActualizada)
      set(state => ({ 
        reservations: state.reservations.map(reserva => 
          reserva.id === reservaActualizada.id ? reservaActualizada : reserva
        )
      }))
    })
    
    socketService.subscribe('reserva_eliminada', (data) => {
      console.log('Reserva eliminada recibida vÃ­a Socket.IO:', data)
      set(state => ({ 
        reservations: state.reservations.filter(reserva => reserva.id !== data.id)
      }))
    })
    
    socketService.subscribe('fechas_bloqueadas', (data) => {
      console.log('Fechas bloqueadas recibidas vÃ­a Socket.IO:', data)
      if (data.reservas && Array.isArray(data.reservas)) {
        set(state => {
          const nuevasReservas = [...state.reservations]
          data.reservas.forEach(nuevaReserva => {
            if (!nuevasReservas.some(r => r.id === nuevaReserva.id)) {
              nuevasReservas.push(nuevaReserva)
            }
          })
          return { reservations: nuevasReservas }
        })
      } else {
        // Si no tenemos datos completos, es mÃ¡s seguro recargar todo
        get().fetchReservations()
      }
    })
    
    return () => socketService.disconnect()
  },
  
  // Selectores
  getFilteredReservations: (search) => {
    const { reservations } = get()
    return reservations.filter(
      reservation =>
        reservation.id.toString().includes(search) ||
        (reservation.nombre_festejado &&
          reservation.nombre_festejado
            .toLowerCase()
            .includes(search.toLowerCase()))
    )
  },
  
  getReservationsByMonth: (month, year) => {
    const { reservations } = get()
    return reservations.filter(reservation => {
      // Verificar que la reserva y el campo de fecha existen
      if (!reservation || !reservation.fecha_reserva) return false
      
      // Convertir a objeto Date
      const reservationDate = new Date(reservation.fecha_reserva)
      
      // Asegurarse de que la fecha es vÃ¡lida
      if (isNaN(reservationDate.getTime())) return false
      
      // Comparar tanto mes como aÃ±o
      return reservationDate.getMonth() === month && 
             reservationDate.getFullYear() === year
    })
  },
  
  // FunciÃ³n para desuscribirse de todos los eventos de socket
  cleanupSocketListeners: () => {
    // Desuscribirse de todos los eventos de socket
    socketService.unsubscribe('reserva_creada');
    socketService.unsubscribe('reserva_actualizada');
    socketService.unsubscribe('reserva_eliminada');
    socketService.unsubscribe('fechas_bloqueadas');
  }
}))

export default useReservationsStore\n\n


