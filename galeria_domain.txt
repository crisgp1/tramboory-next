=== ./galeria/components/index.js ===
// Exportar todos los componentes de galeria/components
\n\n

=== ./galeria/hooks/index.js ===
// Exportar todos los componentes de galeria/hooks
\n\n

=== ./galeria/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n

=== ./galeria/pages/GaleriaManagement.jsx ===
import React, { useState, useRef, useEffect } from 'react';
import { FiImage, FiInfo, FiPlus } from 'react-icons/fi';
import GaleriaTable from './GaleriaTable.jsx';
import GaleriaModal from './GaleriaModal.jsx';
import * as galeriaService from '@domains/galeria/services/galeriaService';

const GaleriaManagement = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [notification, setNotification] = useState(null);
  const [isMobile, setIsMobile] = useState(false);
  
  // Referencia a la tabla de galerÃ­a usando useRef
  const galeriaTableRef = useRef(null);

  // Detectar si es dispositivo mÃ³vil
  useEffect(() => {
    const checkIfMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkIfMobile();
    window.addEventListener('resize', checkIfMobile);
    
    return () => {
      window.removeEventListener('resize', checkIfMobile);
    };
  }, []);

  // Mostrar notificaciÃ³n temporal
  const showNotification = (message, type = 'success') => {
    setNotification({ message, type });
    setTimeout(() => {
      setNotification(null);
    }, 5000);
  };

  // Abrir modal para crear nueva imagen
  const handleNewClick = () => {
    setEditingItem(null);
    setIsModalOpen(true);
  };

  // Abrir modal para editar imagen existente
  const handleEditClick = (item) => {
    setEditingItem(item);
    setIsModalOpen(true);
  };

  // Cerrar modal
  const handleCloseModal = () => {
    setIsModalOpen(false);
    setEditingItem(null);
  };

  // Guardar nueva imagen o actualizar existente
  const handleSave = async (formData, additionalImages = []) => {
    try {
      setIsLoading(true);
      let message = '';
      
      if (editingItem) {
        // Actualizar imagen existente
        await galeriaService.updateImagenCarousel(editingItem.id, formData);
        message = 'Imagen actualizada correctamente';
      } else {
        // Crear nueva imagen principal
        await galeriaService.createImagenCarousel(formData);
        
        // Si hay imÃ¡genes adicionales, guardarlas tambiÃ©n
        if (additionalImages && additionalImages.length > 0) {
          // Procesamos las imÃ¡genes adicionales en paralelo
          const promises = additionalImages.map(imagen => 
            galeriaService.createImagenCarousel({
              imagen_url: imagen.url,
              cloudinary_id: imagen.cloudinary_id,
              descripcion: formData.descripcion,
              activo: formData.activo,
              es_promocion: false, // Por defecto, solo la primera se marca como promociÃ³n
              orden: formData.orden
            })
          );
          
          await Promise.all(promises);
          message = `${additionalImages.length + 1} imÃ¡genes agregadas correctamente`;
        } else {
          message = 'Imagen agregada correctamente';
        }
      }
      
      // Cerrar modal y limpiar estado
      setIsModalOpen(false);
      setEditingItem(null);
      
      // Mostrar notificaciÃ³n de Ã©xito
      showNotification(message);
      
      // Forzar recarga de tabla usando la referencia de React
      console.log('Intentando recargar imÃ¡genes...');
      if (galeriaTableRef.current && typeof galeriaTableRef.current.loadImagenes === 'function') {
        console.log('Recargando imÃ¡genes de la galerÃ­a');
        galeriaTableRef.current.loadImagenes();
      } else {
        console.warn('No se pudo acceder al mÃ©todo loadImagenes en la referencia de la tabla');
      }
    } catch (error) {
      console.error('Error al guardar la(s) imagen(es):', error);
      showNotification(
        `Error al ${editingItem ? 'actualizar' : 'guardar'} la(s) imagen(es). ${error.message || 'Intente nuevamente'}`,
        'error'
      );
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full max-w-full px-2 sm:px-4 py-4 sm:py-8">
      {/* Encabezado */}
      <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4 sm:mb-6 gap-3">
        <div className="flex-1">
          <h1 className="text-xl sm:text-2xl font-bold text-gray-800">GestiÃ³n de GalerÃ­a</h1>
          <p className="text-sm sm:text-base text-gray-600 mt-1">
            Administra las imÃ¡genes que aparecen en el carrusel de la pÃ¡gina principal
          </p>
        </div>
        <div>
          <button
            onClick={handleNewClick}
            className="w-full sm:w-auto flex items-center justify-center px-3 sm:px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition duration-200 shadow-sm"
            disabled={isLoading}
          >
            {isMobile ? (
              <FiPlus className="mr-1" />
            ) : (
              <FiImage className="mr-2" />
            )}
            {isMobile ? 'Agregar' : 'Agregar Imagen'}
          </button>
        </div>
      </div>

      {/* NotificaciÃ³n */}
      {notification && (
        <div
          className={`mb-4 p-3 sm:p-4 rounded-md ${
            notification.type === 'error' ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'
          }`}
        >
          <div className="flex items-center">
            <FiInfo className="mr-2 flex-shrink-0" />
            <span className="text-sm sm:text-base">{notification.message}</span>
          </div>
        </div>
      )}

      {/* Contenido principal */}
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <div className="p-2 sm:p-4 md:p-6">
          <GaleriaTable
            onEdit={handleEditClick}
            onNewClick={handleNewClick}
            ref={galeriaTableRef}
          />
        </div>
      </div>

      {/* Modal para crear/editar imagen */}
      <GaleriaModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onSave={handleSave}
        editingItem={editingItem}
      />
    </div>
  );
};

export default GaleriaManagement;\n\n

=== ./galeria/pages/GaleriaModal.jsx ===
import React, { useState, useEffect, useCallback } from 'react';
import { FiUpload, FiLink, FiAlignLeft, FiImage, FiX, FiCheck, FiPlusCircle, FiCamera, FiToggleRight, FiStar, FiCopy } from 'react-icons/fi';
import Modal from '@shared/components/Modal';
import { uploadImageToCloudinary, uploadMultipleImagesToCloudinary } from '@domains/galeria/services/galeriaService';

const GaleriaModal = ({ isOpen, onClose, onSave, editingItem }) => {
  const [formData, setFormData] = useState({
    imagen_url: '',
    cloudinary_id: '',
    descripcion: '',
    activo: true,
    orden: 0,
    es_promocion: false
  });
  const [imagePreview, setImagePreview] = useState('');
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [filesSelected, setFilesSelected] = useState([]);
  const [error, setError] = useState('');
  const [isDragging, setIsDragging] = useState(false);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const [additionalImageResults, setAdditionalImageResults] = useState([]);

  // Inicializar el formulario con los datos del item a editar
  useEffect(() => {
    if (editingItem) {
      setFormData({
        imagen_url: editingItem.imagen_url || '',
        cloudinary_id: editingItem.cloudinary_id || '',
        descripcion: editingItem.descripcion || '',
        activo: editingItem.activo !== undefined ? editingItem.activo : true,
        orden: editingItem.orden || 0,
        es_promocion: editingItem.es_promocion || false
      });
      setImagePreview(editingItem.imagen_url || '');
      setFilesSelected([]);
    } else {
      resetForm();
    }
  }, [editingItem, isOpen]);

  // Resetear el formulario
  const resetForm = useCallback(() => {
    setFormData({
      imagen_url: '',
      cloudinary_id: '',
      descripcion: '',
      activo: true,
      orden: 0,
      es_promocion: false
    });
    setImagePreview('');
    setFilesSelected([]);
    setSelectedImageIndex(0);
    setError('');
    setUploadProgress(0);
    setUploadSuccess(false);
  }, []);

  // Manejar cambios en los campos del formulario
  const handleChange = useCallback((e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));

    // Actualizar la previsualizaciÃ³n si es la URL de la imagen
    if (name === 'imagen_url') {
      setImagePreview(value);
    }
  }, []);

  // Manejar la selecciÃ³n de archivos para subir
  const handleFileChange = useCallback((e) => {
    const newFiles = Array.from(e.target.files);
    if (newFiles.length > 0) {
      setFilesSelected(prev => [...prev, ...newFiles]);
      
      // Crear URLs para previsualizar las imÃ¡genes
      const previewUrl = URL.createObjectURL(newFiles[0]);
      setImagePreview(previewUrl);
      setSelectedImageIndex(filesSelected.length);
    }
  }, [filesSelected.length]);

  // Manejar eventos de arrastrar y soltar
  const handleDragEnter = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
  }, []);

  const handleDragOver = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
  }, []);

  const handleDrop = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
    
    const newFiles = Array.from(e.dataTransfer.files).filter(
      file => file.type.startsWith('image/')
    );

    if (newFiles.length === 0) {
      setError('Por favor, arrastra solo archivos de imagen.');
      return;
    }

    setFilesSelected(prev => {
      const updatedFiles = [...prev, ...newFiles];
      
      // Crear URL para previsualizar la primera imagen nueva
      if (newFiles.length > 0) {
        const previewUrl = URL.createObjectURL(newFiles[0]);
        setImagePreview(previewUrl);
        setSelectedImageIndex(prev.length);
      }
      
      return updatedFiles;
    });
  }, []);

  // Cambiar la imagen seleccionada para vista previa
  const handleSelectImage = useCallback((index) => {
    if (filesSelected[index]) {
      const previewUrl = URL.createObjectURL(filesSelected[index]);
      setImagePreview(previewUrl);
      setSelectedImageIndex(index);
    }
  }, [filesSelected]);

  // Eliminar una imagen de la selecciÃ³n
  const handleRemoveFile = useCallback((index) => {
    setFilesSelected(prev => {
      const updatedFiles = [...prev];
      updatedFiles.splice(index, 1);
      
      if (updatedFiles.length === 0) {
        setImagePreview('');
        setSelectedImageIndex(-1);
      } else if (selectedImageIndex >= updatedFiles.length) {
        // Si eliminamos la imagen seleccionada y era la Ãºltima, mostramos la nueva Ãºltima
        const newIndex = Math.max(0, updatedFiles.length - 1);
        const previewUrl = URL.createObjectURL(updatedFiles[newIndex]);
        setImagePreview(previewUrl);
        setSelectedImageIndex(newIndex);
      } else if (selectedImageIndex === index) {
        // Si eliminamos la imagen seleccionada, mostramos la que estÃ¡ en la misma posiciÃ³n
        const previewUrl = URL.createObjectURL(updatedFiles[selectedImageIndex]);
        setImagePreview(previewUrl);
      }
      
      return updatedFiles;
    });
  }, [selectedImageIndex]);

  // Simular progreso de carga
  const simulateProgressAnimation = useCallback(() => {
    setUploadProgress(0);
    const interval = setInterval(() => {
      setUploadProgress(prev => {
        if (prev >= 95) {
          clearInterval(interval);
          return 95;
        }
        return prev + (Math.random() * 10);
      });
    }, 200);
    return interval;
  }, []);

  // Manejar la subida de imÃ¡genes a Cloudinary
  const handleUpload = useCallback(async () => {
    if (filesSelected.length === 0) {
      setError('Por favor selecciona al menos una imagen para subir.');
      return;
    }

    try {
      setUploading(true);
      setError('');
      setUploadSuccess(false);
      
      // Iniciamos animaciÃ³n de progreso
      const progressInterval = simulateProgressAnimation();

      let result;
      if (filesSelected.length === 1) {
        // Si hay un solo archivo, usamos la funciÃ³n original
        result = await uploadImageToCloudinary(filesSelected[0]);
        
        setFormData(prev => ({
          ...prev,
          imagen_url: result.url,
          cloudinary_id: result.cloudinary_id
        }));
        
        setImagePreview(result.url);
      } else {
        // Si hay mÃºltiples archivos, usamos la funciÃ³n de carga mÃºltiple
        const results = await uploadMultipleImagesToCloudinary(filesSelected);
        result = results[0]; // Usamos el primero para el formulario actual
        
        setFormData(prev => ({
          ...prev,
          imagen_url: result.url,
          cloudinary_id: result.cloudinary_id
        }));
        
        setImagePreview(result.url);
        
        // Guardar las imÃ¡genes adicionales para procesarlas al guardar
        if (results.length > 1) {
          // Guardamos todas las imÃ¡genes adicionales excepto la primera que ya se usÃ³
          const additionalImages = results.slice(1).map(img => ({
            url: img.url,
            cloudinary_id: img.cloudinary_id
          }));
          setAdditionalImageResults(additionalImages);
          console.log(`Se subieron ${results.length} imÃ¡genes. ${additionalImages.length} adicionales disponibles.`);
        }
      }
      
      clearInterval(progressInterval);
      setUploadProgress(100);
      setUploadSuccess(true);
      setFilesSelected([]);
      
    } catch (err) {
      console.error('Error al subir la(s) imagen(es):', err);
      setError('Error al subir la(s) imagen(es). Por favor, intenta de nuevo.');
      setUploadProgress(0);
    } finally {
      setTimeout(() => {
        setUploading(false);
      }, 500);
    }
  }, [filesSelected, simulateProgressAnimation]);

  // Manejar el envÃ­o del formulario
  const handleSubmit = useCallback((e) => {
    e.preventDefault();
    
    // ValidaciÃ³n bÃ¡sica
    if (!formData.imagen_url) {
      setError('La URL de la imagen es requerida.');
      return;
    }
    
    // Enviar datos al componente padre, incluyendo imÃ¡genes adicionales
    onSave(formData, additionalImageResults);
    
    // Limpiar estado de imÃ¡genes adicionales despuÃ©s de guardar
    setAdditionalImageResults([]);
  }, [formData, onSave, additionalImageResults]);

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={editingItem ? 'Editar Imagen' : 'Agregar Nueva Imagen'}
    >
      <form onSubmit={handleSubmit} className="space-y-8 max-h-[80vh] overflow-y-auto px-1 py-2">
        {/* Mensajes de error */}
        {error && (
          <div className="p-4 rounded-lg bg-red-50 border-l-4 border-red-500 shadow-sm animate-fadeIn">
            <div className="flex items-start">
              <div className="flex-shrink-0">
                <FiX className="h-5 w-5 text-red-500" />
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-red-800">{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Layout de dos columnas en pantallas medianas y grandes */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Columna izquierda - Subida y previsualizaciÃ³n */}
          <div className="space-y-6">
            {/* Tarjeta de subida de imÃ¡genes */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              <div className="p-4 bg-gradient-to-r from-blue-50 to-indigo-50 border-b">
                <h3 className="text-sm font-semibold text-gray-800 flex items-center">
                  <FiCamera className="mr-2 text-blue-500" /> 
                  Subir ImÃ¡genes
                </h3>
              </div>
              
              {/* Zona de arrastrar y soltar */}
              <div className="p-4">
                <div 
                  className={`border-2 border-dashed rounded-lg p-5 transition-all duration-300 ease-in-out
                    ${isDragging 
                      ? 'border-blue-500 bg-blue-50 shadow-inner' 
                      : 'border-gray-300 hover:border-blue-400 bg-white'
                    }`}
                  onDragEnter={handleDragEnter}
                  onDragOver={handleDragOver}
                  onDragLeave={handleDragLeave}
                  onDrop={handleDrop}
                >
                  <div className="text-center py-4">
                    <div className="mx-auto h-14 w-14 rounded-full bg-blue-100 flex items-center justify-center mb-3">
                      <FiUpload className="h-6 w-6 text-blue-600" />
                    </div>
                    <h3 className="mt-2 text-sm font-medium text-gray-900">
                      {isDragging 
                        ? 'Suelta para aÃ±adir imÃ¡genes' 
                        : 'Arrastra imÃ¡genes aquÃ­'
                      }
                    </h3>
                    <p className="mt-1 text-xs text-gray-500 max-w-xs mx-auto">
                      Soporta JPG, PNG y GIF hasta 10MB
                    </p>
                    <div className="mt-4">
                      <label className="inline-flex items-center justify-center px-4 py-2 rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 cursor-pointer transition-all duration-200 transform hover:scale-105">
                        <FiPlusCircle className="mr-2" />
                        Seleccionar imÃ¡genes
                        <input
                          type="file"
                          className="hidden"
                          accept="image/*"
                          multiple
                          onChange={handleFileChange}
                        />
                      </label>
                    </div>
                  </div>
                </div>
                
                {/* BotÃ³n de carga */}
                <button
                  type="button"
                  onClick={handleUpload}
                  disabled={filesSelected.length === 0 || uploading}
                  className={`mt-4 w-full flex items-center justify-center px-4 py-2 rounded-md shadow-sm text-sm font-medium transition-all duration-200 ${
                    filesSelected.length === 0 || uploading
                      ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                      : uploadSuccess 
                        ? 'bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:from-green-600 hover:to-emerald-700 transform hover:scale-[1.02]'
                        : 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white hover:from-blue-600 hover:to-indigo-700 transform hover:scale-[1.02]'
                  }`}
                >
                  {uploading ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Procesando imÃ¡genes...
                    </>
                  ) : uploadSuccess ? (
                    <>
                      <FiCheck className="mr-2" />
                      Subida completada
                    </>
                  ) : (
                    <>
                      <FiUpload className="mr-2" />
                      {filesSelected.length > 1 ? `Subir ${filesSelected.length} imÃ¡genes` : 'Subir imagen'}
                    </>
                  )}
                </button>
                
                {/* Barra de progreso */}
                {(uploading || uploadProgress > 0) && (
                  <div className="mt-3 relative">
                    <div className="overflow-hidden h-2 text-xs flex rounded-full bg-blue-100">
                      <div 
                        style={{ width: `${uploadProgress}%` }} 
                        className={`shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center transition-all duration-300 ease-out ${
                          uploadSuccess ? 'bg-gradient-to-r from-green-400 to-emerald-500' : 'bg-gradient-to-r from-blue-400 to-indigo-500'
                        }`}
                      ></div>
                    </div>
                    <div className="flex justify-between mt-1">
                      <span className="text-xs text-gray-500">Progreso</span>
                      <span className="text-xs font-medium text-gray-800">{Math.round(uploadProgress)}%</span>
                    </div>
                  </div>
                )}
              </div>
            </div>
          
            {/* PrevisualizaciÃ³n de la imagen */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              <div className="p-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b">
                <h3 className="text-sm font-semibold text-gray-800 flex items-center">
                  <FiImage className="mr-2 text-gray-600" /> 
                  PrevisualizaciÃ³n
                </h3>
              </div>
              <div className="p-4">
                <div className="aspect-w-16 aspect-h-9 overflow-hidden rounded-lg shadow-inner bg-gray-100">
                  {imagePreview ? (
                    <img 
                      src={imagePreview} 
                      alt="PrevisualizaciÃ³n" 
                      className="w-full h-full object-contain transition-all duration-300 ease-in-out hover:scale-105"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center">
                      <div className="text-center p-4">
                        <div className="mx-auto h-14 w-14 rounded-full bg-gray-200 flex items-center justify-center mb-2">
                          <FiImage className="h-6 w-6 text-gray-400" />
                        </div>
                        <p className="text-sm text-gray-400">Sin previsualizaciÃ³n disponible</p>
                      </div>
                    </div>
                  )}
                </div>
                
                {/* Indicador de imÃ¡genes seleccionadas */}
                {filesSelected.length > 0 && (
                  <div className="mt-3 bg-blue-50 p-2 rounded-md border border-blue-100">
                    <p className="text-xs text-blue-700 text-center">
                      {filesSelected.length === 1 
                        ? '1 imagen seleccionada'
                        : `${filesSelected.length} imÃ¡genes seleccionadas â€¢ Mostrando ${selectedImageIndex + 1} de ${filesSelected.length}`
                      }
                    </p>
                  </div>
                )}

                {/* Miniaturas de imÃ¡genes seleccionadas */}
                {filesSelected.length > 1 && (
                  <div className="mt-3">
                    <div className="flex overflow-x-auto space-x-2 pb-2 px-1">
                      {filesSelected.map((file, index) => (
                        <div 
                          key={index} 
                          className={`relative flex-shrink-0 group cursor-pointer
                            ${selectedImageIndex === index 
                              ? 'ring-2 ring-blue-500 transform scale-105' 
                              : 'ring-1 ring-gray-200 opacity-70 hover:opacity-100'
                            }`}
                          onClick={() => handleSelectImage(index)}
                        >
                          <div className="h-14 w-14 overflow-hidden rounded-md">
                            <img
                              src={URL.createObjectURL(file)}
                              alt={`Miniatura ${index + 1}`}
                              className="h-full w-full object-cover"
                            />
                          </div>
                          <button
                            type="button"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleRemoveFile(index);
                            }}
                            className="absolute -top-1 -right-1 bg-white rounded-full p-0.5 shadow-md border border-red-100 text-red-500 transition-opacity hover:bg-red-500 hover:text-white hover:border-red-500"
                          >
                            <FiX size={12} />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          {/* Columna derecha - InformaciÃ³n y configuraciÃ³n */}
          <div className="space-y-6">
            {/* URL de la imagen */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              <div className="p-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b">
                <h3 className="text-sm font-semibold text-gray-800 flex items-center">
                  <FiLink className="mr-2 text-gray-600" /> 
                  URL de la Imagen
                </h3>
              </div>
              <div className="p-4">
                <div className="relative">
                  <input
                    id="imagen_url"
                    name="imagen_url"
                    type="text"
                    value={formData.imagen_url}
                    onChange={handleChange}
                    className="block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    placeholder="https://res.cloudinary.com/..."
                  />
                  {formData.imagen_url && (
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3">
                      <button
                        type="button"
                        onClick={() => navigator.clipboard.writeText(formData.imagen_url)}
                        className="text-gray-400 hover:text-gray-600"
                        title="Copiar URL"
                      >
                        <FiCopy size={16} />
                      </button>
                    </div>
                  )}
                </div>
                <p className="mt-2 text-xs text-gray-500">
                  Esta URL se actualiza automÃ¡ticamente al subir una imagen
                </p>
              </div>
            </div>
            
            {/* DescripciÃ³n */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              <div className="p-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b">
                <h3 className="text-sm font-semibold text-gray-800 flex items-center">
                  <FiAlignLeft className="mr-2 text-gray-600" /> 
                  DescripciÃ³n
                </h3>
              </div>
              <div className="p-4">
                <textarea
                  id="descripcion"
                  name="descripcion"
                  value={formData.descripcion}
                  onChange={handleChange}
                  rows="3"
                  className="block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                  placeholder="Agrega una descripciÃ³n para esta imagen..."
                />
              </div>
            </div>
            
            {/* Estado y configuraciÃ³n */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              <div className="p-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b">
                <h3 className="text-sm font-semibold text-gray-800 flex items-center">
                  <FiToggleRight className="mr-2 text-gray-600" /> 
                  ConfiguraciÃ³n
                </h3>
              </div>
              <div className="p-4">
                <div className="space-y-4">
                  {/* Estado (activo/inactivo) */}
                  <div className="flex items-center justify-between p-3 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg transition-all hover:shadow-sm">
                    <div className="flex items-center">
                      <div className="h-9 w-9 rounded-full bg-blue-100 flex items-center justify-center">
                        <FiCheck className={`h-5 w-5 ${formData.activo ? 'text-blue-600' : 'text-gray-400'}`} />
                      </div>
                      <div className="ml-3">
                        <label htmlFor="activo" className="block text-sm font-medium text-gray-700">
                          Imagen activa
                        </label>
                        <span className="text-xs text-gray-500">
                          Determina si la imagen se mostrarÃ¡ en el sitio
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center">
                      <div 
                        className={`relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 transition-colors ease-in-out duration-200 focus:outline-none ${
                          formData.activo 
                            ? 'bg-blue-600 border-blue-600' 
                            : 'bg-gray-200 border-gray-200'
                        }`}
                      >
                        <span 
                          className={`inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition ease-in-out duration-200 ${
                            formData.activo ? 'translate-x-5' : 'translate-x-0'
                          }`} 
                        />
                        <input
                          id="activo"
                          name="activo"
                          type="checkbox"
                          checked={formData.activo}
                          onChange={handleChange}
                          className="absolute opacity-0 h-0 w-0"
                        />
                      </div>
                    </div>
                  </div>
                  
                  {/* PromociÃ³n */}
                  <div className="flex items-center justify-between p-3 bg-gradient-to-r from-yellow-50 to-yellow-100 rounded-lg transition-all hover:shadow-sm">
                    <div className="flex items-center">
                      <div className="h-9 w-9 rounded-full bg-yellow-100 flex items-center justify-center">
                        <FiStar className={`h-5 w-5 ${formData.es_promocion ? 'text-yellow-600' : 'text-gray-400'}`} />
                      </div>
                      <div className="ml-3">
                        <label htmlFor="es_promocion" className="block text-sm font-medium text-gray-700">
                          PromociÃ³n destacada
                        </label>
                        <span className="text-xs text-gray-500">
                          Destaca esta imagen en la secciÃ³n de promociones
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center">
                      <div 
                        className={`relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 transition-colors ease-in-out duration-200 focus:outline-none ${
                          formData.es_promocion 
                            ? 'bg-yellow-500 border-yellow-500' 
                            : 'bg-gray-200 border-gray-200'
                        }`}
                      >
                        <span 
                          className={`inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition ease-in-out duration-200 ${
                            formData.es_promocion ? 'translate-x-5' : 'translate-x-0'
                          }`} 
                        />
                        <input
                          id="es_promocion"
                          name="es_promocion"
                          type="checkbox"
                          checked={formData.es_promocion}
                          onChange={handleChange}
                          className="absolute opacity-0 h-0 w-0"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Botones de acciÃ³n */}
        <div className="sticky bottom-0 bg-white pt-3 pb-1 border-t border-gray-200 mt-6 -mx-6 px-6">
          <div className="flex flex-col sm:flex-row-reverse sm:justify-between sm:space-x-3 sm:space-x-reverse space-y-3 sm:space-y-0">
            <button
              type="submit"
              className="w-full sm:w-auto inline-flex justify-center items-center px-6 py-2.5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200 transform hover:scale-[1.02]"
            >
              {editingItem ? 'Actualizar imagen' : 'Guardar imagen'}
            </button>
            <button
              type="button"
              onClick={onClose}
              className="w-full sm:w-auto inline-flex justify-center items-center px-6 py-2.5 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-300 transition-all duration-200"
            >
              Cancelar
            </button>
          </div>
        </div>
      </form>
    </Modal>
  );
};

export default GaleriaModal;\n\n

=== ./galeria/pages/GaleriaTable.jsx ===
import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';
import { FiEdit, FiTrash2, FiEye, FiImage, FiArrowUp, FiArrowDown, FiLink, FiCopy, FiCheck, FiAlertCircle, FiX, FiMenu } from 'react-icons/fi';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import * as galeriaService from '@shared/services/galeriaService';
import { AdvancedImage } from '@cloudinary/react';
import { Cloudinary } from '@cloudinary/url-gen';
import { fill } from '@cloudinary/url-gen/actions/resize';
import { autoGravity } from '@cloudinary/url-gen/qualifiers/gravity';
import { auto } from '@cloudinary/url-gen/qualifiers/quality';
import { format } from '@cloudinary/url-gen/actions/delivery';
import { auto as autoFormat } from '@cloudinary/url-gen/qualifiers/format';
import { contrast } from '@cloudinary/url-gen/actions/adjust';

const GaleriaTable = forwardRef(({ onEdit, onNewClick }, ref) => {
  const [imagenes, setImagenes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [previewImage, setPreviewImage] = useState(null);
  const [cloudinaryImages, setCloudinaryImages] = useState({});
  const [imageErrors, setImageErrors] = useState({});
  const [isMobile, setIsMobile] = useState(false);
  const cloudinaryRef = useRef(null);
  const tooltipTimeout = useRef(null);
  
  // Exponer el mÃ©todo loadImagenes a travÃ©s de la referencia
  useImperativeHandle(ref, () => ({
    loadImagenes
  }));

  // Detectar si es dispositivo mÃ³vil
  useEffect(() => {
    const checkIfMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkIfMobile();
    window.addEventListener('resize', checkIfMobile);
    
    return () => {
      window.removeEventListener('resize', checkIfMobile);
    };
  }, []);

  // Inicializar Cloudinary
  useEffect(() => {
    const cloudName = import.meta.env.VITE_CLOUDINARY_CLOUD_NAME || 'dswklswqw';
    cloudinaryRef.current = new Cloudinary({
      cloud: { cloudName }
    });
  }, []);

  // Cargar las imÃ¡genes al montar el componente
  useEffect(() => {
    loadImagenes();
  }, []);

  // Procesar las imÃ¡genes de Cloudinary
  useEffect(() => {
    if (!cloudinaryRef.current || imagenes.length === 0) return;
    
    const newCloudinaryImages = {};
    const newImageErrors = {};
    
    imagenes.forEach(imagen => {
      try {
        if (!imagen.imagen_url) {
          newImageErrors[imagen.id] = "URL de imagen no disponible";
          return;
        }
        
        const cldImg = getCloudinaryImage(imagen.imagen_url);
        if (cldImg) {
          newCloudinaryImages[imagen.id] = cldImg;
        } else {
          newImageErrors[imagen.id] = "Error al procesar la imagen";
        }
      } catch (err) {
        console.error(`Error procesando imagen ${imagen.id}:`, err);
        newImageErrors[imagen.id] = "Error al procesar la imagen";
      }
    });
    
    setCloudinaryImages(newCloudinaryImages);
    setImageErrors(newImageErrors);
  }, [imagenes]);
  
  // FunciÃ³n para procesar URLs de Cloudinary
  const getCloudinaryImage = (publicId) => {
    if (!publicId || typeof publicId !== 'string' || !cloudinaryRef.current) {
      return null;
    }
    
    try {
      // Si es una URL completa, extraemos el ID y la versiÃ³n
      if (publicId.includes('cloudinary.com')) {
        // Para URLs de Cloudinary, procesamos correctamente
        const url = new URL(publicId);
        const pathSegments = url.pathname.split('/');
        
        // Buscar si hay una versiÃ³n (v1234567)
        let versionIndex = -1;
        let idIndex = -1;
        
        for (let i = 0; i < pathSegments.length; i++) {
          if (pathSegments[i].startsWith('v') && /^v\d+$/.test(pathSegments[i])) {
            versionIndex = i;
            idIndex = i + 1;
            break;
          }
        }
        
        // Si encontramos versiÃ³n e ID
        if (versionIndex >= 0 && idIndex < pathSegments.length) {
          const version = pathSegments[versionIndex];
          let imageId = pathSegments[idIndex];
          
          // Quitar extensiÃ³n si existe
          if (imageId.includes('.')) {
            imageId = imageId.substring(0, imageId.lastIndexOf('.'));
          }
          
          // Configurar imagen con Cloudinary SDK
          return cloudinaryRef.current.image(imageId)
            .format(autoFormat())
            .quality(auto())
            .resize(
              fill()
                .gravity(autoGravity())
                .width(150)
                .height(100)
            )
            .adjust(contrast(0))
            .setVersion(version.substring(1)); // Quitar la "v" inicial
        }
      }
      
      // Si el ID ya es simple, usarlo directamente
      return cloudinaryRef.current.image(publicId)
        .format(autoFormat())
        .quality(auto())
        .resize(
          fill()
            .gravity(autoGravity())
            .width(150)
            .height(100)
        )
        .adjust(contrast(0));
    } catch (error) {
      console.error('Error al procesar URL de Cloudinary:', error);
      return null;
    }
  };
  
  // Mostrar vista previa ampliada
  const handleImageHover = (imagen) => {
    if (isMobile) return; // No mostrar vista previa en mÃ³vil
    
    if (tooltipTimeout.current) {
      clearTimeout(tooltipTimeout.current);
    }
    tooltipTimeout.current = setTimeout(() => {
      setPreviewImage(imagen);
    }, 300);
  };
  
  // Ocultar vista previa
  const handleImageLeave = () => {
    if (tooltipTimeout.current) {
      clearTimeout(tooltipTimeout.current);
    }
    tooltipTimeout.current = setTimeout(() => {
      setPreviewImage(null);
    }, 300);
  };
  
  // Copiar URL al portapapeles
  const copyImageUrl = (url) => {
    navigator.clipboard.writeText(url)
      .then(() => {
        // Mostrar notificaciÃ³n temporal
        const notification = document.createElement('div');
        notification.className = 'fixed top-16 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50';
        notification.textContent = 'URL copiada al portapapeles';
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.remove();
        }, 2000);
      })
      .catch(err => {
        console.error('Error al copiar URL:', err);
      });
  };

  // FunciÃ³n para cargar las imÃ¡genes
  const loadImagenes = async () => {
    try {
      setLoading(true);
      console.log('Cargando imÃ¡genes...');
      const data = await galeriaService.getImagenesCarouselAdmin();
      console.log('ImÃ¡genes recibidas:', data);
      if (data && Array.isArray(data)) {
        // Ordenar por el campo orden
        const sortedData = data.sort((a, b) => a.orden - b.orden);
        console.log('ImÃ¡genes ordenadas:', sortedData);
        setImagenes(sortedData);
        setError(null);
      } else {
        console.error('Datos recibidos no son un array:', data);
        setImagenes([]);
        setError('Formato de datos incorrecto. Por favor, contacte al administrador.');
      }
    } catch (err) {
      console.error('Error al cargar las imÃ¡genes:', err);
      setError('Error al cargar las imÃ¡genes. Por favor, intenta de nuevo.');
      setImagenes([]);
    } finally {
      setLoading(false);
    }
  };

  // Manejar la eliminaciÃ³n de una imagen
  const handleDelete = async (id) => {
    if (window.confirm('Â¿EstÃ¡s seguro de que deseas eliminar esta imagen? Esta acciÃ³n eliminarÃ¡ la imagen permanentemente de Cloudinary y no se podrÃ¡ recuperar.')) {
      try {
        await galeriaService.purgeImagenCarousel(id);
        // Recargar las imÃ¡genes
        loadImagenes();
      } catch (err) {
        console.error('Error al eliminar la imagen:', err);
        setError('Error al eliminar la imagen. Por favor, intenta de nuevo.');
      }
    }
  };

  // Manejar cambios en el orden de las imÃ¡genes
  const handleOrderChange = async (id, direction) => {
    try {
      const currentIndex = imagenes.findIndex(img => img.id === id);
      if (
        (direction === 'up' && currentIndex === 0) || 
        (direction === 'down' && currentIndex === imagenes.length - 1)
      ) {
        return; // No hacer nada si ya estÃ¡ en el extremo
      }

      // Crear una copia de las imÃ¡genes
      const newImagenes = [...imagenes];
      const swapIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;
      
      // Intercambiar posiciones
      [newImagenes[currentIndex], newImagenes[swapIndex]] = 
      [newImagenes[swapIndex], newImagenes[currentIndex]];
      
      // Actualizar Ã³rdenes
      const updateData = newImagenes.map((img, index) => ({
        id: img.id,
        orden: index
      }));
      
      // Actualizar en el servidor
      await galeriaService.updateImagenesOrden(updateData);
      
      // Actualizar estado local
      setImagenes(newImagenes);
    } catch (err) {
      console.error('Error al cambiar el orden:', err);
      setError('Error al cambiar el orden. Por favor, intenta de nuevo.');
    }
  };

  // Manejar el arrastre y soltar para reordenar
  const handleDragEnd = async (result) => {
    if (!result.destination) return; // Si no hay destino, no hacer nada
    
    try {
      const items = Array.from(imagenes);
      const [reorderedItem] = items.splice(result.source.index, 1);
      items.splice(result.destination.index, 0, reorderedItem);
      
      // Actualizar Ã³rdenes
      const updateData = items.map((img, index) => ({
        id: img.id,
        orden: index
      }));
      
      // Actualizar en el servidor
      await galeriaService.updateImagenesOrden(updateData);
      
      // Actualizar estado local
      setImagenes(items);
    } catch (err) {
      console.error('Error al reordenar mediante drag and drop:', err);
      setError('Error al reordenar. Por favor, intenta de nuevo.');
    }
  };

  // Columnas de la tabla
  const columns = [
    {
      header: 'Orden',
      accessor: 'orden',
      cell: ({ row }) => (
        <div className="flex gap-1">
          <button 
            onClick={() => handleOrderChange(row.id, 'up')}
            className="p-1 text-blue-500 hover:text-blue-700"
            title="Mover arriba"
          >
            <FiArrowUp />
          </button>
          <button 
            onClick={() => handleOrderChange(row.id, 'down')}
            className="p-1 text-blue-500 hover:text-blue-700"
            title="Mover abajo"
          >
            <FiArrowDown />
          </button>
          <span className="ml-2">{row.orden + 1}</span>
        </div>
      )
    },
    {
      header: 'Imagen',
      accessor: 'imagen_url',
      cell: ({ value, row }) => (
        <div 
          className="relative group"
          onMouseEnter={() => handleImageHover(row)}
          onMouseLeave={handleImageLeave}
        >
          <div className="flex items-center justify-center h-[100px] w-[150px] bg-gray-100 rounded overflow-hidden border border-gray-200">
            {value && cloudinaryImages[row.id] ? (
              <AdvancedImage 
                cldImg={cloudinaryImages[row.id]}
                className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                alt={row.descripcion || 'Imagen de galerÃ­a'}
              />
            ) : imageErrors[row.id] ? (
              <div className="flex flex-col items-center justify-center text-red-500 p-2 text-center">
                <FiAlertCircle size={24} className="mb-1" />
                <span className="text-xs">Error de imagen</span>
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center text-gray-400 p-2">
                <FiImage size={24} className="mb-1" />
                <span className="text-xs">Sin imagen</span>
              </div>
            )}
          </div>
          
          {/* Acciones rÃ¡pidas para la imagen */}
          <div className="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity bg-black/50 rounded">
            <div className="flex gap-1">
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  window.open(value, '_blank');
                }}
                className="p-1 bg-white/90 rounded-full text-blue-600 hover:bg-white"
                title="Ver imagen completa"
              >
                <FiEye size={16} />
              </button>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  copyImageUrl(value);
                }}
                className="p-1 bg-white/90 rounded-full text-green-600 hover:bg-white"
                title="Copiar URL"
              >
                <FiCopy size={16} />
              </button>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  onEdit(row);
                }}
                className="p-1 bg-white/90 rounded-full text-purple-600 hover:bg-white"
                title="Editar imagen"
              >
                <FiEdit size={16} />
              </button>
            </div>
          </div>
        </div>
      )
    },
    {
      header: 'DescripciÃ³n',
      accessor: 'descripcion',
      cell: ({ value, row }) => (
        <div className="max-w-xs">
          <div className="font-medium text-gray-800 mb-1 truncate">
            {value || <span className="text-gray-400 italic">Sin descripciÃ³n</span>}
          </div>
          <div className="text-xs text-gray-500 flex items-center flex-wrap">
            {row.es_promocion && (
              <span className="inline-flex items-center px-2 py-1 mr-2 mb-1 rounded-full text-xs bg-yellow-100 text-yellow-800">
                <FiCheck className="mr-1" /> PromociÃ³n
              </span>
            )}
            <span className="text-xs text-gray-500">ID: {row.cloudinary_id || 'N/A'}</span>
          </div>
        </div>
      )
    },
    {
      header: 'Estado',
      accessor: 'activo',
      cell: ({ value }) => (
        <div className="flex flex-col items-start">
          <span className={`px-2 py-1 rounded-full text-xs ${
            value 
              ? 'bg-green-100 text-green-800 border border-green-200' 
              : 'bg-red-100 text-red-800 border border-red-200'
          }`}>
            {value ? 'Activo' : 'Inactivo'}
          </span>
        </div>
      )
    },
    {
      header: 'Acciones',
      accessor: 'actions',
      cell: ({ row }) => (
        <div className="flex space-x-3">
          <button
            onClick={() => onEdit(row)}
            className="p-1 text-blue-500 hover:text-blue-700"
            title="Editar"
          >
            <FiEdit />
          </button>
          <button
            onClick={() => handleDelete(row.id)}
            className="p-1 text-red-500 hover:text-red-700"
            title="Eliminar"
          >
            <FiTrash2 />
          </button>
          <a
            href={row.imagen_url}
            target="_blank"
            rel="noopener noreferrer"
            className="p-1 text-gray-500 hover:text-gray-700"
            title="Ver imagen"
          >
            <FiEye />
          </a>
          <button
            onClick={() => copyImageUrl(row.imagen_url)}
            className="p-1 text-green-500 hover:text-green-700"
            title="Copiar URL"
          >
            <FiCopy />
          </button>
        </div>
      )
    }
  ];

  // Renderizar tarjeta para vista mÃ³vil
  const renderMobileCard = (imagen, index) => (
    <Draggable 
      key={imagen.id.toString()} 
      draggableId={imagen.id.toString()} 
      index={index}
    >
      {(provided) => (
        <div
          ref={provided.innerRef}
          {...provided.draggableProps}
          {...provided.dragHandleProps}
          className="bg-white rounded-lg shadow-sm border border-gray-200 mb-4 overflow-hidden"
        >
          <div className="flex flex-col sm:flex-row">
            {/* Imagen y orden */}
            <div className="relative w-full sm:w-1/3">
              <div className="flex items-center justify-center h-[180px] bg-gray-100 overflow-hidden">
                {imagen.imagen_url && cloudinaryImages[imagen.id] ? (
                  <AdvancedImage 
                    cldImg={cloudinaryImages[imagen.id]}
                    className="w-full h-full object-cover"
                    alt={imagen.descripcion || 'Imagen de galerÃ­a'}
                  />
                ) : imageErrors[imagen.id] ? (
                  <div className="flex flex-col items-center justify-center text-red-500 p-2 text-center">
                    <FiAlertCircle size={36} className="mb-1" />
                    <span className="text-sm">Error de imagen</span>
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center text-gray-400 p-2">
                    <FiImage size={36} className="mb-1" />
                    <span className="text-sm">Sin imagen</span>
                  </div>
                )}
                
                {/* Orden */}
                <div className="absolute top-2 left-2 bg-white/90 rounded-full px-2 py-1 text-xs font-bold shadow-sm">
                  #{imagen.orden + 1}
                </div>
              </div>
            </div>
            
            {/* InformaciÃ³n */}
            <div className="p-4 flex-1">
              <div className="flex justify-between items-start mb-2">
                <div>
                  <h3 className="font-medium text-gray-800 mb-1">
                    {imagen.descripcion || <span className="text-gray-400 italic">Sin descripciÃ³n</span>}
                  </h3>
                  <div className="flex flex-wrap gap-2 mb-2">
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      imagen.activo 
                        ? 'bg-green-100 text-green-800 border border-green-200' 
                        : 'bg-red-100 text-red-800 border border-red-200'
                    }`}>
                      {imagen.activo ? 'Activo' : 'Inactivo'}
                    </span>
                    
                    {imagen.es_promocion && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-yellow-100 text-yellow-800">
                        <FiCheck className="mr-1" /> PromociÃ³n
                      </span>
                    )}
                  </div>
                  <p className="text-xs text-gray-500 mb-3">ID: {imagen.cloudinary_id || 'N/A'}</p>
                </div>
              </div>
              
              {/* Controles de orden */}
              <div className="flex items-center mb-3 border-t border-b border-gray-100 py-2">
                <span className="text-xs text-gray-500 mr-2">Cambiar orden:</span>
                <button 
                  onClick={() => handleOrderChange(imagen.id, 'up')}
                  className="p-1 text-blue-500 hover:text-blue-700 mr-1"
                  title="Mover arriba"
                  disabled={imagen.orden === 0}
                >
                  <FiArrowUp />
                </button>
                <button 
                  onClick={() => handleOrderChange(imagen.id, 'down')}
                  className="p-1 text-blue-500 hover:text-blue-700"
                  title="Mover abajo"
                  disabled={imagen.orden === imagenes.length - 1}
                >
                  <FiArrowDown />
                </button>
              </div>
              
              {/* Acciones */}
              <div className="flex justify-between">
                <div className="flex space-x-2">
                  <button
                    onClick={() => onEdit(imagen)}
                    className="px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 flex items-center"
                  >
                    <FiEdit className="mr-1" /> Editar
                  </button>
                  <button
                    onClick={() => handleDelete(imagen.id)}
                    className="px-3 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700 flex items-center"
                  >
                    <FiTrash2 className="mr-1" /> Eliminar
                  </button>
                </div>
                <div className="flex space-x-2">
                  <a
                    href={imagen.imagen_url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="px-3 py-1 text-xs bg-gray-600 text-white rounded hover:bg-gray-700 flex items-center"
                  >
                    <FiEye className="mr-1" /> Ver
                  </a>
                  <button
                    onClick={() => copyImageUrl(imagen.imagen_url)}
                    className="px-3 py-1 text-xs bg-green-600 text-white rounded hover:bg-green-700 flex items-center"
                  >
                    <FiCopy className="mr-1" /> Copiar URL
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </Draggable>
  );

  if (loading) {
    return (
      <div className="flex flex-col justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
        <p className="mt-4 text-gray-600">Cargando imÃ¡genes de la galerÃ­a...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 rounded-md bg-red-50 text-red-800 border border-red-200">
        <p>{error}</p>
        <button 
          onClick={loadImagenes}
          className="mt-2 text-sm text-red-800 underline hover:text-red-900"
        >
          Reintentar
        </button>
      </div>
    );
  }

  return (
    <div>
      <div className="flex justify-between mb-4">
        <h2 className="text-xl font-semibold">GalerÃ­a de ImÃ¡genes</h2>
      </div>
      
      {/* Vista previa ampliada al hacer hover (solo para desktop) */}
      {previewImage && !isMobile && (
        <div 
          className="fixed z-50 shadow-xl rounded-lg overflow-hidden border-2 border-white"
          style={{ 
            top: '50%', 
            left: '50%', 
            transform: 'translate(-50%, -50%)',
            maxWidth: '90vw',
            maxHeight: '90vh'
          }}
          onMouseLeave={handleImageLeave}
        >
          {previewImage.imagen_url && cloudinaryImages[previewImage.id] && (
            <AdvancedImage 
              cldImg={cloudinaryRef.current.image(previewImage.imagen_url)
                .format(autoFormat())
                .quality(auto())
                .resize(fill().gravity(autoGravity()).width(800).height(600))}
              className="max-w-full max-h-full object-contain"
              alt={previewImage.descripcion || 'Vista previa'}
            />
          )}
        </div>
      )}
      
      {/* Mensaje cuando no hay imÃ¡genes */}
      {imagenes.length === 0 ? (
        <div className="text-center py-12 bg-gray-50 rounded-lg border border-dashed border-gray-300 mt-4">
          <FiImage size={48} className="mx-auto text-gray-400 mb-3" />
          <p className="text-gray-500 mb-2">No hay imÃ¡genes disponibles en la galerÃ­a</p>
          <button
            onClick={onNewClick}
            className="px-4 py-2 mt-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition duration-200 text-sm"
          >
            Agregar primera imagen
          </button>
        </div>
      ) : (
        <>
          {/* Vista de tarjetas para mÃ³vil usando Drag and Drop */}
          {isMobile ? (
            <DragDropContext onDragEnd={handleDragEnd}>
              <Droppable droppableId="imagenes-galeria">
                {(provided) => (
                  <div
                    {...provided.droppableProps}
                    ref={provided.innerRef}
                    className="space-y-4"
                  >
                    {imagenes.map((imagen, index) => (
                      renderMobileCard(imagen, index)
                    ))}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
            </DragDropContext>
          ) : (
            /* Vista de tabla para escritorio */
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    {columns.map((column, index) => (
                      <th 
                        key={index}
                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                      >
                        {column.header}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {imagenes.map((imagen) => (
                    <tr key={imagen.id} className="hover:bg-gray-50">
                      {columns.map((column, index) => (
                        <td key={index} className="px-6 py-4 whitespace-nowrap">
                          {column.cell({ 
                            value: imagen[column.accessor], 
                            row: imagen 
                          })}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </>
      )}
    </div>
  );
});

export default GaleriaTable;
\n\n

=== ./galeria/pages/index.js ===
// Exportar todos los componentes de galeria/pages
\n\n

=== ./galeria/services/galeriaService.js ===
import axios from 'axios';
import { axiosInstance } from '@/components/axiosConfig';

// Servicio para la gestiÃ³n del carrusel de imÃ¡genes en el Home
const API_PATH = '/galeria-home';

// Obtener todas las imÃ¡genes activas (para uso pÃºblico)
export const getImagenesCarousel = async () => {
  try {
    const response = await axiosInstance.get(`${API_PATH}`);
    return response.data;
  } catch (error) {
    console.error('Error al obtener imÃ¡genes del carrusel:', error);
    throw error;
  }
};

// Obtener todas las promociones activas (para uso pÃºblico)
export const getPromocionesCarousel = async () => {
  try {
    const response = await axiosInstance.get(`${API_PATH}/promociones`);
    return response.data;
  } catch (error) {
    console.error('Error al obtener promociones del mes:', error);
    throw error;
  }
};

// Obtener todas las imÃ¡genes (activas e inactivas) para administraciÃ³n
export const getImagenesCarouselAdmin = async () => {
  try {
    const response = await axiosInstance.get(`${API_PATH}/admin`);
    return response.data;
  } catch (error) {
    console.error('Error al obtener imÃ¡genes del carrusel (admin):', error);
    throw error;
  }
};

// Obtener una imagen especÃ­fica por ID
export const getImagenCarouselById = async (id) => {
  try {
    const response = await axiosInstance.get(`${API_PATH}/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error al obtener la imagen con ID ${id}:`, error);
    throw error;
  }
};

// Crear una nueva imagen para el carrusel
export const createImagenCarousel = async (imagenData) => {
  try {
    const response = await axiosInstance.post(`${API_PATH}`, imagenData);
    return response.data;
  } catch (error) {
    console.error('Error al crear la imagen del carrusel:', error);
    throw error;
  }
};

// Actualizar una imagen existente
export const updateImagenCarousel = async (id, imagenData) => {
  try {
    const response = await axiosInstance.put(`${API_PATH}/${id}`, imagenData);
    return response.data;
  } catch (error) {
    console.error(`Error al actualizar la imagen con ID ${id}:`, error);
    throw error;
  }
};

// Actualizar el orden de mÃºltiples imÃ¡genes
export const updateImagenesOrden = async (ordenData) => {
  try {
    const response = await axiosInstance.put(`${API_PATH}/orden/actualizar`, ordenData);
    return response.data;
  } catch (error) {
    console.error('Error al actualizar el orden de las imÃ¡genes:', error);
    throw error;
  }
};

// Desactivar una imagen (eliminaciÃ³n lÃ³gica)
export const deleteImagenCarousel = async (id) => {
  try {
    const response = await axiosInstance.delete(`${API_PATH}/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error al desactivar la imagen con ID ${id}:`, error);
    throw error;
  }
};

// Eliminar permanentemente una imagen
export const purgeImagenCarousel = async (id) => {
  try {
    const response = await axiosInstance.delete(`${API_PATH}/purge/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error al eliminar permanentemente la imagen con ID ${id}:`, error);
    throw error;
  }
};

// FunciÃ³n auxiliar para subir una imagen a Cloudinary
export const uploadImageToCloudinary = async (file) => {
  const formData = new FormData();
  formData.append('file', file);
  formData.append('upload_preset', import.meta.env.VITE_CLOUDINARY_UPLOAD_PRESET || 'ml_default');
  
  try {
    // Asegurar que el cloud name estÃ© en minÃºsculas para evitar problemas de sensibilidad a mayÃºsculas/minÃºsculas
    const cloudName = (import.meta.env.VITE_CLOUDINARY_CLOUD_NAME || 'tramboory').toLowerCase();
    const response = await axios.post(
      `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`,
      formData
    );
    return {
      url: response.data.secure_url,
      cloudinary_id: response.data.public_id
    };
  } catch (error) {
    console.error('Error al subir imagen a Cloudinary:', error);
    throw error;
  }
};

// FunciÃ³n para subir archivos (PDF, XML, etc.) a Cloudinary
export const uploadFileToCloudinary = async (file) => {
  const formData = new FormData();
  formData.append('file', file);
  formData.append('upload_preset', import.meta.env.VITE_CLOUDINARY_UPLOAD_PRESET || 'ml_default');
  
  try {
    // Asegurar que el cloud name estÃ© en minÃºsculas para evitar problemas
    const cloudName = (import.meta.env.VITE_CLOUDINARY_CLOUD_NAME || 'tramboory').toLowerCase();
    
    // Determina si es un archivo PDF o XML para usar el endpoint correcto
    const resourceType = file.type.includes('pdf') || file.type.includes('xml') ? 'raw' : 'auto';
    
    const response = await axios.post(
      `https://api.cloudinary.com/v1_1/${cloudName}/${resourceType}/upload`,
      formData
    );
    
    return {
      url: response.data.secure_url,
      cloudinary_id: response.data.public_id
    };
  } catch (error) {
    console.error('Error al subir archivo a Cloudinary:', error);
    throw error;
  }
};

// FunciÃ³n para subir mÃºltiples imÃ¡genes a Cloudinary
export const uploadMultipleImagesToCloudinary = async (files) => {
  try {
    // Realizar las subidas en paralelo
    const uploadPromises = files.map(file => uploadImageToCloudinary(file));
    return await Promise.all(uploadPromises);
  } catch (error) {
    console.error('Error al subir mÃºltiples imÃ¡genes a Cloudinary:', error);
    throw error;
  }
};

export default {
  getImagenesCarousel,
  getPromocionesCarousel,
  getImagenesCarouselAdmin,
  getImagenCarouselById,
  createImagenCarousel,
  updateImagenCarousel,
  updateImagenesOrden,
  deleteImagenCarousel,
  purgeImagenCarousel,
  uploadImageToCloudinary,
  uploadMultipleImagesToCloudinary,
  uploadFileToCloudinary
};\n\n

=== ./galeria/services/index.js ===
// Exportar todos los componentes de galeria/services
\n\n


