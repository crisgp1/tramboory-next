=== ./finanzas/components/index.js ===
// Exportar todos los componentes de finanzas/components
\n\n

=== ./finanzas/hooks/index.js ===
// Exportar todos los componentes de finanzas/hooks
\n\n

=== ./finanzas/index.js ===
export * from './components';
export * from './pages';
export * from './services';
\n\n

=== ./finanzas/pages/FinanceDetailModal.jsx ===
ï»¿import React, { useState } from 'react';
import PropTypes from 'prop-types';
// Usar el alias @ para garantizar resoluciÃƒÂ³n correcta en Docker
import Modal from '@shared/components/Modal';
import { FiDollarSign, FiCalendar, FiTag, FiFileText, FiDownload, FiPrinter, FiEye, FiCode, FiFile } from 'react-icons/fi';
import ReservationPreviewModal from '@shared/@domains/dashboard/pages/Dashboard/reservation-service/ReservationPreviewModal';
import { formatDate, formatNumber } from '@shared/utils/formatters';
import CloudinaryFileSelector from '@shared/components/cloudinary/CloudinaryFileSelector';

const FinanceDetailModal = ({ finance, onClose }) => {
    const [showReservationPreview, setShowReservationPreview] = useState(false);
    const IconWrapper = ({ icon: Icon, text, color = "text-gray-700" }) => (
        <div className={`flex items-center mb-3 group hover:scale-[1.02] transition-all duration-200 ${color}`}>
            <div className={`flex items-center justify-center w-8 h-8 rounded-lg ${color} bg-opacity-10 mr-3`}>
                <Icon className={`w-4 h-4 ${color} group-hover:scale-110 transition-transform duration-200`} />
            </div>
            <span className="text-sm font-medium">{text}</span>
        </div>
    );

    const footerContent = (
        <div className="flex justify-end gap-2 sm:gap-4">
            <button
                onClick={() => {/* Implementar funciÃƒÂ³n de impresiÃƒÂ³n */}}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-200 flex items-center text-sm hover:shadow-md"
                title="Imprimir detalle del movimiento"
            >
                <FiPrinter className="mr-2" />
                Imprimir Detalle
            </button>
            <button
                onClick={onClose}
                className="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-all duration-200 flex items-center text-sm border border-gray-300"
                title="Cerrar ventana"
            >
                Cerrar
            </button>
        </div>
    );

    return (
        <Modal
            isOpen={true}
            onClose={onClose}
            title="Detalles del Movimiento Financiero"
            footer={footerContent}
            className="animate-modalEntry"
            overlayClassName="backdrop-blur-sm"
        >
            <style jsx global>{`
                @keyframes modalEntry {
                    from {
                        opacity: 0;
                        transform: scale(0.95) translateY(-10px);
                    }
                    to {
                        opacity: 1;
                        transform: scale(1) translateY(0);
                    }
                }
                .animate-modalEntry {
                    animation: modalEntry 0.3s ease-out;
                }
            `}</style>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
                <div className="space-y-6">
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">InformaciÃƒÂ³n General</h3>
                        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                            <IconWrapper
                                icon={FiDollarSign}
                                text={`Monto: ${formatNumber(Math.abs(finance.monto))}`}
                                color={finance.tipo === 'ingreso' ? 'text-green-600' : 'text-red-600'}
                            />
                            <IconWrapper icon={FiCalendar} text={`Fecha: ${formatDate(finance.fecha)}`} />
                            <IconWrapper icon={FiTag} text={`Tipo: ${finance.tipo.charAt(0).toUpperCase() + finance.tipo.slice(1)}`} />
            <div className="flex items-center mb-3 group">
                <FiTag className="mr-2 text-xl text-gray-700 group-hover:text-indigo-500 transition-colors duration-200" />
                <span className="text-sm flex items-center">
                    CategorÃƒÂ­a: {finance.categoria ? (
                        <span className="flex items-center ml-1">
                            <span 
                                className="w-3 h-3 rounded-full mr-1 inline-block"
                                style={{ backgroundColor: finance.categoria.color }}
                            />
                            {finance.categoria.nombre}
                        </span>
                    ) : 'No especificada'}
                </span>
            </div>
            {finance.reserva && (
                <div 
                    className="flex items-center mb-3 text-blue-600 hover:text-blue-800 transition-all duration-300 cursor-pointer group hover:scale-[1.02] active:scale-95 hover:bg-blue-50/50 p-2 rounded-lg"
                    title="Ver detalles de la reserva"
                    onClick={() => setShowReservationPreview(true)}
                >
                    <FiEye className="mr-2 text-xl group-hover:scale-125 group-hover:rotate-12 transition-all duration-300" />
                    <FiCalendar className="mr-2 text-xl group-hover:scale-110 group-hover:-rotate-12 transition-all duration-300" />
                    <span className="text-sm group-hover:translate-x-1 transition-transform duration-300">
                        Reserva: #{finance.reserva.id} - {finance.reserva.nombre_festejado}
                        <span className="text-gray-500 ml-2">
                            ({formatDate(finance.reserva.fecha_reserva)})
                        </span>
                    </span>
                </div>
            )}
            {showReservationPreview && finance.reserva && (
                <ReservationPreviewModal
                    reservation={finance.reserva}
                    onClose={() => setShowReservationPreview(false)}
                />
            )}
                        </div>
                    </div>
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">DescripciÃƒÂ³n</h3>
                        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                            <p className="text-gray-700 text-sm">{finance.descripcion}</p>
                        </div>
                    </div>
                </div>
                <div className="space-y-6 overflow-y-auto max-h-[600px] pr-2">
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">Archivos Adjuntos</h3>
                        <div className="space-y-4">
                            {finance.factura_pdf && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                                        <FiFileText className="mr-2 text-indigo-600" />
                                        Factura PDF
                                    </h4>
                                    <CloudinaryFileSelector
                                        value={finance.factura_pdf}
                                        readOnly={true}
                                        icon={FiFileText}
                                        acceptTypes="application/pdf"
                                        showPreview={true}
                                    />
                                </div>
                            )}
                            
                            {finance.factura_xml && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                                        <FiCode className="mr-2 text-indigo-600" />
                                        Factura XML
                                    </h4>
                                    <CloudinaryFileSelector
                                        value={finance.factura_xml}
                                        readOnly={true}
                                        icon={FiCode}
                                        acceptTypes="application/xml"
                                        showPreview={true}
                                    />
                                </div>
                            )}
                            
                            {finance.archivo_prueba && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                                        <FiFile className="mr-2 text-indigo-600" />
                                        Archivo de Prueba
                                    </h4>
                                    <CloudinaryFileSelector
                                        value={finance.archivo_prueba}
                                        readOnly={true}
                                        icon={FiFile}
                                        acceptTypes="application/pdf,image/jpeg,image/png"
                                        showPreview={true}
                                    />
                                </div>
                            )}
                            
                            {!finance.factura_pdf && !finance.factura_xml && !finance.archivo_prueba && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <p className="text-gray-500 text-sm">No hay archivos adjuntos</p>
                                </div>
                            )}
                        </div>
                    </div>
                    {finance.comentarios && (
                        <div>
                            <h3 className="text-lg font-medium text-gray-900 mb-3">Comentarios</h3>
                        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                <p className="text-gray-700 text-sm">{finance.comentarios}</p>
                            </div>
                        </div>
                    )}
                </div>
            </div>

        </Modal>
    );
};

FinanceDetailModal.propTypes = {
    finance: PropTypes.shape({
        id: PropTypes.number.isRequired,
        descripcion: PropTypes.string.isRequired,
        monto: PropTypes.number.isRequired,
        tipo: PropTypes.oneOf(['ingreso', 'gasto']).isRequired,
        fecha: PropTypes.string.isRequired,
        categoria: PropTypes.shape({
            id: PropTypes.number,
            nombre: PropTypes.string,
            color: PropTypes.string
        }),
        reserva: PropTypes.shape({
            id: PropTypes.number,
            nombre_festejado: PropTypes.string,
            fecha_reserva: PropTypes.string,
            estado: PropTypes.string,
            hora_inicio: PropTypes.string,
            hora_fin: PropTypes.string,
            total: PropTypes.number,
            comentarios: PropTypes.string,
            edad_festejado: PropTypes.number
        }),
        factura_pdf: PropTypes.string,
        factura_xml: PropTypes.string,
        archivo_prueba: PropTypes.string,
        comentarios: PropTypes.string
    }).isRequired,
    onClose: PropTypes.func.isRequired
};

export default FinanceDetailModal;

\n\n

=== ./finanzas/pages/FinanceDetailModal.jsx.pre-legacy-fix.20250521220728 ===
import React, { useState } from 'react';
import PropTypes from 'prop-types';
// Usar el alias @ para garantizar resoluciÃ³n correcta en Docker
import Modal from '@shared/components/ui/Modal';
import { FiDollarSign, FiCalendar, FiTag, FiFileText, FiDownload, FiPrinter, FiEye, FiCode, FiFile } from 'react-icons/fi';
import ReservationPreviewModal from '@shared/pages/admin/dashboard/reservation-service/ReservationPreviewModal';
import { formatDate, formatNumber } from '@shared/utils/formatters';
import CloudinaryFileSelector from '@shared/components/cloudinary/CloudinaryFileSelector';

const FinanceDetailModal = ({ finance, onClose }) => {
    const [showReservationPreview, setShowReservationPreview] = useState(false);
    const IconWrapper = ({ icon: Icon, text, color = "text-gray-700" }) => (
        <div className={`flex items-center mb-3 group hover:scale-[1.02] transition-all duration-200 ${color}`}>
            <div className={`flex items-center justify-center w-8 h-8 rounded-lg ${color} bg-opacity-10 mr-3`}>
                <Icon className={`w-4 h-4 ${color} group-hover:scale-110 transition-transform duration-200`} />
            </div>
            <span className="text-sm font-medium">{text}</span>
        </div>
    );

    const footerContent = (
        <div className="flex justify-end gap-2 sm:gap-4">
            <button
                onClick={() => {/* Implementar funciÃ³n de impresiÃ³n */}}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-200 flex items-center text-sm hover:shadow-md"
                title="Imprimir detalle del movimiento"
            >
                <FiPrinter className="mr-2" />
                Imprimir Detalle
            </button>
            <button
                onClick={onClose}
                className="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-all duration-200 flex items-center text-sm border border-gray-300"
                title="Cerrar ventana"
            >
                Cerrar
            </button>
        </div>
    );

    return (
        <Modal
            isOpen={true}
            onClose={onClose}
            title="Detalles del Movimiento Financiero"
            footer={footerContent}
            className="animate-modalEntry"
            overlayClassName="backdrop-blur-sm"
        >
            <style jsx global>{`
                @keyframes modalEntry {
                    from {
                        opacity: 0;
                        transform: scale(0.95) translateY(-10px);
                    }
                    to {
                        opacity: 1;
                        transform: scale(1) translateY(0);
                    }
                }
                .animate-modalEntry {
                    animation: modalEntry 0.3s ease-out;
                }
            `}</style>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
                <div className="space-y-6">
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">InformaciÃ³n General</h3>
                        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                            <IconWrapper
                                icon={FiDollarSign}
                                text={`Monto: ${formatNumber(Math.abs(finance.monto))}`}
                                color={finance.tipo === 'ingreso' ? 'text-green-600' : 'text-red-600'}
                            />
                            <IconWrapper icon={FiCalendar} text={`Fecha: ${formatDate(finance.fecha)}`} />
                            <IconWrapper icon={FiTag} text={`Tipo: ${finance.tipo.charAt(0).toUpperCase() + finance.tipo.slice(1)}`} />
            <div className="flex items-center mb-3 group">
                <FiTag className="mr-2 text-xl text-gray-700 group-hover:text-indigo-500 transition-colors duration-200" />
                <span className="text-sm flex items-center">
                    CategorÃ­a: {finance.categoria ? (
                        <span className="flex items-center ml-1">
                            <span 
                                className="w-3 h-3 rounded-full mr-1 inline-block"
                                style={{ backgroundColor: finance.categoria.color }}
                            />
                            {finance.categoria.nombre}
                        </span>
                    ) : 'No especificada'}
                </span>
            </div>
            {finance.reserva && (
                <div 
                    className="flex items-center mb-3 text-blue-600 hover:text-blue-800 transition-all duration-300 cursor-pointer group hover:scale-[1.02] active:scale-95 hover:bg-blue-50/50 p-2 rounded-lg"
                    title="Ver detalles de la reserva"
                    onClick={() => setShowReservationPreview(true)}
                >
                    <FiEye className="mr-2 text-xl group-hover:scale-125 group-hover:rotate-12 transition-all duration-300" />
                    <FiCalendar className="mr-2 text-xl group-hover:scale-110 group-hover:-rotate-12 transition-all duration-300" />
                    <span className="text-sm group-hover:translate-x-1 transition-transform duration-300">
                        Reserva: #{finance.reserva.id} - {finance.reserva.nombre_festejado}
                        <span className="text-gray-500 ml-2">
                            ({formatDate(finance.reserva.fecha_reserva)})
                        </span>
                    </span>
                </div>
            )}
            {showReservationPreview && finance.reserva && (
                <ReservationPreviewModal
                    reservation={finance.reserva}
                    onClose={() => setShowReservationPreview(false)}
                />
            )}
                        </div>
                    </div>
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">DescripciÃ³n</h3>
                        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                            <p className="text-gray-700 text-sm">{finance.descripcion}</p>
                        </div>
                    </div>
                </div>
                <div className="space-y-6 overflow-y-auto max-h-[600px] pr-2">
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-3">Archivos Adjuntos</h3>
                        <div className="space-y-4">
                            {finance.factura_pdf && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                                        <FiFileText className="mr-2 text-indigo-600" />
                                        Factura PDF
                                    </h4>
                                    <CloudinaryFileSelector
                                        value={finance.factura_pdf}
                                        readOnly={true}
                                        icon={FiFileText}
                                        acceptTypes="application/pdf"
                                        showPreview={true}
                                    />
                                </div>
                            )}
                            
                            {finance.factura_xml && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                                        <FiCode className="mr-2 text-indigo-600" />
                                        Factura XML
                                    </h4>
                                    <CloudinaryFileSelector
                                        value={finance.factura_xml}
                                        readOnly={true}
                                        icon={FiCode}
                                        acceptTypes="application/xml"
                                        showPreview={true}
                                    />
                                </div>
                            )}
                            
                            {finance.archivo_prueba && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                                        <FiFile className="mr-2 text-indigo-600" />
                                        Archivo de Prueba
                                    </h4>
                                    <CloudinaryFileSelector
                                        value={finance.archivo_prueba}
                                        readOnly={true}
                                        icon={FiFile}
                                        acceptTypes="application/pdf,image/jpeg,image/png"
                                        showPreview={true}
                                    />
                                </div>
                            )}
                            
                            {!finance.factura_pdf && !finance.factura_xml && !finance.archivo_prueba && (
                                <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                    <p className="text-gray-500 text-sm">No hay archivos adjuntos</p>
                                </div>
                            )}
                        </div>
                    </div>
                    {finance.comentarios && (
                        <div>
                            <h3 className="text-lg font-medium text-gray-900 mb-3">Comentarios</h3>
                        <div className="bg-white p-4 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                                <p className="text-gray-700 text-sm">{finance.comentarios}</p>
                            </div>
                        </div>
                    )}
                </div>
            </div>

        </Modal>
    );
};

FinanceDetailModal.propTypes = {
    finance: PropTypes.shape({
        id: PropTypes.number.isRequired,
        descripcion: PropTypes.string.isRequired,
        monto: PropTypes.number.isRequired,
        tipo: PropTypes.oneOf(['ingreso', 'gasto']).isRequired,
        fecha: PropTypes.string.isRequired,
        categoria: PropTypes.shape({
            id: PropTypes.number,
            nombre: PropTypes.string,
            color: PropTypes.string
        }),
        reserva: PropTypes.shape({
            id: PropTypes.number,
            nombre_festejado: PropTypes.string,
            fecha_reserva: PropTypes.string,
            estado: PropTypes.string,
            hora_inicio: PropTypes.string,
            hora_fin: PropTypes.string,
            total: PropTypes.number,
            comentarios: PropTypes.string,
            edad_festejado: PropTypes.number
        }),
        factura_pdf: PropTypes.string,
        factura_xml: PropTypes.string,
        archivo_prueba: PropTypes.string,
        comentarios: PropTypes.string
    }).isRequired,
    onClose: PropTypes.func.isRequired
};

export default FinanceDetailModal;\n\n

=== ./finanzas/pages/FinanceForm.jsx ===
import React, { useState, useEffect, useRef } from 'react'
import { useForm, Controller } from 'react-hook-form'
import { toast } from 'react-toastify'
import { yupResolver } from '@hookform/resolvers/yup'
import * as yup from 'yup'
import {
  FiDollarSign,
  FiCalendar,
  FiFileText,
  FiTag,
  FiPackage,
  FiUpload,
  FiFile,
  FiPlus,
  FiMinus,
  FiX,
  FiInfo,
  FiSearch,
  FiChevronDown,
  FiSave,
  FiFileText as FiFilePdf,
  FiCode
} from 'react-icons/fi'
// Usar el alias @ para garantizar resoluciÃ³n correcta en Docker
import CurrencyInput from '@shared/components/CurrencyInput'
import CloudinaryFileSelector from '@shared/components/cloudinary/CloudinaryFileSelector'
import ColorPalette from '@shared/components/ColorPalette'

// Esquema de validaciÃ³n con Yup
const financeSchema = yup.object().shape({
  tipo: yup
    .string()
    .required('El tipo de transacciÃ³n es requerido')
    .oneOf(['ingreso', 'gasto'], 'Tipo de transacciÃ³n invÃ¡lido'),
  monto: yup
    .string()
    .required('El monto es requerido')
    .test('is-number', 'El monto debe ser un nÃºmero vÃ¡lido', value => !isNaN(parseFloat(value)))
    .test('is-positive', 'El monto debe ser mayor que 0', value => parseFloat(value) > 0),
  fecha: yup
    .string()
    .required('La fecha es requerida')
    .test('is-date', 'Fecha invÃ¡lida', value => !isNaN(Date.parse(value))),
  id_categoria: yup
    .number()
    .nullable()
    .required('La categorÃ­a es requerida'),
  descripcion: yup
    .string()
    .nullable(),
  id_reserva: yup
    .number()
    .nullable(),
  factura_pdf: yup
    .string()
    .nullable(),
  factura_xml: yup
    .string()
    .nullable(),
  archivo_prueba: yup
    .string()
    .nullable()
})

const FinanceForm = ({
  editingItem,
  onSave,
  categories,
  onAddCategory,
  reservations = [],
  activeTab,
  currentUser // Necesitamos el usuario actual para id_usuario
}) => {
  const { register, handleSubmit, control, setValue, watch, formState: { errors } } = useForm({
    resolver: yupResolver(financeSchema),
    defaultValues: editingItem || {
      fecha: new Date().toISOString().split('T')[0],
      tipo: '',
      monto: '',
      id_categoria: null,
      id_usuario: currentUser?.id,
      factura_pdf: null,
      factura_xml: null,
      archivo_prueba: null
    }
  })

  const [showNewCategoryInput, setShowNewCategoryInput] = useState(false)
  const [newCategory, setNewCategory] = useState('')
  const [categoryColor, setCategoryColor] = useState('#FF6900')
  const [showInvoiceFields, setShowInvoiceFields] = useState(false)

  const [searchTerm, setSearchTerm] = useState('')
  const [filteredReservations, setFilteredReservations] = useState([])
  const [showSuggestions, setShowSuggestions] = useState(false)
  const [selectedReservation, setSelectedReservation] = useState(null)

  // ----------------------------------------------------------------------
  // Si el formulario estÃ¡ en ediciÃ³n, establecemos la reserva inicial (si la hay)
  // ----------------------------------------------------------------------
  useEffect(() => {
    if (editingItem && editingItem.id_reserva) {
      const found = reservations.find(r => r.id === editingItem.id_reserva)
      if (found) {
        setSelectedReservation(found)
      }
    }
  }, [editingItem, reservations])

  // ----------------------------------------------------------------------
  // Al escribir en el buscador, filtramos las reservas
  // ----------------------------------------------------------------------
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredReservations([])
      return
    }
    const term = searchTerm.toLowerCase()
    const filtered = reservations.filter(res => {
      const festejado = res.nombre_festejado?.toLowerCase() || ''
      const idString = String(res.id)
      return festejado.includes(term) || idString === term
    })
    setFilteredReservations(filtered)
  }, [searchTerm, reservations])

  // ----------------------------------------------------------------------
  // Manejador de selecciÃ³n de reserva en la lista de sugerencias
  // ----------------------------------------------------------------------
  const handleSelectReservation = (res) => {
    setSelectedReservation(res)
    // Asignamos el id de la reserva al form
    setValue('id_reserva', res.id)
    // Limpiamos el buscador y cerramos las sugerencias
    setSearchTerm('')
    setShowSuggestions(false)
  }

  // ----------------------------------------------------------------------
  // Manejador para quitar la reserva seleccionada
  // ----------------------------------------------------------------------
  const handleRemoveReservation = () => {
    setSelectedReservation(null)
    setValue('id_reserva', '')
  }

  const onSubmit = data => {
    try {
      if (!currentUser?.id) {
        toast.error('Error: Usuario no disponible');
        return;
      }

      const formattedData = {
        ...data,
        id_categoria: data.id_categoria,
        id_reserva: data.id_reserva || null,
        id_usuario: currentUser.id,
        monto: parseFloat(data.monto || '0'),
        // Las URLs de Cloudinary ya estÃ¡n en los campos
        factura_pdf: data.factura_pdf || null,
        factura_xml: data.factura_xml || null,
        archivo_prueba: data.archivo_prueba || null
      };

      // ValidaciÃ³n adicional por seguridad
      if (isNaN(formattedData.monto) || formattedData.monto <= 0) {
        toast.error('El monto debe ser mayor que 0');
        return;
      }

      if (!formattedData.id_categoria) {
        toast.error('Debe seleccionar una categorÃ­a');
        return;
      }

      console.log('Enviando datos financieros:', formattedData);
      onSave(formattedData);
    } catch (error) {
      console.error('Error al procesar el formulario:', error);
      toast.error('Error al procesar el formulario. Por favor, revise los datos e intente nuevamente.');
    }
  }

  const handleAddCategory = () => {
    if (newCategory && !categories.find(cat => cat.nombre === newCategory)) {
      onAddCategory({ nombre: newCategory, color: categoryColor || '#000000' })
      setNewCategory('')
      setShowNewCategoryInput(false)
    }
  }

  // Asegurarnos de que id_usuario estÃ© establecido
  useEffect(() => {
    if (currentUser?.id) {
      setValue('id_usuario', currentUser.id);
    } else {
      console.error('No hay usuario disponible');
    }
  }, [currentUser, setValue]);

  // Establecer id_usuario al montar el componente
  useEffect(() => {
    if (currentUser?.id && !watch('id_usuario')) {
      setValue('id_usuario', currentUser.id);
    }
  }, []);

  return (
    <form
      id={activeTab + 'Form'}
      onSubmit={handleSubmit(onSubmit)}
      className='flex flex-col space-y-4 max-h-[calc(100vh-200px)] overflow-y-auto px-4 py-3'
    >
      {/* Campo oculto para id_usuario */}
      <input type="hidden" {...register('id_usuario')} />
      <div className='grid grid-cols-1 lg:grid-cols-2 gap-3'>
        {/* Tipo */}
        <div>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Tipo
          </label>
          <div className='relative'>
            <FiDollarSign className='absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5 z-10 transition-colors duration-200' />
            <div className="relative">
              <select
                {...register('tipo')}
                className={`pl-10 w-full p-2.5 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white hover:border-indigo-300 transition-colors duration-200 ${
                  errors.tipo ? 'border-red-500' : ''
                }`}
              >
                <option value=''>Seleccionar tipo</option>
                <option value='ingreso'>Ingreso</option>
                <option value='gasto'>Gasto</option>
              </select>
              {errors.tipo && (
                <p className="mt-1 text-xs text-red-500">{errors.tipo.message}</p>
              )}
            </div>
          </div>
        </div>

        {/* Monto */}
        <div>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Monto
          </label>
          <Controller
            name='monto'
            control={control}
            defaultValue=""
            render={({ field: { onChange, value, ...field } }) => (
              <>
                <CurrencyInput
                  {...field}
                  value={value}
                  onChange={(e) => {
                    const numericValue = e.target.value.replace(/[^0-9.]/g, '');
                    const parsedValue = parseFloat(numericValue);
                    if (!isNaN(parsedValue)) {
                      onChange(numericValue);
                    }
                  }}
                  className={`pl-10 w-full p-2.5 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white hover:border-indigo-300 transition-colors duration-200 ${
                    errors.monto ? 'border-red-500' : ''
                  }`}
                  placeholder='Monto'
                  icon={FiDollarSign}
                />
                {errors.monto && (
                  <p className="mt-1 text-xs text-red-500">{errors.monto.message}</p>
                )}
              </>
            )}
          />
        </div>

        {/* Fecha */}
        <div>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Fecha
          </label>
          <div className='relative'>
            <FiCalendar className='absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5 z-10 transition-colors duration-200' />
            <input
              type='date'
              {...register('fecha')}
              className={`pl-10 w-full p-2.5 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white hover:border-indigo-300 transition-colors duration-200 ${
                errors.fecha ? 'border-red-500' : ''
              }`}
            />
            {errors.fecha && (
              <p className="mt-1 text-xs text-red-500">{errors.fecha.message}</p>
            )}
          </div>
        </div>

        {/* CategorÃ­a */}
        <div>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            CategorÃ­a
          </label>
          <div className='relative flex items-center'>
            <FiTag className='absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5 z-10 transition-colors duration-200' />
            <select
              {...register('id_categoria', {
                setValueAs: value => value === '' ? null : parseInt(value, 10)
              })}
              className={`pl-10 w-full p-2.5 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white hover:border-indigo-300 transition-colors duration-200 ${
                errors.id_categoria ? 'border-red-500' : ''
              }`}
            >
              <option value=''>Seleccionar categorÃ­a</option>
              {categories.map(cat => (
                <option key={cat.id} value={cat.id}>
                  {cat.nombre}
                </option>
              ))}
            </select>
            {errors.id_categoria && (
              <p className="mt-1 text-xs text-red-500">{errors.id_categoria.message}</p>
            )}
            <button
              type='button'
              onClick={() => setShowNewCategoryInput(!showNewCategoryInput)}
              className='ml-2 p-2.5 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 shadow-sm transition-all duration-200 hover:shadow-md'
            >
              {showNewCategoryInput ? <FiMinus /> : <FiPlus />}
            </button>
          </div>
        </div>
      </div>

      {showNewCategoryInput && (
        <div className='mt-2 p-3 bg-gray-100 rounded-md'>
          <div className='flex items-center space-x-2 mb-2'>
            <input
              type='text'
              value={newCategory}
              onChange={e => setNewCategory(e.target.value)}
              placeholder='Nueva categorÃ­a'
              className='flex-grow p-2.5 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white hover:border-indigo-300 transition-colors duration-200'
            />
            <div
              className='w-8 h-8 rounded-full cursor-pointer'
              style={{ backgroundColor: categoryColor }}
              onClick={() => setShowColorPicker(!showColorPicker)}
            />
          </div>
          <div className='mb-2'>
            <ColorPalette 
              selectedColor={categoryColor} 
              onSelectColor={setCategoryColor} 
            />
          </div>
          <button
            type='button'
            onClick={handleAddCategory}
            className='mt-2 p-2 bg-green-500 text-white rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500'
          >
            AÃ±adir CategorÃ­a
          </button>
        </div>
      )}

      {/* DescripciÃ³n */}
      <div className='lg:col-span-2'>
        <label className='block text-sm font-medium text-gray-700 mb-1'>
          DescripciÃ³n
        </label>
        <div className='relative'>
          <FiFileText className='absolute left-3 top-3 text-gray-500 w-5 h-5 z-10 transition-colors duration-200' />
          <textarea
            {...register('descripcion')}
            className='pl-10 w-full p-2.5 border rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white hover:border-indigo-300 transition-colors duration-200'
            rows='3'
            placeholder='DescripciÃ³n'
          ></textarea>
        </div>
      </div>

      {/* ------------------------------------------------------------- */}
      {/* Buscador de Reserva Asociada (Opcional) */}
      {/* ------------------------------------------------------------- */}
      <div className='lg:col-span-2'>
        <label className='block text-sm font-medium text-gray-700 mb-1'>
          Reserva Asociada (Opcional)
        </label>
        <div className='flex items-center text-sm text-gray-500 mb-1'>
          <FiInfo className='mr-1' />
          <span>
            Seleccione la reserva si el ingreso o gasto estÃ¡ relacionado con una reserva. De lo contrario, dÃ©jelo en blanco.
          </span>
        </div>

        {/* Si NO tenemos reserva seleccionada, mostramos el buscador */}
        {!selectedReservation && (
          <div className='relative'>
            <FiSearch className='absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5 z-10 transition-colors duration-200' />
            <input
              type='text'
              className='pl-10 w-full p-2 border rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500'
              placeholder='Buscar reserva por ID o nombre del festejado...'
              value={searchTerm}
              onChange={e => {
                setSearchTerm(e.target.value)
                setShowSuggestions(true)
              }}
            />

            {/* Lista de sugerencias */}
            {showSuggestions && filteredReservations.length > 0 && (
              <ul className='absolute z-10 mt-1 bg-white border border-gray-200 rounded-md w-full max-h-60 overflow-auto shadow-lg'>
                {filteredReservations.map(res => (
                  <li
                    key={res.id}
              className='px-4 py-2.5 cursor-pointer hover:bg-indigo-50 transition-colors duration-200'
                    onClick={() => handleSelectReservation(res)}
                  >
                    {`Reserva #${res.id} - ${res.nombre_festejado}`}
                  </li>
                ))}
              </ul>
            )}

            {/* Registramos un input oculto para id_reserva */}
            <input
              type='hidden'
              {...register('id_reserva')}
            />
          </div>
        )}

        {/* Si SÃ tenemos reserva seleccionada, mostramos el "chip" con opciÃ³n de quitar */}
        {selectedReservation && (
          <div className='flex items-center bg-gray-50 p-2.5 rounded-lg border mt-2 hover:bg-gray-100 transition-colors duration-200'>
            <div className='flex-1 text-sm text-gray-700'>
              <strong>Reserva #{selectedReservation.id}</strong> - {selectedReservation.nombre_festejado}
            </div>
            <button
              type='button'
              className='p-1 text-gray-500 hover:text-gray-700'
              onClick={handleRemoveReservation}
            >
              <FiX className='w-4 h-4' />
            </button>
          </div>
        )}
      </div>
      {/* ------------------------------------------------------------- */}

      {/* BotÃ³n para mostrar/ocultar facturas */}
      <div className='lg:col-span-2'>
        <button
          type='button'
          onClick={() => setShowInvoiceFields(!showInvoiceFields)}
          className='w-full p-2 flex items-center text-gray-700 hover:text-gray-900 transition-colors duration-200'
        >
          <div className='flex-1 flex items-center'>
            <div className={`w-6 h-6 rounded-full flex items-center justify-center mr-2 transition-colors duration-200 ${
              showInvoiceFields ? 'bg-indigo-100 text-indigo-600' : 'bg-gray-100'
            }`}>
              <FiFile className='w-4 h-4' />
            </div>
            <span className='font-medium'>
              {showInvoiceFields ? 'Ocultar facturas' : 'Agregar facturas'}
            </span>
          </div>
          <FiChevronDown 
            className={`w-5 h-5 transform transition-transform duration-200 ${
              showInvoiceFields ? 'rotate-180 text-indigo-600' : 'text-gray-400'
            }`}
          />
        </button>
      </div>

      {/* SecciÃ³n de facturas con animaciÃ³n suave y scroll */}
      <div 
        className={`space-y-4 transition-all duration-700 ease-in-out transform origin-top ${
          showInvoiceFields 
            ? 'opacity-100 max-h-[800px] mb-4 scale-y-100' 
            : 'opacity-0 max-h-0 mb-0 scale-y-95 overflow-hidden'
        }`}
      >
        <div className='lg:col-span-2 space-y-4'>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Factura PDF
          </label>
          <Controller
            name="factura_pdf"
            control={control}
            defaultValue=""
            render={({ field }) => (
              <CloudinaryFileSelector
                value={field.value}
                onChange={field.onChange}
                placeholder="Selecciona o sube un archivo PDF"
                acceptTypes="application/pdf"
                label="Factura PDF"
                icon={FiFilePdf}
              />
            )}
          />
        </div>

        {/* Factura XML */}
        <div className='lg:col-span-2'>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Factura XML
          </label>
          <Controller
            name="factura_xml"
            control={control}
            defaultValue=""
            render={({ field }) => (
              <CloudinaryFileSelector
                value={field.value}
                onChange={field.onChange}
                placeholder="Selecciona o sube un archivo XML"
                acceptTypes="application/xml,text/xml"
                label="Factura XML"
                icon={FiCode}
              />
            )}
          />
        </div>

        {/* Archivo de prueba */}
        <div className='lg:col-span-2'>
          <label className='block text-sm font-medium text-gray-700 mb-1'>
            Archivo de Prueba (Opcional - PNG, JPG o PDF)
          </label>
          <Controller
            name="archivo_prueba"
            control={control}
            defaultValue=""
            render={({ field }) => (
              <CloudinaryFileSelector
                value={field.value}
                onChange={field.onChange}
                placeholder="Selecciona o sube un archivo (PNG, JPG o PDF)"
                acceptTypes="image/png,image/jpeg,application/pdf"
                label="Archivo de Prueba"
                icon={FiFile}
              />
            )}
          />
        </div>
      </div>

      {/* BotÃ³n de guardar */}
      <div className="mt-6 flex justify-end">
        <button
          type="submit"
          className="flex items-center px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors duration-200"
        >
          <FiSave className="mr-2" />
          Guardar
        </button>
      </div>
    </form>
  )
}

export default FinanceForm
\n\n

=== ./finanzas/pages/FinanceTable.jsx ===
import React, { useMemo } from 'react';
import { FiEdit2, FiTrash2, FiEye, FiFileText, FiFile } from 'react-icons/fi';
import PropTypes from 'prop-types';
// Usar el alias @ para garantizar resoluciÃ³n correcta en Docker
import { formatDate, formatNumber } from '@shared/utils/formatters';

const FinanceTable = ({ 
    finances, 
    handleEditItem, 
    handleDeleteItem, 
    handleViewDetails, 
    categories,  
    generateMonthlyReport 
}) => {
    const getCategoryColor = (finance) => {
        return finance.categoria ? finance.categoria.color : '#CCCCCC';
    };
    
    const getCategoryName = (finance) => {
        return finance.categoria ? finance.categoria.nombre : 'Sin categorÃ­a';
    };

    // Filtramos las finanzas activas
    const activeFinances = useMemo(() => {
        return finances.filter(finance => finance.activo);
    }, [finances]);

    const monthlyTotal = useMemo(() => {
        return activeFinances.reduce((total, finance) => {
            return total + (finance.tipo === 'ingreso' ? finance.monto : -finance.monto);
        }, 0);
    }, [activeFinances]);

    return (
        <div className="overflow-x-auto">
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold">
                    Total del mes: {formatNumber(monthlyTotal)}
                </h3>
                <button
                    onClick={generateMonthlyReport}
                    className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded inline-flex items-center"
                >
                    <FiFileText className="mr-2" />
                    Generar Informe
                </button>
            </div>

            <table className="w-full min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        DescripciÃ³n
                    </th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Monto
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Fecha
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        CategorÃ­a
                    </th>
                    <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Archivo
                    </th>
                    <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Acciones
                    </th>
                </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                {activeFinances.map((finance) => (
                    <tr key={finance.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm font-medium text-gray-900">{finance.descripcion}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right">
                            <div className={`text-sm font-medium ${finance.tipo === 'ingreso' ? 'text-green-600' : 'text-red-600'}`}>
                                {finance.tipo === 'ingreso' ? '+' : '-'}
                                {formatNumber(Math.abs(finance.monto))}
                            </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-gray-900">{formatDate(finance.fecha)}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                            <span
                                className="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full"
                                style={{
                                    backgroundColor: getCategoryColor(finance),
                                    color: '#FFFFFF'
                                }}
                            >
                                {getCategoryName(finance)}
                            </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-center">
                            {finance.factura_pdf || finance.factura_xml || finance.archivo_prueba ? (
                                <button
                                    onClick={() => handleViewDetails(finance)}
                                    className="text-indigo-600 hover:text-indigo-900"
                                    title="Ver archivos"
                                >
                                    <FiFile className="h-5 w-5" />
                                </button>
                            ) : (
                                <span className="text-gray-400">N/A</span>
                            )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                            <button
                                onClick={() => handleViewDetails(finance)}
                                className="text-green-600 hover:text-green-900 mr-2"
                                title="Ver detalles"
                            >
                                <FiEye className="h-5 w-5" />
                            </button>
                            <button
                                onClick={() => handleEditItem(finance)}
                                className="text-indigo-600 hover:text-indigo-900 mr-2"
                                title="Editar"
                            >
                                <FiEdit2 className="h-5 w-5" />
                            </button>
                            <button
                                onClick={() => handleDeleteItem(finance.id)}
                                className="text-red-600 hover:text-red-900"
                                title="Eliminar"
                            >
                                <FiTrash2 className="h-5 w-5" />
                            </button>
                        </td>
                    </tr>
                ))}
                </tbody>
            </table>
        </div>
    );
};

FinanceTable.propTypes = {
    finances: PropTypes.arrayOf(PropTypes.shape({
        id: PropTypes.number.isRequired,
        descripcion: PropTypes.string.isRequired,
        monto: PropTypes.number.isRequired,
        tipo: PropTypes.oneOf(['ingreso', 'gasto']).isRequired,
        fecha: PropTypes.string.isRequired,
        categoria: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        factura_pdf: PropTypes.string,
        factura_xml: PropTypes.string,
        archivo_prueba: PropTypes.string,
        activo: PropTypes.bool.isRequired
    })).isRequired,
    handleEditItem: PropTypes.func.isRequired,
    handleDeleteItem: PropTypes.func.isRequired,
    handleViewDetails: PropTypes.func.isRequired,
    categories: PropTypes.arrayOf(PropTypes.shape({
        id: PropTypes.number.isRequired,
        nombre: PropTypes.string.isRequired,
        color: PropTypes.string.isRequired,
    })).isRequired,
    generateMonthlyReport: PropTypes.func.isRequired,
};

export default FinanceTable;\n\n

=== ./finanzas/pages/FinancialSummary.jsx ===
import React, { useState, useMemo, useEffect } from 'react';
import { motion } from 'framer-motion';
import { FiPieChart, FiBarChart, FiChevronDown, FiChevronUp } from 'react-icons/fi';
import { Bar, Pie } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend);

// FunciÃ³n para formatear moneda de manera compacta en dispositivos mÃ³viles
const formatCompactCurrency = (value) => {
    if (value >= 1000000) {
        return '$' + (value / 1000000).toFixed(1) + 'M';
    }
    if (value >= 1000) {
        return '$' + (value / 1000).toFixed(1) + 'k';
    }
    return '$' + value.toFixed(2);
};

const FinancialSummary = ({ finances, filterDataByMonth, categories }) => {
    const [chartType, setChartType] = useState('bar');
    const [selectedCategories, setSelectedCategories] = useState([]);
    const [showCategoryMenu, setShowCategoryMenu] = useState(false);

    const filteredFinances = useMemo(() => filterDataByMonth(finances, 'fecha'), [finances, filterDataByMonth]);

    const categoryMap = useMemo(() => {
        return categories.reduce((acc, cat) => {
            acc[cat.id] = cat.nombre;
            return acc;
        }, {});
    }, [categories]);

    const categoryData = useMemo(() => {
        const cats = {};
        filteredFinances.forEach(f => {
            const categoryName = f.categoria ? f.categoria.nombre : 'Sin categorÃ­a';
            if (!cats[categoryName]) {
                cats[categoryName] = { ingreso: 0, gasto: 0 };
            }
            cats[categoryName][f.tipo] += f.monto;
        });
        return cats;
    }, [filteredFinances]);

    useEffect(() => {
        setSelectedCategories(Object.keys(categoryData));
    }, [categoryData]);

    const chartData = useMemo(() => {
        const labels = Object.keys(categoryData).filter(cat => selectedCategories.includes(cat));
        const incomeData = labels.map(cat => categoryData[cat].ingreso);
        const expenseData = labels.map(cat => categoryData[cat].gasto);

        if (chartType === 'pie') {
            return {
                labels: [...labels.map(l => `${l} (Ingresos)`), ...labels.map(l => `${l} (Gastos)`)],
                datasets: [
                    {
                        data: [...incomeData, ...expenseData],
                        backgroundColor: [
                            ...labels.map(() => `rgba(54, 162, 235, ${Math.random() * 0.5 + 0.3})`),
                            ...labels.map(() => `rgba(255, 99, 132, ${Math.random() * 0.5 + 0.3})`)
                        ],
                    }
                ],
            };
        }

        return {
            labels,
            datasets: [
                {
                    label: 'Ingresos',
                    data: incomeData,
                    backgroundColor: 'rgba(54, 162, 235, 0.6)',
                },
                {
                    label: 'Gastos',
                    data: expenseData,
                    backgroundColor: 'rgba(255, 99, 132, 0.6)',
                }
            ],
        };
    }, [categoryData, selectedCategories, chartType]);

    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false, // Permite que el grÃ¡fico se ajuste al contenedor
        plugins: {
            legend: {
                position: window.innerWidth < 768 ? 'bottom' : 'top', // Leyenda abajo en mÃ³viles
                labels: {
                    boxWidth: window.innerWidth < 768 ? 12 : 40, // Cajas mÃ¡s pequeÃ±as en mÃ³viles
                    font: {
                        size: window.innerWidth < 768 ? 10 : 12 // Fuente mÃ¡s pequeÃ±a en mÃ³viles
                    }
                }
            },
            title: {
                display: false, // Ocultar el tÃ­tulo del grÃ¡fico ya que lo mostramos fuera
            },
            tooltip: {
                callbacks: {
                    label: function(context) {
                        let label = context.label || '';
                        if (label) {
                            label += ': ';
                        }
                        if (context.parsed.y !== null) {
                            label += new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(context.parsed.y || context.parsed);
                        }
                        return label;
                    }
                }
            }
        },
        scales: chartType === 'bar' ? {
            x: {
                ticks: {
                    autoSkip: true, // Permitir saltar etiquetas si no hay espacio
                    maxRotation: window.innerWidth < 768 ? 45 : 90, // Menor rotaciÃ³n en mÃ³viles
                    minRotation: 0,
                    font: {
                        size: window.innerWidth < 768 ? 8 : 11 // Fuente mÃ¡s pequeÃ±a en mÃ³viles
                    }
                }
            },
            y: {
                beginAtZero: true,
                ticks: {
                    callback: function(value) {
                        // Formato abreviado para mÃ³viles
                        if (window.innerWidth < 768) {
                            if (value >= 1000) {
                                return '$' + (value / 1000).toFixed(1) + 'k';
                            }
                            return '$' + value;
                        }
                        return new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(value);
                    },
                    font: {
                        size: window.innerWidth < 768 ? 8 : 11 // Fuente mÃ¡s pequeÃ±a en mÃ³viles
                    }
                },
            },
        } : undefined,
    };

    const renderChart = () => {
        const ChartComponent = chartType === 'bar' ? Bar : Pie;
        return <ChartComponent data={chartData} options={chartOptions} />;
    };

    const handleCategoryChange = (category) => {
        setSelectedCategories(prev => 
            prev.includes(category)
                ? prev.filter(c => c !== category)
                : [...prev, category]
        );
    };

    return (
        <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="h-full"
        >
            {/* Header con gradiente */}
            <div className="bg-gradient-to-r from-purple-600 to-indigo-600 p-6 rounded-t-xl">
                <div className="flex items-center justify-between">
                    <h2 className="text-xl font-semibold text-white">Finanzas</h2>
                    <div className="p-2 rounded-full bg-white/20 text-white">
                        <button
                            onClick={() => setChartType(chartType === 'bar' ? 'pie' : 'bar')}
                            className="w-8 h-8 flex items-center justify-center rounded-full hover:bg-white/20 transition-all duration-300"
                            title={`Cambiar a grÃ¡fico de ${chartType === 'bar' ? 'pastel' : 'barras'}`}
                        >
                            {chartType === 'bar' ? <FiPieChart className="w-5 h-5" /> : <FiBarChart className="w-5 h-5" />}
                        </button>
                    </div>
                </div>
            </div>
            
            {/* Contenido */}
            <div className="p-4 md:p-6 bg-white">
                {/* Tarjetas de resumen */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-6 mb-6">
                    <div className="bg-white rounded-lg p-3 md:p-4 shadow-sm border border-gray-100 text-center">
                        <div className="mx-auto w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-full bg-blue-100 text-blue-600 mb-2 md:mb-3">
                            <svg xmlns="http://www.w3.org/2000/svg" className="w-4 h-4 md:w-5 md:h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <polyline points="22 7 13.5 15.5 8.5 10.5 2 17"></polyline>
                                <polyline points="16 7 22 7 22 13"></polyline>
                            </svg>
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className="text-base md:text-xl font-bold text-gray-800">
                                {window.innerWidth < 768
                                    ? formatCompactCurrency(filteredFinances.reduce((sum, f) => f.tipo === 'ingreso' ? sum + f.monto : sum, 0))
                                    : new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(
                                        filteredFinances.reduce((sum, f) => f.tipo === 'ingreso' ? sum + f.monto : sum, 0)
                                    )
                                }
                            </p>
                            <p className="text-xs md:text-sm font-medium text-gray-600 text-center">Ingresos</p>
                        </div>
                    </div>
                    <div className="bg-white rounded-lg p-3 md:p-4 shadow-sm border border-gray-100 text-center">
                        <div className="mx-auto w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-full bg-red-100 text-red-600 mb-2 md:mb-3">
                            <svg xmlns="http://www.w3.org/2000/svg" className="w-4 h-4 md:w-5 md:h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <polyline points="22 17 13.5 8.5 8.5 13.5 2 7"></polyline>
                                <polyline points="16 17 22 17 22 11"></polyline>
                            </svg>
                        </div>
                        <div className="flex flex-col items-center justify-center">
                            <p className="text-base md:text-xl font-bold text-gray-800">
                                {window.innerWidth < 768
                                    ? formatCompactCurrency(filteredFinances.reduce((sum, f) => f.tipo === 'gasto' ? sum + f.monto : sum, 0))
                                    : new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(
                                        filteredFinances.reduce((sum, f) => f.tipo === 'gasto' ? sum + f.monto : sum, 0)
                                    )
                                }
                            </p>
                            <p className="text-xs md:text-sm font-medium text-gray-600 text-center">Gastos</p>
                        </div>
                    </div>
                </div>

                {/* Selector de categorÃ­as */}
                <div className="mb-4 md:mb-6">
                    <button
                        onClick={() => setShowCategoryMenu(!showCategoryMenu)}
                        className="flex items-center justify-between w-full p-2 md:p-3 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-all duration-300"
                    >
                        <div className="flex items-center">
                            <div className="w-6 h-6 md:w-8 md:h-8 flex items-center justify-center rounded-full bg-purple-100 text-purple-600 mr-2 md:mr-3">
                                <svg xmlns="http://www.w3.org/2000/svg" className="w-3 h-3 md:w-4 md:h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <path d="M3 6h18"></path>
                                    <path d="M3 12h18"></path>
                                    <path d="M3 18h18"></path>
                                </svg>
                            </div>
                            <span className="text-sm md:text-base font-medium text-gray-700">Seleccionar CategorÃ­as</span>
                        </div>
                        <div className="w-5 h-5 md:w-6 md:h-6 flex items-center justify-center rounded-full bg-purple-100 text-purple-600">
                            {showCategoryMenu ? <FiChevronUp className="w-3 h-3 md:w-4 md:h-4" /> : <FiChevronDown className="w-3 h-3 md:w-4 md:h-4" />}
                        </div>
                    </button>
                    
                    {showCategoryMenu && (
                        <motion.div
                            initial={{ opacity: 0, y: -10, height: 0 }}
                            animate={{ opacity: 1, y: 0, height: 'auto' }}
                            exit={{ opacity: 0, y: -10, height: 0 }}
                            transition={{ duration: 0.3, ease: "easeInOut" }}
                            className="mt-2 md:mt-3 p-3 md:p-4 border border-gray-200 rounded-lg shadow-sm bg-white overflow-hidden"
                        >
                            <div className="flex flex-wrap gap-1 md:gap-2">
                                {Object.keys(categoryData).map(category => (
                                    <button
                                        key={category}
                                        onClick={() => handleCategoryChange(category)}
                                        className={`px-2 py-1 md:px-3 md:py-2 rounded-lg text-xs md:text-sm font-medium transition-all duration-200 ${
                                            selectedCategories.includes(category)
                                                ? 'bg-purple-100 text-purple-700 shadow-sm'
                                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                        }`}
                                    >
                                        {category}
                                    </button>
                                ))}
                            </div>
                        </motion.div>
                    )}
                </div>
                
                {/* GrÃ¡fico */}
                <div className="bg-white rounded-lg p-3 md:p-4 shadow-sm border border-gray-200">
                    <h3 className="text-base md:text-lg font-semibold text-gray-700 mb-2 md:mb-4 text-center">Resumen por CategorÃ­as</h3>
                    <div className="h-[250px] md:h-[300px] lg:h-[350px]">
                        {renderChart()}
                    </div>
                </div>
            </div>
        </motion.div>
    );
};

export default FinancialSummary;\n\n

=== ./finanzas/pages/MonthlyReportModal.jsx ===
import React, { useRef, useEffect } from 'react';
import { Bar } from 'react-chartjs-2';
import { FiTrendingUp, FiTrendingDown, FiPrinter, FiDownload, FiX } from 'react-icons/fi';
// Usar el alias @ para garantizar resoluciÃ³n correcta en Docker
import { formatNumber } from '@shared/utils/formatters';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

const MonthlyReportModal = ({ isOpen, onClose, finances, categories, selectedMonth, selectedYear }) => {
    const reportRef = useRef(null);

    // Add event listener for escape key
    useEffect(() => {
        const handleEscKey = (event) => {
            if (event.key === 'Escape') {
                onClose();
            }
        };

        // Add event listener
        document.addEventListener('keydown', handleEscKey);

        // Cleanup function
        return () => {
            document.removeEventListener('keydown', handleEscKey);
        };
    }, [onClose]);

    if (!isOpen) return null;

    // Filtrar finanzas del mes actual
    const currentMonthFinances = finances.filter(finance => {
        const financeDate = new Date(finance.fecha);
        return financeDate.getMonth() === selectedMonth && 
               financeDate.getFullYear() === selectedYear;
    });

    // Calcular mes anterior
    const previousMonth = selectedMonth === 0 ? 11 : selectedMonth - 1;
    const previousYear = selectedMonth === 0 ? selectedYear - 1 : selectedYear;

    // Filtrar finanzas del mes anterior
    const previousMonthFinances = finances.filter(finance => {
        const financeDate = new Date(finance.fecha);
        return financeDate.getMonth() === previousMonth && 
               financeDate.getFullYear() === previousYear;
    });

    const categoryTotals = currentMonthFinances.reduce((acc, finance) => {
        const categoryName = finance.categoria?.nombre || 'Sin categorÃ­a';
        if (!acc[categoryName]) {
            acc[categoryName] = { ingreso: 0, gasto: 0 };
        }
        acc[categoryName][finance.tipo] += finance.monto;
        return acc;
    }, {});

    const chartData = {
        labels: Object.keys(categoryTotals),
        datasets: [
            {
                label: 'Ingresos',
                data: Object.values(categoryTotals).map(cat => cat.ingreso),
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
            },
            {
                label: 'Gastos',
                data: Object.values(categoryTotals).map(cat => cat.gasto),
                backgroundColor: 'rgba(255, 99, 132, 0.6)',
            }
        ]
    };

    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            y: {
                beginAtZero: true,
                ticks: {
                    callback: function(value) {
                        return formatNumber(value);
                    },
                },
            },
        },
    };

    // Calcular totales del mes anterior
    const previousMonthIngresos = previousMonthFinances.reduce((sum, f) => f.tipo === 'ingreso' ? sum + f.monto : sum, 0);
    const previousMonthGastos = previousMonthFinances.reduce((sum, f) => f.tipo === 'gasto' ? sum + f.monto : sum, 0);
    const previousMonthBalance = previousMonthIngresos - previousMonthGastos;

    // Calcular totales del mes actual
    const totalIngresos = currentMonthFinances.reduce((sum, f) => f.tipo === 'ingreso' ? sum + f.monto : sum, 0);
    const totalGastos = currentMonthFinances.reduce((sum, f) => f.tipo === 'gasto' ? sum + f.monto : sum, 0);
    const balance = totalIngresos - totalGastos;

    // Calcular diferencia porcentual
    const balanceChange = previousMonthBalance !== 0 
        ? ((balance - previousMonthBalance) / Math.abs(previousMonthBalance)) * 100 
        : balance > 0 ? 100 : balance < 0 ? -100 : 0;

    const handlePrint = () => {
        const printContent = document.getElementById('monthly-report');
        const winPrint = window.open('', '', 'left=0,top=0,width=800,height=900,toolbar=0,scrollbars=0,status=0');
        winPrint.document.write(`
            <html>
                <head>
                    <title>Informe Mensual</title>
                    <style>
                        body { font-family: Arial, sans-serif; }
                        .page-break { page-break-after: always; }
                        table { width: 100%; border-collapse: collapse; }
                        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                        th { background-color: #f2f2f2; }
                    </style>
                </head>
                <body>
                    ${printContent.innerHTML}
                </body>
            </html>
        `);
        winPrint.document.close();
        winPrint.focus();
        winPrint.print();
        winPrint.close();
    };

    const handleExportPDF = () => {
        const input = document.getElementById('monthly-report');
        html2canvas(input, { scale: 2 }).then((canvas) => {
            const imgData = canvas.toDataURL('image/png');
            const pdf = new jsPDF('p', 'mm', 'a4');
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();
            const imgWidth = canvas.width;
            const imgHeight = canvas.height;
            const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
            const imgX = (pdfWidth - imgWidth * ratio) / 2;
            const imgY = 30;
            pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);
            pdf.save("informe_mensual.pdf");
        });
    };

    return (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center z-50">
            <div className="bg-white p-8 rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto relative">
                <button
                    onClick={onClose}
                    className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
                >
                    <FiX size={24} />
                </button>
                <div id="monthly-report" ref={reportRef}>
                    <h2 className="text-2xl font-bold mb-4">Informe Mensual de Finanzas</h2>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                        <div className="bg-blue-100 p-4 rounded-lg">
                            <h3 className="text-lg font-semibold mb-2">Ingresos</h3>
                            <p className="text-2xl text-blue-600">{formatNumber(totalIngresos)}</p>
                        </div>
                        <div className="bg-red-100 p-4 rounded-lg">
                            <h3 className="text-lg font-semibold mb-2">Gastos</h3>
                            <p className="text-2xl text-red-600">{formatNumber(totalGastos)}</p>
                        </div>
                        <div className={`p-4 rounded-lg ${balance >= 0 ? 'bg-green-100' : 'bg-yellow-100'}`}>
                            <h3 className="text-lg font-semibold mb-2">Balance</h3>
                            <p className={`text-2xl ${balance >= 0 ? 'text-green-600' : 'text-yellow-600'}`}>
                                {formatNumber(balance)}
                            </p>
                        </div>
                    </div>
                    <div className="mb-6">
                        <h3 className="text-xl font-semibold mb-4">AnÃ¡lisis</h3>
                        <div className="space-y-4">
                            {/* Mes Actual */}
                            <div className="flex items-center">
                                {balance >= 0 ? (
                                    <FiTrendingUp className="text-green-500 text-4xl mr-2" />
                                ) : (
                                    <FiTrendingDown className="text-red-500 text-4xl mr-2" />
                                )}
                                <p className="text-lg">
                                    {balance >= 0
                                        ? `Ganancia de ${formatNumber(balance)}`
                                        : `PÃ©rdida de ${formatNumber(Math.abs(balance))}`}
                                </p>
                            </div>

                            {/* ComparaciÃ³n con Mes Anterior */}
                            <div className="bg-gray-50 p-4 rounded-lg">
                                <h4 className="text-md font-medium mb-2">ComparaciÃ³n con Mes Anterior</h4>
                                <div className="grid grid-cols-2 gap-4">
                                    <div>
                                        <p className="text-sm text-gray-600">Balance Mes Anterior:</p>
                                        <p className={`text-lg font-medium ${previousMonthBalance >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                                            {formatNumber(previousMonthBalance)}
                                        </p>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-600">Cambio Porcentual:</p>
                                        <div className="flex items-center">
                                            {balanceChange > 0 ? (
                                                <FiTrendingUp className="text-green-500 mr-1" />
                                            ) : balanceChange < 0 ? (
                                                <FiTrendingDown className="text-red-500 mr-1" />
                                            ) : (
                                                <span className="text-gray-500 mr-1">=</span>
                                            )}
                                            <p className={`text-lg font-medium ${
                                                balanceChange > 0 ? 'text-green-600' : 
                                                balanceChange < 0 ? 'text-red-600' : 
                                                'text-gray-600'
                                            }`}>
                                                {balanceChange.toFixed(1)}%
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="mb-6">
                        <h3 className="text-xl font-semibold mb-2">Resumen por CategorÃ­as</h3>
                        <div style={{ height: '300px' }}>
                            <Bar data={chartData} options={chartOptions} />
                        </div>
                    </div>
                </div>
                <div className="flex justify-end space-x-2 mt-4">
                    <button
                        onClick={handlePrint}
                        className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded inline-flex items-center"
                    >
                        <FiPrinter className="mr-2" />
                        Imprimir
                    </button>
                    <button
                        onClick={handleExportPDF}
                        className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded inline-flex items-center"
                    >
                        <FiDownload className="mr-2" />
                        Exportar PDF
                    </button>
                </div>
            </div>
        </div>
    );
};

export default MonthlyReportModal;\n\n

=== ./finanzas/pages/index.js ===
// Exportar todos los componentes de finanzas/pages
// src\domains\finanzas\pages\index.js
export * from './payment';\n\n

=== ./finanzas/pages/payment/PaymentDetails.jsx ===
import React from 'react';
// Usar el alias @ para garantizar resoluciÃ³n correcta en Docker
import { formatDate, formatNumber } from '@/utils/formatters';

const PaymentDetails = ({ payment }) => {
  return (
    <div className='space-y-4'>
      <div>
        <h3 className='text-lg font-medium'>ID de Reserva:</h3>
        <p>{payment.id_reserva}</p>
      </div>
      <div>
        <h3 className='text-lg font-medium'>Monto:</h3>
        <p>{formatNumber(payment.monto)}</p>
      </div>
      <div>
        <h3 className='text-lg font-medium'>Fecha de Pago:</h3>
        <p>{formatDate(payment.fecha_pago)}</p>
      </div>
      <div>
        <h3 className='text-lg font-medium'>MÃ©todo de Pago:</h3>
        <p>{payment.metodo_pago}</p>
      </div>

    
            
    </div>
  );
};

export default PaymentDetails;
\n\n

=== ./finanzas/pages/payment/PaymentForm.jsx ===
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { toast } from 'react-hot-toast';
import { 
  FiDollarSign, 
  FiCalendar, 
  FiCreditCard, 
  FiMapPin, 
  FiCheckCircle, 
  FiSearch 
} from 'react-icons/fi';

// Componente para mostrar un campo de informaciÃ³n
const InfoField = ({ icon: Icon, label, value }) => (
  <div className="mb-4">
    <label className="block text-sm font-medium text-gray-500 mb-1">
      <div className="flex items-center">
        <Icon className="mr-2 text-gray-400" />
        {label}
      </div>
    </label>
    <div className="mt-1 p-2 bg-gray-50 rounded-md">
      <span className="text-gray-900">{value}</span>
    </div>
  </div>
);

// Componente principal del formulario de pago
export const PaymentForm = ({
  payment,
  onUpdateStatus,
  reservations = [],
  onSave
}) => {
  const isEditing = !!payment;

  const [formData, setFormData] = useState({
    id_reserva: payment ? payment.id_reserva : '',
    monto: payment ? payment.monto : '',
    fecha_pago: payment ? payment.fecha_pago : new Date().toISOString().split('T')[0],
    metodo_pago: payment ? payment.metodo_pago : '',
    estado: payment ? payment.estado : 'pendiente',
  });

  // Estado para manejar la bÃºsqueda y las reservas filtradas
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredReservations, setFilteredReservations] = useState(reservations);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [reservationPayments, setReservationPayments] = useState({ total: 0, completed: 0 });


  // Efecto para filtrar reservas
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredReservations(reservations);
    } else {
      const filtered = reservations.filter((res) => {
        const nombreFestejado = res.nombre_festejado?.toLowerCase() || '';
        const nombreUsuario = res.usuario?.nombre?.toLowerCase() || '';
        const term = searchTerm.toLowerCase();
        return (
          nombreFestejado.includes(term) ||
          nombreUsuario.includes(term) ||
          res.id.toString() === term
        );
      });
      setFilteredReservations(filtered);
    }
  }, [searchTerm, reservations]);

  // Efecto para cargar los pagos de la reserva seleccionada
  useEffect(() => {
    const fetchReservationPayments = async () => {
      if (formData.id_reserva) {
        try {
          const response = await fetch(`/api/pagos/reserva/${formData.id_reserva}`);
          const data = await response.json();
          const reservation = reservations.find(r => r.id === formData.id_reserva);
          
          if (reservation) {
            const completedPayments = data.reduce((sum, pago) => 
              pago.estado === 'completado' ? sum + parseFloat(pago.monto) : sum, 0
            );
            
            setReservationPayments({
              total: parseFloat(reservation.total),
              completed: completedPayments
            });
            
            // Actualizar el monto al restante por pagar
            const remaining = parseFloat(reservation.total) - completedPayments;
            setFormData(prev => ({
              ...prev,
              monto: remaining.toFixed(2)
            }));
          }
        } catch (error) {
          console.error('Error al cargar los pagos:', error);
        }
      }
    };

    fetchReservationPayments();
  }, [formData.id_reserva, reservations]);

  const getStatusColor = (status) => {
    switch (status) {
      case 'completado':
        return 'bg-green-100 text-green-800';
      case 'pendiente':
        return 'bg-yellow-100 text-yellow-800';
      case 'fallido':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getReservationInfo = (id) => {
    const reservation = reservations.find(r => r.id === id);
    return reservation 
      ? `#${reservation.id} - ${reservation.nombre_festejado || reservation.usuario?.nombre || 'Sin nombre'}`
      : 'No encontrada';
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === 'monto') {
      const monto = parseFloat(value);
      const remaining = reservationPayments.total - reservationPayments.completed;
      
      if (monto > remaining) {
        toast.error(`El monto mÃ¡ximo permitido es ${remaining.toFixed(2)}`);
        return;
      }
    }
    setFormData({ ...formData, [name]: value });
  };

  // Manejador para seleccionar una reserva del "autocompletado"
  const handleSelectReservation = (res) => {
    setSelectedReservation(res);
    setFormData({ 
      ...formData, 
      id_reserva: res.id,
      monto: '' // Se actualizarÃ¡ en el useEffect
    });
    setSearchTerm(res.nombre_festejado || res.usuario?.nombre || `Reserva #${res.id}`);
    setShowSuggestions(false);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (onSave) {
      // Asegurar que el estado sea 'completado' al crear
      const paymentData = {
        ...formData,
        estado: 'completado'
      };
      onSave(paymentData);
    }
  };

  if (!isEditing) {
    // Formulario para crear un nuevo pago
    return (
      <form onSubmit={handleSubmit} id="paymentsForm">
        <div className="space-y-6 p-6 bg-white rounded-lg">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Campo de Reserva (Ahora con buscador) */}
            <div className="mb-4 relative">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <div className="flex items-center">
                  <FiMapPin className="mr-2 text-gray-400" />
                  Buscar Reserva
                </div>
              </label>

              <div className="flex items-center bg-gray-50 rounded-md p-2">
                <FiSearch className="mr-2 text-gray-400" />
                <input
                  type="text"
                  placeholder="Buscar por nombre, festejado o ID..."
                  value={searchTerm}
                  onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setShowSuggestions(true);
                  }}
                  className="bg-transparent w-full focus:outline-none"
                />
              </div>

              {/* Lista desplegable de sugerencias */}
              {showSuggestions && filteredReservations.length > 0 && (
                <ul className="absolute z-10 mt-1 bg-white border border-gray-200 rounded-md w-full max-h-60 overflow-auto shadow-lg">
                  {filteredReservations.map((res) => {
                    const displayName =
                      res.nombre_festejado ||
                      res.usuario?.nombre ||
                      `Reserva #${res.id}`;
                    return (
                      <li
                        key={res.id}
                        className="px-4 py-2 cursor-pointer hover:bg-gray-100"
                        onClick={() => handleSelectReservation(res)}
                      >
                        #{res.id} - {displayName}
                      </li>
                    );
                  })}
                </ul>
              )}
            </div>

            {/* InformaciÃ³n de la Reserva */}
            {selectedReservation && (
              <div className="col-span-2 mb-4 p-4 bg-gray-50 rounded-lg">
                <h3 className="text-lg font-medium text-gray-900 mb-2">InformaciÃ³n de Pagos</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600">Total de la Reserva:</p>
                    <p className="text-lg font-semibold text-gray-900">
                      ${reservationPayments.total.toFixed(2)}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Pagado hasta ahora:</p>
                    <p className="text-lg font-semibold text-gray-900">
                      ${reservationPayments.completed.toFixed(2)}
                    </p>
                  </div>
                  <div className="col-span-2">
                    <p className="text-sm text-gray-600">Restante por pagar:</p>
                    <p className="text-lg font-semibold text-indigo-600">
                      ${(reservationPayments.total - reservationPayments.completed).toFixed(2)}
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Campo de Monto */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <div className="flex items-center">
                  <FiDollarSign className="mr-2 text-gray-400" />
                  Monto a Pagar
                </div>
              </label>
              <input
                type="number"
                name="monto"
                value={formData.monto}
                onChange={handleChange}
                className="mt-1 p-2 bg-gray-50 rounded-md w-full"
                required
                max={reservationPayments.total - reservationPayments.completed}
                step="0.01"
              />
              {selectedReservation && (
                <p className="text-sm text-gray-500 mt-1">
                  Monto mÃ¡ximo: ${(reservationPayments.total - reservationPayments.completed).toFixed(2)}
                </p>
              )}
            </div>

            {/* Campo de Fecha de Pago */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <div className="flex items-center">
                  <FiCalendar className="mr-2 text-gray-400" />
                  Fecha de Pago
                </div>
              </label>
              <input
                type="date"
                name="fecha_pago"
                value={formData.fecha_pago}
                onChange={handleChange}
                className="mt-1 p-2 bg-gray-50 rounded-md w-full"
                required
              />
            </div>

            {/* Campo de MÃ©todo de Pago */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <div className="flex items-center">
                  <FiCreditCard className="mr-2 text-gray-400" />
                  MÃ©todo de Pago
                </div>
              </label>
              <select
                name="metodo_pago"
                value={formData.metodo_pago}
                onChange={handleChange}
                className="mt-1 p-2 bg-gray-50 rounded-md w-full"
                required
              >
                <option value="">Seleccionar mÃ©todo de pago</option>
                <option value="efectivo">Efectivo</option>
                <option value="transferencia">Transferencia</option>
                <option value="tarjeta_debito" disabled>Tarjeta de dÃ©bito</option>
                <option value="tarjeta_credito" disabled>Tarjeta de crÃ©dito</option>
              </select>
            </div>
          </div>

          {/* SecciÃ³n de Estado del Pago */}
          <div className="mt-8 border-t pt-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
              <FiCheckCircle className="mr-2" />
              Estado del Pago
            </h3>
            <div className="flex flex-wrap gap-3">
              {['pendiente', 'completado', 'fallido'].map((status) => (
                <motion.button
                  key={status}
                  type="button"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setFormData({ ...formData, estado: status })}
                  className={`px-4 py-2 rounded-full capitalize font-medium ${
                    formData.estado === status 
                      ? `${getStatusColor(status)} ring-2 ring-offset-2 ring-indigo-500` 
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  {status}
                </motion.button>
              ))}
            </div>
          </div>
        </div>
      </form>
    );
  }

  // Si estamos editando o viendo un pago existente
  return (
    <div className="space-y-6 p-6 bg-white rounded-lg">
      {/* SecciÃ³n de InformaciÃ³n del Pago */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <InfoField
          icon={FiMapPin}
          label="Reserva"
          value={getReservationInfo(payment.id_reserva)}
        />
        <InfoField
          icon={FiDollarSign}
          label="Monto"
          value={`$${parseFloat(payment.monto).toFixed(2)}`}
        />
        <InfoField
          icon={FiCalendar}
          label="Fecha de Pago"
          value={new Date(payment.fecha_pago).toLocaleDateString()}
        />
        <InfoField
          icon={FiCreditCard}
          label="MÃ©todo de Pago"
          value={payment.metodo_pago}
        />
      </div>

      {/* SecciÃ³n de Estado del Pago */}
      <div className="mt-8 border-t pt-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
          <FiCheckCircle className="mr-2" />
          Estado del Pago
        </h3>

        <div className="flex flex-wrap gap-3">
          {['pendiente', 'completado', 'fallido'].map((status) => (
            <motion.button
              key={status}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => onUpdateStatus(payment.id, status)}
              className={`px-4 py-2 rounded-full capitalize font-medium ${
                payment.estado === status 
                  ? `${getStatusColor(status)} ring-2 ring-offset-2 ring-indigo-500` 
                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
              }`}
            >
              {status}
            </motion.button>
          ))}
        </div>
      </div>

      {/* Mensaje de Ayuda */}
      <div className="mt-4 text-sm text-gray-500 bg-gray-50 p-4 rounded-md">
        <p>
          Solo se puede modificar el estado del pago. Para realizar otros cambios, 
          contacta con el administrador del sistema.
        </p>
      </div>
    </div>
  );
};

export default PaymentForm;
\n\n

=== ./finanzas/pages/payment/PaymentModal.jsx ===
ï»¿import React from 'react';
import PropTypes from 'prop-types';
import Modal from '@shared/components/Modal';
import PaymentForm from './PaymentForm.jsx';

const PaymentModal = ({
    payment,
    isOpen,
    onClose,
    onUpdateStatus,
    onSavePayment,
    reservations,
    mode // 'add', 'edit', 'view'
}) => {
    const getTitle = () => {
        switch (mode) {
            case 'add':
                return 'Agregar Nuevo Pago';
            case 'edit':
                return 'Editar Pago';
            default:
                return 'Detalles del Pago';
        }
    };

    const footerContent = (
        <div className="flex justify-end gap-2">
            {mode === 'add' && (
                <>
                    <button
                        onClick={onClose}
                        className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition duration-150 ease-in-out"
                    >
                        Cancelar
                    </button>
                    <button
                        form="paymentsForm"
                        type="submit"
                        className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition duration-150 ease-in-out"
                    >
                        Guardar
                    </button>
                </>
            )}
            {mode !== 'add' && (
                <button
                    onClick={onClose}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition duration-150 ease-in-out"
                >
                    Cerrar
                </button>
            )}
        </div>
    );

    return (
        <Modal
            isOpen={isOpen}
            onClose={onClose}
            title={getTitle()}
            footer={footerContent}
        >
            <PaymentForm
                payment={mode === 'add' ? null : payment}
                reservations={reservations}
                onSave={mode === 'add' ? onSavePayment : undefined}
                onUpdateStatus={mode !== 'add' ? onUpdateStatus : undefined}
            />
        </Modal>
    );
};

PaymentModal.propTypes = {
    payment: PropTypes.object,
    isOpen: PropTypes.bool.isRequired,
    onClose: PropTypes.func.isRequired,
    onUpdateStatus: PropTypes.func,
    onSavePayment: PropTypes.func,
    reservations: PropTypes.array.isRequired,
    mode: PropTypes.oneOf(['add', 'edit', 'view']).isRequired
};

export default PaymentModal;

\n\n

=== ./finanzas/pages/payment/PaymentTable.jsx ===
import React from 'react';
import { FiEye, FiEdit2 } from 'react-icons/fi';

const PaymentTable = ({
  payments = [],
  reservations = [],
  onViewPayment,
  onEditPayment
}) => {
  // Determina la clase de estilos segÃºn el estado del pago
  const getEstadoBadgeClass = (estado) => {
    if (!estado) return 'bg-gray-100 text-gray-800';
    switch (estado.toLowerCase()) {
      case 'completado':
        return 'bg-green-100 text-green-800';
      case 'pendiente':
        return 'bg-yellow-100 text-yellow-800';
      case 'cancelado':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  // Formatea un nÃºmero o string como moneda MXN
  const formatCurrency = (amount) => {
    if (!amount) return '$0.00';
    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
    return new Intl.NumberFormat('es-MX', {
      style: 'currency',
      currency: 'MXN'
    }).format(numAmount);
  };

  // Formatea la fecha en formato espaÃ±ol (dÃ­a, mes, aÃ±o)
  const formatDate = (dateString) => {
    if (!dateString) return 'Fecha no disponible';
    try {
      return new Date(dateString).toLocaleDateString('es-MX', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (error) {
      console.error('Error al formatear fecha:', error);
      return 'Fecha invÃ¡lida';
    }
  };

  // Obtiene la informaciÃ³n de la reserva segÃºn el ID
  const getReservationInfo = (reservationId) => {
    const reservation = reservations.find((r) => r.id === reservationId);
    return reservation
      ? `#${reservation.id} - ${reservation.nombre_festejado || 'Sin nombre'}`
      : `Reserva #${reservationId}`;
  };

  return (
    <div className="overflow-x-auto rounded-lg border border-gray-200">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              ID
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Reserva
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Monto
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Fecha de pago
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Estado
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Fecha creaciÃ³n
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Fecha actualizaciÃ³n
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {payments.map((payment) => (
            <tr
              key={payment.id}
              className="hover:bg-gray-50 transition-colors duration-150"
            >
              {/* ID */}
              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                {payment.id}
              </td>
              {/* Reserva */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {getReservationInfo(payment.id_reserva)}
              </td>
              {/* Monto */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {formatCurrency(payment.monto)}
              </td>
              {/* Fecha de pago */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {formatDate(payment.fecha_pago)}
              </td>
              {/* Estado */}
              <td className="px-6 py-4 whitespace-nowrap text-sm">
                <span
                  className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getEstadoBadgeClass(
                    payment.estado
                  )}`}
                >
                  {payment.estado}
                </span>
              </td>
              {/* Fecha creaciÃ³n */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {formatDate(payment.fecha_creacion)}
              </td>
              {/* Fecha actualizaciÃ³n */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {formatDate(payment.fecha_actualizacion)}
              </td>
              {/* Acciones */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {/* BotÃ³n "Ver" */}
                {onViewPayment && (
                  <button
                    onClick={() => onViewPayment(payment)}
                    className="inline-flex items-center px-3 py-1 mr-2 border border-transparent text-sm leading-4 font-medium rounded-md text-indigo-600 hover:text-indigo-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-150"
                  >
                    <FiEye className="mr-1.5 h-4 w-4" />
                    Ver
                  </button>
                )}
                {/* BotÃ³n "Editar" (si se proporcionÃ³ la prop onEditPayment) */}
                {onEditPayment && (
                  <button
                    onClick={() => onEditPayment(payment)}
                    className="inline-flex items-center px-3 py-1 border border-transparent text-sm leading-4 font-medium rounded-md text-blue-600 hover:text-blue-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-150"
                  >
                    <FiEdit2 className="mr-1.5 h-4 w-4" />
                    Editar
                  </button>
                )}
              </td>
            </tr>
          ))}
          {payments.length === 0 && (
            <tr>
              <td colSpan="8" className="px-6 py-8 text-center text-gray-500">
                No se encontraron pagos
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default PaymentTable;
\n\n

=== ./finanzas/pages/payment/index.js ===
export { default as PaymentDetails } from './PaymentDetails';
export { default as PaymentForm } from './PaymentForm';
export { default as PaymentModal } from './PaymentModal';
export { default as PaymentTable } from './PaymentTable';\n\n

=== ./finanzas/services/categorias.service.js ===
ï»¿import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@shared/utils/axiosConfig'

const useCategoriesStore = create((set, get) => ({
  // Estado
  categories: [],
  
  // Acciones
  fetchCategories: async () => {
    try {
      const response = await axiosInstance.get('/categorias')
      set({ categories: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar categorÃƒÂ­as:', error)
      
      // No mostrar toast para errores 404 (recurso no encontrado)
      if (error.response?.status !== 404) {
        toast.error('Error al cargar las categorÃƒÂ­as')
      }
      
      throw error
    }
  },
  
  addCategory: async (categoryData) => {
    try {
      const response = await axiosInstance.post('/categorias', {
        nombre: categoryData.nombre,
        color: categoryData.color || '#000000'
      })
      set(state => ({ categories: [...state.categories, response.data] }))
      toast.success('CategorÃƒÂ­a aÃƒÂ±adida con ÃƒÂ©xito')
      return response.data
    } catch (error) {
      console.error('Error al aÃƒÂ±adir la categorÃƒÂ­a:', error)
      toast.error('Error al aÃƒÂ±adir la categorÃƒÂ­a')
      throw error
    }
  },
  
  updateCategory: async (id, categoryData) => {
    try {
      const response = await axiosInstance.put(`/categorias/${id}`, categoryData)
      set(state => ({
        categories: state.categories.map(category =>
          category.id === id ? { ...category, ...response.data } : category
        )
      }))
      toast.success('CategorÃƒÂ­a actualizada exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar categorÃƒÂ­a:', error)
      toast.error('Error al actualizar la categorÃƒÂ­a')
      throw error
    }
  },
  
  deleteCategory: async (id) => {
    try {
      await axiosInstance.delete(`/categorias/${id}`)
      set(state => ({
        categories: state.categories.filter(category => category.id !== id)
      }))
      toast.success('CategorÃƒÂ­a eliminada con ÃƒÂ©xito')
    } catch (error) {
      console.error('Error al eliminar categorÃƒÂ­a:', error)
      toast.error('Error al eliminar la categorÃƒÂ­a')
      throw error
    }
  },
  
  // Selectores
  getCategoryById: (id) => {
    const { categories } = get()
    return categories.find(category => category.id === id)
  },
  
  getCategoryByName: (name) => {
    const { categories } = get()
    return categories.find(category => 
      category.nombre.toLowerCase() === name.toLowerCase()
    )
  }
}))

export default useCategoriesStore
\n\n

=== ./finanzas/services/finanzasStore.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'

const useFinancesStore = create((set, get) => ({
  // Estado
  finances: [],
  selectedFinance: null,
  
  // Acciones
  fetchFinances: async () => {
    try {
      const response = await axiosInstance.get('/finanzas')
      // Convertir montos a nÃºmeros
      const formattedFinances = response.data.map(finance => ({
        ...finance,
        monto: Number(finance.monto)
      }))
      set({ finances: formattedFinances })
      return formattedFinances
    } catch (error) {
      console.error('Error al cargar finanzas:', error)
      toast.error('Error al cargar las finanzas')
      throw error
    }
  },
  
  addFinance: async (financeData) => {
    try {
      const response = await axiosInstance.post('/finanzas', financeData)
      const newFinance = {
        ...response.data,
        monto: Number(response.data.monto)
      }
      set(state => ({ finances: [...state.finances, newFinance] }))
      toast.success('Registro financiero creado exitosamente')
      return newFinance
    } catch (error) {
      console.error('Error al crear registro financiero:', error)
      toast.error('Error al crear el registro financiero')
      throw error
    }
  },
  
  updateFinance: async (id, financeData) => {
    try {
      const response = await axiosInstance.put(`/finanzas/${id}`, financeData)
      const updatedFinance = {
        ...response.data,
        monto: Number(response.data.monto)
      }
      set(state => ({
        finances: state.finances.map(finance => 
          finance.id === id ? updatedFinance : finance
        )
      }))
      toast.success('Registro financiero actualizado exitosamente')
      return updatedFinance
    } catch (error) {
      console.error('Error al actualizar registro financiero:', error)
      toast.error('Error al actualizar el registro financiero')
      throw error
    }
  },
  
  deleteFinance: async (id) => {
    try {
      await axiosInstance.delete(`/finanzas/${id}`)
      set(state => ({
        finances: state.finances.filter(finance => finance.id !== id)
      }))
      toast.success('Finanza desactivada con Ã©xito')
    } catch (error) {
      console.error('Error al desactivar finanza:', error)
      toast.error('Error al desactivar la finanza')
      throw error
    }
  },
  
  setSelectedFinance: (finance) => set({ selectedFinance: finance }),
  
  downloadFile: async (id, type) => {
    try {
      const response = await axiosInstance.get(
        `/finanzas/${id}/download/${type}`,
        { responseType: 'blob' }
      )
      const url = window.URL.createObjectURL(new Blob([response.data]))
      const link = document.createElement('a')
      link.href = url
      link.setAttribute('download', `finanza_${id}_${type}.pdf`)
      document.body.appendChild(link)
      link.click()
      link.parentNode.removeChild(link)
      toast.success('Archivo descargado con Ã©xito')
    } catch (error) {
      console.error('Error al descargar el archivo:', error)
      toast.error('Error al descargar el archivo')
      throw error
    }
  },
  
  // Selectores
  getFinancesByMonth: (month, year) => {
    const { finances } = get()
    return finances.filter(finance => {
      // Verificar que finance y el campo de fecha existen
      if (!finance || !finance.fecha) return false
      
      // Convertir a objeto Date
      const financeDate = new Date(finance.fecha)
      
      // Asegurarse de que la fecha es vÃ¡lida
      if (isNaN(financeDate.getTime())) return false
      
      // Comparar tanto mes como aÃ±o
      return financeDate.getMonth() === month && 
             financeDate.getFullYear() === year
    })
  },
  
  // EstadÃ­sticas
  getSummaryByMonth: (month, year) => {
    const financesByMonth = get().getFinancesByMonth(month, year)
    
    const ingresos = financesByMonth
      .filter(f => f.tipo === 'ingreso')
      .reduce((sum, f) => sum + f.monto, 0)
    
    const egresos = financesByMonth
      .filter(f => f.tipo === 'egreso')
      .reduce((sum, f) => sum + f.monto, 0)
    
    const saldo = ingresos - egresos
    
    return {
      ingresos,
      egresos,
      saldo,
      count: financesByMonth.length
    }
  },
  
  getSummaryByCategory: (month, year) => {
    const financesByMonth = get().getFinancesByMonth(month, year)
    
    // Agrupar por categorÃ­a
    const categorySummary = financesByMonth.reduce((summary, finance) => {
      const categoryId = finance.id_categoria
      const categoryName = finance.categoria?.nombre || 'Sin categorÃ­a'
      const categoryColor = finance.categoria?.color || '#000000'
      
      if (!summary[categoryId]) {
        summary[categoryId] = {
          id: categoryId,
          nombre: categoryName,
          color: categoryColor,
          ingresos: 0,
          egresos: 0,
          total: 0
        }
      }
      
      if (finance.tipo === 'ingreso') {
        summary[categoryId].ingresos += finance.monto
        summary[categoryId].total += finance.monto
      } else {
        summary[categoryId].egresos += finance.monto
        summary[categoryId].total -= finance.monto
      }
      
      return summary
    }, {})
    
    return Object.values(categorySummary)
  }
}))

export default useFinancesStore\n\n

=== ./finanzas/services/index.js ===
// Exportar todos los componentes de finanzas/services
export { default as categoriasService } from './categorias.service.js';
\n\n

=== ./finanzas/services/pagosStore.js ===
import { create } from 'zustand'
import { toast } from 'react-toastify'
import axiosInstance from '@/components/axiosConfig'

const usePaymentsStore = create((set, get) => ({
  // Estado
  payments: [],
  selectedPayment: null,
  
  // Acciones
  fetchPayments: async () => {
    try {
      const response = await axiosInstance.get('/pagos')
      set({ payments: response.data })
      return response.data
    } catch (error) {
      console.error('Error al cargar pagos:', error)
      toast.error('Error al cargar los pagos')
      throw error
    }
  },
  
  addPayment: async (paymentData) => {
    try {
      const response = await axiosInstance.post('/pagos', paymentData)
      set(state => ({ payments: [...state.payments, response.data] }))
      toast.success('Pago creado exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al crear pago:', error)
      toast.error('Error al crear el pago')
      throw error
    }
  },
  
  updatePayment: async (id, paymentData) => {
    try {
      const response = await axiosInstance.put(`/pagos/${id}`, paymentData)
      set(state => ({
        payments: state.payments.map(payment => 
          payment.id === id ? { ...payment, ...response.data } : payment
        )
      }))
      toast.success('Pago actualizado exitosamente')
      return response.data
    } catch (error) {
      console.error('Error al actualizar pago:', error)
      toast.error('Error al actualizar el pago')
      throw error
    }
  },
  
  deletePayment: async (id) => {
    try {
      await axiosInstance.delete(`/pagos/${id}`)
      set(state => ({
        payments: state.payments.filter(payment => payment.id !== id)
      }))
      toast.success('Pago eliminado con Ã©xito')
    } catch (error) {
      console.error('Error al eliminar pago:', error)
      toast.error('Error al eliminar el pago')
      throw error
    }
  },
  
  updatePaymentStatus: async (id, newStatus) => {
    try {
      const response = await axiosInstance.put(`/pagos/${id}/status`, {
        estado: newStatus
      })
      
      set(state => ({
        payments: state.payments.map(payment => 
          payment.id === id ? { ...payment, estado: newStatus } : payment
        )
      }))
      
      toast.success('Estado del pago actualizado con Ã©xito')
      return response.data
    } catch (error) {
      console.error('Error al actualizar el estado del pago:', error)
      toast.error('Error al actualizar el estado del pago')
      throw error
    }
  },
  
  setSelectedPayment: (payment) => set({ selectedPayment: payment }),
  
  // Selectores
  getPaymentById: (id) => {
    const { payments } = get()
    return payments.find(payment => payment.id === id)
  },
  
  getPaymentsByReservation: (reservationId) => {
    const { payments } = get()
    return payments.filter(payment => payment.id_reserva === reservationId)
  },
  
  getPaymentsByStatus: (status) => {
    const { payments } = get()
    return payments.filter(payment => payment.estado === status)
  },
  
  getPaymentsByMonth: (month, year) => {
    const { payments } = get()
    return payments.filter(payment => {
      if (!payment || !payment.fecha) return false
      
      const paymentDate = new Date(payment.fecha)
      
      if (isNaN(paymentDate.getTime())) return false
      
      return paymentDate.getMonth() === month && 
             paymentDate.getFullYear() === year
    })
  },
  
  // EstadÃ­sticas
  getPaymentsSummary: () => {
    const { payments } = get()
    
    const total = payments.reduce((sum, payment) => sum + Number(payment.monto), 0)
    
    const byStatus = payments.reduce((summary, payment) => {
      const status = payment.estado
      
      if (!summary[status]) {
        summary[status] = {
          count: 0,
          total: 0
        }
      }
      
      summary[status].count++
      summary[status].total += Number(payment.monto)
      
      return summary
    }, {})
    
    return {
      total,
      count: payments.length,
      byStatus
    }
  }
}))

export default usePaymentsStore\n\n


